//
//  ChatViewController.swift
//  FootballFan
//
//  Created by Ravikant Nagar on 19/07/17.
//  Copyright Â© 2017 Tridecimal. All rights reserved.
//

import UIKit
import XMPPFramework
import MobileCoreServices
//import FFMediaPicker
import Photos
import AVFoundation
import AssetsLibrary
import AVKit
import MessageUI
import Alamofire
import YPImagePicker
class ChatViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, UITextViewDelegate,MFMailComposeViewControllerDelegate {
    @IBOutlet weak var storyTableView: UITableView?
    //@IBOutlet weak var storyToolbar: UIToolbar?
    @IBOutlet weak var btnPicker: UIButton?
    @IBOutlet weak var btnCamera: UIButton?
    @IBOutlet weak var btnJoinBanter: UIButton?
    var supportedTeam: Int64 = 0
    var opponentTeam: Int64 = 0
    var supportedTeamName: String = ""
    var opponentTeamName: String = ""
    var supportedTeamLogo: String = ""
    var opponentTeamLogo: String = ""
    @IBOutlet weak var massageBoXHightConstraint: NSLayoutConstraint!
    @IBOutlet weak var coustumBorderHightConstraint: NSLayoutConstraint!
    @IBOutlet weak var bottomConstraint: NSLayoutConstraint!
    //@IBOutlet weak var bottomConstraint: NSLayoutConstraint!
    @IBOutlet weak var messageBox: GrowingTextView!
    var isonfromNewchat = false
    let cellReuseIdentifier = "chat"
    var kPreferredTextFieldToKeyboardOffset: CGFloat = 20.0
    var keyboardFrame: CGRect! // = CGRect.init()
    var isKeyboardHiding = false
    var isAutoScroll = false
    let imagePicker: UIImagePickerController! = nil //= UIImagePickerController()
    var isSendMessage = false
    var isShowGallery = false
   var isMultiSelection = false
    var selectedIndexPaths: [Int] = []
    var defaultheight: CGFloat = 34.5
    var cellHeights: [IndexPath : CGFloat] = [:]
      var isMultiSelectionbyForward = false
    @IBOutlet weak var bottomView: UIView!
    var lastindex = 0
    var iskeybordHide = false
    var refreshTable: UIRefreshControl!
      var isLoadingContacts : Bool = false
     var historyIndex: Int = 0
     @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    var BanterClosed: String = "active"
      var RoomType: String = "chat"
      var Roomname: String = ""
     var isjoin: String = ""
     var mySupportedTeam: Int64 = 0
 var Roomid: String = ""
 override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
        storyTableView?.delegate = self
        storyTableView?.dataSource = self
         appDelegate().isFromPreview = false
        messageBox?.layer.masksToBounds = true;
        messageBox?.layer.borderWidth = 1.0
        messageBox?.layer.borderColor = UIColor.lightGray.cgColor
        messageBox?.layer.cornerRadius = 15.0
        messageBox?.textContainerInset = UIEdgeInsets.init(top: 10, left: 10, bottom: 5, right: 5)
        messageBox?.maxHeight = 80
        messageBox?.trimWhiteSpaceWhenEndEditing = true
        messageBox.delegate = self
    //messageBox.pasteDelegate=self as! UITextPasteDelegate
        storyTableView?.backgroundView = UIImageView(image: UIImage(named: "background"))
        storyTableView?.backgroundView?.contentMode = .scaleAspectFill
        storyTableView?.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(ChatViewController.minimiseKeyboard(_:))))
    
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name:UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name:UIResponder.keyboardWillHideNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(UIKeyboardDidHide), name:UIResponder.keyboardDidHideNotification, object: nil)
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardDidChangeFrame), name:UIResponder.keyboardDidChangeFrameNotification, object: nil)
            
        storyTableView?.isUserInteractionEnabled = true
        //storyTableView?.isMultipleTouchEnabled = true
        
        //Set message received notification
        let notificationName = Notification.Name("MessageReceivedFromServer")
        // Register to receive notification
        NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.messageReceivedFromServer), name: notificationName, object: nil)
        
        let notificationName2 = Notification.Name("SendMessageToMain")
        NotificationCenter.default.addObserver(self, selector: #selector(self.sendMedia(_:)), name: notificationName2, object: nil)
        
        let notificationName3 = Notification.Name("_GetPermissionsForMedia")
        // Register to receive notification
        NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.GetPermissionsForMedia), name: notificationName3, object: nil)

        //let notificationName4 = Notification.Name("_GetPermissionsForCamera")
        // Register to receive notification
        //NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.GetPermissionsForCamera), name: notificationName4, object: nil)
       
        let notificationName5 = Notification.Name("RedirecttoBanters")
        // Register to receive notification
        NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.RedirecttoBanters(notification:)), name: notificationName5, object: nil)
    
    
    
    let notificationName6 = Notification.Name("messageInReceivedFromServer")
    // Register to receive notification
    NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.messageInReceivedFromServer), name: notificationName6, object: nil)
    let notificationName7 = Notification.Name("closeBanterFromServer")
    // Register to receive notification
    NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.closeBanterFromServer), name: notificationName7, object: nil)
    
   
    let notificationName8 = Notification.Name("showWindowFromNotification")
    // Register to receive notification
    NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.showWindowFromNotification), name: notificationName8, object: nil)
    let notificationName9 = Notification.Name("blockunblocknotify")
    NotificationCenter.default.addObserver(self, selector: #selector(self.blockunblocknotify(_:)), name: notificationName9, object: nil)
    let notificationName10 = Notification.Name("menuActionCell")
    
    // Register to receive notification
    NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.menuActionCell), name: notificationName10, object: nil)
    
    let notificationName11 = Notification.Name("texthightchange")
    // Register to receive notification
    NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.texthightchange), name: notificationName11, object: nil)
    self.navigationController?.interactivePopGestureRecognizer?.isEnabled = false
   /* refreshTable = UIRefreshControl()
    refreshTable.attributedTitle = NSAttributedString(string: "Contacts sync in progress...")
    refreshTable.addTarget(self, action: #selector(ChatViewController.refresh(_:)), for: UIControlEvents.valueChanged)
    storyTableView?.addSubview(refreshTable)*/
    let notificationName12 = Notification.Name("chatHistoryFail")
    // Register to receive notification
    NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.historyFail), name: notificationName12, object: nil)
    //refreshTable = UIRefreshControl()
    //refreshTable.attributedTitle = NSAttributedString(string: "Contacts sync in progress...")
    //refreshTable.addTarget(self, action: #selector(ChatViewController.refresh(_:)), for: UIControlEvents.valueChanged)
    //storyTableView?.addSubview(refreshTable)
    let notificationName13 = Notification.Name("MessageReceivedFromhistory")
    // Register to receive notification
    NotificationCenter.default.addObserver(self, selector: #selector(ChatViewController.messageReceivedFromHistory), name: notificationName13, object: nil)
    }
    override var canBecomeFirstResponder: Bool {
        return true
    }
   
    
    func closeRefresh()
    {
        if(refreshTable.isRefreshing)
        {
            refreshTable.endRefreshing()
        }
        else
        {
            /* if(self.activityIndicator?.isAnimating)!
             {
             self.activityIndicator?.stopAnimating()
             }*/
            TransperentLoadingIndicatorView.hide()
            
        }
        isLoadingContacts = false
        storyTableView?.isScrollEnabled = true
    }
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        //print("viewDidAppear")
        
        self.appDelegate().isOnChatView = true
        if(isShowGallery)
        {
            showCustomGallery()
        }
        //DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
           // self.scrollToBottom()
       // }
        //let indexPath = IndexPath(row: self.appDelegate().arrUserChat.count-1, section: 0)
        //storyTableView?.selectRow(at: indexPath , animated: false, scrollPosition: .bottom)
        //storyTableView?.delegate?.tableView!(storyTableView!, didSelectRowAt: indexPath )
        
        
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        //self.parent?.title = appDelegate().toName
        //self.navigationController?.title = "Test"
        //self.navigationItem.title = appDelegate().toName
        appDelegate().toUserJID = Roomid
        appDelegate().isBanterClosed =  BanterClosed
                appDelegate().curRoomType = RoomType
                appDelegate().toName =  Roomname
               appDelegate().isJoined = isjoin
               appDelegate().mySupportedTeam =  mySupportedTeam

        let button =  UIButton(type: .custom)
        button.frame = CGRect(x: 0, y: 0, width: 100, height: 40)
        button.backgroundColor = UIColor.clear
        button.setTitle(appDelegate().toName, for: .normal)
button.setTitleColor(UIColor.black, for: .normal)
        button.addTarget(self, action: #selector(self.clickOnTitel), for: .touchUpInside)
        self.navigationItem.titleView = button
       // print(appDelegate().toUserJID)
       // messageBox.endEditing(true)
       
          self.activityIndicator.isHidden = true
        appDelegate().isApplyHistory = false
        self.appDelegate().updateBadgeCount(appDelegate().toUserJID, type: appDelegate().curRoomType, count: 0)
        if(appDelegate().isFromPreview){
            appDelegate().isFromPreview = false
            isAutoScroll = false
        }
        else{
            isAutoScroll = true
        }
        
      
        if(appDelegate().arrAllChats.count > 0)
        {
            if let dt = appDelegate().arrAllChats[appDelegate().toUserJID]
            {
               // self.appDelegate().arrUserChat = dt["Chats"] as! [AnyObject]
                let sortedArray = (dt["Chats"] as! [[String:Any]]).sorted(by: { (dictOne, dictTwo) -> Bool in
                    let date1 =  dictOne
                    let date2 =  dictTwo
                    var dt1: Date = Date()
                    var dt2: Date = Date()
                    
                    if date1["time"] != nil
                    {
                        // print(date1["lastDate"] as AnyObject)
                        let mili1: Double = Double((date1["time"] as AnyObject) as! NSNumber) //(date1["lastTime"] as! NSString).doubleValue //Double((val1 as AnyObject) as! NSNumber)
                        let myMilliseconds1: UnixTime = UnixTime(mili1/1000.0)
                        dt1 = myMilliseconds1.dateFull
                       // print("Date1: " + dt1.description)
                    }
                    
                    if date2["time"] != nil
                    {
                        let mili2: Double = Double((date2["time"] as AnyObject) as! NSNumber) //(date2["lastTime"] as! NSString).doubleValue
                        let myMilliseconds2: UnixTime = UnixTime(mili2/1000.0)
                        dt2 = myMilliseconds2.dateFull
                        //print("Date2: " + dt2.description)
                    }
                    
                    
                    
                    return dt1.compare(dt2) == ComparisonResult.orderedAscending
                })
                self.appDelegate().arrUserChat = sortedArray as [AnyObject]
               /* for arr in sortedArray
                {
                    //print(arr.key)
                    //arrAllChats[arr.key] = arr.value
                    //dictAllChats.setValue(arr.value, forUndefinedKey: arr.key as! String)
                    //dictAllChats.setValue(arr.value, forKey: arr.key)
                    //dictAllChats.setValue(arr.value, forKey: arr.key as! String)
                    var tmpDict = arr
                    
                    self.appDelegate().arrUserChat.append(tmpDict as AnyObject)
                }*/
                //New code to manage read badge counts
                var tmpArrChatDetails = [String : AnyObject]()
                
                tmpArrChatDetails = dt as! [String : AnyObject]
                //tmpArrChatDetails["Chats"] = dt["Chats"] as AnyObject
                //tmpArrChatDetails["userName"] = dt["userName"] as AnyObject
                //tmpArrChatDetails["userAvatar"] = dt["userAvatar"] as AnyObject
                tmpArrChatDetails["badgeCounts"] = 0 as AnyObject
                //tmpArrChatDetails["lastMessage"] = dt["lastMessage"] as AnyObject
                //tmpArrChatDetails["lastTime"] = dt["lastTime"] as AnyObject
                appDelegate().isJoined = tmpArrChatDetails["isJoined"]! as AnyObject as! String
                //Temp fix
                if tmpArrChatDetails["isAdmin"] != nil
                {
                    appDelegate().isAdmin = tmpArrChatDetails["isAdmin"]! as AnyObject as! String
                }
                else
                {
                    appDelegate().isAdmin = "no"
                }
                if tmpArrChatDetails["isHistory"] != nil
                {
                    appDelegate().isgetHistory = tmpArrChatDetails["isHistory"]! as AnyObject as! Bool
                }
                else
                {
                    appDelegate().isgetHistory = true
                }

                appDelegate().arrAllChats[appDelegate().toUserJID] = tmpArrChatDetails as AnyObject
                
                //Save array to local temp
                do {
                    if(appDelegate().arrAllChats.count > 0)
                    {
                        let dataArrAllChats = try JSONSerialization.data(withJSONObject: appDelegate().arrAllChats, options: .prettyPrinted)
                        let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                        UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                        UserDefaults.standard.synchronize()
                    }
                } catch {
                    print(error.localizedDescription)
                }
                //End

                
                //New code to send read receipt
                //We have recevied message from user so he will always To for me
                if(self.appDelegate().curRoomType == "chat")
                {
                    let dataToRead: [AnyObject] = appDelegate().arrUserChat.filter({ (text) -> Bool in
                        let tmp: NSDictionary = text as! NSDictionary
                        let status: String = tmp.value(forKey: "status") as! String
                        let isIncoming: String = tmp.value(forKey: "isIncoming") as! String
                        if(isIncoming == "YES" && status == "received")
                        {
                            return true
                        }
                        else
                        {
                            return false
                        }
                        
                    })
                    
                    for dict in dataToRead
                    {
                        let msgDict: [String: AnyObject] = dict as! [String: AnyObject]
                        self.appDelegate().funSendMessageReceived(messageTo: msgDict["toUserJID"] as! String, messageFrom: msgDict["fromUserJID"] as! String, messageId: msgDict["messageId"] as! String)
                        self.appDelegate().funGetSetLocalChats(messageId: msgDict["messageId"] as! String, chatStatus: "read")
                        
                    }
                }
                
                //End
                
                //End
               // self.isAutoScroll = true
                self.storyTableView?.reloadData()
                //storyTableView?.reloadData()
                //self.scrollToBottom()
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                    //if(self.appDelegate().isSendingMedia)
                    //{
                    //self.scrollToBottom()
                    //}
                   
                }

                
            }
            else
            {
                self.appDelegate().arrUserChat = []
               
                //let message = "No Chats found."
               // alertWithTitle(title: "Error", message: message, ViewController: self)
            }
        }
       
        if(self.appDelegate().isBanterClosed == "closed")
        {
            isAutoScroll = true
            
            btnPicker?.isHidden = true
            btnCamera?.isHidden = true
            messageBox.isHidden = true
            btnJoinBanter?.isHidden = true
            
        }
        else
        {
            if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
            {
                if(appDelegate().isAdmin == "yes")
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
                else
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
            }
                else  if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "yes")
                           {
                               if(appDelegate().isAdmin == "yes")
                               {
                                   self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                               }
                               else
                               {
                                   self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                               }
                           }
            else if(appDelegate().curRoomType == "chat"){
                 self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(chatmenu))
                supportedTeam = 0
                opponentTeam = 0
            }
            else if(appDelegate().curRoomType == "group" && appDelegate().isJoined == "yes"){
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                supportedTeam = 0
                opponentTeam = 0
            }
            else if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "blocked")
            {
                btnPicker?.isHidden = true
                btnCamera?.isHidden = true
                messageBox.isHidden = true
                btnJoinBanter?.isHidden = true
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
            }
            else if(appDelegate().curRoomType == "group" && appDelegate().isJoined == "blocked" || appDelegate().isJoined == "no")
            {
                btnPicker?.isHidden = true
                btnCamera?.isHidden = true
                messageBox.isHidden = true
                btnJoinBanter?.isHidden = true
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(chatmenu))
            }
            
           
            
            
            
            self.appDelegate().isUpdatesLoaded = false
            
            
           
            
            if(self.appDelegate().curRoomType == "banter" || self.appDelegate().curRoomType == "teambr")
            {
                if(self.appDelegate().isJoined == "no")
                {
                    
                    btnPicker?.isHidden = true
                    btnCamera?.isHidden = true
                    messageBox.isHidden = true
                    btnJoinBanter?.isHidden = false
                    
                }
            }
            
            
            //storyTableView?.layoutSubviews()
            //storyTableView?.layoutIfNeeded()
            //self.scrollToBottom()
        }
      if(appDelegate().curRoomType == "chat"){
         let array =  appDelegate().db.query(sql: "SELECT * FROM Blockeduser where roomId = '\(self.appDelegate().toUserJID)' And chatType = 'chat'")
       // let array = Blockeduser.rows(filter:"roomId = '\(appDelegate().toUserJID)'") as! [Blockeduser]
        if(array.count != 0){
            let disnarysound: NSDictionary = array[0] as NSDictionary
            
            let status = disnarysound.value(forKey: "status") as! String
            if(status == "Blocked"){
                //isBlocked = true
                // btnblock?.setTitle("UnBlock", for:  UIControlState.normal)
                messageBox.isHidden = true
                btnPicker?.isHidden = true
                btnCamera?.isHidden = true
            }
            else{
                 messageBox.isHidden = false
                btnPicker?.isHidden = false
                btnCamera?.isHidden = false
                //isBlocked = false
                //btnblock?.setTitle("Block", for:  UIControlState.normal)
            }
        }
        else{
            messageBox.isHidden = false
            btnPicker?.isHidden = false
            btnCamera?.isHidden = false
            // isBlocked = false
            // btnblock?.setTitle("Block", for:  UIControlState.normal)
            
        }
        if(self.appDelegate().arrUserChat.count == 0){
           // DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                 if(appDelegate().isgetHistory){
                historyIndex = 0
                self.funGetSetChat()
            }
            //}
        }
        else{
            // appDelegate().isApplyHistory = true
        }
        }
      else{
        if(self.appDelegate().arrUserChat.count < 2){
            //funGetSetChat()
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                if(self.appDelegate().isgetHistory){
                self.historyIndex = 0
                self.funGetSetChat()
                }
            }
        }
        else{
            //appDelegate().isApplyHistory = true
        }
        }
        if( self.appDelegate().arrUserChat.count == 0){
            self.navigationItem.rightBarButtonItem = nil
        }
        //isAutoScroll = false
        //print(appDelegate().mySupportedTeam)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        //appDelegate().toUserJID = ""
        messageBox.endEditing(true)
        appDelegate().isFromNewChat = false
        appDelegate().isApplyHistory = false
        self.appDelegate().isOnChatView = false
        appDelegate().lastcreateroom = ""
        if(isMultiSelection){
           /* let allSelected = self.storyTableView?.indexPathsForSelectedRows
            if((allSelected?.count)! > 0)
            {
                for sel in allSelected!
                {
                    let indexP: NSIndexPath = sel as NSIndexPath
                    var dict: [String : AnyObject] = appDelegate().arrUserChat[indexP.row] as! [String : AnyObject]
                    dict["checkimage"] = "uncheck" as AnyObject
                    
                    appDelegate().arrUserChat[indexP.row] = dict as AnyObject
                }
                
            }*/
            for i in 0...appDelegate().arrUserChat.count-1 {
                //print(i)
                var dict: [String : AnyObject] = appDelegate().arrUserChat[i] as! [String : AnyObject]
                dict["checkimage"] = "uncheck" as AnyObject
                
                appDelegate().arrUserChat[i] = dict as AnyObject
            }
            deleteChatAtIndex()
            isMultiSelection = false
            storyTableView?.allowsMultipleSelection = false
            let imgMsg: UIImage = UIImage(named: "add")!
            btnPicker?.setImage(imgMsg, for: UIControl.State.normal)

        }
        if(isMultiSelectionbyForward){
          /*  let allSelected = self.storyTableView?.indexPathsForSelectedRows
            if((allSelected?.count)! > 0)
            {
                for sel in allSelected!
                {
                    let indexP: NSIndexPath = sel as NSIndexPath
                    var dict: [String : AnyObject] = appDelegate().arrUserChat[indexP.row] as! [String : AnyObject]
                    dict["checkimage"] = "uncheck" as AnyObject
                    
                    appDelegate().arrUserChat[indexP.row] = dict as AnyObject
                }
                
            }*/
            for i in 0...appDelegate().arrUserChat.count-1 {
                //print(i)
                var dict: [String : AnyObject] = appDelegate().arrUserChat[i] as! [String : AnyObject]
                dict["checkimage"] = "uncheck" as AnyObject
                
                appDelegate().arrUserChat[i] = dict as AnyObject
            }
            deleteChatAtIndex()
            isMultiSelectionbyForward = false
            storyTableView?.allowsMultipleSelection = false
            let imgMsg: UIImage = UIImage(named: "add")!
            btnPicker?.setImage(imgMsg, for: UIControl.State.normal)
            
        }
        /*if(self.appDelegate().isShowChatWindow)
        {
            appDelegate().toUserJID = ""
            appDelegate().toName = ""
            appDelegate().toAvatarURL = ""
        }*/
        //self.appDelegate().isShowChatWindow = false
        
    }
    
    
   
    @objc func minimiseKeyboard (_ sender: UITapGestureRecognizer) {
        //messageBox?.becomeFirstResponder()
        if sender.state == .ended {
            messageBox?.endEditing(true)
        }
       // scrollToBottom()
        sender.cancelsTouchesInView = false
    }
 
    @objc func GetPermissionsForMedia(notification: NSNotification){
        let photos = PHPhotoLibrary.authorizationStatus()
        if photos == .notDetermined {
            PHPhotoLibrary.requestAuthorization({status in
                if status == .authorized{
                    self.showCustomGallery()
                } else {}
            })
        }
        else if photos == .denied {
            displayPhotoSettingsAlert()
        }
        else if photos == .authorized {
            
            showCustomGallery()
        }
        
    }
    
    func showCustomGallery() {
        
        var config = YPImagePickerConfiguration()
        config.library.mediaType = .photoAndVideo
        config.library.onlySquare  = false
        config.onlySquareImagesFromCamera = false
        config.targetImageSize = .original
        config.usesFrontCamera = true
        config.showsPhotoFilters = true
        config.filters = [YPFilter(name: "Normal", coreImageFilterName: ""),
                          YPFilter(name: "Mono", coreImageFilterName: "CIPhotoEffectMono"),
                          YPFilter(name: "Tonal", coreImageFilterName: "CIPhotoEffectTonal"),
                          YPFilter(name: "Noir", coreImageFilterName: "CIPhotoEffectNoir"),
                          YPFilter(name: "Fade", coreImageFilterName: "CIPhotoEffectFade"),
                          YPFilter(name: "Chrome", coreImageFilterName: "CIPhotoEffectChrome"),
                          YPFilter(name: "Process", coreImageFilterName: "CIPhotoEffectProcess"),
                          YPFilter(name: "Transfer", coreImageFilterName: "CIPhotoEffectTransfer"),
                          YPFilter(name: "Instant", coreImageFilterName: "CIPhotoEffectInstant"),
                          YPFilter(name: "Sepia", coreImageFilterName: "CISepiaTone")]
        /*config.filters = [YPFilterDescriptor(name: "Normal", filterName: ""),
         YPFilterDescriptor(name: "Mono", filterName: "CIPhotoEffectMono"),
         YPFilterDescriptor(name: "Tonal", filterName: "CIPhotoEffectTonal"),
         YPFilterDescriptor(name: "Noir", filterName: "CIPhotoEffectNoir"),
         YPFilterDescriptor(name: "Fade", filterName: "CIPhotoEffectFade"),
         YPFilterDescriptor(name: "Chrome", filterName: "CIPhotoEffectChrome"),
         YPFilterDescriptor(name: "Process", filterName: "CIPhotoEffectProcess"),
         YPFilterDescriptor(name: "Transfer", filterName: "CIPhotoEffectTransfer"),
         YPFilterDescriptor(name: "Instant", filterName: "CIPhotoEffectInstant"),
         YPFilterDescriptor(name: "Sepia", filterName: "CISepiaTone")]*/
        
        
        config.shouldSaveNewPicturesToAlbum = false
        config.video.compression = AVAssetExportPresetMediumQuality
        config.albumName = "Football Fan"
        config.screens = [.library, .photo, .video]
        config.startOnScreen = .library
        config.video.recordingTimeLimit = 300
        config.video.libraryTimeLimit = 900
        config.video.minimumTimeLimit = 3
        config.video.trimmerMaxDuration = 900
        //config.video.fileType = .mp4
        config.shouldSaveNewPicturesToAlbum = true
        //config.showsCrop = .rectangle(ratio: (16/9))
        config.wordings.libraryTitle = "Gallery"
        config.hidesStatusBar = true
        //config.overlayView = myOverlayView
        config.library.maxNumberOfItems = 3
        config.library.minNumberOfItems = 1
        config.library.numberOfItemsInRow = 3
        config.library.spacingBetweenItems = 2
        config.isScrollToChangeModesEnabled = false
        config.isScrollToChangeModesEnabled = true
        config.hidesStatusBar = false
        config.wordings.cameraTitle = "Camera"
        config.wordings.videoTitle = "Video"
        config.wordings.cancel = "Cancel"
        config.wordings.albumsTitle = "Albums"
        config.wordings.trim = "Trim"
        config.wordings.cover = "Cover"
        config.wordings.crop = "Crop"
        config.wordings.done = "Done"
        config.wordings.filter = "Filter"
        config.wordings.next = "Done"
        config.colors.progressBarTrackColor = UIColor.init(hex: "E6E6E6")
         config.colors.progressBarCompletedColor = UIColor.init(hex: "FFD401")
        config.colors.trimmerHandleColor = UIColor.init(hex: "FFD401")
        config.colors.multipleItemsSelectedCircleColor = UIColor.init(hex: "FFD401")
        config.wordings.warningMaxItemsLimit = "The limit is 3 Images or Videos."
        config.icons.playImage = UIImage(named: "gallery_play")!
        config.wordings.videoDurationPopup.tooLongMessage = "Pick a video less than 15 minutes long"
                   config.wordings.videoDurationPopup.title = "Video Duration"
                   config.wordings.videoDurationPopup.tooShortMessage = "The video must be at least 3 seconds"
        //UINavigationBar.appearance().setBackgroundImage(coloredImage, for: UIBarMetrics.default)
        UINavigationBar.appearance().barTintColor = UIColor.init(hex: "FFD401")
        UINavigationBar.appearance().titleTextAttributes = [NSAttributedString.Key.foregroundColor : UIColor.black ] // Title color
        UINavigationBar.appearance().tintColor = .black // Left. bar buttons
        config.colors.tintColor = .black
        //config.showsCrop = YPCropType.none
        
        // Build a picker with your configuration
        let picker = YPImagePicker(configuration: config)
        
        picker.didFinishPicking { [unowned picker] items, _ in
           
           // var media = [AnyObject]()
            for item in items {
                switch item {
                case .photo(let photo):
                    //print(photo)
                    
                    var tempImg = photo.modifiedImage
                        if(tempImg == nil){
                            tempImg = photo.originalImage
                        }
                            //self.getImageThumbnail(asset: photo)
                        let uuid = UUID().uuidString
                        let time: Int64 = self.appDelegate().getUTCFormateDate()
                        let docDir = try! FileManager.default.url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: true)
                        
                       
                        
                        let fileUrl = docDir.appendingPathComponent("\(uuid).png")
                        do{
                            let widthInPixels = (tempImg?.size.width)! * (tempImg?.scale)!
                            let heightInPixels = (tempImg?.size.height)! * (tempImg?.scale)!
                            if(widthInPixels > 1080 || heightInPixels > 1080) {
                                let myThumb1 = tempImg?.resized(withPercentage: 0.5)
                                try myThumb1!.jpegData(compressionQuality: 1.0)?.write(to: fileUrl, options: .atomic)
                            }
                            else{
                                 try tempImg!.jpegData(compressionQuality: 1.0)?.write(to: fileUrl, options: .atomic)
                            }
                           
                            }catch{
                            print("couldn't write image")
                            
                            }
                    
                        
                        let login: String? = UserDefaults.standard.string(forKey: "userJID")
                        
                    self.appDelegate().prepareMessageForServerOut(self.appDelegate().toUserJID, messageContent: "", chatType: self.appDelegate().curRoomType, messageType: "image", messageTime: time, messageId: uuid, filePath: fileUrl.absoluteString, caption: "", fromUser: login!, newBanterNickName: "newBanterNickName", mySupportedTeam: self.appDelegate().mySupportedTeam)
                        
                    
                        //End
                        let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                        
                        var reqParams = [String: String]()
                        reqParams["cmd"] = "image"
                        reqParams["jid"] = registorusername
                        reqParams["key"] = "kXfqS9wUug6gVKDB"
                       self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "sending")
                    AF.upload(multipartFormData: { multiPart in
                                                            multiPart.append(fileUrl, withName: "uploaded")
                                                                                    for (key, val) in reqParams {
                                                                                        multiPart.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                                                                    }
                                                        }, to: MediaAPI, method: .post) .uploadProgress(queue: .main, closure: { progress in
                                                            print("Upload Progress: \(progress.fractionCompleted)")
                                                            let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": uuid as Any]
                                                                                             let notificationName = Notification.Name("videoprogress")
                                                                                             NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                             
                                                        }).responseJSON(completionHandler: { data in
                                                            print("upload finished: \(data)")
                                                          print("resultvalue\(data.result)")
                                                          switch data.result {
                                                                                                   case .success(let resut):
                                                                                                     print("upload success result: \(String(describing: resut))")
                                                                                                     if let JSON = resut as? [String: Any] {
                                                                                                                                                       let isSuccess = JSON["success"] as! Bool
                                                                                                                                                        if(isSuccess)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                  let trimMessage = JSON["link"] as? String
                                                                                                                                                                                                                  let thumbLink = JSON["thumblink"] as? String
                                                                                                                                                                                                                                          self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID, messageContent: trimMessage!, messageType: "image", messageTime: time, messageId: uuid, caption: "", thumbLink: thumbLink!, roomType: self.appDelegate().curRoomType, mySupportTeam: self.appDelegate().mySupportedTeam)
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  if(self.appDelegate().curRoomType == "banter"){
                                                                                                                                                                                                                      if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                                                                                                                                                                          self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                   else if(self.appDelegate().curRoomType == "teambr"){
                                                                                                                                                                                                                                                                                     if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                                                                                                                                                                                                                                         self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                  else if(self.appDelegate().curRoomType == "group"){
                                                                                                                                                                                                                      if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                                                                                                                                                                          self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  
                                                                                                                                                                                                                self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: trimMessage!, thumbLink: thumbLink!, chatStatus: "sent")
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  //print(appDelegate().arrUserChat)
                                                                                                                                                                                                                  //self.storyTableView?.reloadData()
                                                                                                                                                                                                                  //storyTableView?.layoutIfNeeded()
                                                                                                                                                                                                                  //self.scrollToBottom()
                                                                                                                                                                                                                  //self.isAutoScroll = true
                                                                                                                                                                                                              }
                                                                                                                                                                                                              else
                                                                                                                                                                                                              {
                                                                                                                                                                                                                  self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                                                                                                                                                                              }
                                                                                                                                                   }
                                                                                                   case .failure(let err):
                                                                                                       print("upload err: \(err)")
                                                             self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                                                                   }
                                                        
                                                              
                                                        })
                    
                   /* Alamofire.upload(
                        multipartFormData: { multipartFormData in
                            // On the PHP side you can retrive the image using $_FILES["image"]["tmp_name"]
                            multipartFormData.append(fileUrl, withName: "uploaded")
                            for (key, val) in reqParams {
                                multipartFormData.append(val.data(using: String.Encoding.utf8)!, withName: key)
                            }
                    },
                        to: MediaAPI,
                        encodingCompletion: { encodingResult in
                            switch encodingResult {
                            case .success(let upload, _, _):
                                upload.uploadProgress(closure: { (progress) in
                                    
                                   // print("uploding")
                                   // print(progress)
                                    let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": uuid as Any]
                                    let notificationName = Notification.Name("videoprogress")
                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                    
                                    
                                })
                                upload.responseJSON { response in
                                    if let jsonResponse = response.result.value as? [String: Any] {
                                        print(jsonResponse)
                                        let data = response.data
                                        if let data = data {
                                            if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                                                //print(stringData) //JSONSerialization
                                                
                                                
                                                //If Success = True
                                                if(!self.appDelegate().toUserJID.isEmpty)
                                                {
                                                    //print(time)
                                                    do {
                                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                        
                                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                        
                                                        if(isSuccess)
                                                        {
                                                            let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                            let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                            
                                                            
                                                            self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID, messageContent: trimMessage, messageType: "image", messageTime: time, messageId: uuid, caption: "", thumbLink: thumbLink, roomType: self.appDelegate().curRoomType, mySupportTeam: self.appDelegate().mySupportedTeam)
                                                            
                                                            if(self.appDelegate().curRoomType == "banter"){
                                                                if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                    self.appDelegate().ActivityCountManage()
                                                                }
                                                                
                                                            }
                                                             else if(self.appDelegate().curRoomType == "teambr"){
                                                                                                                               if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                                                                                   self.appDelegate().ActivityCountManage()
                                                                                                                               }
                                                                                                                               
                                                                                                                           }
                                                            else if(self.appDelegate().curRoomType == "group"){
                                                                if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                    self.appDelegate().ActivityCountManage()
                                                                }
                                                            }
                                                            
                                                            self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: trimMessage, thumbLink: thumbLink, chatStatus: "sent")
                                                            
                                                            
                                                            
                                                            //print(appDelegate().arrUserChat)
                                                            //self.storyTableView?.reloadData()
                                                            //storyTableView?.layoutIfNeeded()
                                                            //self.scrollToBottom()
                                                            //self.isAutoScroll = true
                                                        }
                                                        else
                                                        {
                                                            self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                        }
                                                    } catch _ as NSError {
                                                        //print(error)
                                                        self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                    }
                                                    
                                                }
                                                
                                                
                                                
                                            }
                                        }
                                    }
                                    else{
                                        self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                    }
                                }
                            case .failure(let encodingError):
                                print(encodingError)
                                self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                
                            }
                            
                    })*/
                    
                    break
                case .video(let video):
                    //print(video)
                    let tempImg = video.thumbnail.square()?.resized(toWidth: 300.0)
                    let uuid = UUID().uuidString
                    let time: Int64 = self.appDelegate().getUTCFormateDate()
                    let docDir = try! FileManager.default.url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: true)
                    
                    
                    
                    let fileUrl = docDir.appendingPathComponent("thumb\(uuid).jpg")
                    do{
                           try tempImg!.jpegData(compressionQuality: 1.0)?.write(to: fileUrl, options: .atomic)
                       
                    }catch{
                        print("couldn't write image")
                        
                    }
                    let urlData=NSData(contentsOf: video.url )

                   
                    
                    let documentsPath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0];
                    let filePath = "file://" + "\(documentsPath)/" + uuid + ".mp4";
                    
                    do
                    {
                        try urlData?.write(to: (NSURL(string:filePath) as URL?)!, options: NSData.WritingOptions.atomicWrite)
                    } catch {
                              print(error.localizedDescription)
                        }
                        
                   
                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                    self.appDelegate().prepareMessageForServerOut(self.appDelegate().toUserJID, messageContent: "", chatType: self.appDelegate().curRoomType, messageType: "video", messageTime: time, messageId: uuid, filePath: filePath, caption: "",thumbLink: fileUrl.absoluteString, fromUser: login!, newBanterNickName: "newBanterNickName", mySupportedTeam: self.appDelegate().mySupportedTeam)
                    let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                    
                    
                    var reqParams = [String: String]()
                    reqParams["cmd"] = "video"
                     reqParams["sourcetype"] = "chat"
                    reqParams["jid"] = registorusername
                    reqParams["key"] = "kXfqS9wUug6gVKDB"  as! String
                   
                    
                    let videoData: NSData = tempImg!.jpegData(compressionQuality: 0.5)! as NSData
                    let base64String = videoData.base64EncodedString(options: [])
                    
                    reqParams["thumb_byte"] = base64String
                    self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "sending")
                    AF.upload(multipartFormData: { multiPart in
                                                           multiPart.append(video.url, withName: "uploaded")
                                                                                     for (key, val) in reqParams {
                                                                                         multiPart.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                                                                     }
                                                        }, to: MediaAPI, method: .post) .uploadProgress(queue: .main, closure: { progress in
                                                            print("Upload Progress: \(progress.fractionCompleted)")
                                                            let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": uuid as Any]
                                                                                               let notificationName = Notification.Name("videoprogress")
                                                                                               NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                               
                                                                                               
                                                        }).responseJSON(completionHandler: { data in
                                                            print("upload finished: \(data)")
                                                          print("resultvalue\(data.result)")
                                                          switch data.result {
                                                                                                   case .success(let resut):
                                                                                                     print("upload success result: \(String(describing: resut))")
                                                                                                     if let JSON = resut as? [String: Any] {
                                                                                                                                                       let isSuccess = JSON["success"] as! Bool
                                                                                                                                                         if(isSuccess)
                                                                                                                                                                                                             {
                                                                                                                                                                                                                 let trimMessage = JSON["link"] as? String
                                                                                                                                                                                                                 let thumbLink = JSON["thumblink"] as? String
                                                                                                                                                                                                                 //var msgDict = [String: AnyObject]()
                                                                                                                                                                                                                 
                                                                                                                                                                                                                self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID, messageContent: trimMessage!, messageType: "video", messageTime: time, messageId: uuid, caption: "", thumbLink: thumbLink!, roomType: self.appDelegate().curRoomType, mySupportTeam: self.appDelegate().mySupportedTeam)
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 
                                                                                                                                                                                                                self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: trimMessage!, thumbLink: thumbLink!,  chatStatus: "sent")
                                                                                                                                                                                                                 if(self.appDelegate().curRoomType == "banter"){
                                                                                                                                                                                                                     if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                                                                                                                                                                         self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                     
                                                                                                                                                                                                                 }
                                                                                                                                                                                                                     else if(self.appDelegate().curRoomType == "teambr"){
                                                                                                                                                                                                                         if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                                                                                                                                                                             self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                         }
                                                                                                                                                                                                                         
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                 else if(self.appDelegate().curRoomType == "group"){
                                                                                                                                                                                                                     if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                                                                                                                                                                         self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                 }
                                                                                                                                                                                                                 
                                                                                                                                                                                                                
                                                                                                                                                                                                             }
                                                                                                                                                                                                             else
                                                                                                                                                                                                             {
                                                                                                                                                                                                                 self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                                                                                                                                                                             }
                                                                                                                                                   }
                                                                                                   case .failure(let err):
                                                                                                       print("upload err: \(err)")
                                                             self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                                                                   }
                                                        
                                                              
                                                        })
                   /* Alamofire.upload(
                        multipartFormData: { multipartFormData in
                            // On the PHP side you can retrive the image using $_FILES["image"]["tmp_name"]
                            multipartFormData.append(video.url, withName: "uploaded")
                            for (key, val) in reqParams {
                                multipartFormData.append(val.data(using: String.Encoding.utf8)!, withName: key)
                            }
                    },
                        to: MediaAPI,
                        encodingCompletion: { encodingResult in
                            switch encodingResult {
                            
                            case .success(let upload, _, _):
                                upload.uploadProgress(closure: { (progress) in
                                    
                                   // print("uploding")
                                   // print(progress)
                                    let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": uuid as Any]
                                    let notificationName = Notification.Name("videoprogress")
                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                    
                                    
                                })
                                upload.responseJSON { response in
                                    print("nitesh\(String(describing: response.response?.statusCode))")
                                    if let jsonResponse = response.result.value as? [String: Any] {
                                        print(jsonResponse)
                                        let data = response.data
                                        if let data = data {
                                            if String(data: data, encoding: String.Encoding.utf8) != nil {
                                                //print(stringData) //JSONSerialization
                                                
                                                
                                                //If Success = True
                                                if(!self.appDelegate().toUserJID.isEmpty)
                                                {
                                                    //print(time)
                                                    do {
                                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                        
                                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                        
                                                        if(isSuccess)
                                                        {
                                                            let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                            let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                            //var msgDict = [String: AnyObject]()
                                                            
                                                            self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID, messageContent: trimMessage, messageType: "video", messageTime: time, messageId: uuid, caption: "", thumbLink: thumbLink, roomType: self.appDelegate().curRoomType, mySupportTeam: self.appDelegate().mySupportedTeam)
                                                            
                                                            
                                                            
                                                            self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: trimMessage, thumbLink: thumbLink,  chatStatus: "sent")
                                                            if(self.appDelegate().curRoomType == "banter"){
                                                                if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                    self.appDelegate().ActivityCountManage()
                                                                }
                                                                
                                                            }
                                                                else if(self.appDelegate().curRoomType == "teambr"){
                                                                    if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                        self.appDelegate().ActivityCountManage()
                                                                    }
                                                                    
                                                                }
                                                            else if(self.appDelegate().curRoomType == "group"){
                                                                if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                    self.appDelegate().ActivityCountManage()
                                                                }
                                                            }
                                                            
                                                           
                                                        }
                                                        else
                                                        {
                                                            self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                        }
                                                    } catch let error as NSError {
                                                        print(error)
                                                        self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                    }
                                                    
                                                }
                                                
                                                
                                                
                                            }
                                        }
                                    }
                                    else{
                                         self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                    }
                                }
                                
                            case .failure(let encodingError):
                                print(encodingError)
                                self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                            }
                    })*/
                    
                    
                    break
                }
            }
          
            picker.dismiss(animated: true, completion: nil)
            
            
        }
        present(picker, animated: true, completion: nil)
        
    }
    @objc func sendMedia(_ notification: NSNotification) {
        
        messageBox?.endEditing(true)
        
       // DispatchQueue.main.async {
             // self.dismiss(animated: false, completion: nil)
            self.appDelegate().registerBackgroundTask()
            if let pickedAllAssets = notification.userInfo?["assets"] as? NSMutableArray {
                //Save image/video to server and receive URL
                //print(pickedAllAssets)
                for asset in pickedAllAssets
                {
                    
                    self.appDelegate().isSendingMedia = true
                    let dictAsset: [String : AnyObject] = asset as! [String : AnyObject]
                    let phAsset: PHAsset = dictAsset["asset"] as! PHAsset
                    let caption: String = dictAsset["caption"] as! String
                    
                    var newBanterNickName: String = ""
                    
                    if(self.appDelegate().curRoomType == "banter" || self.appDelegate().curRoomType == "teabr")
                    {
                        //Generate unique name
                        newBanterNickName = ""//UserDefaults.standard.string(forKey: "banterNickName")!
                    }
                    
                    if(phAsset.mediaType.rawValue == 2) //Video
                    {
                        
                        //let tempImg: UIImage = self.getImageThumbnail(asset: phAsset)
                        //let uuid = UUID().uuidString
                        let time: Int64 = self.appDelegate().getUTCFormateDate()
                        //Prepare message to send on Server
                        
                        self.getMediaURL(ofPhotoWith: phAsset, completionHandler: { (videoURL) in
                            
                                //let videoURL = myURL!
                            let filePath: String = "file://" + (videoURL?.path)!
                            
                            
                            //New code to save video then send to api
                            let uuid = UUID().uuidString
                            let documentsPath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0];
                            let outputPath = "file://" + "\(documentsPath)/" + uuid + ".mp4";
                            
                            /*do
                            {
                                try data.write(to: NSURL(string:filePath) as URL!, options: NSData.WritingOptions.atomicWrite)
                                
                                
                                
                            }
                            catch {
                                print(error.localizedDescription)
                            }*/
                            
                            let _: String? = UserDefaults.standard.string(forKey: "userJID")
                           // self.appDelegate().prepareMessageForServerOut(self.appDelegate().toUserJID, messageContent: "", messageType: "video", messageTime: time, messageId: uuid, filePath: filePath, fileLocalId: phAsset.localIdentifier, caption: caption, fromUser: login!, newBanterNickName: newBanterNickName, mySupportedTeam: self.appDelegate().mySupportedTeam)
                            
                           
                            self.compressVideo(inputURL: (videoURL)!, outputURL: (NSURL(string:outputPath) as URL?)!) { (exportSession) in
                                guard let session = exportSession else {
                                    return
                                }
                                
                                switch session.status {
                                case .unknown:
                                   // print("Unknown")
                                    break
                                case .waiting:
                                    //print("Waiting")
                                    break
                                case .exporting:
                                    //print("Compressing")
                                    break
                                case .completed:
                                    guard let compressedData = NSData(contentsOf: (NSURL(string:outputPath) as URL?)!) else {
                                        return
                                    }
                                    
                                    //print("Uploading")
                                    
                                    //Code to send video to API Server
                                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                    self.appDelegate().prepareMessageForServerOut(self.appDelegate().toUserJID, messageContent: "", chatType: self.appDelegate().curRoomType, messageType: "video", messageTime: time, messageId: uuid, filePath: filePath, fileLocalId: phAsset.localIdentifier, caption: caption, fromUser: login!, newBanterNickName: newBanterNickName, mySupportedTeam: self.appDelegate().mySupportedTeam)
                                    let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                                    
                                    //let _: NSData = UIImageJPEGRepresentation(tempImg, 0.5)! as NSData
                                    //let base64String = imageData.base64EncodedString(options: [])
                                    let boundary = self.generateBoundaryString()
                                    var request = URLRequest(url: URL(string: MediaAPI)!)
                                    request.httpMethod = "POST"
                                    //let postString = "cmd=image&jid=919826615203&byte="+base64String
                                    //request.httpBody = postString.data(using: .utf8)
                                    request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                                    var reqParams = [String: String]()
                                    reqParams["cmd"] = "video"
                                    reqParams["jid"] = registorusername
                                    reqParams["key"] = "kXfqS9wUug6gVKDB"
                                    let videoLogo = self.getVideoThumbnailImage(forUrl: videoURL!)
                                    let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 30.0)
                                    let videoData: NSData = videoLogoSquare!.jpegData(compressionQuality: 0.5)! as NSData
                                    let base64String = videoData.base64EncodedString(options: [])
                                    
                                    reqParams["thumb_byte"] = base64String
                                    
                                    
                                    request.httpBody = self.createRequestBodyWithVideo(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, videoURL: (NSURL(string:outputPath) as URL?)!) as Data
                                    
                                    self.dismiss(animated: false, completion: nil)

                                    
                                  
                                    
                                    let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                                        if let data = data {
                                            if String(data: data, encoding: String.Encoding.utf8) != nil {
                                                //print(stringData) //JSONSerialization
                                                
                                                
                                                //If Success = True
                                                if(!self.appDelegate().toUserJID.isEmpty)
                                                {
                                                    //print(time)
                                                    do {
                                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                        
                                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                        
                                                        if(isSuccess)
                                                        {
                                                            let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                            let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                            //var msgDict = [String: AnyObject]()
                                                            
                                                            self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID, messageContent: trimMessage, messageType: "video", messageTime: time, messageId: uuid, caption: caption, thumbLink: thumbLink, roomType: self.appDelegate().curRoomType, mySupportTeam: self.appDelegate().mySupportedTeam)
                                                            
                                                            
                                                            
                                                            self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: trimMessage, thumbLink: thumbLink, chatStatus: "sent")
                                                            
                                                            
                                                            //print(appDelegate().arrUserChat)
                                                            //self.storyTableView?.reloadData()
                                                            //storyTableView?.layoutIfNeeded()
                                                            //self.scrollToBottom()
                                                            //self.isAutoScroll = true
                                                        }
                                                        else
                                                        {
                                                            self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                        }
                                                    } catch let error as NSError {
                                                        print(error)
                                                        self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                                    }
                                                    
                                                }
                                                
                                                
                                                
                                            }
                                        }
                                        else
                                        {
                                            self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                        }
                                    })
                                    task.resume()
                                    //End
                                    
                                    
                                    
                                    //print("File size after compression: \(Double(compressedData.length / 1048576)) mb")
                                case .failed:
                                    break
                                case .cancelled:
                                    break
                                }
                            }
                        
                            
                            //End
                            
                            
                            
                            
                            
                            
                            
                            
                        })
                        //End
                        
                        
                    }
                    else if(phAsset.mediaType.rawValue == 1) //Image
                    {
                        let tempImg: UIImage = self.getImageThumbnail(asset: phAsset)
                        let uuid = UUID().uuidString
                        let time: Int64 = self.appDelegate().getUTCFormateDate()
                        
                        //Prepare message to send on Server
                        
                        /*self.getMediaURL(ofPhotoWith: phAsset, completionHandler: { (myURL) in
                            
                            self.appDelegate().prepareMessageForServer(self.appDelegate().toUserJID, messageContent: "", messageType: "image", messageTime: time, messageId: uuid, fileLocalId: phAsset.localIdentifier)
                            
                        })*/
                        
                        let login: String? = UserDefaults.standard.string(forKey: "userJID")
                        
                        self.appDelegate().prepareMessageForServerOut(self.appDelegate().toUserJID, messageContent: "", chatType: self.appDelegate().curRoomType, messageType: "image", messageTime: time, messageId: uuid, fileLocalId: phAsset.localIdentifier, caption: caption, fromUser: login!, newBanterNickName: newBanterNickName, mySupportedTeam: self.appDelegate().mySupportedTeam)
                        
                        
                        /*phAsset.requestContentEditingInput(with: PHContentEditingInputRequestOptions()) { (input, _) in
                         let filePath = input?.fullSizeImageURL
                         //print(filePath?.path ?? " File Path")
                         //let index = filePath?.index((filePath!.startIndex), offsetBy: 1)
                         
                         
                         //let strFilePath = filePath?.substring(from: index!)
                         //print(strFilePath ?? "")
                         self.appDelegate().prepareMessageForServer(self.appDelegate().toUserJID, messageContent: "", messageType: "image", messageTime: time, messageId: uuid, filePath: filePath!)
                         
                         }*/
                        
                        
                        //End
                        let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                        
                        //let _: NSData = UIImageJPEGRepresentation(tempImg, 0.5)! as NSData
                        //let base64String = imageData.base64EncodedString(options: [])
                        let boundary = self.generateBoundaryString()
                        var request = URLRequest(url: URL(string: MediaAPI)!)
                        request.httpMethod = "POST"
                        //let postString = "cmd=image&jid=919826615203&byte="+base64String
                        //request.httpBody = postString.data(using: .utf8)
                        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                        var reqParams = [String: String]()
                        reqParams["cmd"] = "image"
                        reqParams["jid"] = registorusername
                        reqParams["key"] = "kXfqS9wUug6gVKDB"  
                        self.dismiss(animated: false, completion: nil)
                        
                        request.httpBody = self.createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: tempImg) as Data
                        
                        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                            if let data = data {
                                if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                                    //print(stringData) //JSONSerialization
                                    
                                    
                                    //If Success = True
                                    if(!self.appDelegate().toUserJID.isEmpty)
                                    {
                                        //print(time)
                                          do {
                                            let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                            
                                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                            
                                            if(isSuccess)
                                            {
                                                let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                
                                                
                                                self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID, messageContent: trimMessage, messageType: "image", messageTime: time, messageId: uuid, caption: caption, thumbLink: thumbLink, roomType: self.appDelegate().curRoomType, mySupportTeam: self.appDelegate().mySupportedTeam)
                                                
                                                
                                                
                                                self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: trimMessage, thumbLink: thumbLink, chatStatus: "sent")
                                                
                                                
                                                
                                                //print(appDelegate().arrUserChat)
                                                //self.storyTableView?.reloadData()
                                                //storyTableView?.layoutIfNeeded()
                                                //self.scrollToBottom()
                                                //self.isAutoScroll = true
                                            }
                                            else
                                            {
                                                self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                            }
                                        } catch _ as NSError {
                                            //print(error)
                                            self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                        }
                                        
                                    }
                                    
                                    
                                    
                                }
                            }
                            else
                            {
                                //print(response ?? "Responsed Failed")
                                //print(error ?? "Error Failed")
                                //let err: NSError = error! as NSError
                                //print(err.userInfo["_kCFStreamErrorCodeKey"] ?? "Error Failed")
                                //print(err.userInfo["NSLocalizedDescription"] ?? "Error Failed")
                                self.appDelegate().funGetSetLocalChats(messageId: uuid, messageContent: "", chatStatus: "failed")
                                
                            }
                        })
                        task.resume()
                    }
                    
                }
                
            }
      //  }
        
        //DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
        //    self.scrollToBottom()
        //}
        //self.dismiss(animated: false, completion: nil)
    }
    
    func compressVideo(inputURL: URL, outputURL: URL, handler:@escaping (_ exportSession: AVAssetExportSession?)-> Void) {
        let urlAsset = AVURLAsset(url: inputURL, options: nil)
      /* guard let exportSession = AVAssetExportSession(asset: urlAsset, presetName: AVAssetExportPresetLowQuality) else {
            handler(nil)
            
            return
        }*/
 
       /* guard let exportSession = AVAssetExportSession(asset: urlAsset, presetName: AVAssetExportPresetMediumQuality) else {
            handler(nil)
            
            return
        }*/
        let exporter = AVAssetExportSession(asset: urlAsset, presetName: AVAssetExportPresetLowQuality)
        exporter?.outputURL = outputURL
        exporter?.outputFileType = AVFileType.mp4
        exporter?.exportAsynchronously(completionHandler: {
            handler(exporter)
           /* PHPhotoLibrary.shared().performChanges({
                PHAssetChangeRequest.creationRequestForAssetFromVideo(atFileURL: outputURL)
            }) { saved, error in
                if saved {
                    print("Saved")
                    handler(exporter)
                }
            }*/
        })
        
        /*exportSession.outputURL = outputURL
        //exportSession.outputFileType = AVFileTypeMPEG4 //AVFileTypeQuickTimeMovie
        exportSession.shouldOptimizeForNetworkUse = true
        exportSession.exportAsynchronously { () -> Void in
            handler(exportSession)
        }*/
    }
    
    func refreshLocalTeams()
    {
        let pTeamId: Int64? = Int64(UserDefaults.standard.integer(forKey: "primaryTeamId"))
        let pTeamName: String? = UserDefaults.standard.string(forKey: "primaryTeamName") ?? " "
        let pTeamLogo: String? = UserDefaults.standard.string(forKey: "primaryTeamLogo") ?? " "
        
        if((pTeamId) != 0)
        {
            appDelegate().primaryTeamId = pTeamId!
            appDelegate().primaryTeamName = pTeamName!
            appDelegate().primaryTeamLogo = pTeamLogo!
            
        }
        
        
        let oTeam1Id: Int64? = Int64(UserDefaults.standard.integer(forKey: "optionalTeam1Id"))
        let oTeam1Name: String? = UserDefaults.standard.string(forKey: "optionalTeam1Name") ?? " "
        let oTeam1Logo: String? = UserDefaults.standard.string(forKey: "optionalTeam1Logo") ?? " "
        
        if((oTeam1Id) != 0)
        {
            appDelegate().optionalTeam1Id = oTeam1Id!
            appDelegate().optionalTeam1Name = oTeam1Name!
            appDelegate().optionalTeam1Logo = oTeam1Logo!
        }
        
        let oTeam2Id: Int64? = Int64(UserDefaults.standard.integer(forKey: "optionalTeam2Id"))
        let oTeam2Name: String? = UserDefaults.standard.string(forKey: "optionalTeam2Name") ?? " "
        let oTeam2Logo: String? = UserDefaults.standard.string(forKey: "optionalTeam2Logo") ?? " "
        
        if((oTeam2Id) != 0)
        {
            appDelegate().optionalTeam2Id = oTeam2Id!
            appDelegate().optionalTeam2Name = oTeam2Name!
            appDelegate().optionalTeam2Logo = oTeam2Logo!
        }
        
        let oTeam3Id: Int64? = Int64(UserDefaults.standard.integer(forKey: "optionalTeam3Id"))
        let oTeam3Name: String? = UserDefaults.standard.string(forKey: "optionalTeam3Name") ?? " "
        let oTeam3Logo: String? = UserDefaults.standard.string(forKey: "optionalTeam3Logo") ?? " "
        
        if((oTeam3Id) != 0)
        {
            appDelegate().optionalTeam3Id = oTeam3Id!
            appDelegate().optionalTeam3Name = oTeam3Name!
            appDelegate().optionalTeam3Logo = oTeam3Logo!
        }
    }
    
    func showTeamOptions()
    {
        
        
       /* var imgTeamImage1: UIImage!
        var imgTeamImage2: UIImage!
        
        let teamImage1: String? = UserDefaults.standard.string(forKey: supportedTeamLogo)
        if((teamImage1) != nil)
        {
            imgTeamImage1 = appDelegate().loadProfileImage(filePath: teamImage1!)
            
        }
        else
        {
            imgTeamImage1 = UIImage(named: "team")
        }
        
        let teamImage2: String? = UserDefaults.standard.string(forKey: opponentTeamLogo)
        if((teamImage2) != nil)
        {
            imgTeamImage2 = appDelegate().loadProfileImage(filePath: teamImage2!)
            
        }
        else
        {
            imgTeamImage2 = UIImage(named: "team")
        }*/
        
        let optionMenu = UIAlertController(title: "Choose team to join", message: "Please select a team you wish to represent in this Banter Room.", preferredStyle: .actionSheet)
        
        let team1Action = UIAlertAction(title: supportedTeamName, style: .default, handler: {
            (alert: UIAlertAction!) -> Void in
            
            self.joinBanterRoomCode(joinTeamId: self.supportedTeam)
            
        })
        let team2Action = UIAlertAction(title: opponentTeamName, style: .default, handler: {
            (alert: UIAlertAction!) -> Void in
            
            self.joinBanterRoomCode(joinTeamId: self.opponentTeam)
            
        })
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: {
            (alert: UIAlertAction!) -> Void in
            
            //print("Cancelled")
        })
        optionMenu.addAction(team1Action)
        optionMenu.addAction(team2Action)
        optionMenu.addAction(cancelAction)
        
        self.present(optionMenu, animated: true, completion: nil)
    }
    
    func joinBanterRoomCode (joinTeamId: Int64)
    {
        if(appDelegate().isUserOnline)
        {
        let roomJID = XMPPJID(string: appDelegate().toUserJID)
        let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
        
        let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
        
        room.activate(appDelegate().xmppStream!)
        
        room.addDelegate(appDelegate(), delegateQueue: DispatchQueue.main)
        let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
        
        let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
        history.addAttribute(withName: "maxchars", stringValue: "0")
        
        room.join(usingNickname: myJID!, history: history)
        
        self.appDelegate().isJoiningBanterRoom = true
        appDelegate().mySupportedTeam = joinTeamId
            mySupportedTeam = joinTeamId
        //Send join status to server // Call savebanterroom API
            
       /* //Code to savebanterroom.
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "savebanterroom" as AnyObject
        
        do {
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            appDelegate().mySupportedTeam = joinTeamId
            dictRequestData["roomid"] = appDelegate().toUserJID as AnyObject
            dictRequestData["supportteam"] = joinTeamId as AnyObject//appDelegate().myTeamId as AnyObject
            dictRequestData["username"] = myMobile as AnyObject
            dictRequestData["status"] = "active" as AnyObject
             dictRequestData["isfcjoinbanter"] = appDelegate().GetvalueFromInsentiveConfigTable(Key: isfcjoinbanter)
             dictRequestData["fcjoinbanter"] = appDelegate().GetvalueFromInsentiveConfigTable(Key: fcjoinbanter)
             dictRequestData["fcbanterth"] = appDelegate().GetvalueFromInsentiveConfigTable(Key: fcbanterth)
            dictRequest["requestData"] = dictRequestData as AnyObject
            //dictRequest.setValue(dictMobiles, forKey: "requestData")
            //print(dictRequest)
            
            let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
            let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
            //print(strSaveBanter)
            appDelegate().sendRequestToAPI(strRequestDict: strSaveBanter)
        } catch {
            //print(error.localizedDescription)
        }
        //End Code to savebanterroom.
        */
        
        //self.appDelegate().goOnline(self.appDelegate().xmppStream!)
        //New code to get all joined users
        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
        if localArrAllChats != nil
        {
            //Code to parse json data
            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                do {
                    appDelegate().arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                    
                } catch let _ as NSError {
                   // print(error)
                }
            }
        }
        
        
        for tmpAllUserChats in appDelegate().arrAllChats
        {
            let tmpSingleUserChat: String = tmpAllUserChats.key
            
            if(tmpSingleUserChat == appDelegate().toUserJID)
            {
                var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                tmpArrChatDetails["isJoined"] = "yes" as AnyObject
                tmpArrChatDetails["mySupportedTeam"] = joinTeamId as AnyObject
                appDelegate().arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                
                
            }
            
        }
        
        //Save array to local temp
        do {
            if(appDelegate().arrAllChats.count > 0)
            {
                let dataArrAllChats = try JSONSerialization.data(withJSONObject: appDelegate().arrAllChats, options: .prettyPrinted)
                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                UserDefaults.standard.synchronize()
            }
        } catch {
            //print(error.localizedDescription)
        }
        //End
        //End
        appDelegate().savebanterroom(supportteam: joinTeamId, roomtype: appDelegate().curRoomType , roomid: appDelegate().toUserJID)
       
        btnPicker?.isHidden = false
        btnCamera?.isHidden = false
        messageBox.isHidden = false
        btnJoinBanter?.isHidden = true
        self.appDelegate().isJoined = "yes"
        if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
        {
           self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
        }
            else if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "yes")
            {
               self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
            }
        
        /*let mili: Int64 = self.appDelegate().getUTCFormateDate()
         self.appDelegate().prepareMessageForServerIn(appDelegate().toUserJID, messageContent: "You have joined this banter room.", messageType: "text", messageTime: mili, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: "banter" , banterRoomName: self.appDelegate().toName, isJoined: true)*/
        
        
        //Post notification that message receicved so we can display incoming message to UI
        let notificationName = Notification.Name("MessageReceivedFromServer")
        NotificationCenter.default.post(name: notificationName, object: nil)
        
        if(self.appDelegate().isOnBantersView == true)
        {
            //Post notification if user is on chats window and received any message
            let notificationName = Notification.Name("RefreshBantersView")
            NotificationCenter.default.post(name: notificationName, object: nil)
        }
        }
        else{
            alertWithTitle(title: nil, message: "Connecting...", ViewController: self)
        }
    }
    
    @IBAction func joinBanterRoom () {
        if ClassReachability.isConnectedToNetwork()
        {
            refreshLocalTeams()
            var checkCount: Int64 = 0
            var mySupportedTeamSingle: Int64 = 0
            //Check if user support both teams banter is based on
            if(appDelegate().curRoomType == "banter"){

                
                if(supportedTeam == appDelegate().primaryTeamId)
                {
                    supportedTeamName = appDelegate().primaryTeamName
                    supportedTeamLogo = appDelegate().primaryTeamLogo
                    mySupportedTeamSingle = supportedTeam
                    checkCount = checkCount + 1
                }
                else if(supportedTeam == appDelegate().optionalTeam1Id)
                {
                    supportedTeamName = appDelegate().optionalTeam1Name
                    supportedTeamLogo = appDelegate().optionalTeam1Logo
                    mySupportedTeamSingle = supportedTeam
                    checkCount = checkCount + 1
                }
                else if(supportedTeam == appDelegate().optionalTeam2Id)
                {
                    supportedTeamName = appDelegate().optionalTeam2Name
                    supportedTeamLogo = appDelegate().optionalTeam2Logo
                    mySupportedTeamSingle = supportedTeam
                    checkCount = checkCount + 1
                }
                else if(supportedTeam == appDelegate().optionalTeam3Id)
                {
                    supportedTeamName = appDelegate().optionalTeam3Name
                    supportedTeamLogo = appDelegate().optionalTeam3Logo
                    mySupportedTeamSingle = supportedTeam
                    checkCount = checkCount + 1
                }
                
                if(opponentTeam == appDelegate().primaryTeamId)
                {
                    opponentTeamName = appDelegate().primaryTeamName
                    opponentTeamLogo = appDelegate().primaryTeamLogo
                    mySupportedTeamSingle = opponentTeam
                    checkCount = checkCount + 1
                }
                else if(opponentTeam == appDelegate().optionalTeam1Id)
                {
                    opponentTeamName = appDelegate().optionalTeam1Name
                    opponentTeamLogo = appDelegate().optionalTeam1Logo
                    mySupportedTeamSingle = opponentTeam
                    checkCount = checkCount + 1
                }
                else if(opponentTeam == appDelegate().optionalTeam2Id)
                {
                    opponentTeamName = appDelegate().optionalTeam2Name
                    opponentTeamLogo = appDelegate().optionalTeam2Logo
                    mySupportedTeamSingle = opponentTeam
                    checkCount = checkCount + 1
                }
                else if(opponentTeam == appDelegate().optionalTeam3Id)
                {
                    opponentTeamName = appDelegate().optionalTeam3Name
                    opponentTeamLogo = appDelegate().optionalTeam3Logo
                    mySupportedTeamSingle = opponentTeam
                    checkCount = checkCount + 1
                }
                
                if(checkCount == 2)
                {
                    showTeamOptions()
                }
                else if(checkCount == 1)
                {
                    joinBanterRoomCode(joinTeamId: mySupportedTeamSingle)
                }
                else if(checkCount == 0)
                {
                    //Show message that this banter is closed for him
                    let message = "Please follow one of the teams involved to join this Banter Room.\n Go to Settings->My Teams to make changes."

                    alertWithTitle(title: nil, message: message, ViewController: self)
                }
                
            }
            else if(appDelegate().curRoomType == "teambr"){

                
                if(supportedTeam == appDelegate().primaryTeamId)
                {
                    supportedTeamName = appDelegate().primaryTeamName
                    supportedTeamLogo = appDelegate().primaryTeamLogo
                    mySupportedTeamSingle = supportedTeam
                    checkCount = checkCount + 1
                }
                else if(supportedTeam == appDelegate().optionalTeam1Id)
                {
                    supportedTeamName = appDelegate().optionalTeam1Name
                    supportedTeamLogo = appDelegate().optionalTeam1Logo
                    mySupportedTeamSingle = supportedTeam
                    checkCount = checkCount + 1
                }
                else if(supportedTeam == appDelegate().optionalTeam2Id)
                {
                    supportedTeamName = appDelegate().optionalTeam2Name
                    supportedTeamLogo = appDelegate().optionalTeam2Logo
                    mySupportedTeamSingle = supportedTeam
                    checkCount = checkCount + 1
                }
                else if(supportedTeam == appDelegate().optionalTeam3Id)
                {
                    supportedTeamName = appDelegate().optionalTeam3Name
                    supportedTeamLogo = appDelegate().optionalTeam3Logo
                    mySupportedTeamSingle = supportedTeam
                    checkCount = checkCount + 1
                }
                
             
                
                if(checkCount == 2)
                {
                    showTeamOptions()
                }
                else if(checkCount == 1)
                {
                    joinBanterRoomCode(joinTeamId: mySupportedTeamSingle)
                }
                else if(checkCount == 0)
                {
                    //Show message that this banter is closed for him
                    let message = "Please follow one of the teams involved to join this Banter Room.\n Go to Settings->My Teams to make changes."

                    alertWithTitle(title: nil, message: message, ViewController: self)
                }
                
            }
            
            
        }
        else {
            alertWithTitle(title: nil, message: "Please check your Internet connection to join this Banter Room.", ViewController: self)
            
        }
        //Refresh Teams
        
    }
    
    func alertWithTitle(title: String!, message: String, ViewController: UIViewController) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let action = UIAlertAction(title: "OK", style: UIAlertAction.Style.cancel,handler: {_ in
            
        });
        alert.addAction(action)
        self.present(alert, animated: true, completion:nil)
    }
   
    
    @objc func leaveBanterRoom () {
        
        messageBox?.resignFirstResponder()
        let optionMenu = UIAlertController(title: nil, message: "Select an Option", preferredStyle: .actionSheet)
        var title = "Quit Banter Room"
        var messages = "Quit Banter Room"
        //var clearmesg = "Clear "
         var clearmesg = "Clear "
        if(appDelegate().curRoomType == "banter"){
             clearmesg = "Clear Banter Room"
            if(appDelegate().isAdmin == "yes")
            {
                title = "Close Banter Room"
                messages = "Do you want to close this Banter Room?"
            }
            else
            {
                title = "Quit Banter Room"
                messages = "Do you want to quit this Banter Room?"
            }
        }
            else  if(appDelegate().curRoomType == "teambr"){
                        clearmesg = "Clear Banter Room"
                       if(appDelegate().isAdmin == "yes")
                       {
                           title = "Close Banter Room"
                           messages = "Do you want to close this Banter Room?"
                       }
                       else
                       {
                           title = "Quit Banter Room"
                           messages = "Do you want to quit this Banter Room?"
                       }
                   }
        else if(appDelegate().curRoomType == "group"){
             clearmesg = "Clear Group Chat"
            if(appDelegate().isAdmin == "yes")
            {
                title = "Close Group"
                messages = "Do you want to close this Group?"
            }
            else
            {
                title = "Quit Group "
                messages = "Do you want to quit this Group?"
            }
        }
       
        
        let team1Action = UIAlertAction(title: title, style: .default, imageNamed: "uncheck", handler: {
            (alert: UIAlertAction!) -> Void in
            let alert = UIAlertController(title: "", message: messages, preferredStyle: .alert)
            let action = UIAlertAction(title: "Yes", style: UIAlertAction.Style.cancel,handler: {_ in
                
          
            if(self.appDelegate().isAdmin == "yes")
            {
                if ClassReachability.isConnectedToNetwork()
                {
                     if(self.appDelegate().isUserOnline){
                self.adminDeleteBanterRoom ()
                     } else{
                            self.alertWithTitle(title: nil, message: "We apologise for a technical issue on our server. Please try again later.", ViewController: self)
                            
                        }
            }
            else {
                self.alertWithTitle(title: "Error", message: "Please check your Internet connection to close this Banter Room.", ViewController: self)
                
                }
            }
            else
            {
                //Send leave status to server // Call savebanterroom API
                //Code to savebanterroom.
                if ClassReachability.isConnectedToNetwork()
                {
                     if(self.appDelegate().isUserOnline){
                    if(self.appDelegate().curRoomType == "teambr"){
                        let roomJID = XMPPJID(string: self.appDelegate().toUserJID )
                                                                   let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                   
                                                                   let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                   
                                                                   room.activate(self.appDelegate().xmppStream!)
                                                                   
                                                                   room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                   //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                   if(!room.isJoined){
                                                                       
                                                                       let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                       history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                       let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                       
                                                                       
                                                                       room.join(usingNickname: myJID!, history: history)
                                                                       
                                                                   }
                        
                        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                        if localArrAllChats != nil
                        {
                            //Code to parse json data
                            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                do {
                                    self.appDelegate().arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                } catch let error as NSError {
                                    print(error)
                                }
                            }
                        }
                        
                        
                        for tmpAllUserChats in self.appDelegate().arrAllChats
                        {
                            let tmpSingleUserChat: String = tmpAllUserChats.key
                            
                            if(tmpSingleUserChat == self.appDelegate().toUserJID )
                            {
                                var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                tmpArrChatDetails["isJoined"] = "no" as AnyObject
                                
                                self.appDelegate().arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                                
                                
                            }
                            
                        }
                        
                        //Save array to local temp
                        do {
                            if(self.appDelegate().arrAllChats.count > 0)
                            {
                                let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.appDelegate().arrAllChats, options: .prettyPrinted)
                                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                UserDefaults.standard.synchronize()
                            }
                        } catch {
                            // print(error.localizedDescription)
                        }
                        //End
                        //End
                        
                        //Send message to all users that I am left
                        //DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                        let uuid = UUID().uuidString
                        let messageId = uuid
                        let time: Int64 = self.appDelegate().getUTCFormateDate()
                        
                        let username: String = UserDefaults.standard.string(forKey: "registerusername")!
                        
                        self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID  , messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "teambr", messageSubType: "roomuserleft")
                        self.appDelegate().callTeamchangeRoomleave(leaveRoomIds: self.appDelegate().toUserJID, Deleteroomids: "")
                        
                    }
                    else{
                    self.deletebanterroomdetails(roomid: self.appDelegate().toUserJID)
                    }
                     }else{
                        self.alertWithTitle(title: nil, message: "We apologise for a technical issue on our server. Please try again later.", ViewController: self)
                        
                    }
               
                    if(self.appDelegate().curRoomType == "banter"){
                    self.btnPicker?.isHidden = true
                    self.btnCamera?.isHidden = true
                    self.messageBox.isHidden = true
                    self.btnJoinBanter?.isHidden = false
                    self.appDelegate().isJoined = "no"
                    self.navigationItem.rightBarButtonItem = nil
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.chatmenu))
                    }
                        else  if(self.appDelegate().curRoomType == "teambr"){
                                           self.btnPicker?.isHidden = true
                                           self.btnCamera?.isHidden = true
                                           self.messageBox.isHidden = true
                                           self.btnJoinBanter?.isHidden = false
                                           self.appDelegate().isJoined = "no"
                                           self.navigationItem.rightBarButtonItem = nil
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.chatmenu))
                                           }
                    else if(self.appDelegate().curRoomType == "group"){
                        self.btnPicker?.isHidden = true
                        self.btnCamera?.isHidden = true
                        self.messageBox.isHidden = true
                        self.btnJoinBanter?.isHidden = true
                        self.appDelegate().isJoined = "no"
                        self.navigationItem.rightBarButtonItem = nil
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.chatmenu))
                    }
                    
               
                }
                else {
                    self.alertWithTitle(title: "Error", message: "Please check your Internet connection to quit this Banter Room.", ViewController: self)
                    
                }

            }
            });
            let action1 = UIAlertAction(title: "No", style: UIAlertAction.Style.default,handler: {_ in
                
            });
            alert.addAction(action)
            alert.addAction(action1)
            self.present(alert, animated: true, completion:nil)
            
            
        })
        let team2Action = UIAlertAction(title: clearmesg, style: .default, imageNamed: "uncheck" , handler: {
            (alert: UIAlertAction!) -> Void in
           
            self.confermationForClearchat()
            
        })
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: {
            (alert: UIAlertAction!) -> Void in
            
            //print("Cancelled")
        })
        optionMenu.addAction(team1Action!)
        optionMenu.addAction(team2Action!)
        optionMenu.addAction(cancelAction)
        
        self.present(optionMenu, animated: true, completion: nil)
        
        
        
        
        
        
        
        
    }
    @objc func chatmenu () {
        
        messageBox?.resignFirstResponder()
        let optionMenu = UIAlertController(title: nil, message: "", preferredStyle: .actionSheet)
        var clearmesg = "Clear Chat"
              if(appDelegate().curRoomType == "banter"){
                   clearmesg = "Clear Banter Room"
                 
                  
              }
                  else  if(appDelegate().curRoomType == "teambr"){
                              clearmesg = "Clear Banter Room"
                           
                             
                         }
              else if(appDelegate().curRoomType == "group"){
                   clearmesg = "Clear Group Chat"
                 
              }
             
        let team2Action = UIAlertAction(title: clearmesg, style: .default, imageNamed: "uncheck" , handler: {
            (alert: UIAlertAction!) -> Void in
            
            self.confermationForClearchat()
            
        })
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: {
            (alert: UIAlertAction!) -> Void in
            
            //print("Cancelled")
        })
       // optionMenu.addAction(team1Action!)
        optionMenu.addAction(team2Action!)
        optionMenu.addAction(cancelAction)
        
        self.present(optionMenu, animated: true, completion: nil)
        
        
        
        
        
        
        
        
    }
    @objc func confermationForClearchat () {
        let alert = UIAlertController(title: "", message: "Do you want to clear messages?", preferredStyle: .alert)
        let action = UIAlertAction(title: "Yes", style: UIAlertAction.Style.cancel,handler: {_ in
            self.appDelegate().deleteAllChat(supportTeam: self.supportedTeam, opponentTeam: self.opponentTeam)
        });
        let action1 = UIAlertAction(title: "No", style: UIAlertAction.Style.default,handler: {_ in
           
        });
        alert.addAction(action)
        alert.addAction(action1)
        self.present(alert, animated: true, completion:nil)
    }
    func adminDeleteBanterRoom () {
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
         
            
            if(self.appDelegate().curRoomType == "banter"){
                self.btnPicker?.isHidden = true
                self.btnCamera?.isHidden = true
                self.messageBox.isHidden = true
                self.btnJoinBanter?.isHidden = true
                self.appDelegate().isJoined = "no"
                self.navigationItem.rightBarButtonItem = nil
            }
                else  if(self.appDelegate().curRoomType == "teambr"){
                               self.btnPicker?.isHidden = true
                               self.btnCamera?.isHidden = true
                               self.messageBox.isHidden = true
                               self.btnJoinBanter?.isHidden = true
                               self.appDelegate().isJoined = "no"
                               self.navigationItem.rightBarButtonItem = nil
                           }
            else if(self.appDelegate().curRoomType == "group"){
                self.btnPicker?.isHidden = true
                self.btnCamera?.isHidden = true
                self.messageBox.isHidden = true
                self.btnJoinBanter?.isHidden = true
                self.appDelegate().isJoined = "no"
                self.navigationItem.rightBarButtonItem = nil
            }
            self.btnPicker?.isHidden = true
            self.btnCamera?.isHidden = true
            self.messageBox.isHidden = true
            self.btnJoinBanter?.isHidden = true
            self.appDelegate().isJoined = "no"
            self.navigationItem.rightBarButtonItem = nil
            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.chatmenu))
           
            
        }
        //Send leave status to server // Call savebanterroom API
        //Code to savebanterroom.
      var dictRequest = [String: AnyObject]()
      dictRequest["cmd"] = "deletebanterroom" as AnyObject
      dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
      dictRequest["device"] = "ios" as AnyObject
      
        let time: Int64 = appDelegate().getUTCFormateDate()
          //Creating Request Data
          var dictRequestData = [String: AnyObject]()
          
          let login: String? = UserDefaults.standard.string(forKey: "userJID")
          let arrReadUserJid = login?.components(separatedBy: "@")
          let myMobile: String? = arrReadUserJid?[0]
          
          dictRequestData["username"] = myMobile as AnyObject
          dictRequestData["roomid"] = self.appDelegate().toUserJID as AnyObject
         
          dictRequest["requestData"] = dictRequestData as AnyObject
      AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                          headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                            // 2
                                                                                                            .responseJSON { response in
                                                                                                                switch response.result {
                                                                                                                                                        case .success(let value):
                                                                                                                                                            if let json = value as? [String: Any] {
                                                                                                                                                                                                                                                                                        let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                                                                                               // self.finishSyncContacts()
                                                                                                                                                                                                                                               //print(" status:", status1)
                                                                                                                                                                                                                                               if(status1){
                                                                                                                                                                                                                                                   let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                                                                                                   //print(response)
                                                                                                                                                                                                                                                   let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                                                                                                                                                                                                                   let roomid = roomDetailsDict.value(forKey: "roomid")
                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                   _ = self.appDelegate().db.query(sql: " Delete from blockeduser  WHERE roomId = '\(roomid as! String)'")
                                                                                                                                                                                                                                                   if(roomid != nil)
                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                      
                                                                                                                                                                                                          let uuid = UUID().uuidString
                                                                                                                                                                                                          let messageId = uuid
                                                                                                                                                                                                                                                       let time: Int64 = self.appDelegate().getUTCFormateDate()
                                                                                                                                                                                                          let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                                                                       if(self.appDelegate().curRoomType == "banter"){
                                                                                                                                                                                                                                                           self.appDelegate().sendMessageToServer(roomid as! String, messageContent: "Banter Room closed.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "deletegroup")
                                                                                                                                                                                                          }
                                                                                                                                                                                                       else if(self.appDelegate().curRoomType == "teambr"){
                                                                                                                                                                                                                                                        self.appDelegate().sendMessageToServer(roomid as! String, messageContent: "Team Room closed.", messageType: "header", messageTime: time, messageId: messageId, roomType: "teambr", messageSubType: "deletegroup")
                                                                                                                                                                                                       }                                                else if(self.appDelegate().curRoomType == "group"){
                                                                                                                                                                                                                                                           self.appDelegate().sendMessageToServer(roomid as! String, messageContent: "Group closed.", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "deletegroup")
                                                                                                                                                                                                          }
                                                                                                                                                                                                          //Save banter status
                                                                                                                                                                                                          //print(self.toName)
                                                                                                                                                                                                          //  self.prepareMessageForServerIn(roomid as! String, messageContent: "Sorry to see you delete this Banter Room.", messageType: "header", messageTime: time , messageId: messageId, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: "banter", recBanterNickName: "", banterRoomName: self.toName, banterStatus: "closed")
                                                                                                                                                                                                          
                                                                                                                                                                                                          //End
                                                                                                                                                                                                          let notificationName = Notification.Name("RedirecttoBanters")
                                                                                                                                                                                                          NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                      
                                                                                                                                                                }
                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                             else{
                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                           
                                                                                                                                                            }
                                                                                                                                                        case .failure(let error):
                                                                            debugPrint(error)
                                                                                                                    break
                                                                                                                                                            // error handling
                                                                                                                                             
                                                                                                                                                        }
                                                                                                        }
        
    }
    
    @IBAction func sendMessage () {
        
       // messageBox?.endEditing(true)
        //NSDictionary *Dictmessage=[[NSDictionary alloc]initWithObjectsAndKeys:[self.xmppStream myJID].bare,@"username",jid,@"jid",Type,@"message",Type,@"messagetype",name,@"name",@"sending",@"status",messageid,@"messageid",time,@"time",@"NO",@"isincoming",[results objectForKey:@"link"],@"filepath",@"NO",@"isfile",@"",@"filetype",@"",@"filename",@"",@"caption",@"",@"latitude",@"",@"longitude", nil];
        //appDelegate().toUserJID = "+919826615203@amazomcdn.com"
        
       // if(isSendMessage)
        //{
            if(!(messageBox.text?.isEmpty)!) //Sending Text
            {
                
                if(!appDelegate().toUserJID.isEmpty)
                {
                    var newBanterNickName: String = ""
                    if(self.appDelegate().curRoomType == "banter" || self.appDelegate().curRoomType == "teambr")
                    {
                        //Generate unique name
                        let banternick: String? = UserDefaults.standard.string(forKey: "banterNickName")
                        if banternick != nil
                        {
                            newBanterNickName = banternick!
                        }
                        
                    }
                  
                    //If Internet connected
                    //print(appDelegate().isOnline)
                  //  print(appDelegate().mySupportedTeam)
                    if(currentReachabilityStatus != .notReachable && appDelegate().isUserOnline == true)
                    {
                        let uuid = UUID().uuidString
                        let time: Int64 = appDelegate().getUTCFormateDate()
                        //print(time)
                        let trimMessage: String = messageBox.text!.trimmingCharacters(in: .whitespacesAndNewlines)
                        //var name : String = "GALERIA DOMINIKAÅSKA"
                        
                        //let encMessage: String = self.appDelegate().msgEncode(trimMessage)
                          if(trimMessage != ""){
                            self.appDelegate().prepareMessageForServerOut(self.appDelegate().toUserJID, messageContent: trimMessage, chatType: self.appDelegate().curRoomType, messageType: "text", messageTime: time, messageId: uuid, chatStatus: "sent", newBanterNickName: newBanterNickName, mySupportedTeam: appDelegate().mySupportedTeam)
                            // print(appDelegate().mySupportedTeam)
                             let data1 =  appDelegate().db.query(sql: "SELECT * FROM Blockeduser where roomId = '\(appDelegate().toUserJID)' And status = 'Blocked' And (chatType = 'chat' OR chatType = 'chatR')")
                            if(data1.count == 0){
                                
                            appDelegate().sendMessageToServer(appDelegate().toUserJID, messageContent: trimMessage, messageType: "text", messageTime: time, messageId: uuid, roomType: self.appDelegate().curRoomType, mySupportTeam: appDelegate().mySupportedTeam)
                            }
                            
                            
                            //print(appDelegate().arrUserChat)
                            messageBox.text = ""
                            self.isAutoScroll = true
                            // self.massageBoXHightConstraint.constant = CGFloat(30.0)
                            // self.coustumBorderHightConstraint.constant = CGFloat(40.0)
                            storyTableView?.reloadData()
                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                                //if(self.appDelegate().isSendingMedia)
                                //{
                                //self.scrollToBottom()
                                //}
                                // self.isAutoScroll = true
                                //self.storyTableView?.reloadData()
                                //self.scrollToBottom()
                                if(self.appDelegate().curRoomType == "banter"){
                                    if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                        self.appDelegate().ActivityCountManage()
                                    }
                                    
                                }
                                    else  if(self.appDelegate().curRoomType == "teambr"){
                                                                       if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                           self.appDelegate().ActivityCountManage()
                                                                       }
                                                                       
                                                                   }
                                else if(self.appDelegate().curRoomType == "group"){
                                    if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                        self.appDelegate().ActivityCountManage()
                                    }
                                }
                                
                            }
                            //storyTableView?.layoutIfNeeded()
                            /********DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                             self.scrollToBottom()
                             }*/
                            ////////self.scrollToBottom()
                            //isAutoScroll = true
                            isSendMessage = true
                            let imgMsg: UIImage = UIImage(named: "send_gray")!
                            btnCamera?.setImage(imgMsg, for: UIControl.State.normal)
                            
                        }
                                          }
                    else
                    {
                        let uuid = UUID().uuidString
                        let time: Int64 = appDelegate().getUTCFormateDate()
                        //print(time)
                        let trimMessage: String = messageBox.text!.trimmingCharacters(in: .whitespacesAndNewlines)
                        if(trimMessage != ""){
                            let data1 =  appDelegate().db.query(sql: "SELECT * FROM Blockeduser where roomId = '\(appDelegate().toUserJID)' And status = 'Blocked' And (chatType = 'chat' OR chatType = 'chatR')")
                                                       if(data1.count == 0){
                                                           
                            self.appDelegate().prepareMessageForServerOut(self.appDelegate().toUserJID, messageContent: trimMessage, chatType: self.appDelegate().curRoomType, messageType: "text", messageTime: time, messageId: uuid, chatStatus: "failed", newBanterNickName: newBanterNickName, mySupportedTeam: appDelegate().mySupportedTeam)
                            }
                                                       else{
                                                        self.appDelegate().prepareMessageForServerOut(self.appDelegate().toUserJID, messageContent: trimMessage, chatType: self.appDelegate().curRoomType, messageType: "text", messageTime: time, messageId: uuid, chatStatus: "sent", newBanterNickName: newBanterNickName, mySupportedTeam: appDelegate().mySupportedTeam)
                            }
                            //print(appDelegate().arrUserChat)
                            messageBox.text = ""
                            //self.massageBoXHightConstraint.constant = CGFloat(30.0)
                            // self.coustumBorderHightConstraint.constant = CGFloat(40.0)
                            //storyTableView?.reloadData()
                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                                //if(self.appDelegate().isSendingMedia)
                                //{
                                //self.scrollToBottom()
                                //}
                                self.isAutoScroll = true
                                self.storyTableView?.reloadData()
                            }
                            //storyTableView?.layoutIfNeeded()
                            
                            /*DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                             self.scrollToBottom()
                             }*/
                            isSendMessage = true
                            let imgMsg: UIImage = UIImage(named: "send_gray")!
                            btnCamera?.setImage(imgMsg, for: UIControl.State.normal)
                            ////////self.scrollToBottom()
                            
                        }
                      
                        //isAutoScroll = true
                    }
                    
                    
                }
                iskeybordHide = true
            }
       
        
    }
    @objc func menuActionCell(notification: NSNotification) {
        if let fetchedCaption = notification.userInfo?["menuaction"] as? String
        {
            if(fetchedCaption == "Report"){
                let atindex = notification.userInfo?["atindex"] as? Int
                sendEmailButtonTapped(rowindex: atindex!)
            }
            else if(fetchedCaption == "Delete"){
                let atindex = notification.userInfo?["atindex"] as? Int
                handleLongPress(rowindex: atindex!)
            }
            else if(fetchedCaption == "Copy"){
                let atindex = notification.userInfo?["atindex"] as? Int
                copyButtonTapped(rowindex: atindex!)
            }
            else if(fetchedCaption == "Forward"){
                let atindex = notification.userInfo?["atindex"] as? Int
                forwardButtonTapped(rowindex: atindex!)
            }
        }
    }
   /* @objc func GetPermissionsForCamera(notification: NSNotification){
        //Code to show camera
        let picker = NohanaImagePickerController.init(assetCollectionSubtypes: [PHAssetCollectionSubtype.any], mediaType: MediaType.any, enableExpandingPhotoAnimation: true)
        picker.delegate = self
        picker.toolbarHidden = true
        picker.isShowCamera = true
        picker.navigationController?.isNavigationBarHidden = true
        self.present(picker, animated: true, completion: nil)
    }
    
    @objc func GetPermissionsForMedia(notification: NSNotification){
        let photos = PHPhotoLibrary.authorizationStatus()
        if photos == .notDetermined {
            PHPhotoLibrary.requestAuthorization({status in
                if status == .authorized{
                    let picker = NohanaImagePickerController.init(assetCollectionSubtypes: [PHAssetCollectionSubtype.any], mediaType: MediaType.any, enableExpandingPhotoAnimation: true)
                    picker.delegate = self
                    picker.toolbarHidden = false
                    picker.isShowCamera = false
                    picker.shouldShowMoment = false
                    picker.maximumNumberOfSelection = 3 //3 //Limit by Ravi
                    self.present(picker, animated: true, completion: nil)
                } else {}
            })
        }
        else if photos == .denied {
            displayPhotoSettingsAlert()
        }
        else if photos == .authorized {
            
            let picker = NohanaImagePickerController.init(assetCollectionSubtypes: [PHAssetCollectionSubtype.any], mediaType: MediaType.any, enableExpandingPhotoAnimation: true)
            picker.delegate = self
            picker.toolbarHidden = false
            picker.isShowCamera = false
            picker.shouldShowMoment = false
            picker.maximumNumberOfSelection = 3 //3 //Limit by Ravi
            self.present(picker, animated: true, completion: nil)
            
        }
        
    }*/
    
    func displayPhotoSettingsAlert() {
        let cantAddContactAlert = UIAlertController(title: "",
                                                    message: "Please allow access for Football Fan to your media library.",
                                                    preferredStyle: .alert)
        cantAddContactAlert.addAction(UIAlertAction(title: "Change Settings",
                                                    style: .default,
                                                    handler: { action in
                                                        
                                                        let url = NSURL(string: UIApplication.openSettingsURLString)
                                                        UIApplication.shared.openURL(url! as URL)
                                                        
        }))
        cantAddContactAlert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: { action in
            
            
        }))
        present(cantAddContactAlert, animated: true, completion: nil)
    }
    func displayCameraSettingsAlert() {
        let cantAddContactAlert = UIAlertController(title: "",
                                                    message: "Please allow access for Football Fan to your camera and media library.",
                                                    preferredStyle: .alert)
        cantAddContactAlert.addAction(UIAlertAction(title: "Change Settings",
                                                    style: .default,
                                                    handler: { action in
                                                        
                                                        let url = NSURL(string: UIApplication.openSettingsURLString)
                                                        UIApplication.shared.openURL(url! as URL)
                                                        
        }))
        cantAddContactAlert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: { action in
            
            
        }))
        present(cantAddContactAlert, animated: true, completion: nil)
    }
    
    
    
    @IBAction func pickMedia () {
        messageBox?.endEditing(true)
        /*let picker = NohanaImagePickerController.init(assetCollectionSubtypes: [PHAssetCollectionSubtype.any], mediaType: MediaType.any, enableExpandingPhotoAnimation: true)
         picker.delegate = self
         picker.toolbarHidden = true
         picker.isShowCamera = false
         picker.shouldShowMoment = false
         picker.maximumNumberOfSelection = 1 //3 //Limit by Ravi
         present(picker, animated: true, completion: nil)*/
        if (isMultiSelection) {
            let temparrUserChat = appDelegate().arrUserChat.count
             for i in (0 ..< temparrUserChat).reversed(){
                 let message: NSDictionary = self.appDelegate().arrUserChat[i] as! NSDictionary
                if let ischecked = message["checkimage"]{
                    if(ischecked as! String == "check"){
                        let messageType = message.value(forKey: "messageType") as! String
                        
                        if(messageType == "image" || messageType == "video")
                        {
                            // var imageId = message.value(forKey: "filePath") as! String
                            let imageId =  appDelegate().getFileNameFromPath(path: message.value(forKey: "filePath") as! String)//self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)
                            //let fileManager = FileManager.default
                            //imageId = imageId.replace(target: "file://", withString: "")
                        /*   do {
                                let fileManager = FileManager.default
                                //try fileManager.removeItem(atPath: imageId)
                                // Check if file exists
                                if fileManager.fileExists(atPath: imageId!) {
                                    // Delete file
                                    // print("File  exist")
                                    try fileManager.removeItem(atPath: imageId!)
                                } else {
                                    //print("File does not exist")
                                }
                                
                            }
                            catch let _ as NSError {
                                //print("An error took place: \(error)")
                            }*/
                        }
                        self.appDelegate().arrUserChat.remove(at: i)
                        
                    }
                   
                }
            }
            if(self.appDelegate().arrUserChat.count == 0){
                let messageTo = UserDefaults.standard.string(forKey: "userJID")
                let time: Int64 = appDelegate().getUTCFormateDate()
                appDelegate().prepareMessageForServerIn(appDelegate().toUserJID, messageContent: "Cleared all messages.", messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: appDelegate().curRoomType, recBanterNickName: "",  banterRoomName: appDelegate().toName, isJoined: appDelegate().isJoined, isAdmin:appDelegate().isAdmin, supportedTeam: supportedTeam, opponentTeam: opponentTeam, isFromClearChat: true, mySupportTeam: appDelegate().mySupportedTeam)
                
            }
            storyTableView?.reloadData()
            self.deleteChatAtIndex()
            isMultiSelection = false
            selectedIndexPaths = []
            let imgMsg: UIImage = UIImage(named: "add")!
            btnPicker?.setImage(imgMsg, for: UIControl.State.normal)
            messageBox?.isHidden = false
            btnCamera?.isHidden = false
            storyTableView?.allowsMultipleSelection=false
            self.parent?.navigationItem.rightBarButtonItem = nil
            
            if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
            {
                if(appDelegate().isAdmin == "yes")
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
                else
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }}
            else if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "yes")
            {
                if(appDelegate().isAdmin == "yes")
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
                else
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }}
           /*let allSelected = self.storyTableView?.indexPathsForSelectedRows?.sorted(){$0 > $1}
            if((allSelected?.count)! > 0)
            {
                //Forward chats
               
                for sel in allSelected!
                {
                    let indexP: NSIndexPath = sel as NSIndexPath
                    print(indexP.row)
                    let message: NSDictionary = self.appDelegate().arrUserChat[indexP.row] as! NSDictionary
                    let messageType = message.value(forKey: "messageType") as! String
                    
                    if(messageType == "image" || messageType == "video")
                    {
                       // var imageId = message.value(forKey: "filePath") as! String
                        let imageId =  appDelegate().getFileNameFromPath(path: message.value(forKey: "filePath") as! String)//self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)
                        //let fileManager = FileManager.default
                        //imageId = imageId.replace(target: "file://", withString: "")
                        do {
                            let fileManager = FileManager.default
                            //try fileManager.removeItem(atPath: imageId)
                            // Check if file exists
                            if fileManager.fileExists(atPath: imageId!) {
                                // Delete file
                                // print("File  exist")
                                try fileManager.removeItem(atPath: imageId!)
                            } else {
                                //print("File does not exist")
                            }
                            
                        }
                        catch let _ as NSError {
                            //print("An error took place: \(error)")
                        }
                    }
                    self.appDelegate().arrUserChat.remove(at: indexP.row)
                    
                }
                if(self.appDelegate().arrUserChat.count == 0){
                    let messageTo = UserDefaults.standard.string(forKey: "userJID")
                    let time: Int64 = appDelegate().getUTCFormateDate()
                    appDelegate().prepareMessageForServerIn(appDelegate().toUserJID, messageContent: "Cleared all messages.", messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: appDelegate().curRoomType, recBanterNickName: "",  banterRoomName: appDelegate().toName, isJoined: appDelegate().isJoined, isAdmin:appDelegate().isAdmin, supportedTeam: supportedTeam, opponentTeam: opponentTeam, isFromClearChat: true, mySupportTeam: appDelegate().mySupportedTeam)
                    
                }
                storyTableView?.reloadData()
                self.deleteChatAtIndex()
            }
            isMultiSelection = false
            selectedIndexPaths = []
            let imgMsg: UIImage = UIImage(named: "add")!
            btnPicker?.setImage(imgMsg, for: UIControlState.normal)
            messageBox?.isHidden = false
            btnCamera?.isHidden = false
            storyTableView?.allowsMultipleSelection=false
            self.parent?.navigationItem.rightBarButtonItem = nil
            
            if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
            {
                if(appDelegate().isAdmin == "yes")
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
                else
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }}*/
        }
        else if(isMultiSelectionbyForward){
            let temparrUserChat = appDelegate().arrUserChat.count
            let selectedChatArr = NSMutableArray()
            for i in (0 ..< temparrUserChat).reversed(){
                let message: NSDictionary = self.appDelegate().arrUserChat[i] as! NSDictionary
                if let ischecked = message["checkimage"]{
                    if(ischecked as! String == "check"){
                        var dict: [String : AnyObject] = appDelegate().arrUserChat[i] as! [String : AnyObject]
                        dict["checkimage"] = "uncheck" as AnyObject
                        selectedChatArr.add(dict as AnyObject)
                        appDelegate().arrUserChat[i] = dict as AnyObject
                        //deleteChatAtIndex()
                        setMultiChatAtIndex()
                    }
                    
                }
                
            }
            
            storyTableView?.reloadData()
            //self.deleteChatAtIndex()
            isMultiSelectionbyForward = false
            
            let imgMsg: UIImage = UIImage(named: "add")!
            btnPicker?.setImage(imgMsg, for: UIControl.State.normal)
            messageBox?.isHidden = false
            btnCamera?.isHidden = false
            storyTableView?.allowsMultipleSelection=false
            self.parent?.navigationItem.rightBarButtonItem = nil
            
            if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
            {
                if(appDelegate().isAdmin == "yes")
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
                else
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }}
            else  if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "yes")
                       {
                           if(appDelegate().isAdmin == "yes")
                           {
                               self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                           }
                           else
                           {
                               self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                           }}
            let storyBoard = UIStoryboard(name: "Main", bundle: nil)
            let myTeamsController : ForwardViewController = storyBoard.instantiateViewController(withIdentifier: "Forward") as! ForwardViewController
            //  appDelegate().isFromSettings = true
            //show(myTeamsController, sender: self)
            myTeamsController.selectedChatArr = selectedChatArr
            show(myTeamsController, sender: self)
            /*let allSelected = self.storyTableView?.indexPathsForSelectedRows?.sorted(){$0 > $1}
             if((allSelected?.count)! > 0)
             {
             //Forward chats
             
             for sel in allSelected!
             {
             let indexP: NSIndexPath = sel as NSIndexPath
             print(indexP.row)
             let message: NSDictionary = self.appDelegate().arrUserChat[indexP.row] as! NSDictionary
             let messageType = message.value(forKey: "messageType") as! String
             
             if(messageType == "image" || messageType == "video")
             {
             // var imageId = message.value(forKey: "filePath") as! String
             let imageId =  appDelegate().getFileNameFromPath(path: message.value(forKey: "filePath") as! String)//self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)
             //let fileManager = FileManager.default
             //imageId = imageId.replace(target: "file://", withString: "")
             do {
             let fileManager = FileManager.default
             //try fileManager.removeItem(atPath: imageId)
             // Check if file exists
             if fileManager.fileExists(atPath: imageId!) {
             // Delete file
             // print("File  exist")
             try fileManager.removeItem(atPath: imageId!)
             } else {
             //print("File does not exist")
             }
             
             }
             catch let _ as NSError {
             //print("An error took place: \(error)")
             }
             }
             self.appDelegate().arrUserChat.remove(at: indexP.row)
             
             }
             if(self.appDelegate().arrUserChat.count == 0){
             let messageTo = UserDefaults.standard.string(forKey: "userJID")
             let time: Int64 = appDelegate().getUTCFormateDate()
             appDelegate().prepareMessageForServerIn(appDelegate().toUserJID, messageContent: "Cleared all messages.", messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: appDelegate().curRoomType, recBanterNickName: "",  banterRoomName: appDelegate().toName, isJoined: appDelegate().isJoined, isAdmin:appDelegate().isAdmin, supportedTeam: supportedTeam, opponentTeam: opponentTeam, isFromClearChat: true, mySupportTeam: appDelegate().mySupportedTeam)
             
             }
             storyTableView?.reloadData()
             self.deleteChatAtIndex()
             }
             isMultiSelection = false
             selectedIndexPaths = []
             let imgMsg: UIImage = UIImage(named: "add")!
             btnPicker?.setImage(imgMsg, for: UIControlState.normal)
             messageBox?.isHidden = false
             btnCamera?.isHidden = false
             storyTableView?.allowsMultipleSelection=false
             self.parent?.navigationItem.rightBarButtonItem = nil
             
             if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
             {
             if(appDelegate().isAdmin == "yes")
             {
             self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
             }
             else
             {
             self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
             }}*/
        }
        else{
            self.showCustomGallery()
            
            /*let optionMenu = UIAlertController(title: nil, message: "", preferredStyle: .actionSheet)
            
            let deleteAction = UIAlertAction(title: "Camera", style: .default, imageNamed: "uncheck", handler: {
                (alert: UIAlertAction!) -> Void in
                //print("Take Photo")
                
                
                let notified: String? = UserDefaults.standard.string(forKey: "notifiedcamera")
                if notified == nil
                {
                    //Show notify before get permissions
                    let popController: NotifyPermissionController = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "Notify") as! NotifyPermissionController
                    
                    // set the presentation style
                    popController.modalPresentationStyle = UIModalPresentationStyle.fullScreen
                    //popController.modalPresentationStyle = .popover
                    popController.modalTransitionStyle = .crossDissolve
                    
                    // set up the popover presentation controller
                    popController.popoverPresentationController?.permittedArrowDirections = UIPopoverArrowDirection.up
                    popController.popoverPresentationController?.delegate = self as? UIPopoverPresentationControllerDelegate
                    popController.popoverPresentationController?.sourceView = self.view // button
                    //popController.popoverPresentationController?.sourceRect = (viewPopup?.bounds)!
                    popController.notifyType = "camera"
                    // present the popover
                    self.present(popController, animated: true, completion: nil)
                }
                else
                {
                    //Code to show camera
                    AVCaptureDevice.requestAccess(for: AVMediaType.video) { response in
                        if response {
                            //access granted
                            let picker = NohanaImagePickerController.init(assetCollectionSubtypes: [PHAssetCollectionSubtype.any], mediaType: MediaType.any, enableExpandingPhotoAnimation: true)
                            picker.delegate = self
                            picker.toolbarHidden = true
                            picker.isShowCamera = true
                            picker.navigationController?.isNavigationBarHidden = true
                            self.present(picker, animated: true, completion: nil)
                        } else {
                            self.displayCameraSettingsAlert()
                        }
                    }
                    
                    
                }
                
                
            })
            let saveAction = UIAlertAction(title: "Image & Video Library", style: .default, imageNamed: "uncheck", handler: {
                (alert: UIAlertAction!) -> Void in*/
                //print("Choose Photo")
                //Code to show gallery
                
               /* let notifiedCam: String? = UserDefaults.standard.string(forKey: "notifiedcamera")
                let notified: String? = UserDefaults.standard.string(forKey: "notifiedmedia")
                if notified == nil && notifiedCam == nil
                {
                    //Show notify before get permissions
                    let popController: NotifyPermissionController = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "Notify") as! NotifyPermissionController
                    
                    // set the presentation style
                    popController.modalPresentationStyle = UIModalPresentationStyle.fullScreen
                    //popController.modalPresentationStyle = .popover
                    popController.modalTransitionStyle = .crossDissolve
                    
                    // set up the popover presentation controller
                    popController.popoverPresentationController?.permittedArrowDirections = UIPopoverArrowDirection.up
                    popController.popoverPresentationController?.delegate = self as? UIPopoverPresentationControllerDelegate
                    popController.popoverPresentationController?.sourceView = self.view // button
                    //popController.popoverPresentationController?.sourceRect = (viewPopup?.bounds)!
                    popController.notifyType = "media"
                    // present the popover
                    self.present(popController, animated: true, completion: nil)
                }
                else
                {
                    
                    let photos = PHPhotoLibrary.authorizationStatus()
                    if photos == .notDetermined {
                        PHPhotoLibrary.requestAuthorization({status in
                            if status == .authorized{
                                /*let picker = NohanaImagePickerController.init(assetCollectionSubtypes: [PHAssetCollectionSubtype.any], mediaType: MediaType.any, enableExpandingPhotoAnimation: true)
                                picker.delegate = self
                                picker.toolbarHidden = false
                                picker.isShowCamera = false
                                picker.shouldShowMoment = false
                                picker.maximumNumberOfSelection = 3 //3 //Limit by Ravi
                                self.present(picker, animated: true, completion: nil)*/
                            } else {}
                        })
                    }
                    else if photos == .denied {
                        self.displayPhotoSettingsAlert()
                    }
                    else if photos == .authorized {
                        
                        /*let picker = NohanaImagePickerController.init(assetCollectionSubtypes: [PHAssetCollectionSubtype.any], mediaType: MediaType.any, enableExpandingPhotoAnimation: true)
                        picker.delegate = self
                        picker.toolbarHidden = false
                        picker.isShowCamera = false
                        picker.shouldShowMoment = false
                        picker.maximumNumberOfSelection = 3 //3 //Limit by Ravi
                        self.present(picker, animated: true, completion: nil)*/
                        self.showCustomGallery()
                        
                    }
                    
                    
                }*/
                
                
          /*  })
            let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: {
                (alert: UIAlertAction!) -> Void in
               // print("Cancelled")
            })
            optionMenu.addAction(deleteAction!)
            optionMenu.addAction(saveAction!)
            optionMenu.addAction(cancelAction)
            
            self.present(optionMenu, animated: true, completion: nil)*/
        }
        
        /*
         let popController = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "Media")
         
         // set the presentation style
         popController.modalPresentationStyle = UIModalPresentationStyle.fullScreen
         //popController.modalPresentationStyle = .popover
         popController.modalTransitionStyle = .crossDissolve
         
         // set up the popover presentation controller
         popController.popoverPresentationController?.permittedArrowDirections = UIPopoverArrowDirection.up
         popController.popoverPresentationController?.delegate = self as? UIPopoverPresentationControllerDelegate
         popController.popoverPresentationController?.sourceView = self.view // button
         //popController.popoverPresentationController?.sourceRect = (viewPopup?.bounds)!
         
         // present the popover
         self.present(popController, animated: false, completion: nil)
         */
        
        /*if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera)
         {
         //let imagePicker = UIImagePickerController()
         imagePicker.delegate = self as? UIImagePickerControllerDelegate & UINavigationControllerDelegate
         imagePicker.sourceType = UIImagePickerControllerSourceType.camera;
         imagePicker.allowsEditing = true
         //imagePicker.mediaTypes = [kUTTypeMovie as String, kUTTypeImage as String]
         let custom: CustomCameraView = CustomCameraView(frame: CGRect(x: 0, y: 0, width: 100, height: 100))
         custom.isUserInteractionEnabled = true
         custom.clipsToBounds = true
         imagePicker.cameraOverlayView?.addSubview(custom)
         custom.translatesAutoresizingMaskIntoConstraints = false
         
         custom.btnGallery.addTarget(self, action: #selector(ChatViewController.changeLabel), for: UIControlEvents.touchUpInside)
         
         
         /* Imp to constraint middle */
         /*let horizontalConstraint = NSLayoutConstraint(item: custom, attribute: NSLayoutAttribute.centerX, relatedBy: NSLayoutRelation.equal, toItem: imagePicker.cameraOverlayView, attribute: NSLayoutAttribute.centerX, multiplier: 1, constant: 0)
         let verticalConstraint = NSLayoutConstraint(item: custom, attribute: NSLayoutAttribute.centerY, relatedBy: NSLayoutRelation.equal, toItem: imagePicker.cameraOverlayView, attribute: NSLayoutAttribute.centerY, multiplier: 1, constant: 0)
         let widthConstraint = NSLayoutConstraint(item: custom, attribute: NSLayoutAttribute.width, relatedBy: NSLayoutRelation.equal, toItem: nil, attribute: NSLayoutAttribute.notAnAttribute, multiplier: 1, constant: 300)
         let heightConstraint = NSLayoutConstraint(item: custom, attribute: NSLayoutAttribute.height, relatedBy: NSLayoutRelation.equal, toItem: nil, attribute: NSLayoutAttribute.notAnAttribute, multiplier: 1, constant: 300)
         
         imagePicker.cameraOverlayView?.addConstraints([horizontalConstraint, verticalConstraint, widthConstraint, heightConstraint])*/
         
         //imagePicker.showsCameraControls = false
         
         //let leadingConstraint = NSLayoutConstraint(item: custom, attribute: NSLayoutAttribute.leading, relatedBy: NSLayoutRelation.equal, toItem: imagePicker.cameraOverlayView, attribute: NSLayoutAttribute.leadingMargin, multiplier: 1.0, constant: 0.0)
         
         let trailingConstraint = NSLayoutConstraint(item: custom, attribute: NSLayoutAttribute.trailing, relatedBy: NSLayoutRelation.equal, toItem: imagePicker.cameraOverlayView, attribute: NSLayoutAttribute.trailingMargin, multiplier: 1.0, constant: 10.0)
         
         let bottomConstraint = NSLayoutConstraint(item: custom, attribute: NSLayoutAttribute.bottom, relatedBy: NSLayoutRelation.equal, toItem: imagePicker.cameraOverlayView, attribute: NSLayoutAttribute.bottomMargin, multiplier: 1.0, constant: 0.0)
         
         
         let widthConstraint = NSLayoutConstraint(item: custom, attribute: NSLayoutAttribute.width, relatedBy: NSLayoutRelation.equal, toItem: nil, attribute: NSLayoutAttribute.notAnAttribute, multiplier: 1, constant: 100)
         let heightConstraint = NSLayoutConstraint(item: custom, attribute: NSLayoutAttribute.height, relatedBy: NSLayoutRelation.equal, toItem: nil, attribute: NSLayoutAttribute.notAnAttribute, multiplier: 1, constant: 100)
         
         imagePicker.cameraOverlayView?.addConstraints([trailingConstraint, bottomConstraint, widthConstraint, heightConstraint])
         
         
         self.present(imagePicker, animated: true, completion: nil)
         
         //imagePicker.cameraOverlayView?.addConstraint(NSLayoutConstraint(item: custom, attribute: .top, relatedBy: .equal, toItem: imagePicker.topLayoutGuide, attribute: .bottom, multiplier: 1, constant: 0))
         
         }*/
        
    }
    
    func changeLabel()
    {
        imagePicker.mediaTypes = [kUTTypeMovie as String]
        imagePicker.cameraCaptureMode = UIImagePickerController.CameraCaptureMode.video
        /*imagePicker.showsCameraControls = true
        imagePicker.startVideoCapture()*/
        //print("changed")
    }
    @objc func RedirecttoBanters(notification: NSNotification)
    {
       // if movetoroot {
            navigationController?.popToRootViewController(animated: true)
       /* } else {
            navigationController?.popViewController(animated: true)
        }*/
    }
    
    @objc func showWindowFromNotification()
    {
        let button =  UIButton(type: .custom)
        button.frame = CGRect(x: 0, y: 0, width: 100, height: 40)
        button.backgroundColor = UIColor.clear
        button.setTitle(appDelegate().toName, for: .normal)
        button.setTitleColor(UIColor.black, for: .normal)
        button.addTarget(self, action: #selector(self.clickOnTitel), for: .touchUpInside)
        self.navigationItem.titleView = button
        
        
        
        if(appDelegate().arrAllChats.count > 0)
        {
            if let dt = appDelegate().arrAllChats[appDelegate().toUserJID]
            {
                self.appDelegate().arrUserChat = dt["Chats"] as! [AnyObject]
                
                //New code to manage read badge counts
                var tmpArrChatDetails = [String : AnyObject]()
                
                tmpArrChatDetails = dt as! [String : AnyObject]
                //tmpArrChatDetails["Chats"] = dt["Chats"] as AnyObject
                //tmpArrChatDetails["userName"] = dt["userName"] as AnyObject
                //tmpArrChatDetails["userAvatar"] = dt["userAvatar"] as AnyObject
                tmpArrChatDetails["badgeCounts"] = 0 as AnyObject
                //tmpArrChatDetails["lastMessage"] = dt["lastMessage"] as AnyObject
                //tmpArrChatDetails["lastTime"] = dt["lastTime"] as AnyObject
                appDelegate().isJoined = tmpArrChatDetails["isJoined"]! as AnyObject as! String
                //Temp fix
                if tmpArrChatDetails["isAdmin"] != nil
                {
                    appDelegate().isAdmin = tmpArrChatDetails["isAdmin"]! as AnyObject as! String
                }
                else
                {
                    appDelegate().isAdmin = "no"
                }
                
                
                appDelegate().arrAllChats[appDelegate().toUserJID] = tmpArrChatDetails as AnyObject
                
                //Save array to local temp
                do {
                    if(appDelegate().arrAllChats.count > 0)
                    {
                        let dataArrAllChats = try JSONSerialization.data(withJSONObject: appDelegate().arrAllChats, options: .prettyPrinted)
                        let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                        UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                        UserDefaults.standard.synchronize()
                    }
                } catch {
                    print(error.localizedDescription)
                }
                //End
                
                
                //New code to send read receipt
                //We have recevied message from user so he will always To for me
                if(self.appDelegate().curRoomType == "chat")
                {
                    let dataToRead: [AnyObject] = appDelegate().arrUserChat.filter({ (text) -> Bool in
                        let tmp: NSDictionary = text as! NSDictionary
                        let status: String = tmp.value(forKey: "status") as! String
                        let isIncoming: String = tmp.value(forKey: "isIncoming") as! String
                        if(isIncoming == "YES" && status == "received")
                        {
                            return true
                        }
                        else
                        {
                            return false
                        }
                        
                    })
                    
                    for dict in dataToRead
                    {
                        let msgDict: [String: AnyObject] = dict as! [String: AnyObject]
                        self.appDelegate().funSendMessageReceived(messageTo: msgDict["toUserJID"] as! String, messageFrom: msgDict["fromUserJID"] as! String, messageId: msgDict["messageId"] as! String)
                        self.appDelegate().funGetSetLocalChats(messageId: msgDict["messageId"] as! String, chatStatus: "read")
                        
                    }
                }
                
                //End
                
                //End
                
                storyTableView?.reloadData()
                //self.scrollToBottom()
                
            }
            else
            {
                self.appDelegate().arrUserChat = []
            }
        }
        
        if(self.appDelegate().isBanterClosed == "closed")
        {
            isAutoScroll = true
            
            btnPicker?.isHidden = true
            btnCamera?.isHidden = true
            messageBox.isHidden = true
            btnJoinBanter?.isHidden = true
            
        }
        else
        {
            if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
            {
                if(appDelegate().isAdmin == "yes")
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
                else
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
            }
            else if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "yes")
            {
                if(appDelegate().isAdmin == "yes")
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
                else
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
            }
            if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "blocked")
            {
                btnPicker?.isHidden = true
                btnCamera?.isHidden = true
                messageBox.isHidden = true
                btnJoinBanter?.isHidden = true
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
            }
            self.appDelegate().isUpdatesLoaded = false
            
            isAutoScroll = true
            
            if(self.appDelegate().curRoomType == "banter" || self.appDelegate().curRoomType == "teambr")
            {
                if(self.appDelegate().isJoined == "no")
                {
                    
                    btnPicker?.isHidden = true
                    btnCamera?.isHidden = true
                    messageBox.isHidden = true
                    btnJoinBanter?.isHidden = false
                    
                }
                else
                {
                    btnPicker?.isHidden = false
                    btnCamera?.isHidden = false
                    messageBox.isHidden = false
                    btnJoinBanter?.isHidden = true
                }
            }
            else
            {
                btnPicker?.isHidden = false
                btnCamera?.isHidden = false
                messageBox.isHidden = false
                btnJoinBanter?.isHidden = true
            }
            
            //storyTableView?.layoutSubviews()
            //storyTableView?.layoutIfNeeded()
            //self.scrollToBottom()
        }
        
        self.storyTableView?.reloadData()
    }

    @objc func messageReceivedFromServer()
    {
         //if (!isMultiSelection) {
            DispatchQueue.main.async {
                //print(appDelegate().arrAllChats)
                //print(appDelegate().toUserJID)
                if(self.appDelegate().arrAllChats.count > 0)
                {
                    //self.appDelegate().arrUserChat = dt["Chats"] as! [AnyObject]
                    if let dt = self.appDelegate().arrAllChats[self.appDelegate().toUserJID]
                    { var tmpArrChatDetails = [String : AnyObject]()
                        
                        tmpArrChatDetails = dt as! [String : AnyObject]
                        //tmpArrChatDetails["Chats"] = dt["Chats"] as AnyObject
                        //tmpArrChatDetails["userName"] = dt["userName"] as AnyObject
                        //tmpArrChatDetails["userAvatar"] = dt["userAvatar"] as AnyObject
                        // tmpArrChatDetails["badgeCounts"] = 0 as AnyObject
                        //tmpArrChatDetails["lastMessage"] = dt["lastMessage"] as AnyObject
                        //tmpArrChatDetails["lastTime"] = dt["lastTime"] as AnyObject
                        self.appDelegate().isJoined = tmpArrChatDetails["isJoined"]! as AnyObject as! String
                        //Temp fix
                        if tmpArrChatDetails["isAdmin"] != nil
                        {
                            self.appDelegate().isAdmin = tmpArrChatDetails["isAdmin"]! as AnyObject as! String
                        }
                        else
                        {
                            self.appDelegate().isAdmin = "no"
                        }
                        let sortedArray = (dt["Chats"] as! [[String:Any]]).sorted(by: { (dictOne, dictTwo) -> Bool in
                            let date1 =  dictOne
                            let date2 =  dictTwo
                            var dt1: Date = Date()
                            var dt2: Date = Date()
                            
                            if date1["time"] != nil
                            {
                                // print(date1["lastDate"] as AnyObject)
                                let mili1: Double = Double(truncating: (date1["time"] as AnyObject) as! NSNumber) //(date1["lastTime"] as! NSString).doubleValue //Double((val1 as AnyObject) as! NSNumber)
                                let myMilliseconds1: UnixTime = UnixTime(mili1/1000.0)
                                dt1 = myMilliseconds1.dateFull
                                //print("Date1: " + dt1.description)
                            }
                            
                            if date2["time"] != nil
                            {
                                let mili2: Double = Double(truncating: (date2["time"] as AnyObject) as! NSNumber) //(date2["lastTime"] as! NSString).doubleValue
                                let myMilliseconds2: UnixTime = UnixTime(mili2/1000.0)
                                dt2 = myMilliseconds2.dateFull
                                //print("Date2: " + dt2.description)
                            }
                            
                            
                            
                            return dt1.compare(dt2) == ComparisonResult.orderedAscending
                        })
                        self.appDelegate().arrUserChat = sortedArray as [AnyObject]
                        
                        //storyTableView?.reloadData()
                    }
                    else
                    {
                        self.appDelegate().arrUserChat = []
                    }
                }
                
                /*if(self.appDelegate().isOnChatView)
                 {
                 //New code to send read receipt
                 //We have recevied message from user so he will always To for me
                 
                 let dataToRead: NSMutableArray = appDelegate().arrUserChat.filter({ (text) -> Bool in
                 let tmp: NSDictionary = text as! NSDictionary
                 let status: String = tmp.value(forKey: "status") as! String
                 let isIncoming: String = tmp.value(forKey: "isIncoming") as! String
                 if(isIncoming == "YES" && status == "received")
                 {
                 return true
                 }
                 else
                 {
                 return false
                 }
                 
                 }) as! NSMutableArray
                 
                 for dict in dataToRead
                 {
                 let msgDict: [String: AnyObject] = dict as! [String: AnyObject]
                 self.appDelegate().funSendMessageReceived(messageTo: msgDict["toUserJID"] as! String, messageFrom: msgDict["fromUserJID"] as! String, messageId: msgDict["messageId"] as! String)
                 self.appDelegate().funGetSetLocalChats(messageId: msgDict["messageId"] as! String, chatStatus: "read", recReadUserJid: msgDict["toUserJID"] as! String)
                 
                 }
                 
                 
                 
                 
                 //End
                 
                 }*/
                
                /*DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {F
                 self.storyTableView?.reloadData()
                 }*/
                
                
                //storyTableView?.layoutIfNeeded()
                //self.scrollToBottom()
                //self.isAutoScroll = false
                self.storyTableView?.reloadData()
                
                //self.scrollToBottom()
                /* DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                 //if(self.appDelegate().isSendingMedia)
                 //{
                 self.scrollToBottom()
                 //}
                 }*/
            }
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            //if(self.appDelegate().isSendingMedia)
            //{
            //self.scrollToBottom()
            //}
            if(self.appDelegate().curRoomType == "group")
            {
                
                if(self.appDelegate().isBanterClosed == "closed")
                {
                    //self.isAutoScroll = true
                    
                    self.btnPicker?.isHidden = true
                    self.btnCamera?.isHidden = true
                    self.messageBox.isHidden = true
                    self.btnJoinBanter?.isHidden = true
                    
                }
                else
                {
                    if(self.appDelegate().curRoomType == "banter" && self.appDelegate().isJoined == "yes")
                    {
                        if(self.appDelegate().isAdmin == "yes")
                        {
                            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                        }
                        else
                        {
                            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                        }
                    }
                        else if(self.appDelegate().curRoomType == "teambr" && self.appDelegate().isJoined == "yes")
                        {
                            if(self.appDelegate().isAdmin == "yes")
                            {
                                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                            }
                            else
                            {
                                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                            }
                        }
                        
                    else if(self.appDelegate().curRoomType == "group" && self.appDelegate().isJoined == "yes"){
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                        self.supportedTeam = 0
                        self.opponentTeam = 0
                        self.btnPicker?.isHidden = false
                        self.btnCamera?.isHidden = false
                        self.messageBox.isHidden = false
                        self.btnJoinBanter?.isHidden = true
                    }
                        
                    else if(self.appDelegate().curRoomType == "group" && self.appDelegate().isJoined == "blocked" || self.appDelegate().isJoined == "no")
                    {
                        self.btnPicker?.isHidden = true
                        self.btnCamera?.isHidden = true
                        self.messageBox.isHidden = true
                        self.btnJoinBanter?.isHidden = true
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.chatmenu))
                    }
                    
                   
                    
                    
                    
                    self.appDelegate().isUpdatesLoaded = false
                    
                    
                    
                    
                    
                    
                    
                    //storyTableView?.layoutSubviews()
                    //storyTableView?.layoutIfNeeded()
                    //self.scrollToBottom()
                }
            }
            //if(self.appDelegate().curRoomType == "chat")
        }
            
        //}
      
    }
    @objc func closeBanterFromServer()
    {
        btnPicker?.isHidden = true
        btnCamera?.isHidden = true
        messageBox.isHidden = true
        btnJoinBanter?.isHidden = true
        
        self.appDelegate().isJoined = "no"
        self.navigationItem.rightBarButtonItem = nil
        storyTableView?.reloadData()
        
    }
    @objc func messageInReceivedFromServer()
    {
         // if (!isMultiSelection) {
            DispatchQueue.main.async {
                //print(appDelegate().arrAllChats)
                //print(appDelegate().toUserJID)
                if(self.appDelegate().arrAllChats.count > 0)
                {
                    if let dt = self.appDelegate().arrAllChats[self.appDelegate().toUserJID]
                    {
                        // self.appDelegate().arrUserChat = dt["Chats"] as! [AnyObject]
                        let sortedArray = (dt["Chats"] as! [[String:Any]]).sorted(by: { (dictOne, dictTwo) -> Bool in
                            let date1 =  dictOne
                            let date2 =  dictTwo
                            var dt1: Date = Date()
                            var dt2: Date = Date()
                            
                            if date1["time"] != nil
                            {
                                // print(date1["lastDate"] as AnyObject)
                                let mili1: Double = Double(truncating: (date1["time"] as AnyObject) as! NSNumber) //(date1["lastTime"] as! NSString).doubleValue //Double((val1 as AnyObject) as! NSNumber)
                                let myMilliseconds1: UnixTime = UnixTime(mili1/1000.0)
                                dt1 = myMilliseconds1.dateFull
                                //print("Date1: " + dt1.description)
                            }
                            
                            if date2["time"] != nil
                            {
                                let mili2: Double = Double(truncating: (date2["time"] as AnyObject) as! NSNumber) //(date2["lastTime"] as! NSString).doubleValue
                                let myMilliseconds2: UnixTime = UnixTime(mili2/1000.0)
                                dt2 = myMilliseconds2.dateFull
                                //print("Date2: " + dt2.description)
                            }
                            
                            
                            
                            return dt1.compare(dt2) == ComparisonResult.orderedAscending
                        })
                        self.appDelegate().arrUserChat = sortedArray as [AnyObject]
                        
                        //storyTableView?.reloadData()
                    }
                    else
                    {
                        self.appDelegate().arrUserChat = []
                    }
                }
                
                /*if(self.appDelegate().isOnChatView)
                 {
                 //New code to send read receipt
                 //We have recevied message from user so he will always To for me
                 
                 let dataToRead: NSMutableArray = appDelegate().arrUserChat.filter({ (text) -> Bool in
                 let tmp: NSDictionary = text as! NSDictionary
                 let status: String = tmp.value(forKey: "status") as! String
                 let isIncoming: String = tmp.value(forKey: "isIncoming") as! String
                 if(isIncoming == "YES" && status == "received")
                 {
                 return true
                 }
                 else
                 {
                 return false
                 }
                 
                 }) as! NSMutableArray
                 
                 for dict in dataToRead
                 {
                 let msgDict: [String: AnyObject] = dict as! [String: AnyObject]
                 self.appDelegate().funSendMessageReceived(messageTo: msgDict["toUserJID"] as! String, messageFrom: msgDict["fromUserJID"] as! String, messageId: msgDict["messageId"] as! String)
                 self.appDelegate().funGetSetLocalChats(messageId: msgDict["messageId"] as! String, chatStatus: "read", recReadUserJid: msgDict["toUserJID"] as! String)
                 
                 }
                 
                 
                 
                 
                 //End
                 
                 }*/
                
                /*DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                 self.storyTableView?.reloadData()
                 }*/
                
                
                //storyTableView?.layoutIfNeeded()
                //self.scrollToBottom()
                //self.isAutoScroll = false
               // if(self.isMultiSelection == false){
                    self.storyTableView?.reloadData()
                //}
                
                
                
            }
            
       // }

    }
    
    func scrollToBottom(){
        //DispatchQueue.global(qos: .background).async {
        DispatchQueue.main.async {
            
            
                
                /*let indexPath = IndexPath(row: self.appDelegate().arrUserChat.count-1, section: 0)
                 self.storyTableView?.scrollToRow(at: indexPath, at: .bottom, animated: true)*/
                if(self.appDelegate().arrUserChat.count > 0)
                {
                    let tRows = (self.storyTableView?.numberOfRows(inSection: 0))! - 1
                    //print(self.appDelegate().arrUserChat.count)
                    //let indexPath = IndexPath(row: self.appDelegate().arrUserChat.count-1, section: 0)
                    let indexPath = IndexPath(row: tRows , section: 0)
                    //self.storyTableView?.selectRow(at: indexPath , animated: false, scrollPosition: .bottom)
                    //self.storyTableView?.reloadRows(at: [indexPath], with: UITableViewRowAnimation.none)
                    if(tRows > 0)
                    {
                        self.storyTableView?.scrollToRow(at: indexPath, at: .none, animated: false)
                    }
                    
                    
                }
                
            
            
           // let indexPath = IndexPath(row: self.appDelegate().arrUserChat.count-1, section: 0)
            
        }
        //tableViewScrollToBottom(true)
        
    }
    
    func getImageThumbnail(asset: PHAsset) -> UIImage {
        
        let width: Int = asset.pixelWidth/3
        let height: Int = asset.pixelHeight/3
        
        let manager = PHImageManager.default()
        let option = PHImageRequestOptions()
        var thumbnail: UIImage! //()
        option.isSynchronous = true
        manager.requestImage(for: asset, targetSize: CGSize(width: width, height: height), contentMode: .aspectFit, options: option, resultHandler: {(result, info)->Void in
            thumbnail = result!
        })
        return thumbnail
    }
    
    func createRequestBodyWith(parameters:[String:String], filePathKey:String, boundary:String, image: UIImage) -> NSData{
        
        let body = NSMutableData()
        
        for (key, value) in parameters {
            body.appendString(string: "--\(boundary)\r\n")
            body.appendString(string: "Content-Disposition: form-data; name=\"\(key)\"\r\n\r\n")
            body.appendString(string: "\(value)\r\n")
        }
        
        body.appendString(string: "--\(boundary)\r\n")
        
        let mimetype = "image/jpg"
        
        let defFileName = "temp.jpg"
        
        let imageData = image.jpegData(compressionQuality: 1)
        
        body.appendString(string: "Content-Disposition: form-data; name=\"\(filePathKey)\"; filename=\"\(defFileName)\"\r\n")
        body.appendString(string: "Content-Type: \(mimetype)\r\n\r\n")
        body.append(imageData!)
        body.appendString(string: "\r\n")
        
        body.appendString(string: "--\(boundary)--\r\n")
        
        return body
    }
    
    func createRequestBodyWithVideo(parameters:[String:String], filePathKey:String, boundary:String, videoURL: URL) -> NSData{
        
        let body = NSMutableData()
    
        //let imageData = UIImageJPEGRepresentation(image, 1)
        do
        {
            for (key, value) in parameters {
                body.appendString(string: "--\(boundary)\r\n")
                body.appendString(string: "Content-Disposition: form-data; name=\"\(key)\"\r\n\r\n")
                body.appendString(string: "\(value)\r\n")
            }
            
            body.appendString(string: "--\(boundary)\r\n")
            
            let mimetype = "video/mp4"
            
            let defFileName = "temp.mp4"
            let videoData = try Data(contentsOf: videoURL)
            
            body.appendString(string: "Content-Disposition: form-data; name=\"\(filePathKey)\"; filename=\"\(defFileName)\"\r\n")
            body.appendString(string: "Content-Type: \(mimetype)\r\n\r\n")
            body.append(videoData)
            body.appendString(string: "\r\n")
            
            body.appendString(string: "--\(boundary)--\r\n")
            
        } catch let error as NSError {
            print(error)
        }
        
        return body
    }

    
    func generateBoundaryString() -> String {
        return "Boundary-\(NSUUID().uuidString)"
    }
    
    /*func tableViewScrollToBottom(_ animated: Bool) {
        DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(300)) {
            let numberOfSections = self.storyTableView?.numberOfSections
            let numberOfRows = self.storyTableView?.numberOfRows(inSection: numberOfSections!-1)
            
            if numberOfRows! > 0 {
                let indexPath = IndexPath(row: numberOfRows!-1, section: (numberOfSections!-1))
                self.storyTableView?.scrollToRow(at: indexPath, at: .bottom, animated: animated)
            }
        }
    }*/
    
    
    @objc func keyboardWillShow(notification:NSNotification){
        //give room at the bottom of the scroll view, so it doesn't cover up anything the user needs to tap
        /*var userInfo = notification.userInfo!
        var keyboardFrame:CGRect = (userInfo[UIKeyboardFrameBeginUserInfoKey] as! NSValue).cgRectValue
        keyboardFrame = self.view.convert(keyboardFrame, from: nil)
        
        var contentInset:UIEdgeInsets = self.storyToolbar?. //.contentInset
        contentInset.bottom = keyboardFrame.size.height
        self.storyToolbar.contentInset = contentInset*/
        //adjustingHeight(show: true, notification: notification)
        //Working Very good
        //animateViewMoving(up: true, moveValue: 200)
        
        isKeyboardHiding = false
        self.storyTableView?.allowsSelection = false
        //scrollToBottom()
    }
    
    @objc func keyboardWillHide(notification:NSNotification){
        /*let contentInset:UIEdgeInsets = UIEdgeInsets.zero
        self.storyToolbar.contentInset = contentInset*/
        isKeyboardHiding = true
        if(iskeybordHide){
             isAutoScroll = true
        }
       
        adjustingHeight(show: false, notification: notification)
        
        //Working Very good
        //animateViewMoving(up: false, moveValue: 200)
        
        //let changeInHeight = 0.0
        // self.bottomConstraint.constant = CGFloat(changeInHeight)
    }
    @objc func UIKeyboardDidHide(notification:NSNotification){
        self.storyTableView?.allowsSelection = true
        isAutoScroll = false
        iskeybordHide = false

    }
    
    
    
    @objc func keyboardDidChangeFrame(notification:NSNotification){
        self.coustumBorderHightConstraint.constant = CGFloat((messageBox?.frame.height)! + 10)
        
        if(isKeyboardHiding == false)
        {
            adjustingHeight(show: true, notification: notification)
        }
        //isKeyboardHiding = false
        
        
      //  self.scrollToBottom()
    }
        
    func adjustingHeight(show:Bool, notification:NSNotification) {
        var userInfo = notification.userInfo!
        //print(userInfo)
        self.keyboardFrame = (userInfo[UIResponder.keyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
        let animationDurarion = userInfo[UIResponder.keyboardAnimationDurationUserInfoKey] as! TimeInterval
        //let changeInHeight = (keyboardFrame.height + 40) * (show ? 1 : -1)
        if(isKeyboardHiding == true)
        {
            let changeInHeight = 0.0
            //scrollToBottom()
            //UIView.animate(withDuration: animationDurarion, animations: { () -> Void in
                //print(self.messageBox.keyboardType.rawValue)
                let lastconstraint = self.bottomConstraint.constant
                self.bottomConstraint.constant = CGFloat(changeInHeight)
              /*   if(self.appDelegate().arrUserChat.count>6){
                    self.storyTableView?.setContentOffset(CGPoint(x: 0,y :(self.storyTableView?.contentOffset.y)! + lastconstraint), animated: true)
                }
                 else{
                    let indexPath = IndexPath(row: 0, section: 0) as NSIndexPath
                    let rect = self.storyTableView?.rectForRow(at: indexPath as IndexPath)
                   // print(rect?.origin.y)
                    let indexPath1 = IndexPath(row: 1, section: 0) as NSIndexPath
                    let rect1 = self.storyTableView?.rectForRow(at: indexPath1 as IndexPath)
                    let indexPath2 = IndexPath(row: 2, section: 0) as NSIndexPath
                    let rect2 = self.storyTableView?.rectForRow(at: indexPath2 as IndexPath)
                    let indexPath3 = IndexPath(row: 3, section: 0) as NSIndexPath
                    let rect3 = self.storyTableView?.rectForRow(at: indexPath3 as IndexPath)
                    let indexPath4 = IndexPath(row: 4, section: 0) as NSIndexPath
                    let rect4 = self.storyTableView?.rectForRow(at: indexPath4 as IndexPath)
                    let posion = Int(round((rect?.height)!)) + Int(round((rect1?.height)!)) + Int(round((rect2?.height)!)) + Int(round((rect3?.height)!)) + Int(round((rect4?.height)!))
                    //print(posion)
                    if(posion > 350){
                        self.storyTableView?.setContentOffset(CGPoint(x: 0,y :  CGFloat(posion) - lastconstraint), animated: true)
                    }
                }*/
                
            //})
        }
        else
        {
            let changeInHeight = (self.keyboardFrame.height) //* (show ? 1 : -1)
            UIView.animate(withDuration: animationDurarion, animations: { () -> Void in
                //print(self.messageBox.keyboardType.rawValue)
                
                self.bottomConstraint.constant = changeInHeight
            /*    if(self.appDelegate().arrUserChat.count>6){
                    self.storyTableView?.setContentOffset(CGPoint(x: 0,y :(self.storyTableView?.contentOffset.y)! + changeInHeight), animated: true)
                }
                else{
                    
                    let indexPath = IndexPath(row: 0, section: 0) as NSIndexPath
                    let rect = self.storyTableView?.rectForRow(at: indexPath as IndexPath)
                   // print(rect?.origin.y)
                    let indexPath1 = IndexPath(row: 1, section: 0) as NSIndexPath
                    let rect1 = self.storyTableView?.rectForRow(at: indexPath1 as IndexPath)
                    let indexPath2 = IndexPath(row: 2, section: 0) as NSIndexPath
                    let rect2 = self.storyTableView?.rectForRow(at: indexPath2 as IndexPath)
                    let indexPath3 = IndexPath(row: 3, section: 0) as NSIndexPath
                    let rect3 = self.storyTableView?.rectForRow(at: indexPath3 as IndexPath)
                    let indexPath4 = IndexPath(row: 4, section: 0) as NSIndexPath
                    let rect4 = self.storyTableView?.rectForRow(at: indexPath4 as IndexPath)
                    let posion = Int(round((rect?.height)!)) + Int(round((rect1?.height)!)) + Int(round((rect2?.height)!)) + Int(round((rect3?.height)!)) + Int(round((rect4?.height)!))
                    //print(posion)
                    if(posion > 350){
                        self.storyTableView?.setContentOffset(CGPoint(x: 0,y :  CGFloat(posion) - changeInHeight), animated: true)
                    }

                }*/
                
            })
        }
        
    }
    
    /*func textFieldDidBeginEditing(_ textField: UITextField) {
        print(textField.keyboardType)
    }
    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool {
        //keyboardType = nil
        return true
    }*/

    /*func textFieldDidBeginEditing(_ textField: UITextField) {
        let keyboardType = textField.keyboardType
        print(keyboardType)
        let changeInHeight = (self.keyboardFrame.height) * (true ? 1 : -1)
        UIView.animate(withDuration: 0.3, animations: { () -> Void in
            self.bottomConstraint.constant += changeInHeight
        })
        
    }
    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool {
        //keyboardType = nil
        return true
    }*/
    
    /*func animateViewMoving (up:Bool, moveValue :CGFloat){
        let movementDuration:TimeInterval = 0.3
        let movement:CGFloat = ( up ? -moveValue : moveValue)
        UIView.beginAnimations( "animateView", context: nil)
        UIView.setAnimationBeginsFromCurrentState(true)
        UIView.setAnimationDuration(movementDuration )
        self.view.frame = self.view.frame.offsetBy(dx: 0,  dy: movement)
        UIView.commitAnimations()
    }*/
    @objc func historyFail()
    {
          DispatchQueue.main.async {
            self.activityIndicator.isHidden = true
        }
        //TransperentLoadingIndicatorView.hide()
        appDelegate().isApplyHistory = false
        // self.storyTableView?.isScrollEnabled = true
       // storyTableView?.reloadData()
    }
    @objc func messageReceivedFromHistory()
    {
        //if (!isMultiSelection) {
        DispatchQueue.main.async {
            //print(appDelegate().arrAllChats)
            //print(appDelegate().toUserJID)
            if(self.appDelegate().arrAllChats.count > 0)
            {
                //self.appDelegate().arrUserChat = dt["Chats"] as! [AnyObject]
                if let dt = self.appDelegate().arrAllChats[self.appDelegate().toUserJID]
                { var tmpArrChatDetails = [String : AnyObject]()
                    
                    tmpArrChatDetails = dt as! [String : AnyObject]
                    //tmpArrChatDetails["Chats"] = dt["Chats"] as AnyObject
                    //tmpArrChatDetails["userName"] = dt["userName"] as AnyObject
                    //tmpArrChatDetails["userAvatar"] = dt["userAvatar"] as AnyObject
                    // tmpArrChatDetails["badgeCounts"] = 0 as AnyObject
                    //tmpArrChatDetails["lastMessage"] = dt["lastMessage"] as AnyObject
                    //tmpArrChatDetails["lastTime"] = dt["lastTime"] as AnyObject
                    self.appDelegate().isJoined = tmpArrChatDetails["isJoined"]! as AnyObject as! String
                    //Temp fix
                    if tmpArrChatDetails["isAdmin"] != nil
                    {
                        self.appDelegate().isAdmin = tmpArrChatDetails["isAdmin"]! as AnyObject as! String
                    }
                    else
                    {
                        self.appDelegate().isAdmin = "no"
                    }
                    let sortedArray = (dt["Chats"] as! [[String:Any]]).sorted(by: { (dictOne, dictTwo) -> Bool in
                        let date1 =  dictOne
                        let date2 =  dictTwo
                        var dt1: Date = Date()
                        var dt2: Date = Date()
                        
                        if date1["time"] != nil
                        {
                            // print(date1["lastDate"] as AnyObject)
                            let mili1: Double = Double(truncating: (date1["time"] as AnyObject) as! NSNumber) //(date1["lastTime"] as! NSString).doubleValue //Double((val1 as AnyObject) as! NSNumber)
                            let myMilliseconds1: UnixTime = UnixTime(mili1/1000.0)
                            dt1 = myMilliseconds1.dateFull
                           // print("Date1: " + dt1.description)
                        }
                        
                        if date2["time"] != nil
                        {
                            let mili2: Double = Double(truncating: (date2["time"] as AnyObject) as! NSNumber) //(date2["lastTime"] as! NSString).doubleValue
                            let myMilliseconds2: UnixTime = UnixTime(mili2/1000.0)
                            dt2 = myMilliseconds2.dateFull
                            //print("Date2: " + dt2.description)
                        }
                        
                        
                        
                        return dt1.compare(dt2) == ComparisonResult.orderedAscending
                    })
                    self.appDelegate().arrUserChat = sortedArray as [AnyObject]
                    
                    //storyTableView?.reloadData()
                }
                else
                {
                    self.appDelegate().arrUserChat = []
                }
            }
            
            /*if(self.appDelegate().isOnChatView)
             {
             //New code to send read receipt
             //We have recevied message from user so he will always To for me
             
             let dataToRead: NSMutableArray = appDelegate().arrUserChat.filter({ (text) -> Bool in
             let tmp: NSDictionary = text as! NSDictionary
             let status: String = tmp.value(forKey: "status") as! String
             let isIncoming: String = tmp.value(forKey: "isIncoming") as! String
             if(isIncoming == "YES" && status == "received")
             {
             return true
             }
             else
             {
             return false
             }
             
             }) as! NSMutableArray
             
             for dict in dataToRead
             {
             let msgDict: [String: AnyObject] = dict as! [String: AnyObject]
             self.appDelegate().funSendMessageReceived(messageTo: msgDict["toUserJID"] as! String, messageFrom: msgDict["fromUserJID"] as! String, messageId: msgDict["messageId"] as! String)
             self.appDelegate().funGetSetLocalChats(messageId: msgDict["messageId"] as! String, chatStatus: "read", recReadUserJid: msgDict["toUserJID"] as! String)
             
             }
             
             
             
             
             //End
             
             }*/
            
            /*DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {F
             self.storyTableView?.reloadData()
             }*/
            
            
            //storyTableView?.layoutIfNeeded()
            //self.scrollToBottom()
            //self.isAutoScroll = false
            self.storyTableView?.reloadData()
            if(self.historyIndex == 0){
                self.isAutoScroll = true
            }
            
            //self.scrollToBottom()
            /* DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
             //if(self.appDelegate().isSendingMedia)
             //{
             self.scrollToBottom()
             //}
             }*/
        }
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
            //if(self.appDelegate().isSendingMedia)
            //{
            //self.scrollToBottom()
            //}
            // self.storyTableView?.isScrollEnabled = true
            if(self.historyIndex == 0){
                //self.isAutoScroll = true
            }
            else{
                self.historyIndex = self.historyIndex + 1
                if(self.appDelegate().arrUserChat.count > 0)
                {
                    //print(self.historyIndex)
                    //print(self.appDelegate().arrUserChat.count)
                    //let myindex = self.appDelegate().arrUserChat.count - self.historyIndex
                    let indexPath = IndexPath(row: self.historyIndex - 1 , section: 0)
                    //self.storyTableView?.selectRow(at: indexPath , animated: false, scrollPosition: .bottom)
                    //self.storyTableView?.reloadRows(at: [indexPath], with: UITableViewRowAnimation.none)
                    
                    self.storyTableView?.scrollToRow(at: indexPath, at: .top, animated: false)
                    // }
                }
            }
            
            if(self.appDelegate().curRoomType == "group")
            {
                
                if(self.appDelegate().isBanterClosed == "closed")
                {
                    //self.isAutoScroll = true
                    
                    /* self.btnPicker?.isHidden = true
                     self.btnCamera?.isHidden = true
                     self.messageBox.isHidden = true
                     self.btnJoinBanter?.isHidden = true*/
                    
                }
                else
                {
                    if(self.appDelegate().curRoomType == "banter" && self.appDelegate().isJoined == "yes")
                    {
                        if(self.appDelegate().isAdmin == "yes")
                        {
                            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                        }
                        else
                        {
                            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                        }
                    }
                        else if(self.appDelegate().curRoomType == "teambr" && self.appDelegate().isJoined == "yes")
                        {
                            if(self.appDelegate().isAdmin == "yes")
                            {
                                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                            }
                            else
                            {
                                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                            }
                        }
                        
                    else if(self.appDelegate().curRoomType == "group" && self.appDelegate().isJoined == "yes"){
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.leaveBanterRoom))
                        
                    }
                        
                    else if(self.appDelegate().curRoomType == "group" && self.appDelegate().isJoined == "blocked" || self.appDelegate().isJoined == "no")
                    {
                        
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(self.chatmenu))
                    }
                    
                    
                    self.appDelegate().isUpdatesLoaded = false
                    
                    
                    
                    
                    
                    
                    
                    //storyTableView?.layoutSubviews()
                    //storyTableView?.layoutIfNeeded()
                    //self.scrollToBottom()
                }
            }
            self.activityIndicator.isHidden = true
           // TransperentLoadingIndicatorView.hide()
            //if(self.appDelegate().curRoomType == "chat")
        }
        //LoadingIndicatorView.hide()
        //}
        //isApplyHistory = true
        
    }
    func funGetSetChat()
    {
        // self.activityIndicator = UIActivityIndicatorView(activityIndicatorStyle: .whiteLarge, color: .gray,  placeInTheCenterOf: self.view)
        // self.activityIndicator?.startAnimating()
        // self.storyTableView?.isScrollEnabled = false
        if(appDelegate().lastcreateroom != appDelegate().toUserJID){
        if(appDelegate().isUserOnline == true && self.currentReachabilityStatus != .notReachable  ){
       // TransperentLoadingIndicatorView.show((appDelegate().window?.rootViewController?.view)!, loadingText: "Please wait while loading Messages")
            if(historyIndex != 0){
               // activityIndicator.isHidden = false
                //activityIndicator.startAnimating()
                activityIndicator.isHidden = false //TransperentLoadingIndicatorView.show((appDelegate().window?.rootViewController?.view)!, loadingText: "")
            }
       /* var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "getchathistory" as AnyObject
        
        
        do {
            
            /*let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
             let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
             print(strInvited)*/
            //let login: String? = UserDefaults.standard.string(forKey: "userJID")
            //let arrReadUserJid = login?.components(separatedBy: "@")
            //let userReadUserJid = arrReadUserJid?[0]
            
            
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrdUserJid = myjid?.components(separatedBy: "@")
            let userUserJid = arrdUserJid?[0]
            
            let myjidtrim: String? = userUserJid
            let roomjid: String? = appDelegate().toUserJID
            let arrroomjid = roomjid?.components(separatedBy: "@")
            let room = arrroomjid?[0]
            
            let roomjidtrim: String? = room
            var time: Int64 = appDelegate().getUTCFormateDate()
            var messageId: String = ""
            if(self.appDelegate().arrUserChat.count > 0){
                let message: NSDictionary = self.appDelegate().arrUserChat[0] as! NSDictionary
                
                // let isIncoming: String = message.value(forKey: "isIncoming") as! String
                messageId = message.value(forKey: "messageId") as! String
                
                // print("\(indexPath.row) \(message.value(forKey: "status") as! String)")
                
                if let mili = message.value(forKey: "time")
                {
                    time = mili as! Int64
                }
            }
            
            dictRequestData["time"] = time as AnyObject
            dictRequestData["to"] = roomjidtrim as AnyObject
            dictRequestData["from"] = myjidtrim as AnyObject
            dictRequestData["messageid"] = messageId as AnyObject
            dictRequestData["chattype"] = appDelegate().curRoomType as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
            //dictRequest.setValue(dictMobiles, forKey: "requestData")
            // print(dictRequest)
            
            let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
            let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
            // historyIndex = 0
            appDelegate().isApplyHistory = false
           // print(strFanUpdates)
            self.appDelegate().sendRequestToAPI(strRequestDict: strFanUpdates)
        } catch {
            print(error.localizedDescription)
        }*/
              appDelegate().isApplyHistory = false
              var dictRequest = [String: AnyObject]()
              dictRequest["cmd"] = "getchathistory" as AnyObject
              dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
              dictRequest["device"] = "ios" as AnyObject
            
              do {
                  
                  /*let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
                   let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
                   print(strInvited)*/
                  //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                  //let arrReadUserJid = login?.components(separatedBy: "@")
                  //let userReadUserJid = arrReadUserJid?[0]
                
                
                  //Creating Request Data
                  var dictRequestData = [String: AnyObject]()
                  let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                  let arrdUserJid = myjid?.components(separatedBy: "@")
                  let userUserJid = arrdUserJid?[0]
                  
                  let myjidtrim: String? = userUserJid
                  let roomjid: String? = appDelegate().toUserJID
                  let arrroomjid = roomjid?.components(separatedBy: "@")
                  let room = arrroomjid?[0]
                  
                  let roomjidtrim: String? = room
                  var time: Int64 = appDelegate().getUTCFormateDate()
                 var messageId: String = ""
                  if(self.appDelegate().arrUserChat.count > 0){
                      let message: NSDictionary = self.appDelegate().arrUserChat[0] as! NSDictionary
                      messageId = message.value(forKey: "messageId") as! String
                                     
                      let isIncoming: String = message.value(forKey: "isIncoming") as! String
                      let userName: String = message.value(forKey: "userName") as! String
                      
                      // print("\(indexPath.row) \(message.value(forKey: "status") as! String)")
                      
                      if let mili = message.value(forKey: "time")
                      {
                          time = mili as! Int64
                      }
                  }
                  
                  dictRequestData["time"] = time as AnyObject
                  dictRequestData["to"] = roomjidtrim as AnyObject
                dictRequestData["messageid"] = messageId as AnyObject
                  dictRequestData["from"] = myjidtrim as AnyObject
                   dictRequestData["chattype"] = appDelegate().curRoomType as AnyObject
                  dictRequest["requestData"] = dictRequestData as AnyObject
                  //dictRequest.setValue(dictMobiles, forKey: "requestData")
                  //print(dictRequest)
                  
                 /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                  let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                  //print(strFanUpdates)
                  self.appDelegate().sendRequestToAPI(strRequestDict: strFanUpdates)*/
                 /* let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                                  let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                  //print(strByPlace)
                                                                                  let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                                  
                                                                                  let url = MediaAPIjava + "request=" + escapedString!*/
                                                                                 AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                                 headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                                   // 2
                                                                                                                   .responseJSON { response in
                                                                                                                       switch response.result {
                                                                                                                                                               case .success(let value):
                                                                                                                                                                   if let json = value as? [String: Any] {
                                                                                                                                                                                                                                                                                                  // print(" JSON:", json)
                                                                                                                                                                                                                                                                                                  let status1: Bool = json["success"] as! Bool
                                                                                                                                                                                                                                                                                               if(status1){
                                                                                                                                                                                                                                                                                                   let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                                                                                                                                                   if(response.count > 0)
                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                       for record in response {
                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                           let chathistory: NSDictionary = record as! NSDictionary
                                                                                                                                                                                                                                                                                                           if let statuscode = chathistory.value(forKey: "statuscode")
                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                               let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                                                                                                                                                                                                                                                               if localArrAllChats != nil
                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                   //Code to parse json data
                                                                                                                                                                                                                                                                                                                   if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                                                                                                                                                                                                                                                                       do {
                                                                                                                                                                                                                                                                                                                         self.appDelegate().arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                       } catch let _ as NSError {
                                                                                                                                                                                                                                                                                                                           // print(error)
                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                             for tmpAllUserChats in self.appDelegate().arrAllChats
                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                   let tmpSingleUserChat: String = tmpAllUserChats.key
                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                 if(tmpSingleUserChat == self.appDelegate().toUserJID)
                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                       var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                                                                                                                                                                                                                                                                                       tmpArrChatDetails["isHistory"] = false as AnyObject
                                                                                                                                                                                                                                                                                                                     self.appDelegate().arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                                                                       
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                               do {
                                                                                                                                                                                                                                                                                                                 if(self.appDelegate().arrAllChats.count > 0)
                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                     let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.appDelegate().arrAllChats, options: .prettyPrinted)
                                                                                                                                                                                                                                                                                                                       let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                                                                                                                                                                                                                                       UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                                                                                                                                                                                                                                                                                                       UserDefaults.standard.synchronize()
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                               } catch {
                                                                                                                                                                                                                                                                                                                   //print(error.localizedDescription)
                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                             self.appDelegate().isgetHistory = false
                                                                                                                                                                                                                                                                                                             if (self.appDelegate().isOntriviaChatsView){
                                                                                                                                                                                                                                                                                                                   let notificationName = Notification.Name("chatHistoryFailtrivia")
                                                                                                                                                                                                                                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                }else{
                                                                                                                                                                                                                                                                                                               let notificationName = Notification.Name("chatHistoryFail")
                                                                                                                                                                                                                                                                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                           else{
                                                                                                                                                                                                                                                                                                               let messageContent = chathistory.value(forKey: "body") as! String
                                                                                                                                                                                                                                                                                                               let dupMessageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                               // print(chathistory.value(forKey: "body"))
                                                                                                                                                                                                                                                                                                               var messageFromTrimTemp = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                               let outgoing = chathistory.value(forKey: "outgoing") as! Bool
                                                                                                                                                                                                                                                                                                               let chatType = chathistory.value(forKey: "chattype") as! String
                                                                                                                                                                                                                                                                                                               if(chatType != "chat"){
                                                                                                                                                                                                                                                                                                                 if let dt = self.appDelegate().arrAllChats[messageFromTrimTemp]
                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                       //print("dupMessageId:",dupMessageId )
                                                                                                                                                                                                                                                                                                                       let temparrUserChat2 = dt["Chats"] as! [AnyObject]
                                                                                                                                                                                                                                                                                                                       var isDuplicateMessage: Bool = false
                                                                                                                                                                                                                                                                                                                       let _: [AnyObject] = temparrUserChat2.filter({ (text) -> Bool in
                                                                                                                                                                                                                                                                                                                           let tmp: NSDictionary = text as! NSDictionary
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           let msgId: String = tmp.value(forKey: "messageId") as! String
                                                                                                                                                                                                                                                                                                                           // print("dupMessageId:")
                                                                                                                                                                                                                                                                                                                           //print("messageId:",msgId)
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           if(msgId == dupMessageId)
                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                               isDuplicateMessage = true
                                                                                                                                                                                                                                                                                                                               // print("isDuplicateMessage:",isDuplicateMessage)
                                                                                                                                                                                                                                                                                                                               return true
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                           else
                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                               //isDuplicateMessage = false
                                                                                                                                                                                                                                                                                                                               //print("isDuplicateMessage:",isDuplicateMessage)
                                                                                                                                                                                                                                                                                                                               return false
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                           //We have to check if duplicateMsgId is empty
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                       })
                                                                                                                                                                                                                                                                                                                       //print("isDuplicateMessage Ravi:",isDuplicateMessage)
                                                                                                                                                                                                                                                                                                                       if(isDuplicateMessage == false)
                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           let messageType = chathistory.value(forKey: "chattype") as! String//message?.attributeStringValue(forName: "type")
                                                                                                                                                                                                                                                                                                                           //  if(messageType == "chat") //This is single one to one chat
                                                                                                                                                                                                                                                                                                                           //  {
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                               // print(dataMessage)
                                                                                                                                                                                                                                                                                                                               do {
                                                                                                                                                                                                                                                                                                                                   let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   let recMessageType: String = (jsonDataMessage?.value(forKey: "type") as? String)!
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   let recBanterNickName: String = ""//(jsonDataMessage?.value(forKey: "banternickname") as? String)!
                                                                                                                                                                                                                                                                                                                                   var messageSubType :String = ""
                                                                                                                                                                                                                                                                                                                                   if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       messageSubType = sub_type as! String
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   //Else of this we have to manage image/video/files etc.
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   if(recMessageType == "text")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let messageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                                                       let messageTo = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                                       let messageFrom = chathistory.value(forKey: "messagefrom") as! String
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                       var mysupportteam: Int64 = 0
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       if(recRoomType == "banter" || recRoomType == "teambr"){
                                                                                                                                                                                                                                                                                                                                           mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       /*if #available(iOS 10.0, *) {
                                                                                                                                                                                                                                                                                                                                        let content = UNMutableNotificationContent()
                                                                                                                                                                                                                                                                                                                                        content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                                                                                                                                                                                                                                                                                                        content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                                                                                                                                                                                                                                                                                                        arguments: nil)
                                                                                                                                                                                                                                                                                                                                        content.sound = UNNotificationSound.default()
                                                                                                                                                                                                                                                                                                                                        let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                                                                                                                                                                                                                                                                                                        }*/
                                                                                                                                                                                                                                                                                                                                       let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       if(outgoing){
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerOut(messageTo, messageContent: recMessageContent, chatType: recRoomType, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId, chatStatus: "sent", newBanterNickName: recBanterNickName, mySupportedTeam:mysupportteam,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerIn(messageTo, messageContent: recMessageContent, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", fileLocalId: "", fromUser: messageFrom, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName,msgSentByUserToGroup: msgSentByUserToGroup,fanSupportTeam:mysupportteam,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //Code to prepare data before send to server
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //We have recevied message from user so he will always To for me
                                                                                                                                                                                                                                                                                                                                       //self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                     if (self.appDelegate().isOnChatView && (messageFrom == self.appDelegate().toUserJID))
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                                                                                                                                                                                                                                                                                                           //self.funGetSetLocalChats(messageId: messageId, chatStatus: "read", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                     if(self.appDelegate().isOntriviaChatsView){
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("MessageReceivedFromhistorytrivia")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("MessageReceivedFromhistory")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                     if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                     else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //End
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   else if(recMessageType == "image")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let messageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                                                       let messageTo = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                                       let messageFrom = chathistory.value(forKey: "messagefrom") as! String
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                       // let recmySupportTeam = jsonDataMessage?.value(forKey: "supportteam") as? Int64
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       /*if #available(iOS 10.0, *) {
                                                                                                                                                                                                                                                                                                                                        let content = UNMutableNotificationContent()
                                                                                                                                                                                                                                                                                                                                        content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                                                                                                                                                                                                                                                                                                        content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                                                                                                                                                                                                                                                                                                        arguments: nil)
                                                                                                                                                                                                                                                                                                                                        content.sound = UNNotificationSound.default()
                                                                                                                                                                                                                                                                                                                                        let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                                                                                                                                                                                                                                                                                                        }*/
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //var msgDict = [String: AnyObject]()
                                                                                                                                                                                                                                                                                                                                       //var badgeCounts: Int = 0
                                                                                                                                                                                                                                                                                                                                       let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                                                                                                                                                                                                                                                                                                       // let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                       //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                       //print(messageTo ?? "")
                                                                                                                                                                                                                                                                                                                                       //print(messageFromTrim ?? "")
                                                                                                                                                                                                                                                                                                                                       //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                       //msgDict["toUserMobile"] = "+919826615203"
                                                                                                                                                                                                                                                                                                                                       let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                                       let url = NSURL(string: recThumbLink)!
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       //let mysupportteam: Int = (jsonDataMessage?.value(forKey: "supportteam") as? Int)!
                                                                                                                                                                                                                                                                                                                                       var mysupportteam: Int64 = 0
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       if(recRoomType == "banter" || recRoomType == "teambr"){
                                                                                                                                                                                                                                                                                                                                           mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //Code to prepare data before send to server
                                                                                                                                                                                                                                                                                                                                       if(outgoing){
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerOut(messageTo, messageContent: recMessageContent, chatType: recRoomType, messageType: "image", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", caption: "",thumbLink:recThumbLink, fromUser: messageFrom, newBanterNickName: "newBanterNickName", mySupportedTeam: mysupportteam,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "download", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerIn(messageTo, messageContent: recMessageContent, messageType: "image", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageFrom, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam,Cmd:"getchathistory",messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                         if (self.appDelegate().isOnChatView && (messageFrom == self.appDelegate().toUserJID))
                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                               // self.funSendGroupMessageReceived(messageTo: messageFrom, messageFrom: messageTo, messageId: messageId)
                                                                                                                                                                                                                                                                                                                                             self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //We have recevied message from user so he will always To for me
                                                                                                                                                                                                                                                                                                                                       // self.funSendGroupMessageDelivery(messageTo: messageFrom, messageFrom: messageTo, messageId: messageId)
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("MessageReceivedFromhistory")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                     if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                               else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                     //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                     let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                     NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                 }                                                                                      else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //End
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       // Download task:
                                                                                                                                                                                                                                                                                                                                       // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                                                                                                                                                                                                                                                                                                       let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                                                                                                                                                                                                                                                                                                           // if responseData is not null...
                                                                                                                                                                                                                                                                                                                                           if let data = responseData{
                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                               // execute in UI thread
                                                                                                                                                                                                                                                                                                                                               DispatchQueue.main.async(execute: { () -> Void in
                                                                                                                                                                                                                                                                                                                                                   //let tmpImg = UIImage(data: data)
                                                                                                                                                                                                                                                                                                                                                   //Store image to local path
                                                                                                                                                                                                                                                                                                                                                   //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: "")
                                                                                                                                                                                                                                                                                                                                                   //let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                                                                   let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                                                                                                                                                                                                                                                                                                   let imageId = arrReadselVideoPath.last
                                                                                                                                                                                                                                                                                                                                                   let arrReadimageId = imageId?.components(separatedBy: ".")
                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                   // _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                                 self.appDelegate().saveImageToLocalWithName(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                                   // self.funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                 if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                   else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                   else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                   /*ALAssetsLibrary().writeImage(toSavedPhotosAlbum: tmpImg?.cgImage!, orientation: ALAssetOrientation(rawValue: (tmpImg?.imageOrientation.rawValue)!)!) { (path, error) in
                                                                                                                                                                                                                                                                                                                                                    print(path ?? "")
                                                                                                                                                                                                                                                                                                                                                    let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    //print(asset)
                                                                                                                                                                                                                                                                                                                                                    //Write code to save asset local id to previously prepared dat
                                                                                                                                                                                                                                                                                                                                                    //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier)
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: asset.localIdentifier, recReadUserJid: messageFromTrim!)
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    if(self.isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                    //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    else if (self.isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    //End prepare chat data
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    }*/
                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                               })
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                           else
                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                               //Error
                                                                                                                                                                                                                                                                                                                                               //  print(error ?? "Error")
                                                                                                                                                                                                                                                                                                                                               // self.funGetSetLocalChats(messageId: messageId, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       // Run task
                                                                                                                                                                                                                                                                                                                                       task.resume()
                                                                                                                                                                                                                                                                                                                                       //End Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   else if(recMessageType == "video")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let messageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                                                       let messageTo = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                                       let messageFrom = chathistory.value(forKey: "messagefrom") as! String
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //var msgDict = [String: AnyObject]()
                                                                                                                                                                                                                                                                                                                                       //var badgeCounts: Int = 0
                                                                                                                                                                                                                                                                                                                                       let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                       //print(messageTo ?? "")
                                                                                                                                                                                                                                                                                                                                       //print(messageFromTrim ?? "")
                                                                                                                                                                                                                                                                                                                                       //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                       //msgDict["toUserMobile"] = "+919826615203"
                                                                                                                                                                                                                                                                                                                                       var mysupportteam: Int64 = 0
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       if(recRoomType == "banter" || recRoomType == "teambr"){
                                                                                                                                                                                                                                                                                                                                           mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                                       let url = NSURL(string: recThumbLink)!
                                                                                                                                                                                                                                                                                                                                       if(outgoing){
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerOut(messageTo, messageContent: recMessageContent, chatType: recRoomType, messageType: "video", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", caption: "",thumbLink:recThumbLink, fromUser: messageFrom, newBanterNickName: "newBanterNickName", mySupportedTeam: mysupportteam,Cmd:"getchathistory",messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "download", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerIn(messageTo, messageContent: recMessageContent, messageType: "video", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageFrom, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam,Cmd:"getchathistory",messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                         if (self.appDelegate().isOnChatView && (messageFrom == self.appDelegate().toUserJID))
                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                               // self.funSendGroupMessageReceived(messageTo: messageFrom, messageFrom: messageTo, messageId: messageId)
                                                                                                                                                                                                                                                                                                                                             self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("MessageReceivedFromhistory")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                     if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //End
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       // Download task:
                                                                                                                                                                                                                                                                                                                                       // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                                                                                                                                                                                                                                                                                                       let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                                                                                                                                                                                                                                                                                                           // if responseData is not null...
                                                                                                                                                                                                                                                                                                                                           if let data = responseData{
                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                               // execute in UI thread
                                                                                                                                                                                                                                                                                                                                               DispatchQueue.main.async(execute: { () -> Void in
                                                                                                                                                                                                                                                                                                                                                   //let tmpImg = UIImage(data: data)
                                                                                                                                                                                                                                                                                                                                                   //Store image to local path
                                                                                                                                                                                                                                                                                                                                                   //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: "")
                                                                                                                                                                                                                                                                                                                                                   //let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                                                                   let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                                                                                                                                                                                                                                                                                                   let imageId = arrReadselVideoPath.last
                                                                                                                                                                                                                                                                                                                                                   let arrReadimageId = imageId?.components(separatedBy: ".")
                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                   //  _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                                 self.appDelegate().saveImageToLocalWithName(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                                   // self.funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                 if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                   else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                   else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                   /*ALAssetsLibrary().writeImage(toSavedPhotosAlbum: tmpImg?.cgImage!, orientation: ALAssetOrientation(rawValue: (tmpImg?.imageOrientation.rawValue)!)!) { (path, error) in
                                                                                                                                                                                                                                                                                                                                                    print(path ?? "")
                                                                                                                                                                                                                                                                                                                                                    let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    //print(asset)
                                                                                                                                                                                                                                                                                                                                                    //Write code to save asset local id to previously prepared dat
                                                                                                                                                                                                                                                                                                                                                    //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier)
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: asset.localIdentifier, recReadUserJid: messageFromTrim!)
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    if(self.isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                    //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    else if (self.isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    //End prepare chat data
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    }*/
                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                               })
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                           else
                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                               //Error
                                                                                                                                                                                                                                                                                                                                               //  print(error ?? "Error")
                                                                                                                                                                                                                                                                                                                                               // self.funGetSetLocalChats(messageId: messageId, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       // Run task
                                                                                                                                                                                                                                                                                                                                       task.resume()
                                                                                                                                                                                                                                                                                                                                       //End Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                               } catch let error as NSError {
                                                                                                                                                                                                                                                                                                                                   //print(error)
                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           //  }// Else of this we have to put here groupchat/banterroom and userupdates
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                                                                                                                         if (self.appDelegate().isOnChatView){
                                                                                                                                                                                                                                                                                                                               let notificationName = Notification.Name("chatHistoryFail")
                                                                                                                                                                                                                                                                                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                               else{
                                                                                                                                                                                                                                                                                                                   if(outgoing){
                                                                                                                                                                                                                                                                                                                       messageFromTrimTemp = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                   else{
                                                                                                                                                                                                                                                                                                                       messageFromTrimTemp = chathistory.value(forKey: "messagefrom") as! String
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                 if let dt = self.appDelegate().arrAllChats[messageFromTrimTemp]
                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                       //print("dupMessageId:",dupMessageId )
                                                                                                                                                                                                                                                                                                                       let temparrUserChat2 = dt["Chats"] as! [AnyObject]
                                                                                                                                                                                                                                                                                                                       var isDuplicateMessage: Bool = false
                                                                                                                                                                                                                                                                                                                       let _: [AnyObject] = temparrUserChat2.filter({ (text) -> Bool in
                                                                                                                                                                                                                                                                                                                           let tmp: NSDictionary = text as! NSDictionary
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           let msgId: String = tmp.value(forKey: "messageId") as! String
                                                                                                                                                                                                                                                                                                                           // print("dupMessageId:")
                                                                                                                                                                                                                                                                                                                           //print("messageId:",msgId)
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           if(msgId == dupMessageId)
                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                               isDuplicateMessage = true
                                                                                                                                                                                                                                                                                                                               // print("isDuplicateMessage:",isDuplicateMessage)
                                                                                                                                                                                                                                                                                                                               return true
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                           else
                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                               //isDuplicateMessage = false
                                                                                                                                                                                                                                                                                                                               //print("isDuplicateMessage:",isDuplicateMessage)
                                                                                                                                                                                                                                                                                                                               return false
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                           //We have to check if duplicateMsgId is empty
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                       })
                                                                                                                                                                                                                                                                                                                       //print("isDuplicateMessage Ravi:",isDuplicateMessage)
                                                                                                                                                                                                                                                                                                                       if(isDuplicateMessage == false)
                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           let messageType = chathistory.value(forKey: "chattype") as! String//message?.attributeStringValue(forName: "type")
                                                                                                                                                                                                                                                                                                                           //  if(messageType == "chat") //This is single one to one chat
                                                                                                                                                                                                                                                                                                                           //  {
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                           if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                               // print(dataMessage)
                                                                                                                                                                                                                                                                                                                               do {
                                                                                                                                                                                                                                                                                                                                   let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   let recMessageType: String = (jsonDataMessage?.value(forKey: "type") as? String)!
                                                                                                                                                                                                                                                                                                                                   var messageSubType :String = ""
                                                                                                                                                                                                                                                                                                                                   if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       messageSubType = sub_type as! String
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   let recBanterNickName: String = ""//(jsonDataMessage?.value(forKey: "banternickname") as? String)!
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   //Else of this we have to manage image/video/files etc.
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   if(recMessageType == "text")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let messageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                                                       let messageTo = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                                       let messageFrom = chathistory.value(forKey: "messagefrom") as! String
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                       // let recmySupportTeam = jsonDataMessage?.value(forKey: "supportteam") as! Int64
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       /*if #available(iOS 10.0, *) {
                                                                                                                                                                                                                                                                                                                                        let content = UNMutableNotificationContent()
                                                                                                                                                                                                                                                                                                                                        content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                                                                                                                                                                                                                                                                                                        content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                                                                                                                                                                                                                                                                                                        arguments: nil)
                                                                                                                                                                                                                                                                                                                                        content.sound = UNNotificationSound.default()
                                                                                                                                                                                                                                                                                                                                        let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                                                                                                                                                                                                                                                                                                        }*/
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       if(outgoing){
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerOut(messageTo, messageContent: recMessageContent, chatType: recRoomType, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId, chatStatus: "sent", newBanterNickName: recBanterNickName,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerIn(messageFrom, messageContent: recMessageContent, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", fileLocalId: "", fromUser: messageTo, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //Code to prepare data before send to server
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //We have recevied message from user so he will always To for me
                                                                                                                                                                                                                                                                                                                                       //self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                     if (self.appDelegate().isOnChatView && (messageFrom == self.appDelegate().toUserJID))
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "read", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("MessageReceivedFromhistory")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                     if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                     else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //End
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                       /*  else if(recMessageType == "header")
                                                                                                                                                                                                                                                                                                                                        */
                                                                                                                                                                                                                                                                                                                                   else if(recMessageType == "image")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let messageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                                                       let messageTo = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                                       let messageFrom = chathistory.value(forKey: "messagefrom") as! String
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                       //let recmySupportTeam = jsonDataMessage?.value(forKey: "supportteam") as! Int64
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined

                                                                                                                                                                                                                                                                                                                                       /*if #available(iOS 10.0, *) {
                                                                                                                                                                                                                                                                                                                                        let content = UNMutableNotificationContent()
                                                                                                                                                                                                                                                                                                                                        content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                                                                                                                                                                                                                                                                                                        content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                                                                                                                                                                                                                                                                                                        arguments: nil)
                                                                                                                                                                                                                                                                                                                                        content.sound = UNNotificationSound.default()
                                                                                                                                                                                                                                                                                                                                        let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                                                                                                                                                                                                                                                                                                        }*/


                                                                                                                                                                                                                                                                                                                                   //var msgDict = [String: AnyObject]()
                                                                                                                                                                                                                                                                                                                                       //var badgeCounts: Int = 0
                                                                                                                                                                                                                                                                                                                                       let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                                                                                                                                                                                                                                                                                                       // let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                       //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                       //print(messageTo ?? "")
                                                                                                                                                                                                                                                                                                                                       //print(messageFromTrim ?? "")
                                                                                                                                                                                                                                                                                                                                       //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                       //msgDict["toUserMobile"] = "+919826615203"
                                                                                                                                                                                                                                                                                                                                       let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       //Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                                       let url = NSURL(string: recThumbLink)!

                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       //let mysupportteam: Int = (jsonDataMessage?.value(forKey: "supportteam") as? Int)!
                                                                                                                                                                                                                                                                                                                                       var mysupportteam: Int64 = 0
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       if(recRoomType == "banter" || recRoomType == "teambr"){
                                                                                                                                                                                                                                                                                                                                           mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                                                                                                                                                                                                                                                                                                       }

                                                                                                                                                                                                                                                                                                                                       //Code to prepare data before send to server
                                                                                                                                                                                                                                                                                                                                       if(outgoing){
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerOut(messageTo, messageContent: recMessageContent, chatType: recRoomType, messageType: "image", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", caption: "",thumbLink:recThumbLink, fromUser: messageFrom, newBanterNickName: "newBanterNickName", mySupportedTeam: mysupportteam,Cmd:"getchathistory", messageSubType:messageSubType)

                                                                                                                                                                                                                                                                                                                                         self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "download", recReadUserJid: messageTo, isScrollToBottom: false)

                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerIn(messageFrom, messageContent: recMessageContent, messageType: "image", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName,  msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam,Cmd:"getchathistory",messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                         if (self.appDelegate().isOnChatView && (messageFrom == self.appDelegate().toUserJID))
                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                               // self.funSendGroupMessageReceived(messageTo: messageFrom, messageFrom: messageTo, messageId: messageId)
                                                                                                                                                                                                                                                                                                                                             self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //We have recevied message from user so he will always To for me
                                                                                                                                                                                                                                                                                                                                       // self.funSendGroupMessageDelivery(messageTo: messageFrom, messageFrom: messageTo, messageId: messageId)



                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("MessageReceivedFromhistory")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                           if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                               //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                               let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                     else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //End

                                                                                                                                                                                                                                                                                                                                       // Download task:
                                                                                                                                                                                                                                                                                                                                       // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                                                                                                                                                                                                                                                                                                       let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                                                                                                                                                                                                                                                                                                           // if responseData is not null...
                                                                                                                                                                                                                                                                                                                                           if let data = responseData{

                                                                                                                                                                                                                                                                                                                                               // execute in UI thread
                                                                                                                                                                                                                                                                                                                                               DispatchQueue.main.async(execute: { () -> Void in
                                                                                                                                                                                                                                                                                                                                                   //let tmpImg = UIImage(data: data)
                                                                                                                                                                                                                                                                                                                                                   //Store image to local path
                                                                                                                                                                                                                                                                                                                                                   //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: "")
                                                                                                                                                                                                                                                                                                                                                   //let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                                                                   let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                                                                                                                                                                                                                                                                                                   let imageId = arrReadselVideoPath.last
                                                                                                                                                                                                                                                                                                                                                   let arrReadimageId = imageId?.components(separatedBy: ".")

                                                                                                                                                                                                                                                                                                                                                   // _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                                 self.appDelegate().saveImageToLocalWithName(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                                   // self.funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageTo, isScrollToBottom: false)

                                                                                                                                                                                                                                                                                                                                                 if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                 if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                                                     //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                     let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                     NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                 }else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                   /*ALAssetsLibrary().writeImage(toSavedPhotosAlbum: tmpImg?.cgImage!, orientation: ALAssetOrientation(rawValue: (tmpImg?.imageOrientation.rawValue)!)!) { (path, error) in
                                                                                                                                                                                                                                                                                                                                                    print(path ?? "")
                                                                                                                                                                                                                                                                                                                                                    let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    //print(asset)
                                                                                                                                                                                                                                                                                                                                                    //Write code to save asset local id to previously prepared dat
                                                                                                                                                                                                                                                                                                                                                    //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier)
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: asset.localIdentifier, recReadUserJid: messageFromTrim!)
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    if(self.isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                    //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    else if (self.isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    //End prepare chat data
                                                                                                                                                                                                                                                                                                                                                    }*/
                                                                                                                                                                                                                                                                                                                                               })
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                           else
                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                               //Error
                                                                                                                                                                                                                                                                                                                                               //  print(error ?? "Error")
                                                                                                                                                                                                                                                                                                                                               // self.funGetSetLocalChats(messageId: messageId, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)

                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                       }

                                                                                                                                                                                                                                                                                                                                       // Run task
                                                                                                                                                                                                                                                                                                                                       task.resume()
                                                                                                                                                                                                                                                                                                                                       //End Code to fetch media from live URL

                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   else if(recMessageType == "video")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recMessageTime = jsonDataMessage?.value(forKey: "time")

                                                                                                                                                                                                                                                                                                                                       let messageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                                                       let messageTo = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                                       let messageFrom = chathistory.value(forKey: "messagefrom") as! String

                                                                                                                                                                   //var msgDict = [String: AnyObject]()
                                                                                                                                                                                                                                                                                                                                       //var badgeCounts: Int = 0
                                                                                                                                                                                                                                                                                                                                       let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                                                                                                                                                                                                                                                                                                       let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                       let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!

                                                                                                                                                                                                                                                                                                                                       //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                       //print(messageTo ?? "")
                                                                                                                                                                                                                                                                                                                                       //print(messageFromTrim ?? "")
                                                                                                                                                                                                                                                                                                                                       //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                       //msgDict["toUserMobile"] = "+919826615203"
                                                                                                                                                                                                                                                                                                                                       var mysupportteam: Int64 = 0
                                                                                                                                                                                                                                                                                                                                       //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                       if(recRoomType == "banter" || recRoomType == "teambr"){
                                                                                                                                                                                                                                                                                                                                           mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                                                                                                                                                                                                                                                                                                       }

                                                                                                                                                                                                                                                                                                                                       //Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                                       let url = NSURL(string: recThumbLink)!
                                                                                                                                                                                                                                                                                                                                       if(outgoing){
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerOut(messageTo, messageContent: recMessageContent, chatType: recRoomType, messageType: "video", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", caption: "",thumbLink:recThumbLink, fromUser: messageFrom, newBanterNickName: "newBanterNickName", mySupportedTeam: mysupportteam,Cmd:"getchathistory", messageSubType:messageSubType)

                                                                                                                                                                                                                                                                                                                                         self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "download", recReadUserJid: messageTo, isScrollToBottom: false)

                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().prepareMessageForServerIn(messageFrom, messageContent: recMessageContent, messageType: "video", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName,  msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam,Cmd:"getchathistory",messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                         if (self.appDelegate().isOnChatView && (messageFrom == self.appDelegate().toUserJID))
                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                               // self.funSendGroupMessageReceived(messageTo: messageFrom, messageFrom: messageTo, messageId: messageId)
                                                                                                                                                                                                                                                                                                                                             self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                               let notificationName = Notification.Name("MessageReceivedFromhistory")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)

                                                                                                                                                                                                                                                                                                                                     if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                     if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                                                         //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                         let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                         NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                     }else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       //End
                                                                                                                                                                                                                                                                                                                                       // Download task:
                                                                                                                                                                                                                                                                                                                                       // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                                                                                                                                                                                                                                                                                                       let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                                                                                                                                                                                                                                                                                                           // if responseData is not null...
                                                                                                                                                                                                                                                                                                                                           if let data = responseData{

                                                                                                                                                                                                                                                                                                                                               // execute in UI thread
                                                                                                                                                                                                                                                                                                                                               DispatchQueue.main.async(execute: { () -> Void in
                                                                                                                                                                                                                                                                                                                                                   //let tmpImg = UIImage(data: data)
                                                                                                                                                                                                                                                                                                                                                   //Store image to local path
                                                                                                                                                                                                                                                                                                                                                   //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: "")
                                                                                                                                                                                                                                                                                                                                                   //let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                                                                   let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                                                                                                                                                                                                                                                                                                   let imageId = arrReadselVideoPath.last
                                                                                                                                                                                                                                                                                                                                                   let arrReadimageId = imageId?.components(separatedBy: ".")

                                                                                                                                                                                                                                                                                                                                                   // _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                                 self.appDelegate().saveImageToLocalWithName(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                                   // self.funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageTo, isScrollToBottom: false)

                                                                                                                                                                                                                                                                                                                                                 if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                  else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                      //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                      let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                      NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                  }                                                                                               else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                   /*ALAssetsLibrary().writeImage(toSavedPhotosAlbum: tmpImg?.cgImage!, orientation: ALAssetOrientation(rawValue: (tmpImg?.imageOrientation.rawValue)!)!) { (path, error) in
                                                                                                                                                                                                                                                                                                                                                    print(path ?? "")
                                                                                                                                                                                                                                                                                                                                                    let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                    //print(asset)
                                                                                                                                                                                                                                                                                                                                                    //Write code to save asset local id to previously prepared dat
                                                                                                                                                                                                                                                                                                                                                    //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier)

                                                                                                                                                                                                                                                                                                                                                    self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: asset.localIdentifier, recReadUserJid: messageFromTrim!)

                                                                                                                                                                                                                                                                                                                                                    if(self.isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                    //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    else if (self.isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                    }

                                                                                                                                                                                                                                                                                                                                                    //End prepare chat data
                                                                                                                                                                                                                                                                                                                                               }*/
                                                                                                                                                                                                                                                                                                                                           })
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                           else
                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                               //Error
                                                                                                                                                                                                                                                                                                                                               //  print(error ?? "Error")
                                                                                                                                                                                                                                                                                                                                               // self.funGetSetLocalChats(messageId: messageId, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)

                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                       }

                                                                                                                                                                                                                                                                                                                                       // Run task
                                                                                                                                                                                                                                                                                                                                       task.resume()
                                                                                                                                                                                                                                                                                                                                       //End Code to fetch media from live URL

                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                               } catch let error as NSError {
                                                                                                                                                                                                                                                                                                                                   //print(error)
                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                           //  }// Else of this we have to put here groupchat/banterroom and userupdates
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                                                                                                                         if (self.appDelegate().isOnChatView){
                                                                                                                                                                                                                                                                                                                               let notificationName = Notification.Name("chatHistoryFail")
                                                                                                                                                                                                                                                                                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                   else
                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                       // let messageType = message?.attributeStringValue(forName: "type")
                                                                                                                                                                                                                                                                                                                       //if(messageType == "chat") //This is single one to one chat
                                                                                                                                                                                                                                                                                                                       //{
                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                       if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                           do {
                                                                                                                                                                                                                                                                                                                               let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                               let recMessageType: String = (jsonDataMessage?.value(forKey: "type") as? String)!
                                                                                                                                                                                                                                                                                                                               var messageSubType :String = ""
                                                                                                                                                                                                                                                                                                                               if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                   messageSubType = sub_type as! String
                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                               let recBanterNickName: String = ""//(jsonDataMessage?.value(forKey: "banternickname") as? String)!
                                                                                                                                                                                                                                                                                                                               if(recMessageType == "text")
                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                   let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                                                                                                                                                                                                                                                                                                   let recMessageTime = jsonDataMessage?.value(forKey: "time")

                                                                                                                                                                                                                                                                                                                                   let messageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                                                   let messageTo = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                                   let messageFrom = chathistory.value(forKey: "messagefrom") as! String

                                                                                                                                                                                                                                                                                                                                   let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                   //let recmySupportTeam = jsonDataMessage?.value(forKey: "supportteam") as! Int64
                                                                                                                                                                   //let isJoined: Bool = sender.isJoined

                                                                                                                                                                                                                                                                                                                                   /*if #available(iOS 10.0, *) {
                                                                                                                                                                                                                                                                                                                                    let content = UNMutableNotificationContent()
                                                                                                                                                                                                                                                                                                                                    content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                                                                                                                                                                                                                                                                                                    content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                                                                                                                                                                                                                                                                                                    arguments: nil)
                                                                                                                                                                                                                                                                                                                                    content.sound = UNNotificationSound.default()
                                                                                                                                                                                                                                                                                                                                    let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                                                                                                                                                                                                                                                                                                    }*/

                                                                                                                                                                                                                                                                                                                                   if(outgoing){
                                                                                                                                                                                                                                                                                                                                     self.appDelegate().prepareMessageForServerOut(messageTo, messageContent: recMessageContent, chatType: recRoomType, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId, chatStatus: "sent", newBanterNickName: recBanterNickName,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   else{
                                                                                                                                                                                                                                                                                                                                     self.appDelegate().prepareMessageForServerIn(messageFrom, messageContent: recMessageContent, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", fileLocalId: "", fromUser: messageTo, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   //Code to prepare data before send to server
                                                                                                                                                                                                                                                                                                                                   //We have recevied message from user so he will always To for me
                                                                                                                                                                                                                                                                                                                                   //self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                 if (self.appDelegate().isOnChatView && (messageFrom == self.appDelegate().toUserJID))
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       //self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                                                                                                                                                                                                                                                                                                     self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "read", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                   }

                                                                                                                                                                                                                                                                                                                                   let notificationName = Notification.Name("MessageReceivedFromhistory")
                                                                                                                                                                                                                                                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                 if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                  else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                      //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                      let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                      NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                  }                                                                                 else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   //End

                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                               else if(recMessageType == "image")
                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                   let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                                                                                                                                                                                                                                                                                                   let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                                                                                                                                                                                                                                                                                                let messageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                                                   let messageTo = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                                   let messageFrom = chathistory.value(forKey: "messagefrom") as! String
                                                                                                                                                                                                                                                                                                                               let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                   //let recmySupportTeam = jsonDataMessage?.value(forKey: "supportteam") as! Int64
                                                                                                                                                                                                                                                                                                                               //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                        /*if #available(iOS 10.0, *) {
                                                                                                                                                                                                                                                                                                                                    let content = UNMutableNotificationContent()
                                                                                                                                                                                                                                                                                                                                    content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                                                                                                                                                                                                                                                                                                    content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                                                                                                                                                                                                                                                                                                    arguments: nil)
                                                                                                                                                                                                                                                                                                                                    content.sound = UNNotificationSound.default()
                                                                                                                                                                                                                                                                                                                                    let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                                                                                                                                                                                                                                                                                                    }*/
                                                                                                                                                                                                                                                                                                                        //var msgDict = [String: AnyObject]()
                                                                                                                                                                                                                                                                                                                                   //var badgeCounts: Int = 0
                                                                                                                                                                                                                                                                                                                                   let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                                                                                                                                                                                                                                                                                                   let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                                                                                                                                                                                                                                                                                                   // let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                                   //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                   //print(messageTo ?? "")
                                                                                                                                                                                                                                                                                                                                   //print(messageFromTrim ?? "")
                                                                                                                                                                                                                                                                                                                                   //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                   //msgDict["toUserMobile"] = "+919826615203"
                                                                                                                                                                                                                                                                                                                                   let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                                                                                                                                                                                                                                                                                               //Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                                   let url = NSURL(string: recThumbLink)!
                                                                                                                                                                                                                                                                                                                                                                   //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                   //let mysupportteam: Int = (jsonDataMessage?.value(forKey: "supportteam") as? Int)!
                                                                                                                                                                                                                                                                                                                                   var mysupportteam: Int64 = 0
                                                                                                                                                                                                                                                                                                                                   //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                   if(recRoomType == "banter" || recRoomType == "teambr"){
                                                                                                                                                                                                                                                                                                                                       mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                           //Code to prepare data before send to server
                                                                                                                                                                                                                                                                                                                                   if(outgoing){
                                                                                                                                                                                                                                                                                                                                     self.appDelegate().prepareMessageForServerOut(messageTo, messageContent: recMessageContent, chatType: recRoomType, messageType: "image", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", caption: "",thumbLink:recThumbLink, fromUser: messageFrom, newBanterNickName: "newBanterNickName", mySupportedTeam: mysupportteam,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                     self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "download", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   else{
                                                                                                                                                                                                                                                                                                                                     self.appDelegate().prepareMessageForServerIn(messageFrom, messageContent: recMessageContent, messageType: "image", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName,  msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                     if (self.appDelegate().isOnChatView && (messageFrom == self.appDelegate().toUserJID))
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           // self.funSendGroupMessageReceived(messageTo: messageFrom, messageFrom: messageTo, messageId: messageId)
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                    //We have recevied message from user so he will always To for me
                                                                                                                                                                                                                                                                                                                                   // self.funSendGroupMessageDelivery(messageTo: messageFrom, messageFrom: messageTo, messageId: messageId)
                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("MessageReceivedFromhistory")
                                                                                                                                                                                                                                                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                         if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                           else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                               //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                               let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                   else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   //End
                                                                                                                                                                                                                                                                                                                             // Download task:
                                                                                                                                                                                                                                                                                                                                   // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                                                                                                                                                                                                                                                                                                   let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                                                                                                                                                                                                                                                                                                       // if responseData is not null...
                                                                                                                                                                                                                                                                                                                                       if let data = responseData{
                                                                                                                                                                                                                                                                                                                                                                         // execute in UI thread
                                                                                                                                                                                                                                                                                                                                           DispatchQueue.main.async(execute: { () -> Void in
                                                                                                                                                                                                                                                                                                                                               //let tmpImg = UIImage(data: data)
                                                                                                                                                                                                                                                                                                                                               //Store image to local path
                                                                                                                                                                                                                                                                                                                                               //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: "")
                                                                                                                                                                                                                                                                                                                                               //let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                                                               let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                                                                                                                                                                                                                                                                                               let imageId = arrReadselVideoPath.last
                                                                                                                                                                                                                                                                                                                                               let arrReadimageId = imageId?.components(separatedBy: ".")
                                                                                                                                                                                                                                                                                                                                    // _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                             self.appDelegate().saveImageToLocalWithName(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                               // self.funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                  if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                   //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                   let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                                   else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                                                                                                               //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                                                                                               let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                                                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                               else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                   let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                                               /*ALAssetsLibrary().writeImage(toSavedPhotosAlbum: tmpImg?.cgImage!, orientation: ALAssetOrientation(rawValue: (tmpImg?.imageOrientation.rawValue)!)!) { (path, error) in
                                                                                                                                                                                                                                                                                                                                                print(path ?? "")
                                                                                                                                                                                                                                                                                                                                                let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                                                                                                                                                                                                                                                                                                                                      //print(asset)
                                                                                                                                                                                                                                                                                                                                                //Write code to save asset local id to previously prepared dat
                                                                                                                                                                                                                                                                                                                                                //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier)
                                                                                                                                                                                                                                                                                                                                 self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: asset.localIdentifier, recReadUserJid: messageFromTrim!)
                                                                                                                                                                                                                                                                                                                                    if(self.isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                else if (self.isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                       //End prepare chat data
                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                                                                                                }*/
                                                                                                                                                                                                                                                                                                                         })
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Error
                                                                                                                                                                                                                                                                                                                                           //  print(error ?? "Error")
                                                                                                                                                                                                                                                                                                                                           // self.funGetSetLocalChats(messageId: messageId, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                           // Run task
                                                                                                                                                                                                                                                                                                                                   task.resume()
                                                                                                                                                                                                                                                                                                                                   //End Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                                               else if(recMessageType == "video")
                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                   let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                                                                                                                                                                                                                                                                                                   let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                                                                                                                                                                                                                                                                                     let messageId = chathistory.value(forKey: "messageid") as! String
                                                                                                                                                                                                                                                                                                                                   let messageTo = chathistory.value(forKey: "messageto") as! String
                                                                                                                                                                                                                                                                                                                                   let messageFrom = chathistory.value(forKey: "messagefrom") as! String
                                                                                                                                                                                                                                                                                                                         //var msgDict = [String: AnyObject]()
                                                                                                                                                                                                                                                                                                                                   //var badgeCounts: Int = 0
                                                                                                                                                                                                                                                                                                                                   let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                                                                                                                                                                                                                                                                                                   let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                                                                                                                                                                                                                                                                                                   let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                                                                                                                                                                                                                                                                                         let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                                                                                                                                                                                                                                                                                                                             //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                   //print(messageTo ?? "")
                                                                                                                                                                                                                                                                                                                                   //print(messageFromTrim ?? "")
                                                                                                                                                                                                                                                                                                                                   //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                                                                                                                                                                                                                                                                                                   //msgDict["toUserMobile"] = "+919826615203"
                                                                                                                                                                                                                                                                                                                                   var mysupportteam: Int64 = 0
                                                                                                                                                                                                                                                                                                                                   //let isJoined: Bool = sender.isJoined
                                                                                                                                                                                                                                                                                                                                   if(recRoomType == "banter" || recRoomType == "teambr"){
                                                                                                                                                                                                                                                                                                                                       mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                       //Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                                   let url = NSURL(string: recThumbLink)!
                                                                                                                                                                                                                                                                                                                                   if(outgoing){
                                                                                                                                                                                                                                                                                                                                     self.appDelegate().prepareMessageForServerOut(messageTo, messageContent: recMessageContent, chatType: recRoomType, messageType: "video", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", caption: "",thumbLink:recThumbLink, fromUser: messageFrom, newBanterNickName: "newBanterNickName", mySupportedTeam: mysupportteam,Cmd:"getchathistory", messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                     self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "download", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                                                   else{
                                                                                                                                                                                                                                                                                                                                     self.appDelegate().prepareMessageForServerIn(messageFrom, messageContent: recMessageContent, messageType: "video", messageTime: recMessageTime as! Int64, messageId: messageId, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName,  msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam,Cmd:"getchathistory",messageSubType:messageSubType)
                                                                                                                                                                                                                                                                                                                                     if (self.appDelegate().isOnChatView && (messageFrom == self.appDelegate().toUserJID))
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           // self.funSendGroupMessageReceived(messageTo: messageFrom, messageFrom: messageTo, messageId: messageId)
                                                                                                                                                                                                                                                                                                                                         self.appDelegate().funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                          let notificationName = Notification.Name("MessageReceivedFromhistory")
                                                                                                                                                                                                                                                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                 if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                   else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                                                         //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                         let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                         NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                     }

                                                                                                                                                                                                                                                                                                                                 else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   //End
                                                                                                                                                                                                                                                                                                                        // Download task:
                                                                                                                                                                                                                                                                                                                                   // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                                                                                                                                                                                                                                                                                                   let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                                                                                                                                                                                                                                                                                                       // if responseData is not null...
                                                                                                                                                                                                                                                                                                                                       if let data = responseData{
                                                                                                                                                                                                                                                                                                                                   // execute in UI thread
                                                                                                                                                                                                                                                                                                                                           DispatchQueue.main.async(execute: { () -> Void in
                                                                                                                                                                                                                                                                                                                                               //let tmpImg = UIImage(data: data)
                                                                                                                                                                                                                                                                                                                                               //Store image to local path
                                                                                                                                                                                                                                                                                                                                               //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: "")
                                                                                                                                                                                                                                                                                                                                               //let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                                                               let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                                                                                                                                                                                                                                                                                               let imageId = arrReadselVideoPath.last
                                                                                                                                                                                                                                                                                                                                               let arrReadimageId = imageId?.components(separatedBy: ".")
                                                                                                                                                                                                                                                                                                                                      //  _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                             self.appDelegate().saveImageToLocalWithName(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                                                                                                                                                                                                                                                                                               // self.funGetSetLocalChats(messageId: messageId, chatStatus: "failed", recReadUserJid: messageTo, isScrollToBottom: false)
                                                                                                                                                                                                                                                                                                                                   if(self.appDelegate().isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                   //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                   let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                                       else if(self.appDelegate().isOnBantersView == true && recRoomType == "teambr")
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                             else if (self.appDelegate().isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                   let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                                               /*ALAssetsLibrary().writeImage(toSavedPhotosAlbum: tmpImg?.cgImage!, orientation: ALAssetOrientation(rawValue: (tmpImg?.imageOrientation.rawValue)!)!) { (path, error) in
                                                                                                                                                                                                                                                                                                                                                print(path ?? "")
                                                                                                                                                                                                                                                                                                                                                let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                                                                                                                                                                                                                                                                                                                                 //print(asset)
                                                                                                                                                                                                                                                                                                                                                //Write code to save asset local id to previously prepared dat
                                                                                                                                                                                                                                                                                                                                                //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier)
                                                                                                                                                                                                                                                                                                                                self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: asset.localIdentifier, recReadUserJid: messageFromTrim!)
                                                                                                                                                                                                                                                                                                                                       if(self.isOnBantersView == true && recRoomType == "banter")
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                else if (self.isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                                                                                                //End prepare chat data
                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                                                                                                }*/
                                                                                                                                                                                                                                                                                                                              })
                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                       else
                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                           //Error
                                                                                                                                                                                                                                                                                                                                           //  print(error ?? "Error")
                                                                                                                                                                                                                                                                                                                                           // self.funGetSetLocalChats(messageId: messageId, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFrom, isScrollToBottom: false)

                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                   // Run task
                                                                                                                                                                                                                                                                                                                                   task.resume()
                                                                                                                                                                                                                                                                                                                                   //End Code to fetch media from live URL
                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                           } catch let error as NSError {
                                                                                                                                                                                                                                                                                                                               //print(error)
                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                     // }
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                       // let notificationName = Notification.Name("messageInReceivedFromServer")
                                                                                                                                                                                                                                                                                                       // NotificationCenter.default.post(name: notificationName, object: nil)

                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                   DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                                                                                                                                                                                                                                                                                                     self.appDelegate().isApplyHistory = true
                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                   LoadingIndicatorView.hide()
                                                                                                                                                                                                                                                                                                   //print(jsonData?.value(forKey: "responseData"))
                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                  else{
                                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("chatHistoryFail")
                                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                      //Show Error
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                               case .failure(let error):
                                                                                                                        let notificationName = Notification.Name("chatHistoryFail")
                                                                                                                         NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                        debugPrint(error)
                                                                                                                        break
                                                                                                                                                                   // error handling
                                                                                                                                                    
                                                                                                                                                               }//print(response.result.value)
                                                                 
                                                                                                               }
              } catch {
                  print(error.localizedDescription)
              }

        
        }
    }
    }

    //Number of sections count in table view
    func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 1
        
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return self.appDelegate().arrUserChat.count
        //return (appDelegate().allAppContacts.count)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell:ChatCell = storyTableView!.dequeueReusableCell(withIdentifier: cellReuseIdentifier) as! ChatCell
        if(!isMultiSelection && !isMultiSelectionbyForward){
            if(appDelegate().isgetHistory){
                if(appDelegate().isApplyHistory){
                    if(indexPath.row == 0){
                        /*if(appDelegate().curRoomType == "group" && appDelegate().isJoined == "yes"){
                         funGetSetChat()
                         }
                         else{
                         funGetSetChat()
                         }*/
                        historyIndex = 1
                        funGetSetChat()
                    }
                }
            }
        }
       

        //Code for banter room only
        /*if(self.appDelegate().chatType == "banter")
        {
            let roomJID = XMPPJID(string: self.appDelegate().toUserJID)
            let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
            
            let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
            
            room.activate(self.appDelegate().xmppStream)
            
            room.addDelegate(self, delegateQueue: DispatchQueue.main)
            
            if(room.isJoined)
            {
                print("Joined")
            }
            else
            {
                print("Not Joined")
            }
            //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
            
            //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
            //history.addAttribute(withName: "maxchars", stringValue: "0")
            
            //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
            //history.addAttribute(withName: "maxchars", stringValue: "0")
            
            //room.join(usingNickname: myJID, history: history)
        }*/
        
        //let chatBubbleL: ChatBubbleLeft = ChatBubbleLeft(frame: CGRect(x: 0, y: 0, width: 250, height: 100))
        //cell.chatBubble = chatBubbleL
        //chatBubbleL.chatMessage?.text = "This message is only for test2. This message is only for test. This message is only for test."
        
        //let chatBubbleL: ChatBubbleLeft = ChatBubbleLeft(baseView: cell.chatBubble!, text: "Yay! Bark! Yay! Bark!", fontSize: 16.0)
        //cell.chatBubble?.addSubview(chatBubbleL)
        
        /*let foo = UIImage(named: "bubble_out") // 328 x 328
        let fooWithInsets = foo?.resizableImageWithStretchingProperties(
            X: 0.48, width: 0, Y: 0.45, height: 0) ?? UIImage()
        
        let imageView = UIImageView(image: fooWithInsets)
        imageView.frame = CGRect(x: 0, y: 0, width: 200, height: 100)
        
        cell.chatBubble?.addSubview(imageView)*/
        cell.chatBubble?.contentMode = .center
         if(appDelegate().arrUserChat.count>0){
        
        let message: NSDictionary = self.appDelegate().arrUserChat[indexPath.row] as! NSDictionary
        
        let isIncoming: String = message.value(forKey: "isIncoming") as! String
        let userName: String = message.value(forKey: "userName") as! String
        
       // print("\(indexPath.row) \(message.value(forKey: "status") as! String)")
        var msgtime = ""
        if let mili = message.value(forKey: "time")
        {
            let mili: Double = Double(truncating: (mili as AnyObject) as! NSNumber)
            let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
            let dateFormatter = DateFormatter()
            //dateFormatter.dateFormat = "dd MMMM yyyy hh:mm a"
            //dateFormatter.dateStyle = .short
            dateFormatter.dateFormat = "dd MMM yy HH:mm"
            let now = Date()
            let birthday: Date = myMilliseconds.dateFull as Date
            let calendar = Calendar.current
            
            let ageComponents = calendar.dateComponents([.hour], from: birthday, to: now)
            let timebefore = Int64(ageComponents.hour!)
            if(timebefore > 24){
                msgtime = dateFormatter.string(from: myMilliseconds.dateFull as Date)
            }
            else{
                 dateFormatter.dateFormat = "HH:mm"
                msgtime = dateFormatter.string(from: myMilliseconds.dateFull as Date)
            }
            
            
        }
        
        if(isIncoming == "YES")
        {
           
            let messageType = message.value(forKey: "messageType") as! String
            let caption = message.value(forKey: "caption") as! String
            let chatStatus = message.value(forKey: "status") as! String
             let mysupportteam = message.value(forKey: "supportteam") as! Int
            var messageSubType = ""
            if let isOppTeam = message.value(forKey: "sub_type")
            {
                if(isOppTeam != nil)
                {
                    messageSubType = isOppTeam as! String
                }
            }
            if(messageType == "image")
            {
                //let imagePath = message.value(forKey: "filePath") as! String
                //let imageLogo = appDelegate().loadImageFromLocalPath(filePath: "file:///var/mobile/Media/DCIM/101APPLE/IMG_1772.JPG")
                //let path = URL(string: imagePath); //NSURL(string: imagePath)! as URL
                //let asset = PHAssetForFileURL(url: NSURL(string: imagePath)!)
                //let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                //let asset = PHAssetForFileURL(url: NSURL(string: imagePath)!)
                //var imageLogo = UIImage()
                
                //let imageId = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)
              //  if(chatStatus != "failed")
               // {
                    let thumbLink = message.value(forKey: "thumb") as! String//self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)
                    //let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 17.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus)
                    let arrReadselVideoPath = thumbLink.components(separatedBy: "/")
                    let imageId = arrReadselVideoPath.last
                    let arrReadimageId = imageId?.components(separatedBy: ".")
                    let fileManager = FileManager.default
                    let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( arrReadimageId![0] + ".png")
                    //try fileManager.removeItem(atPath: imageId)
                    // Check if file exists
                    if fileManager.fileExists(atPath: paths) {
                       // print("file")
                        var imageLogo = UIImage(contentsOfFile: paths)//appDelegate().loadImageFromLocalPath(filePath: paths)
                        //let imageLogo = getAssetThumbnail(asset: asset, size: 200.0)imageLogo: imageLogo!
                        
                        imageLogo = imageLogo?.square()
                      
                        let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo!, caption: caption, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                        cell.chatBubble?.addSubview(chatBubbleL)
                        storyTableView?.rowHeight = chatBubbleL.frame.height
                      
                       
                        //print(chatBubbleL.frame.height)
                        if(chatStatus == "failed")
                        {
                            chatBubbleL.forward.isHidden = false
                            chatBubbleL.forward.setImage(UIImage(named: "Dowload"), for: UIControl.State.normal)
                            chatBubbleL.forward.tag = indexPath.row
                            chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                        }
                    }
                    else{
                        let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime,caption: caption, thumbLink: thumbLink, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                      
                        cell.chatBubble?.addSubview(chatBubbleL)
                          storyTableView?.rowHeight = chatBubbleL.frame.height
                        if(chatStatus == "failed")
                        {
                            chatBubbleL.forward.isHidden = false
                            chatBubbleL.forward.setImage(UIImage(named: "Dowload"), for: UIControl.State.normal)
                            chatBubbleL.forward.tag = indexPath.row
                            chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                        }
                    }
                   /* var imageLogo = appDelegate().loadImageFromLocalPath(filePath: imageId!)
                    //let imageLogo = getAssetThumbnail(asset: asset, size: 200.0)
                    imageLogo = imageLogo?.square()
                    
                    let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo!, caption: caption, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection)
                    cell.chatBubble?.removeAllSubviews()
                    cell.chatBubble?.addSubview(chatBubbleL)
                    storyTableView?.rowHeight = chatBubbleL.frame.height*/
                   // chatBubbleL.forward.isHidden = false
                    //chatBubbleL.forward.setImage(UIImage(named: "flag"), for: UIControlState.normal)
                   // chatBubbleL.forward.tag = indexPath.row
                   // chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.sendEmailButtonTapped(_:)), for: UIControlEvents.touchUpInside)

                    //chatBubbleL.forward.isHidden = false
                    //chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.openContactsIn(_:)), for: UIControlEvents.touchUpInside)
                    

                  /* }
             else
                {
                  let thumbLink = message.value(forKey: "thumb") as! String//self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)
                    //let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 17.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus)
                    let arrReadselVideoPath = thumbLink.components(separatedBy: "/")
                    let imageId = arrReadselVideoPath.last
                    let arrReadimageId = imageId?.components(separatedBy: ".")
                    let fileManager = FileManager.default
                    let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( arrReadimageId![0] + ".png")
                    //try fileManager.removeItem(atPath: imageId)
                    // Check if file exists
                    if fileManager.fileExists(atPath: paths) {
                    print("file")
                        var imageLogo = UIImage(contentsOfFile: paths)//appDelegate().loadImageFromLocalPath(filePath: paths)
                        //let imageLogo = getAssetThumbnail(asset: asset, size: 200.0)imageLogo: imageLogo!
                        imageLogo = imageLogo?.square()
                         let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo!, caption: caption, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection)
                        cell.chatBubble?.removeAllSubviews()
                        cell.chatBubble?.addSubview(chatBubbleL)
                        storyTableView?.rowHeight = chatBubbleL.frame.height
                        
                        if(chatStatus == "failed")
                        {
                            chatBubbleL.forward.isHidden = false
                            chatBubbleL.forward.setImage(UIImage(named: "failed"), for: UIControlState.normal)
                            chatBubbleL.forward.tag = indexPath.row
                            chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControlEvents.touchUpInside)
                        }
                        
                    }
                    else{
                        let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection)
                        cell.chatBubble?.removeAllSubviews()
                        cell.chatBubble?.addSubview(chatBubbleL)
                        storyTableView?.rowHeight = chatBubbleL.frame.height
                        
                        if(chatStatus == "failed")
                        {
                            chatBubbleL.forward.isHidden = false
                            chatBubbleL.forward.setImage(UIImage(named: "failed"), for: UIControlState.normal)
                            chatBubbleL.forward.tag = indexPath.row
                            chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControlEvents.touchUpInside)
                        }
                    }
                    
                   
                    
                    
                }*/
                
            }
            else if(messageType == "video")
            {
                let thumbLink = message.value(forKey: "thumb") as! String//self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)
                //let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 17.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus)
                let arrReadselVideoPath = thumbLink.components(separatedBy: "/")
                let imageId = arrReadselVideoPath.last
                let arrReadimageId = imageId?.components(separatedBy: ".")
                let fileManager = FileManager.default
                let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( arrReadimageId![0] + ".png")
                //try fileManager.removeItem(atPath: imageId)
                // Check if file exists
                if fileManager.fileExists(atPath: paths) {
                    //print("file")
                    var imageLogo = UIImage(contentsOfFile: paths)
                    let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, videoLogo: imageLogo!, caption: caption, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                    cell.chatBubble?.removeAllSubviews()
                    
                    cell.chatBubble?.addSubview(chatBubbleL)
                    self.storyTableView?.rowHeight = chatBubbleL.frame.height
                    //print(chatBubbleL.frame.height)
                  
                    
                    if(chatStatus == "failed")
                    {
                        chatBubbleL.forward.isHidden = false
                        chatBubbleL.forward.setImage(UIImage(named: "Dowload"), for: UIControl.State.normal)
                        chatBubbleL.forward.tag = indexPath.row
                        chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                    }
                }
                else{
                    let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                    cell.chatBubble?.removeAllSubviews()
                    
                    
                    cell.chatBubble?.addSubview(chatBubbleL)
                    storyTableView?.rowHeight = chatBubbleL.frame.height
                    if(chatStatus == "failed")
                    {
                        chatBubbleL.forward.isHidden = false
                        chatBubbleL.forward.setImage(UIImage(named: "Dowload"), for: UIControl.State.normal)
                        chatBubbleL.forward.tag = indexPath.row
                        chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                    }
                }
               /* let videoPath = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)

                //var videoLogo = UIImage()
                
                if(!(videoPath?.isEmpty)!)
                {
                    
                    let videoLogo = self.getVideoThumbnailImage(forUrl: NSURL(string: videoPath!)! as URL)!
                    
                    if(videoLogo.imageAsset != nil)
                    {
                        let videoLogoSquare = videoLogo.square()?.resized(toWidth: 100.0)
                        
                        let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, videoLogo: videoLogoSquare!, caption: caption, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection)
                        cell.chatBubble?.removeAllSubviews()
                        cell.chatBubble?.addSubview(chatBubbleL)
                        self.storyTableView?.rowHeight = chatBubbleL.frame.height
                       // chatBubbleL.forward.isHidden = false
                       // chatBubbleL.forward.setImage(UIImage(named: "flag"), for: UIControlState.normal)
                       // chatBubbleL.forward.tag = indexPath.row
                        //chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.sendEmailButtonTapped(_:)), for: UIControlEvents.touchUpInside)
                        //chatBubbleL.forward.isHidden = false
                        //chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.openContactsIn(_:)), for: UIControlEvents.touchUpInside)
                    }
                    else
                    {
                        let thumbLink = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)
                        
                        
                        //let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 17.0, messageType: messageType, messageTime: msgtime, videoLogo: videoLogo, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus)
                        let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, caption: caption, thumbLink: thumbLink!, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection)
                        cell.chatBubble?.removeAllSubviews()
                        cell.chatBubble?.addSubview(chatBubbleL)
                        self.storyTableView?.rowHeight = chatBubbleL.frame.height
                    }
                    
                    
                    
                }
                else
                {
                    let thumbLink = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)
                    //let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 17.0, messageType: messageType, messageTime: msgtime, videoLogo: videoLogo, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus)
                    let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, caption: caption, thumbLink: thumbLink!, chatStatus: chatStatus, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection)
                    cell.chatBubble?.removeAllSubviews()
                    cell.chatBubble?.addSubview(chatBubbleL)
                    storyTableView?.rowHeight = chatBubbleL.frame.height
                    
                    if(chatStatus == "failed")
                    {
                        chatBubbleL.forward.isHidden = false
                        chatBubbleL.forward.setImage(UIImage(named: "failed"), for: UIControlState.normal)
                        chatBubbleL.forward.tag = indexPath.row
                        chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControlEvents.touchUpInside)
                    }
                }
                */
            }
            else if(messageType == "header")
            {
                let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 13.0, messageType: messageType, messageTime: msgtime, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                cell.chatBubble?.removeAllSubviews()
                cell.chatBubble?.addSubview(chatBubbleL)
                storyTableView?.rowHeight = chatBubbleL.frame.height
            }
            else
            {
                let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                cell.chatBubble?.removeAllSubviews()
                cell.chatBubble?.addSubview(chatBubbleL)
                storyTableView?.rowHeight = chatBubbleL.frame.height
            }
        }
        else
        {
            let messageType = message.value(forKey: "messageType") as! String
            let caption = message.value(forKey: "caption") as! String
            let chatStatus = message.value(forKey: "status") as! String
            let mysupportteam = message.value(forKey: "supportteam") as! Int
            var messageSubType = ""
            if let isOppTeam = message.value(forKey: "sub_type")
            {
            if(isOppTeam != nil)
                {
                    messageSubType = isOppTeam as! String
                }
            }
            if(messageType == "image")
            {
                //let imagePath = message.value(forKey: "filePath") as! String
                //let imageLogo = appDelegate().loadImageFromLocalPath(filePath: "file:///var/mobile/Media/DCIM/101APPLE/IMG_1772.JPG")
                //let path = URL(string: imagePath); //NSURL(string: imagePath)! as URL
                //let asset = PHAssetForFileURL(url: NSURL(string: imagePath)!)
                //let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                //let asset = PHAssetForFileURL(url: NSURL(string: imagePath)!)
                let imageId = message.value(forKey: "fileLocalId") as! String
                let thumbLink = message.value(forKey: "thumb") as! String
                
                if let asset = PHAsset.fetchAssets(withLocalIdentifiers: [imageId], options: nil).firstObject
                {
                    let imageLogo = getAssetThumbnail(asset: asset, size: 320.0)//100.0
                    //let imageLogo = getVideoThumbnailImage(forUrl: NSURL(string: imagePath)! as URL)
                    
                    let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                    cell.chatBubble?.removeAllSubviews()
                    
                    cell.chatBubble?.addSubview(chatBubbleR)
                    storyTableView?.rowHeight = chatBubbleR.frame.height
                    if(chatStatus == "failed")
                    {
                        chatBubbleR.forward.isHidden = false
                        chatBubbleR.forward.setImage(UIImage(named: "uploade"), for: UIControl.State.normal)
                        chatBubbleR.forward.tag = indexPath.row
                        chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                    }
                    else
                    {
                        if(!thumbLink.isEmpty){
                            //chatBubbleR.forward.isHidden = false
                            //chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.openContactsOut(_:)), for: UIControlEvents.touchUpInside)
                        }
                    }
                    
                }
                else{
                    
                    let filePath = message.value(forKey: "filePath") as! String
                    if(!filePath.isEmpty)
                    {
                        let imageId = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)
                        var imageLogo = appDelegate().loadImageFromLocalPath(filePath: imageId!)
                        //let imageLogo = getAssetThumbnail(asset: asset, size: 200.0)
                        imageLogo = imageLogo?.square()
                        let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo!, caption: caption, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                        
                        cell.chatBubble?.addSubview(chatBubbleR)
                        storyTableView?.rowHeight = chatBubbleR.frame.height
                        if(chatStatus == "failed")
                        {
                            chatBubbleR.forward.isHidden = false
                            chatBubbleR.forward.setImage(UIImage(named: "uploade"), for: UIControl.State.normal)
                            chatBubbleR.forward.tag = indexPath.row
                            chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                        }
                        else
                        {
                            if(!thumbLink.isEmpty){
                                //chatBubbleR.forward.isHidden = false
                                //chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.openContactsOut(_:)), for: UIControlEvents.touchUpInside)
                            }
                        }
                        
                    }
                    else{
                        /*let thumbLink = message.value(forKey: "thumb") as! String//self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)
                         //let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 17.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus)
                         let arrReadselVideoPath = thumbLink.components(separatedBy: "/")
                         let imageId = arrReadselVideoPath.last
                         let arrReadimageId = imageId?.components(separatedBy: ".")
                         let fileManager = FileManager.default
                         let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( arrReadimageId![0] + ".png")
                         //try fileManager.removeItem(atPath: imageId)
                         // Check if file exists
                         if fileManager.fileExists(atPath: paths) {
                         // print("file")
                         var imageLogo = UIImage(contentsOfFile: paths)//appDelegate().loadImageFromLocalPath(filePath: paths)
                         //let imageLogo = getAssetThumbnail(asset: asset, size: 200.0)imageLogo: imageLogo!
                         imageLogo = imageLogo?.square()
                         let chatBubbleL: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, imageLogo: imageLogo!, caption: caption, chatStatus: chatStatus,mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection)
                         cell.chatBubble?.removeAllSubviews()
                         
                         cell.chatBubble?.addSubview(chatBubbleL)
                         storyTableView?.rowHeight = chatBubbleL.frame.height
                         //print(chatBubbleL.frame.height)
                         if(chatStatus == "failed" && chatStatus == "download")
                         {
                         chatBubbleL.forward.isHidden = false
                         chatBubbleL.forward.setImage(UIImage(named: "Dowload"), for: UIControlState.normal)
                         chatBubbleL.forward.tag = indexPath.row
                         chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControlEvents.touchUpInside)
                         }
                         }
                         else{*/
                        let chatBubbleL: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime,caption: caption, thumbLink: thumbLink, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType , mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                        
                        cell.chatBubble?.addSubview(chatBubbleL)
                        storyTableView?.rowHeight = chatBubbleL.frame.height
                        if(chatStatus == "failed" || chatStatus == "download")
                        {
                            chatBubbleL.forward.isHidden = false
                            chatBubbleL.forward.setImage(UIImage(named: "Dowload"), for: UIControl.State.normal)
                            chatBubbleL.forward.tag = indexPath.row
                            chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                        }
                        // }
                    }
                }
            }
            else if(messageType == "video"){
            let selMessageId = message.value(forKey: "fileLocalId") as! String
            var videoPath = ""
            videoPath = message.value(forKey: "filePath") as! String
            if(!videoPath.isEmpty)
            {
                
                if(selMessageId.isEmpty){
                    videoPath = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)!
                    
                    let thumbLink = message.value(forKey: "thumb") as! String
                    let thumbVideoPath =  self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)!
                     var imageLogo1 = appDelegate().loadImageFromLocalPath(filePath: thumbVideoPath)
                    if(thumbLink.contains("http://")){
                        let arrReadselVideoPath = thumbLink.components(separatedBy: "/")
                        let imageId = arrReadselVideoPath.last
                        let arrReadimageId = imageId?.components(separatedBy: ".")
                        let fileManager = FileManager.default
                      let  path = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( arrReadimageId![0] + ".png")
                        if fileManager.fileExists(atPath: path) {
                            
                         
                            //print("file")
                          // var imageLogo = appDelegate().loadImageFromLocalPath(filePath: thumbVideoPath)
                            let imageLogo = UIImage(contentsOfFile: path)
                            let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, videoLogo: imageLogo!, caption: caption, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                            cell.chatBubble?.removeAllSubviews()
                            
                            cell.chatBubble?.addSubview(chatBubbleR)
                            storyTableView?.rowHeight = chatBubbleR.frame.height
                            if(chatStatus == "failed")
                            {
                                chatBubbleR.forward.isHidden = false
                                chatBubbleR.forward.setImage(UIImage(named: "uploade"), for: UIControl.State.normal)
                                chatBubbleR.forward.tag = indexPath.row
                                chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                            }
                            if( chatStatus == "download")
                            {
                                chatBubbleR.forward.isHidden = false
                                chatBubbleR.forward.setImage(UIImage(named: "Dowload"), for: UIControl.State.normal)
                                chatBubbleR.forward.tag = indexPath.row
                                chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                            }
                            
                        }
                        else{
                            let chatBubbleL: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime,caption: caption, thumbLink: thumbLink, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType , mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                            cell.chatBubble?.removeAllSubviews()
                            
                            cell.chatBubble?.addSubview(chatBubbleL)
                            storyTableView?.rowHeight = chatBubbleL.frame.height
                            if(chatStatus == "failed")
                            {
                                chatBubbleL.forward.isHidden = false
                                chatBubbleL.forward.setImage(UIImage(named: "uploade"), for: UIControl.State.normal)
                                chatBubbleL.forward.tag = indexPath.row
                                chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                            }
                        }
                    }
                    else {
                        let videoLogo = appDelegate().loadImageFromLocalPath(filePath: thumbVideoPath)
                        if(videoLogo?.imageAsset != nil)
                        {
                            let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 100.0)
                            
                            let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, videoLogo: videoLogoSquare!, caption: caption, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                            cell.chatBubble?.removeAllSubviews()
                            
                            cell.chatBubble?.addSubview(chatBubbleR)
                            storyTableView?.rowHeight = chatBubbleR.frame.height
                            
                            
                            if(chatStatus == "failed")
                            {
                                chatBubbleR.forward.isHidden = false
                                chatBubbleR.forward.setImage(UIImage(named: "uploade"), for: UIControl.State.normal)
                                chatBubbleR.forward.tag = indexPath.row
                                chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                            }
                            else
                            {
                                if(!thumbLink.isEmpty){
                                    //chatBubbleR.forward.isHidden = false
                                    //chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.openContactsOut(_:)), for: UIControlEvents.touchUpInside)
                                }
                            }
                        }
                        else
                        {
                            let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row,isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                            cell.chatBubble?.removeAllSubviews()
                            
                            cell.chatBubble?.addSubview(chatBubbleR)
                            storyTableView?.rowHeight = chatBubbleR.frame.height
                        }
                    }
                    
                }
                else{
                    videoPath = message.value(forKey: "filePath") as! String
                    let videoLogo = getVideoThumbnailImage(forUrl: NSURL(string: videoPath)! as URL)
                    let thumbLink = message.value(forKey: "thumb") as! String
                    
                    //let filePath = message.value(forKey: "filePath") as! String
                    
                    if(videoLogo?.imageAsset != nil)
                    {
                        let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 100.0)
                        
                        let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, videoLogo: videoLogoSquare!, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                        
                        cell.chatBubble?.addSubview(chatBubbleR)
                        storyTableView?.rowHeight = chatBubbleR.frame.height
                        
                        // print(chatBubbleR.frame.height)
                        if(chatStatus == "failed")
                        {
                            chatBubbleR.forward.isHidden = false
                            chatBubbleR.forward.setImage(UIImage(named: "uploade"), for: UIControl.State.normal)
                            chatBubbleR.forward.tag = indexPath.row
                            chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                        }
                        else
                        {
                            if(!thumbLink.isEmpty){
                                //chatBubbleR.forward.isHidden = false
                                //chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.openContactsOut(_:)), for: UIControlEvents.touchUpInside)
                            }
                        }
                    }
                    else
                    {
                        let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row,isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                        
                        cell.chatBubble?.addSubview(chatBubbleR)
                        storyTableView?.rowHeight = chatBubbleR.frame.height
                    }
                }
                
            }
            else{
                let thumbLink = message.value(forKey: "thumb") as! String
                 var thumbVideoPath = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)!
                if(thumbLink.contains("http://")){
                    let arrReadselVideoPath = thumbLink.components(separatedBy: "/")
                    let imageId = arrReadselVideoPath.last
                    let arrReadimageId = imageId?.components(separatedBy: ".")
                    let fileManager = FileManager.default
                    thumbVideoPath = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( arrReadimageId![0] + ".png")
                    if fileManager.fileExists(atPath: thumbVideoPath) {
                        let imageLogo = UIImage(contentsOfFile: thumbVideoPath)
                        let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, videoLogo: imageLogo!, caption: caption, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                        
                        cell.chatBubble?.addSubview(chatBubbleR)
                        storyTableView?.rowHeight = chatBubbleR.frame.height
                        if(chatStatus == "failed" || chatStatus == "download")
                        {
                            chatBubbleR.forward.isHidden = false
                            chatBubbleR.forward.setImage(UIImage(named: "Dowload"), for: UIControl.State.normal)
                            chatBubbleR.forward.tag = indexPath.row
                            chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                        }
                    }
                    else{
                        let chatBubbleL: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime,caption: caption, thumbLink: thumbLink, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType , mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                        
                        cell.chatBubble?.addSubview(chatBubbleL)
                        storyTableView?.rowHeight = chatBubbleL.frame.height
                        if(chatStatus == "failed" || chatStatus == "download")
                        {
                            chatBubbleL.forward.isHidden = false
                            chatBubbleL.forward.setImage(UIImage(named: "Dowload"), for: UIControl.State.normal)
                            chatBubbleL.forward.tag = indexPath.row
                            chatBubbleL.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                        }
                    }
                        //print("file")
                }
                else{
                    let videoLogo = appDelegate().loadImageFromLocalPath(filePath: thumbVideoPath)
                    if(videoLogo?.imageAsset != nil)
                    {
                        let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 100.0)
                        
                        let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, videoLogo: videoLogoSquare!, caption: caption, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                        
                        cell.chatBubble?.addSubview(chatBubbleR)
                        storyTableView?.rowHeight = chatBubbleR.frame.height
                        
                        
                        if(chatStatus == "failed")
                        {
                            chatBubbleR.forward.isHidden = false
                            chatBubbleR.forward.setImage(UIImage(named: "uploade"), for: UIControl.State.normal)
                            chatBubbleR.forward.tag = indexPath.row
                            chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                        }
                        else
                        {
                            if(!thumbLink.isEmpty){
                                //chatBubbleR.forward.isHidden = false
                                //chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.openContactsOut(_:)), for: UIControlEvents.touchUpInside)
                            }
                        }
                    }
                    else
                    {
                        let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row,isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                        cell.chatBubble?.removeAllSubviews()
                        
                        cell.chatBubble?.addSubview(chatBubbleR)
                        storyTableView?.rowHeight = chatBubbleR.frame.height
                        if(chatStatus == "failed" || chatStatus == "download")
                        {
                            chatBubbleR.forward.isHidden = false
                            chatBubbleR.forward.setImage(UIImage(named: "Dowload"), for: UIControl.State.normal)
                            chatBubbleR.forward.tag = indexPath.row
                            chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControl.Event.touchUpInside)
                        }
                    }
                }
            }
            
            //let imageLogo = appDelegate().loadImageFromLocalPath(filePath: "file:///var/mobile/Media/DCIM/101APPLE/IMG_1772.JPG")
            //let path = URL(string: imagePath); //NSURL(string: imagePath)! as URL
            ////let asset = PHAssetForFileURL(url: NSURL(string: imagePath)!)
            //let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
            
            ////let imageLogo = getAssetThumbnail(asset: asset!, size: 100.0)
            /*   let videoLogo = getVideoThumbnailImage(forUrl: NSURL(string: videoPath)! as URL)
             
             if(videoLogo?.imageAsset != nil)
             {
             let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 100.0)
             
             let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, videoLogo: videoLogoSquare!, caption: caption, thumbLink: thumbLink, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection)
             cell.chatBubble?.removeAllSubviews()
             cell.chatBubble?.addSubview(chatBubbleR)
             storyTableView?.rowHeight = chatBubbleR.frame.height
             
             if(chatStatus == "failed")
             {
             chatBubbleR.forward.isHidden = false
             chatBubbleR.forward.setImage(UIImage(named: "failed"), for: UIControlState.normal)
             chatBubbleR.forward.tag = indexPath.row
             chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.resendMedia(_:)), for: UIControlEvents.touchUpInside)
             }
             else
             {
             if(!thumbLink.isEmpty){
             //chatBubbleR.forward.isHidden = false
             //chatBubbleR.forward.addTarget(self, action: #selector(ChatViewController.openContactsOut(_:)), for: UIControlEvents.touchUpInside)
             }
             }
             }
             else
             {
             let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row,isTableMutable: isMultiSelection)
             cell.chatBubble?.removeAllSubviews()
             cell.chatBubble?.addSubview(chatBubbleR)
             storyTableView?.rowHeight = chatBubbleR.frame.height
             }*/
            }
            else
            {
                let chatBubbleR: ChatBubbleOut = ChatBubbleOut(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, chatStatus: chatStatus, mySupportTeam: mysupportteam, chatType: self.appDelegate().curRoomType, mytagcell: indexPath.row, isTableMutable: isMultiSelection, isSeletForward: isMultiSelectionbyForward, messageSubType: messageSubType, messageId: message.value(forKey: "messageId") as! String)
                cell.chatBubble?.removeAllSubviews()
               
                cell.chatBubble?.addSubview(chatBubbleR)
                 storyTableView?.rowHeight = chatBubbleR.frame.height
            }
            
        }
        
        if (isMultiSelection) {
            // let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            //let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            //cell.backgroundColor = UIColor(hex: "E6E6E6")
            cell.checkedImage?.isHidden = false
             cell.ledingConstraint.constant = CGFloat(45.0)
            cell.checkedImage?.layer.masksToBounds = true;
            cell.checkedImage?.layer.borderWidth = 1.0
            cell.checkedImage?.layer.borderColor = UIColor.init(hex: "9a9a9a").cgColor //self.contentView.tintColor.cgColor
            cell.checkedImage?.layer.cornerRadius = 12.5
            if let selecteImage = message.value(forKey: "checkimage") as? String
            {
             cell.checkedImage?.image  = UIImage(named: selecteImage)
            }
            else{
                 cell.checkedImage?.image = UIImage(named: "uncheck")
            }
            
        }
        else  if (isMultiSelectionbyForward) {
            // let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            //let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            //cell.backgroundColor = UIColor(hex: "E6E6E6")
            let messageType = message.value(forKey: "messageType") as! String
            cell.checkedImage?.isHidden = false
            cell.ledingConstraint.constant = CGFloat(45.0)
            cell.checkedImage?.layer.masksToBounds = true;
            cell.checkedImage?.layer.borderWidth = 1.0
            cell.checkedImage?.layer.borderColor = UIColor.init(hex: "9a9a9a").cgColor //self.contentView.tintColor.cgColor
            cell.checkedImage?.layer.cornerRadius = 12.5
            if(messageType == "header")
            {
                cell.checkedImage?.image = UIImage(named: "uncheck")
            }
            else if let selecteImage = message.value(forKey: "checkimage") as? String
            {
                cell.checkedImage?.image  = UIImage(named: selecteImage)
            }
            else{
                cell.checkedImage?.image = UIImage(named: "uncheck")
            }
            
        }
        else{
             cell.checkedImage?.isHidden = true
             cell.ledingConstraint.constant = CGFloat(5.0)
        }
        /*if(indexPath.row == 0)
        {
            storyTableView?.rowHeight = chatBubbleL.frame.height
        }
        else
        {
            storyTableView?.rowHeight = 44.0
        }*/
        
        
        //cell.chatMessage?.text = "This message is only for test and its changed."
    }
        return cell
    }
    /*func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {
        if (isMultiSelection) {
            let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            cell.backgroundColor = UIColor.clear
            updateIndexPath(IndexPath: indexPath)
        }
    }*/
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
       // print("You tapped cell number \(indexPath.row).")
        //let cell = tableView.cellForRow(at: indexPath) as! ChatCell
        //cell.backgroundColor = UIColor.blue
        if(appDelegate().arrUserChat.count>0){
        if (isMultiSelection) {
           // let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            //let cell = tableView.cellForRow(at: indexPath) as! ChatCell
           //cell.backgroundColor = UIColor(hex: "E6E6E6")
            let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            
            //tmpSelected.add(indexPath)
            
            //cell.checkedImage?.backgroundColor = cell.contentView.tintColor
            //print(tmpSelected)
            //let colour = cell.contentView.tintColor
            
            //let dict: NSDictionary? = appDelegate().allAppContacts[indexPath.row] as? NSDictionary
            //dict?.setValue("blue", forKey: "colour")
            cell.checkedImage?.image = UIImage(named: "check")
            var dict: [String : AnyObject] = appDelegate().arrUserChat[indexPath.row] as! [String : AnyObject]
            if let ischecked = dict["checkimage"]{
                if(ischecked as! String == "check"){
                    dict["checkimage"] = "uncheck" as AnyObject
                    
                }
                else{
                     dict["checkimage"] = "check" as AnyObject
                }
           
            
            appDelegate().arrUserChat[indexPath.row] = dict as AnyObject
            }
            //deleteChatAtIndex()
            setMultiChatAtIndex()
        }
        else  if (isMultiSelectionbyForward) {
            // let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            //let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            //cell.backgroundColor = UIColor(hex: "E6E6E6")
            let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            
            //tmpSelected.add(indexPath)
            
            //cell.checkedImage?.backgroundColor = cell.contentView.tintColor
            //print(tmpSelected)
            //let colour = cell.contentView.tintColor
            
            //let dict: NSDictionary? = appDelegate().allAppContacts[indexPath.row] as? NSDictionary
            //dict?.setValue("blue", forKey: "colour")
            cell.checkedImage?.image = UIImage(named: "check")
            var dict: [String : AnyObject] = appDelegate().arrUserChat[indexPath.row] as! [String : AnyObject]
            let messageType = dict["messageType"] as! String
            if(messageType == "header")
            {
                cell.checkedImage?.image = UIImage(named: "uncheck")
                 dict["checkimage"] = "uncheck" as AnyObject
            }
            else if(messageType == "text")
            {
                if let ischecked = dict["checkimage"]{
                    if(ischecked as! String == "check"){
                        dict["checkimage"] = "uncheck" as AnyObject
                        
                    }
                    else{
                        dict["checkimage"] = "check" as AnyObject
                    }
                    
                    
                    appDelegate().arrUserChat[indexPath.row] = dict as AnyObject
                }
            }
            else if(messageType == "video" || messageType == "image"){
                let chatStatus = dict["status"] as! String
                if(chatStatus == "sent"){
                if let ischecked = dict["checkimage"]{
                    if(ischecked as! String == "check"){
                        dict["checkimage"] = "uncheck" as AnyObject
                        
                    }
                    else{
                        dict["checkimage"] = "check" as AnyObject
                    }
                    
                    
                    appDelegate().arrUserChat[indexPath.row] = dict as AnyObject
                }
                }
                else{
                    let superView = self.view
                    superView!.becomeFirstResponder()
                    let ReportMenuItem = UIMenuItem(title: "Can't forward beacause this media is unavailable.", action:  #selector(Unknownmedia))
                    UIMenuController.shared.menuItems = [ReportMenuItem]
                    UIMenuController.shared.arrowDirection = UIMenuController.ArrowDirection.down
                    UIMenuController.shared.setTargetRect(CGRect(x: 0, y: 100, width: 300, height: 300), in: superView!)
                    
                    // Animate the menu onto view
                    UIMenuController.shared.setMenuVisible(true, animated: true)
                    cell.checkedImage?.image = UIImage(named: "uncheck")
                    dict["checkimage"] = "uncheck" as AnyObject
                }
                }
            
            //deleteChatAtIndex()
            setMultiChatAtIndex()
        }
        else{
            let selMessage: NSDictionary = self.appDelegate().arrUserChat[indexPath.row] as! NSDictionary
            
            //        self.storyTableView?.allowsMultipleSelection = true
            let selMessageType = selMessage.value(forKey: "messageType") as! String
            
            let messageContent = selMessage.value(forKey: "messageContent") as! String
            
            
            
            let messageId = selMessage.value(forKey: "messageId") as! String
            
            let selMessageId = selMessage.value(forKey: "fileLocalId") as! String
            let isIncoming: String = selMessage.value(forKey: "isIncoming") as! String
            
            var selVideoPath:String = ""
            if(isIncoming == "YES")
            {
                selVideoPath = self.appDelegate().getFileNameFromPathWithFile(path: selMessage.value(forKey: "filePath") as! String)!
            } else
            {
                selVideoPath = selMessage.value(forKey: "filePath") as! String
            }
            
            var selIndex: Int = 0
            
            let chatStatus = selMessage.value(forKey: "status") as! String
            
            
            if(appDelegate().curRoomType == "banter" || appDelegate().curRoomType == "chat" || appDelegate().curRoomType == "group" || appDelegate().curRoomType == "teambr")
            {
                //showMediaPreview(messageType, mediaPath: imagePath)
                
                if(chatStatus == "sending" || chatStatus == "failed" ||  chatStatus == "downloading")
                {
                    //appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                    if(selMessageType != "header"){
                    if ClassReachability.isConnectedToNetwork() {
                        
                    } else {
                        alertWithTitle(title: nil, message: "Please check your Internet connection.", ViewController: self)
                        
                    }
                }
                    else{
                        if(messageContent.contains("Tap to learn more.")){
                            UserDefaults.standard.setValue("Earn more FanCoins?", forKey: "terms")
                            UserDefaults.standard.synchronize()
                            // hide()
                            let notificationName2 = Notification.Name("learnMore")
                            NotificationCenter.default.post(name: notificationName2, object: nil)
                            
                        }
                        
                        
                    }
                }
                else
                {
                    if(selMessageType == "image")
                    {
                        //let mediaURL = message.value(forKey: "filePath") as! String
                        //let asset: PHAsset = PHAssetForFileURL(url: NSURL(string: mediaURL)!)!
                        
                        appDelegate().isFromPreview = true
                        
                        if(!(selVideoPath.isEmpty))
                        {
                           // showMediaPreview(selMessageType, mediaPath: selVideoPath, isLocalMedia: false)
                            
                            /*if let asset = PHAsset.fetchAssets(withLocalIdentifiers: [selMessageId], options: nil).firstObject
                             {
                             //Play this local image asset
                             
                             }*/
                              showMediaPreview1(selectedindex: indexPath.row)
                        }
                        else
                        {
                            //If message sent
                            if(selMessageId.isEmpty)
                            {
                                appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                            }
                            else
                            {
                                //Show preview
                                  showMediaPreview1(selectedindex: indexPath.row)
                               // showMediaPreview(selMessageType, mediaPath: selMessageId, isLocalMedia: true)
                            }
                            
                            
                        }
                    }
                    else if(selMessageType == "video")
                    {
                        
                        appDelegate().isFromPreview = true
                        //selVideoPath = selVideoPath.replace(target: "///", withString: "//")
                        if(!(selVideoPath.isEmpty))
                        {
                              showMediaPreview1(selectedindex: indexPath.row)
                           /* DispatchQueue.main.async {
                                /*let player = AVPlayer(url: NSURL(fileURLWithPath: selVideoPath) as URL)
                                 let playerViewController = AVPlayerViewController()
                                 playerViewController.player = player
                                 self.present(playerViewController, animated: true) {
                                 playerViewController.player!.play()
                                 }*/
                                let playerItem = AVPlayerItem.init(url:URL.init(string: selVideoPath)!)
                                let player = AVPlayer(playerItem: playerItem)
                                
                                let playerViewController = AVPlayerViewController()
                                playerViewController.player = player
                                self.present(playerViewController, animated: true) {
                                    playerViewController.player!.play()
                                }
                                
                                /*var player = AVPlayer(playerItem: playerItem)
                                 var playerLayer = AVPlayerLayer(player: player)
                                 playerLayer.frame = self.view.frame
                                 self.view.layer.addSublayer(playerLayer)
                                 player.play()*/
                            }*/
                        }
                        else
                        {
                            appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                        }
                        /*if(!selMessageId.isEmpty)
                         {
                         //showMediaPreview(selMessageType, mediaPath: selMessageId, isLocalMedia: true)
                         if let asset = PHAsset.fetchAssets(withLocalIdentifiers: [selMessageId], options: nil).firstObject
                         {
                         //Play this local video asset
                         PHCachingImageManager().requestAVAsset(forVideo: asset, options: nil) { (asset, audioMix, args) in
                         
                         let assetV = asset as! AVURLAsset
                         DispatchQueue.main.async {
                         let player = AVPlayer(url: assetV.url)
                         let playerViewController = AVPlayerViewController()
                         playerViewController.player = player
                         self.present(playerViewController, animated: true) {
                         playerViewController.player!.play()
                         }
                         }
                         
                         }
                         }
                         
                         }*/
                    }
                    else if(selMessageType == "header"){
                        if(messageContent.elementsEqual("Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more.")){
                            UserDefaults.standard.setValue("Earn more FanCoins?", forKey: "terms")
                            UserDefaults.standard.synchronize()
                           // hide()
                            let notificationName2 = Notification.Name("learnMore")
                            NotificationCenter.default.post(name: notificationName2, object: nil)
                            
                        }
                        else  if(messageContent.elementsEqual("Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more.")){
                                                   UserDefaults.standard.setValue("Earn more FanCoins?", forKey: "terms")
                                                   UserDefaults.standard.synchronize()
                                                  // hide()
                                                   let notificationName2 = Notification.Name("learnMore")
                                                   NotificationCenter.default.post(name: notificationName2, object: nil)
                                                   
                                               }
                        
                    }
                }
                
                
                
                
                
                
                
                
            }
            else
            {
                
                if(selMessageType == "image" || selMessageType == "video")
                {
                    let tmpAssetArray = NSMutableArray()
                    for message in self.appDelegate().arrUserChat
                    {
                        let messageType = message.value(forKey: "messageType") as! String
                        if(messageType == "image")
                        {
                            //let mediaURL = message.value(forKey: "filePath") as! String
                            //let asset: PHAsset = PHAssetForFileURL(url: NSURL(string: mediaURL)!)!
                            
                            let imageId = message.value(forKey: "fileLocalId") as! String
                            
                            if(!imageId.isEmpty)
                            {
                                if let asset = PHAsset.fetchAssets(withLocalIdentifiers: [imageId], options: nil).firstObject
                                {
                                    var tempDict = [String: AnyObject]()
                                    tempDict["caption"] = "" as AnyObject
                                    tempDict["asset"] = asset as AnyObject
                                    tmpAssetArray[tmpAssetArray.count] = tempDict
                                    if(selMessageId == asset.localIdentifier)
                                    {
                                        if(tmpAssetArray.count > 0)
                                        {
                                            selIndex = tmpAssetArray.count - 1
                                        }
                                    }
                                }
                                
                            }
                        }
                        else if(messageType == "video")
                        {
                            //let mediaURL = message.value(forKey: "filePath") as! String
                            //let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [NSURL(string: mediaURL)! as URL], options: nil).firstObject!
                            
                            //let asset = AVAsset(url: NSURL(fileURLWithPath: mediaURL) as URL)
                            //let asset: PHAsset = PHAssetForFileURL(url: NSURL(string: mediaURL)!)!
                            let videoId = message.value(forKey: "fileLocalId") as! String
                            if(!videoId.isEmpty)
                            {
                                if let asset = PHAsset.fetchAssets(withLocalIdentifiers: [videoId], options: nil).firstObject
                                {
                                    var tempDict = [String: AnyObject]()
                                    tempDict["caption"] = "" as AnyObject
                                    tempDict["asset"] = asset as AnyObject
                                    tmpAssetArray[tmpAssetArray.count] = tempDict
                                    if(selMessageId == asset.localIdentifier)
                                    {
                                        if(tmpAssetArray.count > 0)
                                        {
                                            selIndex = tmpAssetArray.count - 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if(tmpAssetArray.count > 0)
                    {
                        /*let picker = NohanaImagePickerController.init(assetCollectionSubtypes: [PHAssetCollectionSubtype.any], mediaType: MediaType.any, enableExpandingPhotoAnimation: true)
                        picker.delegate = self
                        picker.toolbarHidden = true
                        picker.isShowPreview = true
                        picker.isShowCaptionView = false
                        picker.allAssetsOfUser = tmpAssetArray
                        
                        picker.allAssetsOfUserCurrentIndexPath = selIndex //0//indexPath.row
                        picker.navigationController?.isNavigationBarHidden = true
                        present(picker, animated: true, completion: nil)*/
                    }
                }
            }
            
            
        }
        
        }
        
    }
    func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {
        if (isMultiSelection) {
            let allSelected = self.storyTableView?.indexPathsForSelectedRows
            //print(allSelected ?? " Failed")
           
            if(allSelected == nil)
             {
                let cell = tableView.cellForRow(at: indexPath) as! ChatCell
                //cell.isForward = false
                //cell.pickContact?.backgroundColor = UIColor.clear
                cell.checkedImage?.image = UIImage(named: "uncheck")
                //var tmpDict: [String : String] = appDelegate().allAppContacts[indexPath.row] as! [String : String]
                //tmpDict["colour"] = "clear"
                //appDelegate().allAppContacts[indexPath.row] = tmpDict
                
                var dict: [String : AnyObject] = appDelegate().arrUserChat[indexPath.row] as! [String : AnyObject]
                dict["checkimage"] = "uncheck" as AnyObject
                
                appDelegate().arrUserChat[indexPath.row] = dict as AnyObject
                storyTableView?.allowsMultipleSelection = false
                storyTableView?.allowsSelection = true
                isMultiSelection = false
                btnPicker?.isHidden = false
                btnCamera?.isHidden = false
                messageBox.isHidden = false
                btnJoinBanter?.isHidden = true
                let imgMsg: UIImage = UIImage(named: "add")!
                btnPicker?.setImage(imgMsg, for: UIControl.State.normal)
                /* if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
                 {
                 if(appDelegate().isAdmin == "yes")
                 {
                 self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                 }
                 else
                 {
                 self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                 }
                 btnPicker?.isHidden = false
                 btnCamera?.isHidden = false
                 messageBox.isHidden = false
                 btnJoinBanter?.isHidden = true
                 selectedIndexPaths = []
                 let imgMsg: UIImage = UIImage(named: "add")!
                 btnPicker?.setImage(imgMsg, for: UIControlState.normal)
                 }*/
                if(self.appDelegate().isBanterClosed == "closed")
                {
                    isAutoScroll = true
                    
                    btnPicker?.isHidden = true
                    btnCamera?.isHidden = true
                    messageBox.isHidden = true
                    btnJoinBanter?.isHidden = true
                    
                }
                else
                {
                    if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
                    {
                        if(appDelegate().isAdmin == "yes")
                        {
                            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                        }
                        else
                        {
                            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                        }
                    }
                        else  if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "yes")
                                           {
                                               if(appDelegate().isAdmin == "yes")
                                               {
                                                   self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                                               }
                                               else
                                               {
                                                   self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                                               }
                                           }
                    else if(appDelegate().curRoomType == "chat"){
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(chatmenu))
                        supportedTeam = 0
                        opponentTeam = 0
                    }
                    else if(appDelegate().curRoomType == "group" && appDelegate().isJoined == "yes"){
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                        supportedTeam = 0
                        opponentTeam = 0
                    }
                    else if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "blocked")
                    {
                        btnPicker?.isHidden = true
                        btnCamera?.isHidden = true
                        messageBox.isHidden = true
                        btnJoinBanter?.isHidden = true
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                    }
                    else if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "blocked")
                                           {
                                               btnPicker?.isHidden = true
                                               btnCamera?.isHidden = true
                                               messageBox.isHidden = true
                                               btnJoinBanter?.isHidden = true
                                               self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                                           }
                    else if(appDelegate().curRoomType == "group" && appDelegate().isJoined == "blocked" || appDelegate().isJoined == "no")
                    {
                        btnPicker?.isHidden = true
                        btnCamera?.isHidden = true
                        messageBox.isHidden = true
                        btnJoinBanter?.isHidden = true
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(chatmenu))
                    }
                    
                  
                    self.appDelegate().isUpdatesLoaded = false
                    
                    
                    if(appDelegate().isFromPreview){
                        appDelegate().isFromPreview = false
                        isAutoScroll = false
                    }
                    else{
                        isAutoScroll = true
                    }
                    
                    
                    if(self.appDelegate().curRoomType == "banter" || self.appDelegate().curRoomType == "teambr")
                    {
                        if(self.appDelegate().isJoined == "no")
                        {
                            
                            btnPicker?.isHidden = true
                            btnCamera?.isHidden = true
                            messageBox.isHidden = true
                            btnJoinBanter?.isHidden = false
                            
                        }
                    }
                    
                    
                    //storyTableView?.layoutSubviews()
                    //storyTableView?.layoutIfNeeded()
                    //self.scrollToBottom()
                }
                if(appDelegate().curRoomType == "chat"){
                    let array = Blockeduser.rows(filter:"roomId = '\(appDelegate().toUserJID)'") as! [Blockeduser]
                    if(array.count != 0){
                        let disnarysound = array[0]
                        
                        let status = disnarysound.value(forKey: "status") as! String
                        if(status == "Blocked"){
                            //isBlocked = true
                            // btnblock?.setTitle("UnBlock", for:  UIControlState.normal)
                            messageBox.isHidden = true
                            btnPicker?.isHidden = true
                            btnCamera?.isHidden = true
                        }
                        else{
                            messageBox.isHidden = false
                            btnPicker?.isHidden = false
                            btnCamera?.isHidden = false
                            //isBlocked = false
                            //btnblock?.setTitle("Block", for:  UIControlState.normal)
                        }
                    }
                    else{
                        messageBox.isHidden = false
                        btnPicker?.isHidden = false
                        btnCamera?.isHidden = false
                        // isBlocked = false
                        // btnblock?.setTitle("Block", for:  UIControlState.normal)
                        
                    }
                }
               // let cell = tableView.cellForRow(at: indexPath) as! ChatCell
                //cell.backgroundColor = UIColor.clear
                storyTableView?.reloadData()
            }
            else{
                let cell = tableView.cellForRow(at: indexPath) as! ChatCell
                //cell.isForward = false
                //cell.pickContact?.backgroundColor = UIColor.clear
                cell.checkedImage?.image = UIImage(named: "uncheck")
                //var tmpDict: [String : String] = appDelegate().allAppContacts[indexPath.row] as! [String : String]
                //tmpDict["colour"] = "clear"
                //appDelegate().allAppContacts[indexPath.row] = tmpDict
                
                var dict: [String : AnyObject] = appDelegate().arrUserChat[indexPath.row] as! [String : AnyObject]
                dict["checkimage"] = "uncheck" as AnyObject
                
                appDelegate().arrUserChat[indexPath.row] = dict as AnyObject
                 //deleteChatAtIndex()
                setMultiChatAtIndex()
            }
            // let cell = tableView.cellForRow(at: indexPath) as! ChatCell
           
        }
        else if(isMultiSelectionbyForward)
        {
            let allSelected = self.storyTableView?.indexPathsForSelectedRows
            //print(allSelected ?? " Failed")
            
            if(allSelected == nil)
            {
                let cell = tableView.cellForRow(at: indexPath) as! ChatCell
                //cell.isForward = false
                //cell.pickContact?.backgroundColor = UIColor.clear
                cell.checkedImage?.image = UIImage(named: "uncheck")
                //var tmpDict: [String : String] = appDelegate().allAppContacts[indexPath.row] as! [String : String]
                //tmpDict["colour"] = "clear"
                //appDelegate().allAppContacts[indexPath.row] = tmpDict
                
                var dict: [String : AnyObject] = appDelegate().arrUserChat[indexPath.row] as! [String : AnyObject]
                dict["checkimage"] = "uncheck" as AnyObject
                
                appDelegate().arrUserChat[indexPath.row] = dict as AnyObject
                storyTableView?.allowsMultipleSelection = false
                storyTableView?.allowsSelection = true
                isMultiSelectionbyForward = false
                btnPicker?.isHidden = false
                btnCamera?.isHidden = false
                messageBox.isHidden = false
                btnJoinBanter?.isHidden = true
                let imgMsg: UIImage = UIImage(named: "add")!
                btnPicker?.setImage(imgMsg, for: UIControl.State.normal)
                /* if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
                 {
                 if(appDelegate().isAdmin == "yes")
                 {
                 self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                 }
                 else
                 {
                 self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                 }
                 btnPicker?.isHidden = false
                 btnCamera?.isHidden = false
                 messageBox.isHidden = false
                 btnJoinBanter?.isHidden = true
                 selectedIndexPaths = []
                 let imgMsg: UIImage = UIImage(named: "add")!
                 btnPicker?.setImage(imgMsg, for: UIControlState.normal)
                 }*/
                if(self.appDelegate().isBanterClosed == "closed")
                {
                    isAutoScroll = true
                    
                    btnPicker?.isHidden = true
                    btnCamera?.isHidden = true
                    messageBox.isHidden = true
                    btnJoinBanter?.isHidden = true
                    
                }
                else
                {
                    if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
                    {
                        if(appDelegate().isAdmin == "yes")
                        {
                            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                        }
                        else
                        {
                            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                        }
                    }
                        else if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "yes")
                        {
                            if(appDelegate().isAdmin == "yes")
                            {
                                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                            }
                            else
                            {
                                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                            }
                        }
                    else if(appDelegate().curRoomType == "chat"){
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(chatmenu))
                        supportedTeam = 0
                        opponentTeam = 0
                    }
                    else if(appDelegate().curRoomType == "group" && appDelegate().isJoined == "yes"){
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                        supportedTeam = 0
                        opponentTeam = 0
                    }
                    else if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "blocked")
                    {
                        btnPicker?.isHidden = true
                        btnCamera?.isHidden = true
                        messageBox.isHidden = true
                        btnJoinBanter?.isHidden = true
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                    }
                        else if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "blocked")
                        {
                            btnPicker?.isHidden = true
                            btnCamera?.isHidden = true
                            messageBox.isHidden = true
                            btnJoinBanter?.isHidden = true
                            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                        }
                    else if(appDelegate().curRoomType == "group" && appDelegate().isJoined == "blocked" || appDelegate().isJoined == "no")
                    {
                        btnPicker?.isHidden = true
                        btnCamera?.isHidden = true
                        messageBox.isHidden = true
                        btnJoinBanter?.isHidden = true
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(chatmenu))
                    }
                    
                   
                    
                    self.appDelegate().isUpdatesLoaded = false
                    
                    
                    if(appDelegate().isFromPreview){
                        appDelegate().isFromPreview = false
                        isAutoScroll = false
                    }
                    else{
                        isAutoScroll = true
                    }
                    
                    
                    if(self.appDelegate().curRoomType == "banter" || self.appDelegate().curRoomType == "teambr")
                    {
                        if(self.appDelegate().isJoined == "no")
                        {
                            
                            btnPicker?.isHidden = true
                            btnCamera?.isHidden = true
                            messageBox.isHidden = true
                            btnJoinBanter?.isHidden = false
                            
                        }
                    }
                    
                    
                    //storyTableView?.layoutSubviews()
                    //storyTableView?.layoutIfNeeded()
                    //self.scrollToBottom()
                }
                if(appDelegate().curRoomType == "chat"){
                    let array = Blockeduser.rows(filter:"roomId = '\(appDelegate().toUserJID)'") as! [Blockeduser]
                    if(array.count != 0){
                        let disnarysound = array[0]
                        
                        let status = disnarysound.value(forKey: "status") as! String
                        if(status == "Blocked"){
                            //isBlocked = true
                            // btnblock?.setTitle("UnBlock", for:  UIControlState.normal)
                            messageBox.isHidden = true
                            btnPicker?.isHidden = true
                            btnCamera?.isHidden = true
                        }
                        else{
                            messageBox.isHidden = false
                            btnPicker?.isHidden = false
                            btnCamera?.isHidden = false
                            //isBlocked = false
                            //btnblock?.setTitle("Block", for:  UIControlState.normal)
                        }
                    }
                    else{
                        messageBox.isHidden = false
                        btnPicker?.isHidden = false
                        btnCamera?.isHidden = false
                        // isBlocked = false
                        // btnblock?.setTitle("Block", for:  UIControlState.normal)
                        
                    }
                }
                // let cell = tableView.cellForRow(at: indexPath) as! ChatCell
                //cell.backgroundColor = UIColor.clear
                storyTableView?.reloadData()
            }
            else{
                let cell = tableView.cellForRow(at: indexPath) as! ChatCell
                //cell.isForward = false
                //cell.pickContact?.backgroundColor = UIColor.clear
                cell.checkedImage?.image = UIImage(named: "uncheck")
                //var tmpDict: [String : String] = appDelegate().allAppContacts[indexPath.row] as! [String : String]
                //tmpDict["colour"] = "clear"
                //appDelegate().allAppContacts[indexPath.row] = tmpDict
                
                var dict: [String : AnyObject] = appDelegate().arrUserChat[indexPath.row] as! [String : AnyObject]
                dict["checkimage"] = "uncheck" as AnyObject
                
                appDelegate().arrUserChat[indexPath.row] = dict as AnyObject
                //deleteChatAtIndex()
                setMultiChatAtIndex()
            }
            // let cell = tableView.cellForRow(at: indexPath) as! ChatCell
            
        }
        
    }
    
   func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        //if let lastVisibleIndexPath = tableView.indexPathsForVisibleRows?.last {
       // cellHeights[indexPath] = cell.frame.size.height
       // lastindex = indexPath.row
     /*  if let lastVisibleIndexPath = tableView.indexPathsForVisibleRows?.last {
            // do here...
            //print("display cell")
            //
            //print(self.appDelegate().arrUserChat.count)
            if (indexPath == lastVisibleIndexPath && isAutoScroll) {
                // do here...
                self.scrollToBottom()
                if(indexPath.row == self.appDelegate().arrUserChat.count-1)
                {
                    isAutoScroll = false
                    //tableView.reloadData()
                }
            }
        }*/
        //}
    if(indexPath.row == self.appDelegate().arrUserChat.count-1)
    {
        isAutoScroll = false
         //print(isAutoScroll)
        //tableView.reloadData()
         appDelegate().isApplyHistory = true
    }
    if(isAutoScroll){
      //  print(isAutoScroll)
        self.scrollToBottom()
       /* if(indexPath.row == self.appDelegate().arrUserChat.count-1)
        {
            isAutoScroll = false
            //tableView.reloadData()
        }*/
    }
    }
    
   /* func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
       // return 250
        /*if let height =  self.cellHeightsDictionary[indexPath] {
         return height
         }
         return UITableViewAutomaticDimension*/
       // let rect1 = self.storyTableView?.rectForRow(at: indexPath as IndexPath)
        
        //return (rect1?.height)!
        let message: NSDictionary = self.appDelegate().arrUserChat[indexPath.row] as! NSDictionary
         let messageType = message.value(forKey: "messageType") as! String
        if(messageType == "image")
        {
            return 600
        }
        else if(messageType == "video")
        {
            return 297
        }
        else if(messageType == "text")
        {
            return 90
        }
        return 600
    }*/
   func tableView(_ tableView: UITableView,
                   heightForRowAt indexPath: IndexPath) -> CGFloat{
        let cell:ChatCell = storyTableView!.dequeueReusableCell(withIdentifier: cellReuseIdentifier) as! ChatCell
    do{
        let message: NSDictionary = try self.appDelegate().arrUserChat[indexPath.row] as! NSDictionary
        
       // let isIncoming: String = message.value(forKey: "isIncoming") as! String
        let userName: String = message.value(forKey: "userName") as! String
        
        // print("\(indexPath.row) \(message.value(forKey: "status") as! String)")
        var msgtime = ""
        if let mili = message.value(forKey: "time")
        {
            let mili: Double = Double(truncating: (mili as AnyObject) as! NSNumber)
            let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
            let dateFormatter = DateFormatter()
            //dateFormatter.dateFormat = "dd MMMM yyyy hh:mm a"
            //dateFormatter.dateStyle = .short
            dateFormatter.dateFormat = "dd MMM yy HH:mm"
            let now = Date()
            let birthday: Date = myMilliseconds.dateFull as Date
            let calendar = Calendar.current
            
            let ageComponents = calendar.dateComponents([.hour], from: birthday, to: now)
            let timebefore = Int64(ageComponents.hour!)
            if(timebefore > 24){
                msgtime = dateFormatter.string(from: myMilliseconds.dateFull as Date)
            }
            else{
                dateFormatter.dateFormat = "HH:mm"
                msgtime = dateFormatter.string(from: myMilliseconds.dateFull as Date)
            }
            
            
        }
        
       // let message: NSDictionary = self.appDelegate().arrUserChat[indexPath.row] as! NSDictionary
        let messageType = message.value(forKey: "messageType") as! String
    var messageSubType = ""
    if let isOppTeam = message.value(forKey: "sub_type")
    {
    if(isOppTeam != nil)
     {
            messageSubType = isOppTeam as! String
        }
    }
        if(messageType == "image")
        {
            if(appDelegate().curRoomType == "chat" )
            {
                  if(messageSubType == "Forwarded"){
                     return 296.15
                }
                  else{
                     return 276.15
                }
            
            }
            else{
                if(messageSubType == "Forwarded"){
                    return 316.15
                }
                else{
                     return 296.15
                }
               
            }
        }
        else if(messageType == "video")
        {
            if(appDelegate().curRoomType == "chat" )
            {
                if(messageSubType == "Forwarded"){
                    return 296.15
                }
                else{
                     return 276.15
                }
               
            }
            else{
                if(messageSubType == "Forwarded"){
                     return 316.15
                }
                else{
                     return 296.15
                }
               
            }
        }
        else if(messageType == "header")
        {
            let mysupportteam = message.value(forKey: "supportteam") as! Int
            let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 13.0, messageType: messageType, messageTime: msgtime, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection,messageSubType:messageSubType, messageId: message.value(forKey: "messageId") as! String)
            return chatBubbleL.frame.height
        }
        else 
        {
            let mysupportteam = message.value(forKey: "supportteam") as! Int
            let chatBubbleL: ChatBubbleIn = ChatBubbleIn(baseView: cell.chatBubble!, text: message.value(forKey: "messageContent") as! String, fontSize: 16.0, messageType: messageType, messageTime: msgtime, chatType: self.appDelegate().curRoomType, userName: userName, mySupportTeam: mysupportteam, mytagcell: indexPath.row, isTableMutable: isMultiSelection,messageSubType:messageSubType, messageId: message.value(forKey: "messageId") as! String)
            return chatBubbleL.frame.height
        }
    }catch{
         print(error.localizedDescription)
    }
        return 80
    }
   /*  func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    
   func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {
        if (editingStyle == UITableViewCellEditingStyle.none) {
            print("Slide Left")
        }
    }
    

   func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
   
        let deleteRowAction = UITableViewRowAction(style: UITableViewRowActionStyle.destructive, title: "Delete", handler:{action, indexpath in
            tableView.isEditing = false
            print("Delete")
            
            self.appDelegate().arrUserChat.remove(at: indexPath.row)
            self.deleteChatAtIndex()
            
        })
        deleteRowAction.backgroundColor = UIColor.white
   

        
        let editRowAction = UITableViewRowAction(style: UITableViewRowActionStyle.normal, title: " Status ", handler:{action, indexpath in
            tableView.isEditing = false
            print("Status")
            //let selMessage: NSDictionary = self.appDelegate().arrUserChat[indexpath.row] as! NSDictionary
            //var messageStatus = [AnyObject]()
            //messageStatus.append(selMessage)
            let cellIndex: Int = indexpath.row
            self.showMessageStatus(cellIndex: cellIndex)
        })
        editRowAction.backgroundColor = UIColor.white
   
        return [deleteRowAction, editRowAction]
    }
    */
    func deleteChatAtIndex(){
        
        //Get from local user defaults temp
        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
        if localArrAllChats != nil
        {
            //Code to parse json data
            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                do {
                    self.appDelegate().arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                    
                } catch let error as NSError {
                    print(error)
                }
            }
        }
        
        //var tmpArrChatDetails = [String : AnyObject]()
        
        //tmpArrChatDetails["Chats"] = appDelegate().arrUserChat as AnyObject
        
        for tmpAllUserChats in appDelegate().arrAllChats
        {
            let tmpSingleUserChat: String = tmpAllUserChats.key
            
            if(tmpSingleUserChat == appDelegate().toUserJID)
            {
                var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                tmpArrChatDetails["Chats"] = appDelegate().arrUserChat as AnyObject
                
                appDelegate().arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                
                
            }
            
        }
        
        //self.appDelegate().arrAllChats[appDelegate().toUserJID] = tmpArrChatDetails as AnyObject
        //self.arrAllChats.removeValue(forKey: toUserJID)
        //Save array to local temp
        do {
            if(appDelegate().arrAllChats.count > 0)
            {
                let dataArrAllChats = try JSONSerialization.data(withJSONObject:self.appDelegate().arrAllChats, options: .prettyPrinted)
                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                UserDefaults.standard.synchronize()
            }
        } catch {
            print(error.localizedDescription)
        }
        
        //End
        
        if(appDelegate().isOnChatView)
        {
            //Post notification if user is on chats window when chats cleared
            let notificationName = Notification.Name("MessageReceivedFromServer")
            NotificationCenter.default.post(name: notificationName, object: nil)
        }
    }
    func setMultiChatAtIndex(){
        
        //Get from local user defaults temp
        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
        if localArrAllChats != nil
        {
            //Code to parse json data
            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                do {
                    self.appDelegate().arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                    
                } catch let error as NSError {
                    print(error)
                }
            }
        }
        
        //var tmpArrChatDetails = [String : AnyObject]()
        
        //tmpArrChatDetails["Chats"] = appDelegate().arrUserChat as AnyObject
        
        for tmpAllUserChats in appDelegate().arrAllChats
        {
            let tmpSingleUserChat: String = tmpAllUserChats.key
            
            if(tmpSingleUserChat == appDelegate().toUserJID)
            {
                var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                tmpArrChatDetails["Chats"] = appDelegate().arrUserChat as AnyObject
                
                appDelegate().arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                
                
            }
            
        }
        
        //self.appDelegate().arrAllChats[appDelegate().toUserJID] = tmpArrChatDetails as AnyObject
        //self.arrAllChats.removeValue(forKey: toUserJID)
        //Save array to local temp
        do {
            if(appDelegate().arrAllChats.count > 0)
            {
                let dataArrAllChats = try JSONSerialization.data(withJSONObject:self.appDelegate().arrAllChats, options: .prettyPrinted)
                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                UserDefaults.standard.synchronize()
            }
        } catch {
            print(error.localizedDescription)
        }
        
        //End
        
       
    }
    func showMessageStatus(cellIndex: Int = 0) {
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let registerController : MessageStatusViewController! = storyBoard.instantiateViewController(withIdentifier: "MessageStatus") as? MessageStatusViewController
        //present(registerController as! UIViewController, animated: true, completion: nil)
        //self.appDelegate().curRoomType = "chat"
        registerController.cellIndex = cellIndex
        registerController.toUserJidLocal = appDelegate().toUserJID
        registerController.toRoomTypeLocal = appDelegate().curRoomType
        
        show(registerController, sender: self)
        //present(registerController, animated: true, completion: nil)
        
    }
    
    func showMediaPreview(_ mediaType: String, mediaPath: String, isLocalMedia: Bool = false) {
        if(!mediaType.isEmpty && !mediaPath.isEmpty)
        {
            let storyBoard = UIStoryboard(name: "Main", bundle: nil)
            let previewController : MediaPreviewController! = storyBoard.instantiateViewController(withIdentifier: "MediaPreview") as? MediaPreviewController
            
            if(mediaType == "image")
            {
                previewController.imagePath = mediaPath
            }
            else if(mediaType == "video")
            {
                previewController.videoPath = mediaPath
                
            }
            previewController.isLocalMedia = isLocalMedia
            previewController.mediaType = mediaType
            /*show(previewController!, sender: self)*/
            self.present(previewController, animated: true, completion: nil)
        }
    }

    /*func tableView(_ tableView: UITableView, willBeginEditingRowAt indexPath: IndexPath) {
        print("Show Message Status")
    }*/
    
    func textViewDidBeginEditing(_ textView: UITextView)
    {
       // print("Start Editing")
    }
    
    func textViewDidEndEditing(_ textView: UITextView)
    {
        //print("End Editing")
        let trimMessage: String = messageBox.text!.trimmingCharacters(in: .whitespacesAndNewlines)
        if(!trimMessage.isEmpty)
        {
            isSendMessage = true
            let imgMsg: UIImage = UIImage(named: "send")!
            btnCamera?.setImage(imgMsg, for: UIControl.State.normal)
        }
        else
        {
            isSendMessage = true
            let imgMsg: UIImage = UIImage(named: "send_gray")!
            btnCamera?.setImage(imgMsg, for: UIControl.State.normal)
           /* isSendMessage = false
            let imgMsg: UIImage = UIImage(named: "camera")!
            btnCamera?.setImage(imgMsg, for: UIControlState.normal)*/
        }
    }
    
    /*func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if (text as NSString).rangeOfCharacter(from: CharacterSet.newlines).location == NSNotFound {
            return true
        }
        
        //print("Returned")
        //print("Text did changed")
        let trimMessage: String = messageBox.text!//messageBox.text!.trimmingCharacters(in: .whitespacesAndNewlines)
        //let trimMessage = messageBox.text!
        //messageBox.text = trimMessage
        if(!trimMessage.isEmpty)
        {
            isSendMessage = true
            let imgMsg: UIImage = UIImage(named: "send")!
            btnCamera?.setImage(imgMsg, for: UIControlState.normal)
            
            //New code to send composing event
            self.appDelegate().sendComposingChatToUser(messageTo: self.appDelegate().toUserJID)
            //End
            let layoutManager:NSLayoutManager = textView.layoutManager
            let numberOfGlyphs = layoutManager.numberOfGlyphs
            var numberOfLines = 0
            var index = 0
            var lineRange:NSRange = NSRange()
            
            while (index < numberOfGlyphs) {
                layoutManager.lineFragmentRect(forGlyphAt: index, effectiveRange: &lineRange)
                index = NSMaxRange(lineRange);
                numberOfLines = numberOfLines + 1
            }
            
            if(numberOfLines>=1 && numberOfLines<8){
                let changeConstant = numberOfLines * 15
                self.massageBoXHightConstraint.constant = CGFloat(changeConstant+30)
                self.coustumBorderHightConstraint.constant = CGFloat(changeConstant+40)
                messageBox?.textContainerInset = UIEdgeInsetsMake(10, 10, 5, 5)
            }
            else if(numberOfLines>=8){
                let changeConstant = 8 * 15
                self.massageBoXHightConstraint.constant = CGFloat(changeConstant+30)
                self.coustumBorderHightConstraint.constant = CGFloat(changeConstant+40)
                messageBox?.textContainerInset = UIEdgeInsetsMake(10, 10, 5, 5)
                
            }
            
            DispatchQueue.main.asyncAfter(deadline: .now()) {
                
                let range = NSMakeRange(trimMessage.lengthOfBytes(using: String.Encoding.utf8), 0)
                textView.scrollRangeToVisible(range)
            }
            
            
        }
        else
        {
            self.massageBoXHightConstraint.constant = CGFloat(30.0)
            self.coustumBorderHightConstraint.constant = CGFloat(40.0)
            isSendMessage = false
            let imgMsg: UIImage = UIImage(named: "camera")!
            btnCamera?.setImage(imgMsg, for: UIControlState.normal)
            textView.isScrollEnabled = false
        }
        
        /*if(trimMessage == UIPasteboard.general.string)
        {
            self.messageBox?.text = trimMessage + " "
            
            DispatchQueue.main.asyncAfter(deadline: .now()) {
                
                let range = NSMakeRange(trimMessage.lengthOfBytes(using: String.Encoding.utf8), 0)
                textView.scrollRangeToVisible(range)
            }
            
            
        }*/
        
        
        
        
        //textView.scrollRectToVisible(messageBox.frame, animated: true)
        
        messageBox?.textContainerInset = UIEdgeInsetsMake(10, 10, 5, 5)
        
        return true
    }*/
     @objc func texthightchange(notification: NSNotification) {
        if let fetchedCaption = notification.userInfo?["hight"] as? CGFloat
        {
            self.coustumBorderHightConstraint.constant = CGFloat(fetchedCaption + 10)
            //print(defaultheight)
            if(fetchedCaption > defaultheight)
            {
                let diff = fetchedCaption - defaultheight
                defaultheight = fetchedCaption
                self.storyTableView?.setContentOffset(CGPoint(x: 0,y :(storyTableView?.contentOffset.y)! + diff), animated: true)
            } else {
                //let diff = defaultheight - fetchedCaption
                defaultheight = fetchedCaption
                self.storyTableView?.setContentOffset(CGPoint(x: 0,y :(storyTableView?.contentOffset.y)! - 7.5), animated: true)
                
            }
        }
    }
    func textViewDidChange(_ textView: UITextView)
    {
        let trimMessage: String = messageBox.text!.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if(!trimMessage.isEmpty)
        {
            messageBox?.isScrollEnabled = true
            isSendMessage = true
            let imgMsg: UIImage = UIImage(named: "send")!
            btnCamera?.setImage(imgMsg, for: UIControl.State.normal)
        } else
        {
            isSendMessage = true
            let imgMsg: UIImage = UIImage(named: "send_gray")!
            btnCamera?.setImage(imgMsg, for: UIControl.State.normal)
           /* isSendMessage = false
            let imgMsg: UIImage = UIImage(named: "camera")!
            btnCamera?.setImage(imgMsg, for: UIControlState.normal)
            messageBox?.isScrollEnabled = false*/
        }
       
        /*
        //print("Text did changed")
        let trimMessage: String = messageBox.text!.trimmingCharacters(in: .whitespacesAndNewlines)
        //let trimMessage = messageBox.text!
        //messageBox.text = trimMessage
        if(!trimMessage.isEmpty)
        {
            messageBox?.isScrollEnabled = true
            isSendMessage = true
            let imgMsg: UIImage = UIImage(named: "send")!
            btnCamera?.setImage(imgMsg, for: UIControlState.normal)
            
            //New code to send composing event
            self.appDelegate().sendComposingChatToUser(messageTo: self.appDelegate().toUserJID)
            //End
            var temptext: String = messageBox.text
            if(temptext.contains("nitesh")){
                temptext = temptext.replace(target: "nitesh", withString: "")
                messageBox.text = temptext
            }
            let layoutManager:NSLayoutManager = textView.layoutManager
            let numberOfGlyphs = layoutManager.numberOfGlyphs
            var numberOfLines = 0
            var index = 0
            var lineRange:NSRange = NSRange()
            
            while (index < numberOfGlyphs) {
                layoutManager.lineFragmentRect(forGlyphAt: index, effectiveRange: &lineRange)
                index = NSMaxRange(lineRange);
                numberOfLines = numberOfLines + 1
            }
            
            if(numberOfLines>=2 && numberOfLines<8){
                let changeConstant = numberOfLines * 21
                self.massageBoXHightConstraint.constant = CGFloat(changeConstant+30)
                self.coustumBorderHightConstraint.constant = CGFloat(changeConstant+40)
                messageBox?.textContainerInset = UIEdgeInsetsMake(10, 10, 5, 5)
            }
            else if(numberOfLines>=8){
                let changeConstant = 8 * 21
                self.massageBoXHightConstraint.constant = CGFloat(changeConstant+30)
                self.coustumBorderHightConstraint.constant = CGFloat(changeConstant+40)
                messageBox?.textContainerInset = UIEdgeInsetsMake(10, 10, 5, 5)
                
            }
            
            
        }
        else
        {
            self.massageBoXHightConstraint.constant = CGFloat(30.0)
            self.coustumBorderHightConstraint.constant = CGFloat(40.0)
            isSendMessage = false
            let imgMsg: UIImage = UIImage(named: "camera")!
            btnCamera?.setImage(imgMsg, for: UIControlState.normal)
            messageBox?.isScrollEnabled = false
        }
        
        if(trimMessage == UIPasteboard.general.string)
        {
            //self.messageBox?.text = trimMessage + " "
            
            DispatchQueue.main.asyncAfter(deadline: .now()+0.2) {
                
                let range = NSMakeRange(trimMessage.lengthOfBytes(using: String.Encoding.utf8), 0)
                textView.scrollRangeToVisible(range)
                self.messageBox.insertText("nitesh")
                
            }
            
            
        }
        */
        //messageBox?.textContainerInset = UIEdgeInsetsMake(10, 10, 5, 5)
        //textView.scrollRectToVisible(messageBox.frame, animated: true)
        
    }
    func textView(_ textView: UITextView, shouldChangeTextIn _: NSRange, replacementText text: String) -> Bool {
        /*let resultRange = text.rangeOfCharacter(from: CharacterSet.newlines, options: .backwards)
        //if text.characters.count == 1 && resultRange != nil {
        if text == "\n" && resultRange != nil {
            //textView.resignFirstResponder()
            // Do any additional stuff here
            let layoutManager:NSLayoutManager = textView.layoutManager
            let numberOfGlyphs = layoutManager.numberOfGlyphs
            var numberOfLines = 0
            var index = 0
            var lineRange:NSRange = NSRange()
            
            while (index < numberOfGlyphs) {
                layoutManager.lineFragmentRect(forGlyphAt: index, effectiveRange: &lineRange)
                index = NSMaxRange(lineRange);
                numberOfLines = numberOfLines + 1
            }
            
            if(numberOfLines>=1 && numberOfLines<8){
                let changeConstant = numberOfLines * 21
                self.massageBoXHightConstraint.constant = CGFloat(changeConstant+30)
                self.coustumBorderHightConstraint.constant = CGFloat(changeConstant+40)
                messageBox?.textContainerInset = UIEdgeInsetsMake(10, 10, 5, 5)
            }
            else if(numberOfLines>=8){
                let changeConstant = 8 * 21
                self.massageBoXHightConstraint.constant = CGFloat(changeConstant+30)
                self.coustumBorderHightConstraint.constant = CGFloat(changeConstant+40)
                messageBox?.textContainerInset = UIEdgeInsetsMake(10, 10, 5, 5)
                
            }
            
            return true
        } */
        return true
    }
    
   

    
    /*func tableView(_ tableView: UITableView, didEndDisplaying cell: UITableViewCell, forRowAt indexPath: IndexPath)
    {
        if (indexPath.row == self.appDelegate().arrUserChat.count-1) {
            // do here...
            print("display cell w")
        }
        //self.scrollToBottom()
    }*/
    
    /*func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let cell:ChatCell = storyTableView!.dequeueReusableCell(withIdentifier: cellReuseIdentifier) as! ChatCell
        print(cell.chatBubble?.frame.height ?? 0)
        return (cell.chatBubble?.frame.height)!
        //return UITableViewAutomaticDimension
    }*/
    
    /*func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableViewAutomaticDimension
    }*/
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    static var realDelegate: AppDelegate?;
    
    func appDelegate() -> AppDelegate {
        if Thread.isMainThread{
            return UIApplication.shared.delegate as! AppDelegate;
        }
        let dg = DispatchGroup();
        dg.enter()
        DispatchQueue.main.async{
            ChatViewController.realDelegate = UIApplication.shared.delegate as? AppDelegate;
            dg.leave();
        }
        dg.wait();
        return ChatViewController.realDelegate!;
    }
    func getMediaURL(ofPhotoWith mPhasset: PHAsset, completionHandler : @escaping ((_ responseURL : URL?) -> Void)) {
        
        if mPhasset.mediaType == .image {
            let options: PHContentEditingInputRequestOptions = PHContentEditingInputRequestOptions()
            options.canHandleAdjustmentData = {(adjustmeta: PHAdjustmentData) -> Bool in
                return true
            }
            mPhasset.requestContentEditingInput(with: options, completionHandler: { (contentEditingInput, info) in
                completionHandler(contentEditingInput!.fullSizeImageURL)
            })
        } else if mPhasset.mediaType == .video {
            let options: PHVideoRequestOptions = PHVideoRequestOptions()
            options.version = .original
            PHImageManager.default().requestAVAsset(forVideo: mPhasset, options: options, resultHandler: { (asset, audioMix, info) in
                if let urlAsset = asset as? AVURLAsset {
                    let localVideoUrl = urlAsset.url
                    completionHandler(localVideoUrl)
                } else {
                    completionHandler(nil)
                }
            })
        }
        
    }
    
    func PHAssetForFileURL(url: NSURL) -> PHAsset? {
        
        let imageRequestOptions = PHImageRequestOptions()
        imageRequestOptions.version = .current
        imageRequestOptions.deliveryMode = .fastFormat
        imageRequestOptions.resizeMode = .fast
        imageRequestOptions.isSynchronous = true
        
        let fetchResult: PHFetchResult = PHAsset.fetchAssets(with: nil)
        for index in 0 ..< fetchResult.count {
            let asset: PHAsset = fetchResult[index]
            var found = false
            if(asset.mediaType == .image)
            {
                PHImageManager.default().requestImageData(for: asset,
                                                          options: imageRequestOptions) { (_, _, _, info) in
                                                            if let urlkey = info?["PHImageFileURLKey"] as? NSURL {
                                                                if urlkey.absoluteString! == url.absoluteString! {
                                                                    found = true
                                                                }
                                                            }
                }

            }
            if (found) {
                return asset
            }
        }
        
        return nil
    }
    
    //This function is used for generate preview
    func PHAssetForMediaURL(url: NSURL) -> PHAsset? {
        
        let imageRequestOptions = PHImageRequestOptions()
        imageRequestOptions.version = .current
        imageRequestOptions.deliveryMode = .fastFormat
        imageRequestOptions.resizeMode = .fast
        imageRequestOptions.isSynchronous = true
        
        let fetchResult: PHFetchResult = PHAsset.fetchAssets(with: nil)
        for index in 0 ..< fetchResult.count {
            let asset: PHAsset = fetchResult[index]
            var found = false
            if(asset.mediaType == .video)
            {
                self.getMediaURL(ofPhotoWith: asset, completionHandler: { (myURL) in
                    
                    if(myURL! == url as URL)
                    {
                        found = true
                    }
                    
                })
                if (found) {
                    return asset
                }
                
            }
            
        }
        
        return nil
    }
    
    func getAssetThumbnail(asset: PHAsset, size: CGFloat) -> UIImage {
        let retinaScale = UIScreen.main.scale
        let retinaSquare = CGSize(width: size * retinaScale, height: size * retinaScale)
        let cropSizeLength = min(asset.pixelWidth, asset.pixelHeight)
        
        let originalWidth: CGFloat  = CGFloat(asset.pixelWidth)
        let originalHeight: CGFloat = CGFloat(asset.pixelHeight)
        
        
        
        var posX: CGFloat = 0.0
        var posY: CGFloat = 0.0
        var cgwidth: CGFloat = originalWidth
        var cgheight: CGFloat = originalHeight
        
        // See what size is longer and create the center off of that
        if originalWidth > originalHeight {
            posX = ((originalWidth - originalHeight) / 2)
            posY = 0
            cgwidth = originalHeight
            cgheight = originalHeight
        } else {
            posX = 0
            posY = ((originalHeight - originalWidth) / 2)
            cgwidth = originalWidth
            cgheight = originalWidth
        }
        
        
        let square = CGRect(x: posX, y: posY, width: CGFloat(cropSizeLength), height: CGFloat(cropSizeLength))
        let cropRect = square.applying(CGAffineTransform(scaleX: 1.0/CGFloat(asset.pixelWidth), y: 1.0/CGFloat(asset.pixelHeight)))
        
        
        
        
        //let cropRect = CGRect(x: posX, y: posY, width: edge, height: edge)
        
        
        let manager = PHImageManager.default()
        let options = PHImageRequestOptions()
        var thumbnail = UIImage()
        
        options.isSynchronous = true
        options.deliveryMode = .highQualityFormat
        options.resizeMode = .exact
        options.normalizedCropRect = cropRect
        
        manager.requestImage(for: asset, targetSize: retinaSquare, contentMode: .aspectFit, options: options, resultHandler: {(result, info)->Void in
            do {
                if(result != nil){
                thumbnail =  try result!
                //Creating Request Data
                }
            } catch {
                print(error.localizedDescription)
            }
            
        })
        return thumbnail
    }
    
    func getVideoThumbnailImage(forUrl url: URL) -> UIImage? {
        let asset: AVAsset = AVAsset(url: url)
        let imageGenerator = AVAssetImageGenerator(asset: asset)
        imageGenerator.maximumSize = CGSize(width: 320, height: 180) //.maximumSize = CGSize
        imageGenerator.appliesPreferredTrackTransform = true
        do {
            let thumbnailImage = try imageGenerator.copyCGImage(at: CMTimeMake(value: 1, timescale: 60) , actualTime: nil)
            let img: UIImage = UIImage(cgImage: thumbnailImage)
            return img
        } catch let error {
            print(error)
            let img: UIImage = UIImage(named: "splash_bg")!
            return img
        }
    }
    
    func openContactsIn(_ sender: UIButton!)
    {
        
        //var indexPath: NSIndexPath!
        
        let ce = sender.superview as? ChatBubbleIn
        //print(ce ?? "")
        let superview = ce?.superview
        let superview2 = superview?.superview
        let superview3 = superview2?.superview as! ChatCell
        _ = superview3.superview
        //print(superview4 ?? "")
        
        appDelegate().selectedForwardIndex = storyTableView!.indexPath(for: superview3)! as NSIndexPath
        
        if let superview = sender.superview as? ChatCell {
            

            
                if let content = superview.superview as? ChatCell {
                    
                    if let cell = content.superview as? ChatCell {
                        appDelegate().selectedForwardIndex = storyTableView!.indexPath(for: cell)! as NSIndexPath
                        //print(indexPath.section)
                        //print(indexPath.row)

                    }
                
            }

            
            
        }

        
        // get a reference to the view controller for the popover
        let popController = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "Forward")
        
        // set the presentation style
        popController.modalPresentationStyle = UIModalPresentationStyle.fullScreen
        //popController.modalPresentationStyle = .popover
        popController.modalTransitionStyle = .crossDissolve
        
        // set up the popover presentation controller
        popController.popoverPresentationController?.permittedArrowDirections = UIPopoverArrowDirection.up
        popController.popoverPresentationController?.delegate = self as? UIPopoverPresentationControllerDelegate
        popController.popoverPresentationController?.sourceView = self.view // button
        //popController.popoverPresentationController?.sourceRect = (viewPopup?.bounds)!
        // present the popover
        self.present(popController, animated: true, completion: nil)
    }
    
    @objc func resendMedia(_ sender: UIButton!)
    {
        if ClassReachability.isConnectedToNetwork() {
            if(appDelegate().xmppStream?.isDisconnected)!
            {
                if(appDelegate().connect())
                {
                    resendMediaIfConnected(sender)
                }
            }
            else
            {
                resendMediaIfConnected(sender)
            }
        } else {
            alertWithTitle(title: nil, message: "Please check your Internet connection.", ViewController: self)
            
        }
       
        
        
    }
    @objc func clickOnTitel(button: UIButton) {
        if(self.appDelegate().curRoomType != "chat"){
            if (appDelegate().isJoined == "yes" && self.appDelegate().isBanterClosed != "closed") {
                appDelegate().getbanterroomusers(roomid:  appDelegate().toUserJID)
               
                
                let storyBoard = UIStoryboard(name: "Main", bundle: nil)
                let myTeamsController : UserDetailsViewController = storyBoard.instantiateViewController(withIdentifier: "UserDetails") as! UserDetailsViewController
                //  appDelegate().isFromSettings = true
                //show(myTeamsController, sender: self)
                myTeamsController.detSupportedTeam = supportedTeam
                myTeamsController.detOpponentTeam = opponentTeam
                myTeamsController.toNameForRoom = appDelegate().toName
                myTeamsController.toUserJIDForRoom = appDelegate().toUserJID
                myTeamsController.curRoomTypeForRoom = appDelegate().curRoomType
                //self.present(myTeamsController, animated: true, completion: nil)
                show(myTeamsController, sender: self)
            }
        }
        else{
           // appDelegate().getuserdetail()
          /*  var dictRequest = [String: AnyObject]()
            dictRequest["cmd"] = "userdetail" as AnyObject
            
            
            
            do {
                //Creating Request Data
                var dictRequestData = [String: AnyObject]()
                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                let arrdUserJid = myjid?.components(separatedBy: "@")
                let userUserJid = arrdUserJid?[0]
                
                let myjidtrim: String? = userUserJid
                let login: String? = appDelegate().toUserJID
                let arrReadUserJid = login?.components(separatedBy: "@")
                let userReadUserJid = arrReadUserJid?[0]
                
                let myMobile: String? = userReadUserJid//UserDefaults.standard.string(forKey: "myMobileNo")
                dictRequestData["username"] = myjidtrim as AnyObject
                dictRequestData["blockedusername"] = myMobile as AnyObject

                dictRequest["requestData"] = dictRequestData as AnyObject
                //dictRequest.setValue(dictMobiles, forKey: "requestData")
                //print(dictRequest)
                
                let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                let strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
                //print(strGetBanterDetails)
                appDelegate().sendRequestToAPI(strRequestDict: strGetBanterDetails)
            } catch {
                print(error.localizedDescription)
            }*/
            let storyBoard = UIStoryboard(name: "Main", bundle: nil)
            let myTeamsController : ProfileDetailsViewController = storyBoard.instantiateViewController(withIdentifier: "ProfileDetails") as! ProfileDetailsViewController
            myTeamsController.RoomJid = appDelegate().toUserJID
            show(myTeamsController, sender: self)
           
            //self.present(myTeamsController, animated: true, completion: nil)
        }
       
        
       
    }
    func resendMediaIfConnected(_ sender: UIButton!)
    {
        let message: NSDictionary = self.appDelegate().arrUserChat[sender.tag] as! NSDictionary
        
        let toUser: String = message.value(forKey: "toUserJID") as! String
        let isIncoming: String = message.value(forKey: "isIncoming") as! String
        let messageContent: String = message.value(forKey: "messageContent") as! String
        let messageType: String = message.value(forKey: "messageType") as! String
        let messageId: String = message.value(forKey: "messageId") as! String
        let fileLocalId: String = message.value(forKey: "fileLocalId") as! String
        let caption: String = message.value(forKey: "caption") as! String
        let time: Int64 = message.value(forKey: "time") as! Int64
        let filePath: String = message.value(forKey: "filePath") as! String
        
        
        if(isIncoming == "YES")
        {
            let chatBubble = sender.superview as? ChatBubbleIn
            
            chatBubble?.forward.isHidden = true
            
            if(messageType == "image")
            {
                //Code to fetch media from live URL
                //let url = NSURL(string: messageContent)!
                  self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "downloading")
                
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                
                AF.download(messageContent, to: destination)
                    .downloadProgress { progress in
                       // print("Download Progress: \(progress.fractionCompleted)")
                        let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                        let notificationName = Notification.Name("videoprogress")
                        NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                    }
                    .responseData { response in
                        switch response.result {
                        case .success(let data):
                            DispatchQueue.main.async(execute: { () -> Void in
                                //let tmpImg = UIImage(data: data)
                                
                                //let uuid = UUID().uuidString
                                //let filePath = self.appDelegate().saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: uuid)
                                
                                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "sent", fileLocalId: "", filePath: (response.fileURL?.path)!)
                                
                                if(self.appDelegate().isOnChatsView == true)
                                {
                                    //Post notification if user is on chats window and received any message
                                    let notificationName = Notification.Name("RefreshChatsView")
                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                }
                                else if(self.appDelegate().isOnBantersView == true)
                                {
                                    //Post notification if user is on banters window and received any message
                                    let notificationName = Notification.Name("RefreshBantersView")
                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                }
                            })
                        case .failure:
                             let fileManager = FileManager.default
                             if fileManager.fileExists(atPath: response.fileURL!.path) {
                                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "sent", fileLocalId: "", filePath: (response.fileURL?.path)!)
                                                              
                                                              if(self.appDelegate().isOnChatsView == true)
                                                              {
                                                                  //Post notification if user is on chats window and received any message
                                                                  let notificationName = Notification.Name("RefreshChatsView")
                                                                  NotificationCenter.default.post(name: notificationName, object: nil)
                                                              }
                                                              else if(self.appDelegate().isOnBantersView == true)
                                                              {
                                                                  //Post notification if user is on banters window and received any message
                                                                  let notificationName = Notification.Name("RefreshBantersView")
                                                                  NotificationCenter.default.post(name: notificationName, object: nil)
                                                              }
                             }
                             else{
                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                            }
                        }
                        
                }
                
            }
            else if(messageType == "video")
            {
                //Code to fetch media from live URL
                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "downloading")
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                AF.download(messageContent, to: destination)
                    .downloadProgress { progress in
                        //print("Download Progress: \(progress.fractionCompleted)")
                        let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                        let notificationName = Notification.Name("videoprogress")
                        NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                    }
                    .responseData { response in
                        switch response.result {
                        case .success(let data):
                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "sent", fileLocalId: "", filePath: (response.fileURL?.path)!)
                            
                            if(self.appDelegate().isOnChatView)
                            {
                                let notificationName = Notification.Name("MessageReceivedFromServer")
                                NotificationCenter.default.post(name: notificationName, object: nil)
                            }
                        case .failure:
                            let fileManager = FileManager.default
                            if(response.fileURL!.path != nil){
                                                        if fileManager.fileExists(atPath: response.fileURL!.path) {
                                                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "sent", fileLocalId: "", filePath: (response.fileURL?.path)!)
                                                                                       
                                                                                       if(self.appDelegate().isOnChatView)
                                                                                       {
                                                                                           let notificationName = Notification.Name("MessageReceivedFromServer")
                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                       }
                            }
                            else{
                                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                            }
                            }else{
                                                            
                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                            }
                            
                        }
                       
                }
                
            }
            
        }
        else if(filePath.isEmpty)
        {
            let chatBubble = sender.superview as? ChatBubbleIn
            
            chatBubble?.forward.isHidden = true
            
            if(messageType == "image")
            {
                //Code to fetch media from live URL
                //let url = NSURL(string: messageContent)!
                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "downloading")
                // Download task:
                // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                
                AF.download(messageContent, to: destination)
                    .downloadProgress { progress in
                        //print("Download Progress: \(progress.fractionCompleted)")
                        let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                        let notificationName = Notification.Name("videoprogress")
                        NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                    }
                    .responseData { response in
                        switch response.result {
                        case .success(let data):
                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "sent", fileLocalId: "", filePath: (response.fileURL?.path)!)
                                                           
                                                           if(self.appDelegate().isOnChatsView == true)
                                                           {
                                                               //Post notification if user is on chats window and received any message
                                                               let notificationName = Notification.Name("RefreshChatsView")
                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                           }
                                                           else if(self.appDelegate().isOnBantersView == true)
                                                           {
                                                               //Post notification if user is on banters window and received any message
                                                               let notificationName = Notification.Name("RefreshBantersView")
                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                           }
                        case .failure:
                            let fileManager = FileManager.default
                            if(response.fileURL!.path != nil){
                                                        if fileManager.fileExists(atPath: response.fileURL!.path) {
                                                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "sent", fileLocalId: "", filePath: (response.fileURL?.path)!)
                                                                                       
                                                                                       if(self.appDelegate().isOnChatView)
                                                                                       {
                                                                                           let notificationName = Notification.Name("MessageReceivedFromServer")
                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                       }
                            }
                            else{
                                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                            }
                            }else{
                                                            
                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                            }
                            
                        }
                      
                }
                
            }
            else if(messageType == "video")
            {
                //Code to fetch media from live URL
               // let url = NSURL(string: messageContent)!
                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "downloading")
                // Download task:
                // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                
                AF.download(messageContent, to: destination)
                    .downloadProgress { progress in
                        //print("Download Progress: \(progress.fractionCompleted)")
                        let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                        let notificationName = Notification.Name("videoprogress")
                        NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                    }
                    .responseData { response in
                        switch response.result {
                                                                  case .success(let value):
                                                                      self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "sent", fileLocalId: "", filePath:  (response.fileURL?.path)!)
                                                                                                         
                                                                                                         if(self.appDelegate().isOnChatView)
                                                                                                         {
                                                                                                             let notificationName = Notification.Name("MessageReceivedFromServer")
                                                                                                             NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                         }
                                                                                                     
                                                                  case .failure(let error):                             let fileManager = FileManager.default
                                                                  if(response.fileURL!.path != nil){
                                                                                              if fileManager.fileExists(atPath: response.fileURL!.path) {
                                                                                                  self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "sent", fileLocalId: "", filePath: (response.fileURL?.path)!)
                                                                                                                             
                                                                                                                             if(self.appDelegate().isOnChatView)
                                                                                                                             {
                                                                                                                                 let notificationName = Notification.Name("MessageReceivedFromServer")
                                                                                                                                 NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                             }
                                                                  }
                                                                  else{
                                                                      self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                                                                  }
                                                                  }else{
                                                                                                  
                                                                  self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                                                                  }
                                                                      // error handling
                                                       
                                                                  }
                       
                }
                
            }
            
        }
        else
        {
             if(fileLocalId.isEmpty){
                if(appDelegate().isUserOnline){
                if(messageType == "image")
                {
                    let chatBubble = sender.superview as? ChatBubbleOut
                    
                    chatBubble?.forward.isHidden = true
                   let selVideoPath = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)!
                    
                    let u = URL(string: selVideoPath)
                    if(FileManager.default.fileExists(atPath:u!.path))
                    {
                        print("available")
                    }
                    
                    let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                    
                    var reqParams = [String: String]()
                    reqParams["cmd"] = "image"
                    reqParams["jid"] = registorusername
                    reqParams["key"] = "kXfqS9wUug6gVKDB"  as! String
                    self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "sending")
                    AF.upload(multipartFormData: { multiPart in
                                                           multiPart.append(u!, withName: "uploaded")
                                                                                    for (key, val) in reqParams {
                                                                                        multiPart.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                                                                    }
                                                        }, to: MediaAPI, method: .post) .uploadProgress(queue: .main, closure: { progress in
                                                            print("Upload Progress: \(progress.fractionCompleted)")
                                                            let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                                                                                               let notificationName = Notification.Name("videoprogress")
                                                                                               NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                              
                                                        }).responseJSON(completionHandler: { data in
                                                            print("upload finished: \(data)")
                                                          print("resultvalue\(data.result)")
                                                          switch data.result {
                                                                                                   case .success(let resut):
                                                                                                     print("upload success result: \(String(describing: resut))")
                                                                                                     if let JSON = resut as? [String: Any] {
                                                                                                                                                       let isSuccess = JSON["success"] as! Bool
                                                                                                                                                        if(isSuccess)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                  let trimMessage = JSON["link"] as? String
                                                                                                                                                                                                                  let thumbLink = JSON["thumblink"] as? String
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  
                                                                                                                                                                                                                self.appDelegate().sendMessageToServer(toUser, messageContent: trimMessage!, messageType: "image", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink!, roomType: self.appDelegate().curRoomType,mySupportTeam: self.appDelegate().mySupportedTeam)
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  
                                                                                                                                                                                                                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: trimMessage!, thumbLink: thumbLink!, chatStatus: "sent")
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  if(self.appDelegate().curRoomType == "banter" ){
                                                                                                                                                                                                                      if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                                                                                                                                                                          self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                      else  if(self.appDelegate().curRoomType == "teambr" ){
                                                                                                                                                                                                                                                                                     if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                                                                                                                                                                                                                                         self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                  else if(self.appDelegate().curRoomType == "group"){
                                                                                                                                                                                                                      if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                                                                                                                                                                          self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  
                                                                                                                                                                                                              }
                                                                                                                                                                                                              else
                                                                                                                                                                                                              {
                                                                                                                                                                                                                  self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed")
                                                                                                                                                                                                              }
                                                                                                                                                   }
                                                                                                   case .failure(let err):
                                                                                                       print("upload err: \(err)")
                                                             self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed")
                                                                                                   }
                                                        
                                                              
                                                        })
                    
                    /*AF.upload(
                        multipartFormData: { multipartFormData in
                            // On the PHP side you can retrive the image using $_FILES["image"]["tmp_name"]
                            multipartFormData.append(u!, withName: "uploaded")
                            for (key, val) in reqParams {
                                multipartFormData.append(val.data(using: String.Encoding.utf8)!, withName: key)
                            }
                    },
                        to: MediaAPI,
                        encodingCompletion: { encodingResult in
                            switch encodingResult {
                            case .success(let upload, _, _):
                                upload.uploadProgress(closure: { (progress) in
                                    
                                    //print("uploding")
                                    //print(progress)
                                    let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                                    let notificationName = Notification.Name("videoprogress")
                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                   
                                })
                                upload.responseJSON { response in
                                    if let jsonResponse = response.result.value as? [String: Any] {
                                        print(jsonResponse)
                                        let data = response.data
                                        if let data = data {
                                            if String(data: data, encoding: String.Encoding.utf8) != nil {
                                                if(!toUser.isEmpty)
                                                {
                                                    //print(time)
                                                    do {
                                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                        
                                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                        
                                                        if(isSuccess)
                                                        {
                                                            let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                            let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                            
                                                            
                                                            self.appDelegate().sendMessageToServer(toUser, messageContent: trimMessage, messageType: "image", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink, roomType: self.appDelegate().curRoomType,mySupportTeam: self.appDelegate().mySupportedTeam)
                                                            
                                                            
                                                            
                                                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: trimMessage, thumbLink: thumbLink, chatStatus: "sent")
                                                            
                                                            if(self.appDelegate().curRoomType == "banter" ){
                                                                if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                    self.appDelegate().ActivityCountManage()
                                                                }
                                                                
                                                            }
                                                                else  if(self.appDelegate().curRoomType == "teambr" ){
                                                                                                                               if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                                                                                   self.appDelegate().ActivityCountManage()
                                                                                                                               }
                                                                                                                               
                                                                                                                           }
                                                            else if(self.appDelegate().curRoomType == "group"){
                                                                if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                    self.appDelegate().ActivityCountManage()
                                                                }
                                                            }
                                                            
                                                        }
                                                        else
                                                        {
                                                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed")
                                                        }
                                                    } catch let error as NSError {
                                                        print(error)
                                                        self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed")
                                                    }
                                                    
                                                }
                                                
                                                
                                                
                                            }
                                        }
                                    }
                                    else{
                                        self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed")
                                    }
                                }
                            case .failure(let encodingError):
                                print(encodingError)
                                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed")
                            }
                    })*/
                   
                   
                }
                else if(messageType == "video")
                {
                    let selVideoPath = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)!
                    
                    let u = URL(string: selVideoPath)
                    if(FileManager.default.fileExists(atPath:u!.path))
                    {
                        print("available")
                    }
                    
                    let thumbVideoPath = self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)!
                      let tempImg = appDelegate().loadImageFromLocalPath(filePath: thumbVideoPath)
                    
                    
                            let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                            // self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "downloading")
                            var reqParams = [String: String]()
                            reqParams["cmd"] = "video"
                            reqParams["jid"] = registorusername
                    reqParams["key"] = "kXfqS9wUug6gVKDB"
                            //let videoLogo = self.getVideoThumbnailImage(forUrl: videoURL!)
                            //let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 30.0)
                            let videoData: NSData = tempImg!.jpegData(compressionQuality: 0.5)! as NSData
                            let base64String = videoData.base64EncodedString(options: [])
                            
                            reqParams["thumb_byte"] = base64String
                            
                    self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "sending")
                    AF.upload(multipartFormData: { multiPart in
                                                         multiPart.append(u!, withName: "uploaded")
                                                                                     for (key, val) in reqParams {
                                                                                         multiPart.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                                                                     }
                                                        }, to: MediaAPI, method: .post) .uploadProgress(queue: .main, closure: { progress in
                                                            print("Upload Progress: \(progress.fractionCompleted)")
                                                            let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                                                                                               let notificationName = Notification.Name("videoprogress")
                                                                                               NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                        }).responseJSON(completionHandler: { data in
                                                            print("upload finished: \(data)")
                                                          print("resultvalue\(data.result)")
                                                          switch data.result {
                                                                                                   case .success(let resut):
                                                                                                     print("upload success result: \(String(describing: resut))")
                                                                                                     if let JSON = resut as? [String: Any] {
                                                                                                                                                       let isSuccess = JSON["success"] as! Bool
                                                                                                                                                         if(isSuccess)
                                                                                                                                                                                                             {
                                                                                                                                                                                                                 let trimMessage = JSON["link"] as? String
                                                                                                                                                                                                                 let thumbLink = JSON["thumblink"] as? String
                                                                                                                                                                                                                 //var msgDict = [String: AnyObject]()
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID, messageContent: trimMessage!, messageType: "video", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink!, roomType: self.appDelegate().curRoomType,mySupportTeam: self.appDelegate().mySupportedTeam)
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: trimMessage!,thumbLink: thumbLink!, chatStatus: "sent")
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 if(self.appDelegate().curRoomType == "banter" ){
                                                                                                                                                                                                                     if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                                                                                                                                                                         self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                     
                                                                                                                                                                                                                 }
                                                                                                                                                                                                                     else  if(self.appDelegate().curRoomType == "teambr" ){
                                                                                                                                                                                                                                                                                                                                                   if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                                                                                                                                                                                                                                                                                                       self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                 else if(self.appDelegate().curRoomType == "group"){
                                                                                                                                                                                                                     if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                                                                                                                                                                         self.appDelegate().ActivityCountManage()
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                 }
                                                                                                                                                                                                                 //print(appDelegate().arrUserChat)
                                                                                                                                                                                                                 //self.storyTableView?.reloadData()
                                                                                                                                                                                                                 //storyTableView?.layoutIfNeeded()
                                                                                                                                                                                                                 //self.scrollToBottom()
                                                                                                                                                                                                                 //self.isAutoScroll = true
                                                                                                                                                                                                             }
                                                                                                                                                                                                             else
                                                                                                                                                                                                             {
                                                                                                                                                                                                                 self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed")
                                                                                                                                                                                                             }
                                                                                                                                                   }
                                                                                                   case .failure(let err):
                                                                                                       print("upload err: \(err)")
                                                             self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                                                                                                   }
                                                        
                                                              
                                                        })
                    
                   /* AF.upload(
                        multipartFormData: { multipartFormData in
                            // On the PHP side you can retrive the image using $_FILES["image"]["tmp_name"]
                            multipartFormData.append(u!, withName: "uploaded")
                            for (key, val) in reqParams {
                                multipartFormData.append(val.data(using: String.Encoding.utf8)!, withName: key)
                            }
                    },
                        to: MediaAPI,
                        encodingCompletion: { encodingResult in
                            switch encodingResult {
                            case .success(let upload, _, _):
                                upload.uploadProgress(closure: { (progress) in
                                    
                                   // print("uploding")
                                   // print(progress)
                                    let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                                    let notificationName = Notification.Name("videoprogress")
                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                   
                                })
                                upload.responseJSON { response in
                                    if let jsonResponse = response.result.value as? [String: Any] {
                                        print(jsonResponse)
                                        let data = response.data
                                        if let data = data {
                                            if String(data: data, encoding: String.Encoding.utf8) != nil {
                                                //print(stringData) //JSONSerialization
                                                
                                                
                                                //If Success = True
                                                if(!self.appDelegate().toUserJID.isEmpty)
                                                {
                                                    //print(time)
                                                    do {
                                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                        
                                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                        
                                                        if(isSuccess)
                                                        {
                                                            let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                            let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                            //var msgDict = [String: AnyObject]()
                                                            
                                                            self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID, messageContent: trimMessage, messageType: "video", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink, roomType: self.appDelegate().curRoomType,mySupportTeam: self.appDelegate().mySupportedTeam)
                                                            
                                                            
                                                            
                                                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: trimMessage,thumbLink: thumbLink, chatStatus: "sent")
                                                            
                                                            if(self.appDelegate().curRoomType == "banter" ){
                                                                if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                    self.appDelegate().ActivityCountManage()
                                                                }
                                                                
                                                            }
                                                                else  if(self.appDelegate().curRoomType == "teambr" ){
                                                                                                                                                                                              if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                                                                                                                                                  self.appDelegate().ActivityCountManage()
                                                                                                                                                                                              }
                                                                                                                                                                                              
                                                                                                                                                                                          }
                                                            else if(self.appDelegate().curRoomType == "group"){
                                                                if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                    self.appDelegate().ActivityCountManage()
                                                                }
                                                            }
                                                            //print(appDelegate().arrUserChat)
                                                            //self.storyTableView?.reloadData()
                                                            //storyTableView?.layoutIfNeeded()
                                                            //self.scrollToBottom()
                                                            //self.isAutoScroll = true
                                                        }
                                                        else
                                                        {
                                                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed")
                                                        }
                                                    } catch let error as NSError {
                                                        print(error)
                                                        self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                                                    }
                                                    
                                                }
                                                
                                                
                                                
                                            }
                                        }
                                    }
                                    else{
                                         self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent:messageContent, chatStatus: "failed")
                                    }
                                }
                            case .failure(let encodingError):
                                print(encodingError)
                                  self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed")
                            }
                            
                    })*/
                    
                        
                    
                    
                }
            }
            }
             else{
                if let asset = PHAsset.fetchAssets(withLocalIdentifiers: [fileLocalId], options: nil).firstObject
                {
                    
                    
                    let chatBubble = sender.superview as? ChatBubbleOut
                    
                    /*if(!(chatBubble?.loader.isAnimating)!)
                     {
                     chatBubble?.loader.startAnimating()
                     }*/
                    chatBubble?.forward.isHidden = true
                    
                    if(messageType == "image")
                    {
                        let tempImg: UIImage = self.getImageThumbnail(asset: asset)
                        let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                        
                        let boundary = self.generateBoundaryString()
                        var request = URLRequest(url: URL(string: MediaAPI)!)
                        request.httpMethod = "POST"
                        //let postString = "cmd=image&jid=919826615203&byte="+base64String
                        //request.httpBody = postString.data(using: .utf8)
                        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                        var reqParams = [String: String]()
                        reqParams["cmd"] = "image"
                        reqParams["jid"] = registorusername
                        reqParams["key"] = "kXfqS9wUug6gVKDB"
                        request.httpBody = self.createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: tempImg) as Data
                        
                        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                            if let data = data {
                                if String(data: data, encoding: String.Encoding.utf8) != nil {
                                    //print(stringData) //JSONSerialization
                                    
                                    
                                    //If Success = True
                                    if(!toUser.isEmpty)
                                    {
                                        //print(time)
                                        do {
                                            let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                            
                                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                            
                                            if(isSuccess)
                                            {
                                                let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                
                                                
                                                self.appDelegate().sendMessageToServer(toUser, messageContent: trimMessage, messageType: "image", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink, roomType: self.appDelegate().curRoomType)
                                                
                                                
                                                
                                                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: trimMessage, thumbLink: thumbLink, chatStatus: "sent")
                                                
                                                if(self.appDelegate().curRoomType == "banter"){
                                                    if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                        self.appDelegate().ActivityCountManage()
                                                    }
                                                    
                                                }
                                                    else  if(self.appDelegate().curRoomType == "teambr" ){
                                                                                                                                                                                  if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                                                                                                                                      self.appDelegate().ActivityCountManage()
                                                                                                                                                                                  }
                                                                                                                                                                                  
                                                                                                                                                                              }
                                                else if(self.appDelegate().curRoomType == "group"){
                                                    if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                        self.appDelegate().ActivityCountManage()
                                                    }
                                                }
                                                
                                                //print(appDelegate().arrUserChat)
                                                //self.storyTableView?.reloadData()
                                                //storyTableView?.layoutIfNeeded()
                                                //self.scrollToBottom()
                                                //self.isAutoScroll = true
                                            }
                                            else
                                            {
                                                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "failed", chatStatus: "failed")
                                            }
                                        } catch let error as NSError {
                                            print(error)
                                            self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "failed", chatStatus: "failed")
                                        }
                                        
                                    }
                                    
                                    
                                    
                                }
                            }
                            else
                            {
                                //print(response ?? "Responsed Failed")
                                //print(error ?? "Error Failed")
                                //let err: NSError = error! as NSError
                                //print(err.userInfo["_kCFStreamErrorCodeKey"] ?? "Error Failed")
                                //print(err.userInfo["NSLocalizedDescription"] ?? "Error Failed")
                                self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "failed", chatStatus: "failed")
                                
                            }
                        })
                        task.resume()
                    }
                    else if(messageType == "video")
                    {
                        
                        self.getMediaURL(ofPhotoWith: asset, completionHandler: { (videoURL) in
                            
                            
                            let filePath: String = "file://" + (videoURL?.path)!
                            
                            if(!filePath.isEmpty)
                            {
                                let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                                
                                let boundary = self.generateBoundaryString()
                                var request = URLRequest(url: URL(string: MediaAPI)!)
                                request.httpMethod = "POST"
                                //let postString = "cmd=image&jid=919826615203&byte="+base64String
                                //request.httpBody = postString.data(using: .utf8)
                                request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                                var reqParams = [String: String]()
                                reqParams["cmd"] = "video"
                                reqParams["jid"] = registorusername
                                reqParams["key"] = "kXfqS9wUug6gVKDB"  as! String
                                let videoLogo = self.getVideoThumbnailImage(forUrl: videoURL!)
                                let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 30.0)
                                let videoData: NSData = videoLogoSquare!.jpegData(compressionQuality: 0.5)! as NSData
                                let base64String = videoData.base64EncodedString(options: [])
                                
                                reqParams["thumb_byte"] = base64String
                                
                                
                                request.httpBody = self.createRequestBodyWithVideo(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, videoURL: videoURL!) as Data
                                
                                let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                                    if let data = data {
                                        if String(data: data, encoding: String.Encoding.utf8) != nil {
                                            //print(stringData) //JSONSerialization
                                            
                                            
                                            //If Success = True
                                            if(!self.appDelegate().toUserJID.isEmpty)
                                            {
                                                //print(time)
                                                do {
                                                    let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                    
                                                    let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                    
                                                    if(isSuccess)
                                                    {
                                                        let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                        let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                        //var msgDict = [String: AnyObject]()
                                                        
                                                        self.appDelegate().sendMessageToServer(self.appDelegate().toUserJID, messageContent: trimMessage, messageType: "video", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink, roomType: self.appDelegate().curRoomType)
                                                        
                                                        
                                                        
                                                        self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: trimMessage, thumbLink: thumbLink, chatStatus: "sent")
                                                        if(self.appDelegate().curRoomType == "banter"){
                                                            if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                self.appDelegate().ActivityCountManage()
                                                            }
                                                            
                                                        }
                                                            else  if(self.appDelegate().curRoomType == "teambr" ){
                                                                                                                                                                                          if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsTeambr)){
                                                                                                                                                                                              self.appDelegate().ActivityCountManage()
                                                                                                                                                                                          }
                                                                                                                                                                                          
                                                                                                                                                                                      }
                                                        else if(self.appDelegate().curRoomType == "group"){
                                                            if(self.appDelegate().ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                self.appDelegate().ActivityCountManage()
                                                            }
                                                        }
                                                        
                                                        //print(appDelegate().arrUserChat)
                                                        //self.storyTableView?.reloadData()
                                                        //storyTableView?.layoutIfNeeded()
                                                        //self.scrollToBottom()
                                                        //self.isAutoScroll = true
                                                    }
                                                    else
                                                    {
                                                        self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "failed", chatStatus: "failed")
                                                    }
                                                } catch let error as NSError {
                                                    print(error)
                                                    self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "failed", chatStatus: "failed")
                                                }
                                                
                                            }
                                            
                                            
                                            
                                        }
                                    }
                                    else
                                    {
                                        self.appDelegate().funGetSetLocalChats(messageId: messageId, messageContent: "failed", chatStatus: "failed")
                                    }
                                })
                                task.resume()
                            }
                            
                        })
                        
                    }
                    
                    
                }
            }

        }
    
    }
    
    func openContactsOut(_ sender: UIButton!)
    {
        
        //var indexPath: NSIndexPath!
        let ce = sender.superview as? ChatBubbleOut
        //print(ce ?? "")
        let superview = ce?.superview
        let superview2 = superview?.superview
        let superview3 = superview2?.superview as! ChatCell
        _ = superview3.superview
        //print(superview4 ?? "")
        
        appDelegate().selectedForwardIndex = storyTableView!.indexPath(for: superview3)! as NSIndexPath
        
    
        // get a reference to the view controller for the popover
        let popController = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "Forward")
        
        // set the presentation style
        popController.modalPresentationStyle = UIModalPresentationStyle.fullScreen
        //popController.modalPresentationStyle = .popover
        popController.modalTransitionStyle = .crossDissolve
        
        // set up the popover presentation controller
        popController.popoverPresentationController?.permittedArrowDirections = UIPopoverArrowDirection.up
        popController.popoverPresentationController?.delegate = self as? UIPopoverPresentationControllerDelegate
        popController.popoverPresentationController?.sourceView = self.view // button
        //popController.popoverPresentationController?.sourceRect = (viewPopup?.bounds)!
        // present the popover
        self.present(popController, animated: true, completion: nil)
    }
    func handleLongPress(rowindex: Int) {
        if(appDelegate().isBanterClosed == "closed" || appDelegate().isJoined == "no" && appDelegate().curRoomType != "chat" )
        {
            
        }
        else{
           // if longPressGestureRecognizer.state == UIGestureRecognizerState.began {
                if(!isMultiSelection)
                {
                    
                   // let touchPoint = longPressGestureRecognizer.location(in: storyTableView)
                    //if let indexPath = storyTableView?.indexPathForRow(at: touchPoint) {
                    //if let indexPath = IndexPath(row: rowindex, section: 0) as NSIndexPath {
                    
                    let indexPath = IndexPath(row: rowindex, section: 0) as NSIndexPath
                    //cell.checkedImage?.backgroundColor = cell.contentView.tintColor
                    //print(tmpSelected)
                    //let colour = cell.contentView.tintColor
                  
                    //let dict: NSDictionary? = appDelegate().allAppContacts[indexPath.row] as? NSDictionary
                    //dict?.setValue("blue", forKey: "colour")
                    if let cell: ChatCell = storyTableView!.cellForRow(at: indexPath as IndexPath) as? ChatCell{
                    
                    cell.checkedImage?.image = UIImage(named: "check")
                    }
                    var dict: [String : AnyObject] = appDelegate().arrUserChat[indexPath.row] as! [String : AnyObject]
                    dict["checkimage"] = "check" as AnyObject
                    
                    appDelegate().arrUserChat[indexPath.row] = dict as AnyObject
                        //self.storyTableView?.allowsMultipleSelectionDuringEditing = true
                        storyTableView?.allowsMultipleSelection=true
                        isMultiSelection = true
                    let contentOffset = storyTableView?.contentOffset
                    storyTableView?.reloadData()
                    storyTableView?.layoutIfNeeded()
                    storyTableView?.setContentOffset(contentOffset!, animated: false)
                    //storyTableView?.reloadData()
                    //scrollToBottom()
                        let imgMsg: UIImage = UIImage(named: "remove")!
                        btnPicker?.setImage(imgMsg, for: UIControl.State.normal)
                        messageBox?.isHidden = true
                        btnCamera?.isHidden = true
                        self.parent?.navigationItem.rightBarButtonItem = nil
                        self.navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.refresh, target: self, action: #selector(ChatViewController.Banterrefresh))
                    storyTableView?.selectRow(at: indexPath as IndexPath, animated: true, scrollPosition:.middle)
                  
                }
            //}
        }
        
    }
    func copyButtonTapped(rowindex: Int) {
        print("copy")
        let message: NSDictionary = self.appDelegate().arrUserChat[rowindex] as! NSDictionary
        let messageContent: String = message.value(forKey: "messageContent") as! String
        UIPasteboard.general.string = messageContent
    }
    func forwardButtonTapped(rowindex: Int) {
        if(appDelegate().isBanterClosed == "closed" || appDelegate().isJoined == "no" && appDelegate().curRoomType != "chat" )
        {
            
        }
        else{
            // if longPressGestureRecognizer.state == UIGestureRecognizerState.began {
            if(!isMultiSelectionbyForward)
            {
                
                // let touchPoint = longPressGestureRecognizer.location(in: storyTableView)
                //if let indexPath = storyTableView?.indexPathForRow(at: touchPoint) {
                //if let indexPath = IndexPath(row: rowindex, section: 0) as NSIndexPath {
                
                if let indexPath: NSIndexPath = IndexPath(row: rowindex, section: 0) as NSIndexPath {
                //cell.checkedImage?.backgroundColor = cell.contentView.tintColor
                //print(tmpSelected)
                //let colour = cell.contentView.tintColor
                print(storyTableView as Any)
                //let dict: NSDictionary? = appDelegate().allAppContacts[indexPath.row] as? NSDictionary
                //dict?.setValue("blue", forKey: "colour")
                    if let cell: ChatCell = storyTableView!.cellForRow(at: indexPath as IndexPath) as? ChatCell{
                
                cell.checkedImage?.image = UIImage(named: "check")
                    }
                var dict: [String : AnyObject] = appDelegate().arrUserChat[indexPath.row] as! [String : AnyObject]
                dict["checkimage"] = "check" as AnyObject
                
                appDelegate().arrUserChat[indexPath.row] = dict as AnyObject
                //self.storyTableView?.allowsMultipleSelectionDuringEditing = true
                storyTableView?.allowsMultipleSelection=true
                isMultiSelectionbyForward = true
                let contentOffset = storyTableView?.contentOffset
                storyTableView?.reloadData()
                storyTableView?.layoutIfNeeded()
                storyTableView?.setContentOffset(contentOffset!, animated: false)
                //storyTableView?.reloadData()
                //scrollToBottom()
                let imgMsg: UIImage = UIImage(named: "forward_in")!
                btnPicker?.setImage(imgMsg, for: UIControl.State.normal)
                messageBox?.isHidden = true
                btnCamera?.isHidden = true
                self.parent?.navigationItem.rightBarButtonItem = nil
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.refresh, target: self, action: #selector(ChatViewController.Banterrefresh))
                storyTableView?.selectRow(at: indexPath as IndexPath, animated: true, scrollPosition:.middle)
              
            }
            }
            //}
        }
        
    }
    func sendEmailButtonTapped(rowindex: Int) {
        let message: NSDictionary = self.appDelegate().arrUserChat[rowindex] as! NSDictionary
        
        var toUser: String = message.value(forKey: "userName") as! String
        if(appDelegate().curRoomType == "chat"){
            let arrReadUserJid = appDelegate().toUserJID.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid[0]
            toUser =  myMobile!//appDelegate().toUserJID
        }
        if let msgSentByUser = message.value(forKey: "msgSentByUser"){
            toUser =  msgSentByUser as! String
        }
        //let isIncoming: String = message.value(forKey: "isIncoming") as! String
        let messageContent: String = message.value(forKey: "messageContent") as! String
        var messageType: String = message.value(forKey: "messageType") as! String
        var messagetime: String = "" 
        //let fileLocalId: String = message.value(forKey: "fileLocalId") as! String
       // let caption: String = message.value(forKey: "caption") as! String
        //let time: Int64 = message.value(forKey: "time") as! Int64
        
        if let mili = message.value(forKey: "time")
        {
            let mili: Double = Double(truncating: (mili as AnyObject) as! NSNumber)
            let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
            let dateFormatter = DateFormatter()
            //dateFormatter.dateFormat = "dd MMMM yyyy hh:mm a"
            //dateFormatter.dateStyle = .short
            dateFormatter.dateFormat = "dd MMM yy HH:mm"
            
            
           
                messagetime = dateFormatter.string(from: myMilliseconds.dateFull as Date)
            }
        var withoutExtention: String?=""
        if(messageType == "image")
        {
            messageType = "Image"
            let arrReadUserJid = messageContent.components(separatedBy: "/")
            let temfile: String? = arrReadUserJid[arrReadUserJid.count-1]
            let fullfilename = temfile?.components(separatedBy: ".")
            let withoutfilename: String = fullfilename![0]
            let arrfilename = withoutfilename.components(separatedBy: "_")
            let fileid: String? = arrfilename[arrfilename.count-1]
            withoutExtention = fileid//fullfilename?[0]
        }
        else if(messageType == "video"){
            messageType = "Video"
            let arrReadUserJid = messageContent.components(separatedBy: "/")
            let temfile: String? = arrReadUserJid[arrReadUserJid.count-1]
            let fullfilename = temfile?.components(separatedBy: ".")
            let withoutfilename: String = fullfilename![0]
            let arrfilename = withoutfilename.components(separatedBy: "_")
            let fileid: String? = arrfilename[arrfilename.count-1]
            withoutExtention = fileid//fullfilename?[0]
        }
        else{
             messageType = "Text"
            withoutExtention = messageContent
        }
        
        let mailComposeViewController = configuredMailComposeViewController(messageTime: messagetime, messageType: messageType, messageContent: withoutExtention!, messageUser: toUser)
        if MFMailComposeViewController.canSendMail() {
            present(mailComposeViewController, animated: true, completion: nil)
        } else {
            self.showSendMailErrorAlert()
        }
       
    }
    
    func configuredMailComposeViewController(messageTime: String,messageType: String,messageContent: String,messageUser: String) -> MFMailComposeViewController {
        let mailComposerVC = MFMailComposeViewController()
        mailComposerVC.mailComposeDelegate = self // Extremely important to set the --mailComposeDelegate-- property, NOT the --delegate-- property
        
        mailComposerVC.setToRecipients(["support@ifootballfan.com"])
        mailComposerVC.setSubject("Abuse Report")
        let login: String? = UserDefaults.standard.string(forKey: "userJID")
        let useremail: String? = UserDefaults.standard.string(forKey: "useremail")
        let arrReadUserJid = login?.components(separatedBy: "@")
        let myMobile: String? = arrReadUserJid?[0]
        let userName: String? = UserDefaults.standard.string(forKey: "userName")
        mailComposerVC.setMessageBody("Hi Football Fan Support,</br></br>I would like to report an abuse on following:\nContent Type: \(messageType)</br>Content: \(messageContent)</br></br>Content Sender Details:</br>Username: \(messageUser)</br>Date & Time Sent: \(messageTime)</br></br>Abuse Reporter Details:</br>Username: \(myMobile ?? "")</br>Email Address: \(useremail ?? "")</br></br><strong>ABUSE REPORT REASON</strong> <t style='color: red;'>(mandatory else the report will be ignored)</t>:</br></br></br></br>Please take appropriate action.</br><strong><p style='color: red;'>Please note: Except abuse report reason please do not add or amend any other information in this message else we may not be able to handle your request appropriately.</strong></p></br></br></br>â</br>Thanks</br>\(userName ?? "")", isHTML: true)
        
        return mailComposerVC
    }
    
    
    
    func showSendMailErrorAlert() {
        let sendMailErrorAlert = UIAlertView(title: "Could Not Send Email", message: "Your device could not send e-mail.  Please check e-mail configuration and try again.", delegate: self, cancelButtonTitle: "OK")
        sendMailErrorAlert.show()
    }
    
    // MARK: MFMailComposeViewControllerDelegate Method
    func mailComposeController(_ controller: MFMailComposeViewController, didFinishWith result: MFMailComposeResult, error: Error?) {
        controller.dismiss(animated: true, completion: nil)
    }

    @objc func Banterrefresh(sender:UIButton) {
        //print("add pressed")
        let allSelected = self.storyTableView?.indexPathsForSelectedRows
        if((allSelected?.count)! > 0)
        {
            for sel in allSelected!
            {
                let indexP: NSIndexPath = sel as NSIndexPath
                var dict: [String : AnyObject] = appDelegate().arrUserChat[indexP.row] as! [String : AnyObject]
                dict["checkimage"] = "uncheck" as AnyObject
                
                appDelegate().arrUserChat[indexP.row] = dict as AnyObject
            }
            
        }
        for i in 0...appDelegate().arrUserChat.count-1 {
            //print(i)
            var dict: [String : AnyObject] = appDelegate().arrUserChat[i] as! [String : AnyObject]
            dict["checkimage"] = "uncheck" as AnyObject
            
            appDelegate().arrUserChat[i] = dict as AnyObject
        }
         deleteChatAtIndex()
        isMultiSelection = false
        isMultiSelectionbyForward = false
        storyTableView?.allowsMultipleSelection = false
        self.parent?.navigationItem.rightBarButtonItem = nil
        btnPicker?.isHidden = false
        btnCamera?.isHidden = false
        messageBox.isHidden = false
        btnJoinBanter?.isHidden = true
        let imgMsg: UIImage = UIImage(named: "add")!
        btnPicker?.setImage(imgMsg, for: UIControl.State.normal)

       /* if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
        {
            if(appDelegate().isAdmin == "yes")
            {
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
            }
            else
            {
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
            }
            btnPicker?.isHidden = false
            btnCamera?.isHidden = false
            messageBox.isHidden = false
            btnJoinBanter?.isHidden = true
            selectedIndexPaths = []
            let imgMsg: UIImage = UIImage(named: "add")!
            btnPicker?.setImage(imgMsg, for: UIControlState.normal)
        }*/
        if(self.appDelegate().isBanterClosed == "closed")
        {
            isAutoScroll = true
            
            btnPicker?.isHidden = true
            btnCamera?.isHidden = true
            messageBox.isHidden = true
            btnJoinBanter?.isHidden = true
            
        }
        else
        {
            if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "yes")
            {
                if(appDelegate().isAdmin == "yes")
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
                else
                {
                    self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                }
            }
                else  if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "yes")
                           {
                               if(appDelegate().isAdmin == "yes")
                               {
                                   self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                               }
                               else
                               {
                                   self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                               }
                           }
            else if(appDelegate().curRoomType == "chat"){
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(chatmenu))
                supportedTeam = 0
                opponentTeam = 0
            }
            else if(appDelegate().curRoomType == "group" && appDelegate().isJoined == "yes"){
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                supportedTeam = 0
                opponentTeam = 0
            }
            else if(appDelegate().curRoomType == "banter" && appDelegate().isJoined == "blocked")
            {
                btnPicker?.isHidden = true
                btnCamera?.isHidden = true
                messageBox.isHidden = true
                btnJoinBanter?.isHidden = true
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
            }
                else if(appDelegate().curRoomType == "teambr" && appDelegate().isJoined == "blocked")
                           {
                               btnPicker?.isHidden = true
                               btnCamera?.isHidden = true
                               messageBox.isHidden = true
                               btnJoinBanter?.isHidden = true
                               self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
                           }
            else if(appDelegate().curRoomType == "group" && appDelegate().isJoined == "blocked" || appDelegate().isJoined == "no")
            {
                btnPicker?.isHidden = true
                btnCamera?.isHidden = true
                messageBox.isHidden = true
                btnJoinBanter?.isHidden = true
                self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(chatmenu))
            }
            
           
            self.appDelegate().isUpdatesLoaded = false
            
            
            if(appDelegate().isFromPreview){
                appDelegate().isFromPreview = false
                isAutoScroll = false
            }
            else{
                isAutoScroll = true
            }
            
            
            if(self.appDelegate().curRoomType == "banter" || self.appDelegate().curRoomType == "teambr")
            {
                if(self.appDelegate().isJoined == "no")
                {
                    
                    btnPicker?.isHidden = true
                    btnCamera?.isHidden = true
                    messageBox.isHidden = true
                    btnJoinBanter?.isHidden = false
                    
                }
            }
            
            
            //storyTableView?.layoutSubviews()
            //storyTableView?.layoutIfNeeded()
            //self.scrollToBottom()
        }
        if(appDelegate().curRoomType == "chat"){
            let array = Blockeduser.rows(filter:"roomId = '\(appDelegate().toUserJID)'") as! [Blockeduser]
            if(array.count != 0){
                let disnarysound = array[0]
                
                let status = disnarysound.value(forKey: "status") as! String
                if(status == "Blocked"){
                    //isBlocked = true
                    // btnblock?.setTitle("UnBlock", for:  UIControlState.normal)
                    messageBox.isHidden = true
                    btnPicker?.isHidden = true
                    btnCamera?.isHidden = true
                }
                else{
                    messageBox.isHidden = false
                    btnPicker?.isHidden = false
                    btnCamera?.isHidden = false
                    //isBlocked = false
                    //btnblock?.setTitle("Block", for:  UIControlState.normal)
                }
            }
            else{
                messageBox.isHidden = false
                btnPicker?.isHidden = false
                btnCamera?.isHidden = false
                // isBlocked = false
                // btnblock?.setTitle("Block", for:  UIControlState.normal)
                
            }
        }
        storyTableView?.reloadData()
    }
   
    @objc func blockunblocknotify(_ notification: NSNotification) {
        
        
        
        
        let pickedAllAssets = notification.userInfo?["banterstatus"] as! String
        if(pickedAllAssets == "blocked")
        {
            appDelegate().isJoined = "blocked"
            btnPicker?.isHidden = true
            btnCamera?.isHidden = true
            messageBox.isHidden = true
            btnJoinBanter?.isHidden = true
            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
        }
           else{
            appDelegate().isJoined = "yes"
            btnPicker?.isHidden = false
            btnCamera?.isHidden = false
            messageBox.isHidden = false
            btnJoinBanter?.isHidden = true
            self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu"), style: .plain, target: self, action: #selector(leaveBanterRoom))
        }
            
        }
    func showMediaPreview1(selectedindex: Int) {
        var media = [AnyObject]()
        var indexshow: Int = 0
        for i in 0...appDelegate().arrUserChat.count-1 {
            //print(i)
            let dict: NSDictionary = appDelegate().arrUserChat[i] as! NSDictionary
            
            let MessageType = dict.value(forKey: "messageType") as! String
            
            // let messageContent = selMessage.value(forKey: "messageContent") as! String
            
            
            
            // let messageId = selMessage.value(forKey: "messageId") as! String
            
            let selMessageId = dict.value(forKey: "fileLocalId") as! String
            let isIncoming: String = dict.value(forKey: "isIncoming") as! String
            
            var selVideoPath:String = ""
            let chatStatus = dict.value(forKey: "status") as! String
            
            
            
            //if(MessageType == "image" || MessageType == "video")
            // {
            //print(dict)
            if(chatStatus != "sending" && chatStatus != "failed" && chatStatus != "downloading")
            {
                
                if(isIncoming == "YES")
                {
                    selVideoPath = self.appDelegate().getFileNameFromPathWithFile(path: dict.value(forKey: "filePath") as! String)!
                    
                    if(MessageType == "image"){
                        let imageLogo = appDelegate().loadImageFromLocalPath(filePath: selVideoPath)
                        //let imageLogo = getAssetThumbnail(asset: asset, size: 200.0)
                        //imageLogo = imageLogo?.square()
                        media.append(LightboxImage(
                            image: imageLogo!,
                            text: ""
                        ))
                        
                    }
                    else if(MessageType == "video"){
                        let videoLogo = self.getVideoThumbnailImage(forUrl: NSURL(string: selVideoPath)! as URL)!
                        
                        if(videoLogo.imageAsset != nil)
                        {
                            let videoLogoSquare = videoLogo.square()?.resized(toWidth: 100.0)
                            
                            media.append(LightboxImage(
                                image: videoLogoSquare!,
                                text: "",
                                videoURL: NSURL(string: selVideoPath)! as URL
                            ))
                        }
                    }
                } else
                {
                    if let asset = PHAsset.fetchAssets(withLocalIdentifiers: [selMessageId], options: nil).firstObject
                    {
                        //Play this local video asset
                        // PHCachingImageManager().requestAVAsset(forVideo: asset, options: nil) { (asset, audioMix, args) in
                        
                        // let assetV = asset as! AVURLAsset
                        //print(assetV.url)
                        if(MessageType == "image"){
                            let imageLogo = getAssetThumbnail(asset: asset, size: 320.0)
                            media.append(LightboxImage(
                                image: imageLogo,
                                text: ""
                            ))
                            
                        }
                        else if(MessageType == "video"){
                            selVideoPath = dict.value(forKey: "filePath") as! String
                            let videoLogo = self.getVideoThumbnailImage(forUrl: NSURL(string: selVideoPath)! as URL)!
                            
                            if(videoLogo.imageAsset != nil)
                            {
                                let videoLogoSquare = videoLogo.square()?.resized(toWidth: 100.0)
                                
                                media.append(LightboxImage(
                                    image: videoLogoSquare!,
                                    text: "",
                                    videoURL: NSURL(string: selVideoPath)! as URL
                                ))
                            }
                        }
                    }
                    else{
                         selVideoPath = self.appDelegate().getFileNameFromPathWithFile(path: dict.value(forKey: "filePath") as! String)!
                       
                        if(MessageType == "image"){
                            let imageLogo = appDelegate().loadImageFromLocalPath(filePath: selVideoPath)
                            media.append(LightboxImage(
                                image: imageLogo!,
                                text: ""
                            ))
                            
                        }
                        else if(MessageType == "video"){
                            //selVideoPath = dict.value(forKey: "filePath") as! String
                            let thumurl = dict.value(forKey: "thumb") as! String
                            var thumbVideoPath = self.appDelegate().getFileNameFromPathWithFile(path: dict.value(forKey: "thumb") as! String)!
                            //appDelegate().loadImageFromLocalPath(filePath: thumbVideoPath)
                            var videoLogo = appDelegate().loadImageFromLocalPath(filePath: thumbVideoPath)
                            if(thumurl.contains("http://")){
                                let arrReadselVideoPath = thumurl.components(separatedBy: "/")
                                let imageId = arrReadselVideoPath.last
                                let arrReadimageId = imageId?.components(separatedBy: ".")
                                let fileManager = FileManager.default
                                thumbVideoPath = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( arrReadimageId![0] + ".png")
                                if fileManager.fileExists(atPath: thumbVideoPath) {
                                    //print("file")
                                     videoLogo = UIImage(contentsOfFile: thumbVideoPath)
                                }
                            }
                            if(thumurl.isEmpty){
                                videoLogo = self.getVideoThumbnailImage(forUrl: NSURL(string: selVideoPath)! as URL)!
                            }
                          //self.getVideoThumbnailImage(forUrl: NSURL(string: thumbVideoPath)! as URL)!
                            //"file:///private/var/mobile/Containers/Data/Application/4F73A718-E692-4348-9AF3-222E107DA1CA/tmp/C57ACC2A-F2A9-49A4-A508-983276CF075A.mp4"
                            let fileManager = FileManager.default
                            if fileManager.fileExists(atPath: selVideoPath) {
                                print("FILE AVAILABLE")
                            } else {
                                print("FILE NOT AVAILABLE")
                            }
                            if(videoLogo?.imageAsset != nil)
                            {
                                let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 100.0)
                                
                                media.append(LightboxImage(
                                    image: videoLogoSquare!,
                                    text: "",
                                    videoURL: NSURL(string: selVideoPath)! as URL
                                ))
                            }
                        }
                    }
                    
                }
                if(i == selectedindex){
                    indexshow = media.count-1
                    
                }
            }
        }
        // }
        
        if(media.count>0)
        {
             appDelegate().isFromPreview = true
        let controller = LightboxController(images: media as! [LightboxImage], startIndex: indexshow)
        
        // Set delegates.
        controller.pageDelegate = self
        //controller.dismissalDelegate = self

        // Use dynamic background.
        controller.dynamicBackground = true
        //controller.currentPage = 2
                // Present your controller.
        self.present(controller, animated: true, completion: nil)
        }
        
    }
    func deletebanterroomdetails(roomid: String)  {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "deletebanterroomdetails" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        
        let time: Int64 = self.appDelegate().getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            
            dictRequestData["username"] = myMobile as AnyObject
            dictRequestData["roomid"] = roomid as AnyObject
           
            dictRequest["requestData"] = dictRequestData as AnyObject
        AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                            headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                              // 2
                                                                                                              .responseJSON { response in
                                                                                                                  switch response.result {
                                                                                                                                                          case .success(let value):
                                                                                                                                                              if let json = value as? [String: Any] {
                                                                                                                                                                      let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                      // self.finishSyncContacts()
                                                                                                                                                                      //print(" status:", status1)
                                                                                                                                                                    if(status1){
                                                                                                                                                                        // print("deletebanterroomdetails")
                                                                                                                                                                        let response: NSArray = json["responseData"] as! NSArray
                                                                                                                                                                        // print(response)
                                                                                                                                                                        let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                                                                                                                                        let roomid = roomDetailsDict.value(forKey: "roomid")
                                                                                                                                                                        if(roomid != nil)
                                                                                                                                                                        {
                                                                                                                                                                            
                                                                                                                                                                                //New code to get all joined users
                                                                                                                                                                                let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                                                                                                                                if localArrAllChats != nil
                                                                                                                                                                                {
                                                                                                                                                                                    //Code to parse json data
                                                                                                                                                                                    if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                                                                                                                                        do {
                                                                                                                                                                                            self.appDelegate().arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                                                                                                                                        } catch let error as NSError {
                                                                                                                                                                                            // print(error)
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                
                                                                                                                                                                                
                                                                                                                                                                            for tmpAllUserChats in self.appDelegate().arrAllChats
                                                                                                                                                                                {
                                                                                                                                                                                    let tmpSingleUserChat: String = tmpAllUserChats.key
                                                                                                                                                                                    
                                                                                                                                                                                    if(tmpSingleUserChat == (roomid as! String))
                                                                                                                                                                                    {
                                                                                                                                                                                        var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                                                                                                                                                        tmpArrChatDetails["isJoined"] = "no" as AnyObject
                                                                                                                                                                                        
                                                                                                                                                                                        self.appDelegate().arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                                                                                                                                                                                        
                                                                                                                                                                                        
                                                                                                                                                                                    }
                                                                                                                                                                                    
                                                                                                                                                                                }
                                                                                                                                                                                
                                                                                                                                                                                //Save array to local temp
                                                                                                                                                                                do {
                                                                                                                                                                                    if(self.appDelegate().arrAllChats.count > 0)
                                                                                                                                                                                    {
                                                                                                                                                                                        let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.appDelegate().arrAllChats, options: .prettyPrinted)
                                                                                                                                                                                        let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                                                                                                        UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                                                                                                                                                                        UserDefaults.standard.synchronize()
                                                                                                                                                                                    }
                                                                                                                                                                                } catch {
                                                                                                                                                                                    // print(error.localizedDescription)
                                                                                                                                                                                }
                                                                                                                                                                                //End
                                                                                                                                                                                //End
                                                                                                                                                                                
                                                                                                                                                                                //Send message to all users that I am left
                                                                                                                                                                                //DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                                                                                                                                                let uuid = UUID().uuidString
                                                                                                                                                                                let messageId = uuid
                                                                                                                                                                            let time: Int64 = self.appDelegate().getUTCFormateDate()
                                                                                                                                                                                
                                                                                                                                                                                let username: String = UserDefaults.standard.string(forKey: "registerusername")!
                                                                                                                                                                            if(self.appDelegate().curRoomType == "banter"){
                                                                                                                                                                                self.appDelegate().sendMessageToServer(roomid as! String, messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "roomuserleft")
                                                                                                                                                                                }
                                                                                                                                                                            else if(self.appDelegate().curRoomType == "teambr"){
                                                                                                                                                                            self.appDelegate().sendMessageToServer(roomid as! String, messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "teambr", messageSubType: "roomuserleft")
                                                                                                                                                                            }
                                                                                                                                                                             if(self.appDelegate().curRoomType == "group"){
                                                                                                                                                                                self.appDelegate().sendMessageToServer(roomid as! String, messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "roomuserleft")
                                                                                                                                                                                }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else{
                                                                                                                                                                        
                                                                                                                                                                    }
                                                                                                                                                                  
                                                                                                                                                              }
                                                                                                                                                          case .failure(let error):
                                                                                                                debugPrint(error)
                                                                                                                    
                                                                                                                    break
                                                                                                                                                              // error handling
                                                                                                                                               
                                                                                                                                                          }
                                                                                                                
                                                                                                          }
        
    }
 /*   func updateIndexPath(IndexPath : IndexPath) {
        
        // Check if the indexPath is there when deselecting or selecting
        //if(selectedIndexPaths.count>0)
        //{
            if !(selectedIndexPaths.contains(IndexPath.row)) {
                
                // if you select indexPath will be appended in this block
                
                selectedIndexPaths.append(IndexPath.row)
                
            }
                
            else {
                
                //on deselecting it will be removed in this block
                
                let index = selectedIndexPaths.index(of: IndexPath.row)
                selectedIndexPaths.remove(at: index!)
                
            }
        /*}
        else
        {
            isMultiSelection = false
            //selectedIndexPaths = []
            btnPicker?.setTitle("+", for: .normal)//setImage(imgMsg, for: UIControlState.normal)
            messageBox?.isHidden = false
            btnCamera?.isHidden = false
        }*/
        
        if(selectedIndexPaths.count==0)
        {
            isMultiSelection = false
            //selectedIndexPaths = []
            btnPicker?.setTitle("+", for: .normal)//setImage(imgMsg, for: UIControlState.normal)
            //let imgMsg: UIImage = UIImage(named: "blank")!
            
            //btnPicker?.setImage(imgMsg, for: UIControlState.normal)
            messageBox?.isHidden = false
            btnCamera?.isHidden = false
            storyTableView?.allowsMultipleSelection=false
            
        }
        
        
    }
    */
    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }Unknownmedia
    */
    @objc func Unknownmedia() {
    }
}

extension NSMutableData {
    
    func appendString(string: String) {
        let data = string.data(using: String.Encoding.utf8, allowLossyConversion: false)
        append(data!)
    }
}
extension ChatViewController: LightboxControllerPageDelegate {
    
    func lightboxController(_ controller: LightboxController, didMoveToPage page: Int) {
        //print(page)
    }
    
    
}
