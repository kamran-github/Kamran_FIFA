//
//  AppDelegate.swift
//  FootballFan
//
//  Created by Apple on 16/08/19.
//  Copyright Â© 2019 Apple. All rights reserved.
//

import UIKit
//import Fabric
//import Crashlytics
import UserNotifications
import XMPPFramework
import Alamofire
import Photos
import AssetsLibrary
import Contacts
import CoreTelephony
import CoreData
import SystemConfiguration
import AVFoundation
import Firebase
import FirebaseCore
//import FirebaseAnalytics
@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate,XMPPStreamDelegate, XMPPvCardTempModuleDelegate, XMPPRoomDelegate, XMPPMUCDelegate, XMPPAutoPingDelegate, XMPPReconnectDelegate, UNUserNotificationCenterDelegate, AVAudioPlayerDelegate {

    var window: UIWindow?
    var viewController: RegisterViewController?
    var password: String = ""
    var isOpen: Bool = false
    var xmppStream: XMPPStream? = nil
   // var xmppvCardStorage: XMPPvCardCoreDataStorage?
   // var xmppvCardStorage2: XMPPvCardCoreDataStorage?
    var xmppvCardTempModule: XMPPvCardTempModule?
    var xmppvCardAvatarModule: XMPPvCardAvatarModule?
    //var xmppRosterStorage: XMPPRosterCoreDataStorage?
    var xmppCapabilitiesStorage: XMPPCapabilitiesCoreDataStorage?
    var xmppCapabilities: XMPPCapabilities?
    var profileAvtarTemp: UIImage? = nil
    var isAvtarChanged: Bool = false
    var isvCardUpdated: Bool = false
    var isLoadingMyTeams: Bool = false
    var isOnChatsView: Bool = false
    var isContactSync: Bool = false
    var isOnBantersView: Bool = false
    var isOnprofileviewView: Bool = false
    var isOnUserDetailView: Bool = false
    var isOnChatView: Bool = false
    var isOnBlockeduserView: Bool = false
    var isOnContactsView: Bool = false
    var isOnMultiCategoriesView: Bool = false
    var isOnFanContactlistView: Bool = false
    var isFanPageRefresh: Bool = false
    var isMyFanPageRefresh: Bool = false
    //var isFanPageCommentRefresh: Bool = false
    //var isFanPageLikeRefresh: Bool = false
    var isNewsPageRefresh: Bool = false
    var isNewsPageLikeRefresh: Bool = false
    var isNewsPageCommentRefresh: Bool = false
    var isFromBanterDeepLink: Bool = false
    var isShowChatWindow: Bool = false
    var isReturnToMyFanUpdateWindow: Bool = false
    var countrySelected: String = ""
    var countryCodeSelected: String = ""
    var countryFlagSelected: String = ""
    var primaryTeamId: Int64 = 0
    var myTeamId: Int64 = 0
    var mySupportedTeam : Int64 = 0
    var aponentTeamId: Int64 = 0
    var nearbyTeamId: Int64 = 0
    var fanUpdatesTeamId: Int64 = 0
    var optionalTeam1Id: Int64 = 0
    var optionalTeam2Id: Int64 = 0
    var optionalTeam3Id: Int64 = 0
    var myTeamName: String = ""
    var aponentTeamName: String = ""
    var nearbyTeamName: String = ""
    var fanUpdatesTeamName: String = ""
    var primaryTeamName: String = ""
    var optionalTeam1Name: String = ""
    var optionalTeam2Name: String = ""
    var optionalTeam3Name: String = ""
    var primaryTeamLogo: String = ""
    var optionalTeam1Logo: String = ""
    var optionalTeam2Logo: String = ""
    var optionalTeam3Logo: String = ""
    var teamToSet = 0
    var allAppContacts = NSMutableArray()
    var allPhoneContacts = NSMutableArray()
    var tempallPhoneContacts = NSMutableArray()
    var allContacts = NSMutableArray()
    var phoneNotSplitContactsDel = NSArray()
    var phoneNotSplitContacts = NSMutableArray()
    var tempphoneNotSplitContacts = NSMutableArray()
    var fanNearByContacts: [AnyObject] = []
    var fanUpdates: [AnyObject] = [] //= NSMutableArray()
    var isLoadingFanUpdates: Bool = false
    var arrDataTeams = NSArray()//[Teams_details]()//NSArray()
    var arrFanUpdatesTeams: [AnyObject] = []
     var arrupcommingTrivia: [AnyObject] = []
    var temparrMyFanUpdatesTeams: [AnyObject] = []
    var arrFanUpdateComments: [AnyObject] = []
    var arrFanUpdateLikes: [AnyObject] = []
    var arrNews: [AnyObject] = []
    var arrNewsComments: [AnyObject] = []
    var arrNewsLikes: [AnyObject] = []
    //var arrDataBanterUsers = NSArray()
    var arrUserChat: [AnyObject] = []
    var tempArrUserChat: [AnyObject] = []
    var arrLeaderBoard: [AnyObject] = []
    var arrLeaderTopUsers: [AnyObject] = []
    var arrTotalFC: [AnyObject] = []
    var arrTotalFCTrans: [AnyObject] = []
    var arrTotalEarn: [AnyObject] = []
    var arrTotalEarnTrans: [AnyObject] = []
    var BrakingNews: [AnyObject] = []
    var Groupimagelink: String = ""
    
    var isTotalFCRefresh: Bool = false
    var isTotalEarnRefresh: Bool = false
    var issendofflinemessages: Bool = true
    
    var arrAllChats = [String: AnyObject]()
    var toUserJID: String = ""
    var toName: String = ""
    var toUserJIDForRoom: String = ""
    var toNameForRoom: String = ""
    var toAvatarURL: String = ""
    var selectedForwardIndex: NSIndexPath!
    var curRoomType: String = "chat"
    var curRoomTypeForRoom: String = "banter"
    var banterRoomName: String = ""
    var banterRoomId: String = ""
    var groupId: String = ""
    //var groupName: String = ""
    var banterJIDs = [String]()
    var groupJIDs = [String]()
    var strBanterJIDs = [AnyObject]()
    var strGroupJIDs = [AnyObject]()
    var xmppMUC: XMPPMUC!
    //var xmppRoster: XMPPRoster!
    var xmppReconnect:  XMPPReconnect!
    var xmppAutoPing:  XMPPAutoPing!
    var isBanterOwner = false
    var isJoined: String = "no"
    var isAdmin: String = "no"
    var isBanterClosed: String = "active"
    var bylogin:String=""
    //var chatDelegate: ChatDelegate?
    var StatusTemp: String = ""
    var lastOfflineDate: String = ""
    var isSendingPresence: Bool = false
    var isJoiningBanterRoom: Bool = false
    var isUpdatesLoaded: Bool = false
    var isFromSettings: Bool = false
    var NameTemp: String = ""
    var EmailTemp: String = ""
    var MobileTemp: String = ""
    var CountrycodeTemp: String = ""
    var CountryShotcutTemp: String = ""
    var DobTemp: Int64 = 0
    var bioTemp:String = ""
    
    var objXmppRoom: XMPPRoom!
    var arrBanterUsers = NSMutableArray()
    var isUserOnline: Bool = false
    var isOnline: Bool = true
    var isTeamsUpdated: Bool = false
    var backgroundTask: UIBackgroundTaskIdentifier = UIBackgroundTaskIdentifier.invalid
    //var timerXmppConection: Timer!;
    var isSendingMedia: Bool = false
   // var arrBanterDeleteLocal = NSMutableArray()
    var isFromPreview: Bool = false
    var isDidAuthenticate: Bool = false
    var db = SQLiteDB.shared
    let Realeseversion: Int64 = 24
    var isTeamNotSelected: Bool = false
    var isBanterLoaderOn: Bool = false
    var timer = Timer()
    var openffdeepurl: String = ""
    var isUpdateContacts: Bool = false
    var AppopenAfterTerminate: Bool = true
    var isFromNewChat: Bool = false
    var isffAppConected: Bool = false
    var isgetHistory: Bool = true
    var isApplyHistory = false
    var TemppaypalEmail: String = ""
    var canICallUpdatecoin: Bool = false
    var arrStanding = [AnyObject]()
    var arrFixtures = [AnyObject]()
    var isOnNewsDetailView: Bool = false
    var fanUpdateMute: Bool = true
    var orientationLock = UIInterfaceOrientationMask.portrait
    var isOnMyFanStories: Bool = false
    var isAppForground: Bool = true
    var isSetInactiveTime: Bool = false
    var ismodalshow: Bool = false
    var audioPlayer: AVAudioPlayer?
    var lastcreateroom: String = ""
    var mediaArr = NSMutableArray()
    var isrefreshnewsfromdetail: Bool = false
    var selectednewscommentcount: Int = 0
    var selectednewspossition: Int = 0
    var newsdic = NSDictionary()
    var customAlertVC = CustomAlertViewController.instantiate()
    var infoAlertVC = InfoAlertViewController.instantiate()
    var iscontactsyafterterminate: Bool = false
    var iscontactsyafteraddObserver: Bool = false
    var arrfilter: [AnyObject] = []
    var arrtempfilter: [AnyObject] = []
    var pageafterlogin: String = ""
    var idafterlogin: Int64 = 0
    var isOntriviaChatsView: Bool = false
     var returnHomeToOtherView:Bool = false
    var selectednewscatid: Int = 1
    var fixcategoriesID: Int = 0
    var arrhometrivia = [AnyObject]()
       var arrhomenews: NSArray = NSArray()
    var arrhomeFixedsection: NSArray = NSArray()
       var arrhomefanupdate = [AnyObject]()
    var triviamoreOption:Bool = true
    var arrpasttrivia: [AnyObject] = []
       var HomeSetSlider:Bool = true
    var APIhometime: Int64 = 0
    var APIgetfanupdatestime: Int64 = 0
    var APIgetnewstime:Int64 = 0
     var APIgettriviatime: Int64 = 0
     var APIgetoldtriviatime: Int64 = 0
    var PushHomeDic = [String : AnyObject]()
      var isOnHomeView:Bool = false
    var isnotificationpermission:Bool = false
     var usernotcomplete:Bool = false
      var isOnFanDetail:Bool = false
   var isOnloggin:Bool = false
    var recentlylogin =  false
    //Ravi Media
       var arrMedia: [AnyObject] = []
       var arrMediaComments: [AnyObject] = []
       var arrMediaLikes: [AnyObject] = []
     var arrhomemedia = [AnyObject]()
       //Ravi Media
    var messageTabindex:Int = 0
     var arrnotification: [AnyObject] = []
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        
       self.window?.backgroundColor = UIColor.white
        // for only xcode11.2
      
         UITextViewWorkaround.unique.executeWorkaround()
        var parametersDictionary: [AnyHashable: Any] = [:]
        //#if DEBUG
        parametersDictionary[kKVAParamLogLevelEnumKey] = kKVALogLevelEnumTrace
        //#endif
        parametersDictionary[kKVAParamAppGUIDStringKey] = "kofootball-fan-ios-test-0zv63cc"
        
        // KochavaTracker.shared
        KochavaTracker.shared.configure(withParametersDictionary: parametersDictionary, delegate: nil)
         
        //start code
            _ = db.openDB(copyFile:true)
            NotificationCenter.default.addObserver(self, selector: #selector(AppDelegate.networkStatusChanged(_:)), name: NSNotification.Name(rawValue: ReachabilityStatusChangedNotification), object: nil)
            isInternetAvailable()
            
            let notificationName1 = Notification.Name("Showteam")
            var dbversion = db.getDBVersion()
            if(dbversion == 0){
                db.set(version: 4)
            }
            dbversion = db.getDBVersion()
            if(dbversion == 1){
                db.set(version: 2)
                db.query(sql: "ALTER TABLE insentiveconfig ADD COLUMN fcreferral")
                db.query(sql: "ALTER TABLE insentiveconfig ADD COLUMN isfcreferral")
                
            }
            if(dbversion == 2){
                db.set(version: 3)
                db.query(sql: "ALTER TABLE insentiveconfig ADD COLUMN isstream")
                // db.query(sql: "ALTER TABLE insentiveconfig ADD COLUMN isfcreferral")
            }
            if(dbversion == 3){
                db.set(version: 4)
                db.query(sql: "ALTER TABLE insentiveconfig ADD COLUMN isfcfanstory")
                 db.query(sql: "ALTER TABLE insentiveconfig ADD COLUMN fcfanstory")
                 db.query(sql: "ALTER TABLE insentiveconfig ADD COLUMN fcfanstoryth")
                db.query(sql: "ALTER TABLE insentiveconfig ADD COLUMN islogging")
            }
        if(dbversion == 4){
            db.set(version: 5)
            db.query(sql: "ALTER TABLE insentiveconfig ADD COLUMN isteambrchat")
            
        }
        if(GetvalueFromInsentiveConfigTable(Key: islogging) as! String == "active"){
                  isOnloggin = true
        
        }
        else{
            isOnloggin = false
        }
       Clslogging.setupLogger()
            // ShowFreedomview.show((self.window?.rootViewController?.view)!, loadingText: "Start earning FanCoins by being active in Banter. Learn more \n\nSpeak out your mind with complete freedom of speech.\n\nHappy Bantering!",fancoins: String(0))
            
            // Register to receive notification
            NotificationCenter.default.addObserver(self, selector: #selector(AppDelegate.showMyTeamsUserNotComplete), name: notificationName1, object: nil)
            // HurrayAnimationIndicator.show((self.window?.rootViewController?.view)!, loadingText: "Your Banter room manager won \(String(50)) FanCoins.\n\nLearn more", fancoins: String(50) )
            /* if ClassReachability.isConnectedToNetwork() {
             
             let boundary = generateBoundaryString()
             var request = URLRequest(url: URL(string: MediaAPI)!)
             request.httpMethod = "POST"
             request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
             var reqParams = [String: String]()
             reqParams["cmd"] = "ffconfig"
             reqParams["device"] = "iphone"
             reqParams["version"] = String(Realeseversion)
             
             
             // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
             request.httpBody = createRequestBody(parameters: reqParams as [String : String], filePathKey: "", boundary: boundary) as Data
             let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
             if let data = data {
             if let stringData = String(data: data, encoding: String.Encoding.utf8) {
             //print(stringData) //JSONSerialization
             
             
             
             //print(time)
             do {
             let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
             
             let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
             
             if(isSuccess)
             {
             let isMaintanece: Bool = (jsonData?.value(forKey: "main") as? Bool)!
             if(isMaintanece){
             let mainmsg: String = (jsonData?.value(forKey: "mainmsg") as? String)!
             UserDefaults.standard.setValue(isMaintanece, forKey: "maintance")
             UserDefaults.standard.setValue("isMaintanece", forKey: "maintancetype")
             UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
             UserDefaults.standard.setValue("Server on maintenance", forKey: "maintanceTitel")
             UserDefaults.standard.synchronize()
             self.showmaintainScreen()
             }
             else{
             
             let isMaindeteary: Bool = (jsonData?.value(forKey: "manupdate") as? Bool)!
             let manver: Int64 = (jsonData?.value(forKey: "manver") as? Int64)!
             let latestvar: Int64 = (jsonData?.value(forKey: "ver") as? Int64)!
             if(isMaindeteary){
             if(self.Realeseversion < manver){
             let mainmsg: String = (jsonData?.value(forKey: "manmsg") as? String)!
             UserDefaults.standard.setValue(true, forKey: "maintance")
             UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
             UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
             UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
             UserDefaults.standard.synchronize()
             self.showmaintainScreen()
             }
             else if(self.Realeseversion < latestvar){
             UserDefaults.standard.setValue(false, forKey: "maintance")
             //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
             // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
             //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
             UserDefaults.standard.synchronize()
             let cancelversion: Int64 = Int64(UserDefaults.standard.integer(forKey: "cancelversion"))
             if(latestvar != cancelversion){
             DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
             let pickedCaption:[String: AnyObject] = ["caption": latestvar as AnyObject]
             let notificationName2 = Notification.Name("NewVersionOfApp")
             NotificationCenter.default.post(name: notificationName2, object: nil,userInfo: pickedCaption)
             }
             }
             
             }
             else{
             UserDefaults.standard.setValue(false, forKey: "maintance")
             //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
             // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
             //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
             UserDefaults.standard.synchronize()
             }
             
             }
             else{
             if(self.Realeseversion < latestvar){
             UserDefaults.standard.setValue(false, forKey: "maintance")
             //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
             // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
             //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
             UserDefaults.standard.synchronize()
             let cancelversion: Int64 = Int64(UserDefaults.standard.integer(forKey: "cancelversion"))
             if(latestvar != cancelversion){
             DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
             let pickedCaption:[String: AnyObject] = ["caption": latestvar as AnyObject]
             let notificationName2 = Notification.Name("NewVersionOfApp")
             NotificationCenter.default.post(name: notificationName2, object: nil,userInfo: pickedCaption)
             }
             }
             }
             else {
             UserDefaults.standard.setValue(false, forKey: "maintance")
             //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
             // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
             //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
             UserDefaults.standard.synchronize()
             }
             }
             
             
             
             
             
             }
             
             }
             else
             {
             //Show Error
             }
             } catch let error as NSError {
             print(error)
             //Show Error
             }
             
             }
             }
             else
             {
             //Show Error
             }
             })
             task.resume()
             
             }*/
            
            
            
            //New code to register for push notification
            application.applicationIconBadgeNumber = 0
           /* if launchOptions != nil{
                let userInfo = launchOptions?[UIApplication.LaunchOptionsKey.remoteNotification]
                if userInfo != nil {
                    // Perform action here
                    //print("In the launch")
                     PushHomeDic = userInfo as! [String : AnyObject]
                }
            }*/
            
            let userD: UserDefaults = UserDefaults.init(suiteName: "group.com.tridecimal.ltd.footballfan")!
            userD.set(0, forKey: "badge")
            userD.synchronize()
            UserDefaults.standard.setValue(0, forKey: "badge")
            UserDefaults.standard.synchronize()
            application.applicationIconBadgeNumber = 0
            //Code to uptodate teams data
            fillMyTeams()
            
            let pTeamId: Int64? = Int64(UserDefaults.standard.integer(forKey: "primaryTeamId"))
            let pTeamName: String? = UserDefaults.standard.string(forKey: "primaryTeamName") ?? ""
            
            if (pTeamId! > 0)
            {
                self.primaryTeamId = pTeamId!
                self.primaryTeamName = pTeamName!
            }
            else{
                //Code to get my teams.
                let login: String? = UserDefaults.standard.string(forKey: "userJID")
                if(login != nil){
                    //DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                         GetmyTeam()
                       
                        
                   // }
                    
                }
            }
            let storyBoard = UIStoryboard(name: "Main", bundle: nil)
                           let registerController : splashController = storyBoard.instantiateViewController(withIdentifier: "splashController") as! splashController
                           
                           //registerController.notifyImage?.image = UIImage(named: "user")
                           //registerController.notifyText?.text = "Please allow notifications for Football Fan to get notifications of messages."
                         
                           self.window = UIWindow(frame: UIScreen.main.bounds)
        self.window?.backgroundColor = UIColor.white
                           self.window?.rootViewController = registerController
                           self.window?.makeKeyAndVisible()
            //New code to show info screen befor show any permission
           /* let notified: String? = UserDefaults.standard.string(forKey: "openslider")
            if notified == nil
            {
                let storyBoard = UIStoryboard(name: "Main", bundle: nil)
                let registerController : NotifyPermissionController = storyBoard.instantiateViewController(withIdentifier: "Notify") as! NotifyPermissionController
                
                //registerController.notifyImage?.image = UIImage(named: "user")
                //registerController.notifyText?.text = "Please allow notifications for Football Fan to get notifications of messages."
                registerController.notifyType = "notification"
                
                self.window = UIWindow(frame: UIScreen.main.bounds)
                
                self.window?.rootViewController = registerController
                self.window?.makeKeyAndVisible()
            }
            else
            {
                //DispatchQueue.main.async {
                /* let notified: String? = UserDefaults.standard.string(forKey: "notification")
                 if notified != nil
                 {
                 
                 if #available(iOS 10.0, *) {
                 let center = UNUserNotificationCenter.current()
                 center.delegate = self
                 center.requestAuthorization(options: [.badge, .sound, .alert], completionHandler: {(grant, error)  in
                 if error == nil {
                 if grant {
                 DispatchQueue.main.async {
                 application.registerForRemoteNotifications()
                 //application.unregisterForRemoteNotifications()
                 }
                 } else {
                 //User didn't grant permission
                 }
                 } else {
                 print("error: ",error ?? "")
                 }
                 })
                 } else {
                 // Fallback on earlier versions
                 let settings = UIUserNotificationSettings(types: [.badge, .sound, .alert], categories: nil)
                 UIApplication.shared.registerUserNotificationSettings(settings)
                 }
                 }*/
                
                //}
                //End code to register for push notification
                if ClassReachability.isConnectedToNetwork() {
                    // Override point for customization after application launch.
                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                    let isShowTeams: String? = UserDefaults.standard.string(forKey: "isShowTeams")
                    
                    let isShowProfile: String? = UserDefaults.standard.string(forKey: "isShowProfile")
                    let isLoggedin: String? = UserDefaults.standard.string(forKey: "isLoggedin")
                    if isShowTeams != nil
                    {
                        // if(self.connect()){
                        showMyTeams()
                        // }
                        
                    }
                    //Check if user is already logged in
                    if isLoggedin == nil || isLoggedin == "NO"
                    {
                        if isShowTeams != nil
                        {
                            //if(self.connect()){
                            showMyTeams()
                            //}
                            
                        }
                        else
                        {
                            if isShowProfile == nil {
                                if (login != nil) {
                                    let isforgate: String? = UserDefaults.standard.string(forKey: "forgate")
                                    if(isforgate != nil){
                                        let tempotp = UserDefaults.standard.string(forKey: "tempotp")
                                        if(tempotp == nil){
                                            showChangepassword()
                                            
                                        }
                                    }
                                    
                                    
                                    if self.connect() {
                                        //show buddy list
                                        
                                    } else {
                                        showLogin()
                                    }
                                    
                                    
                                }
                                else
                                {
                                    //showLogin()
                                    showMainTab()
                                }
                            }
                            else
                            {
                                //Authenticate and fetch profile data
                                if(self.xmppStream?.isDisconnected)!
                                {
                                    // if self.connect() {
                                    showMyTeams()
                                    //}
                                }
                                
                            }
                        }
                        
                    }
                    else
                    {
                        
                        if(self.connect())
                        {
                            //Get from local user defaults temp
                            let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                            if localArrAllChats != nil
                            {
                                //Code to parse json data
                                if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                    do {
                                        arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                        
                                    } catch let error as NSError {
                                        print(error)
                                    }
                                }
                            }
                            
                            //End
                        }
                        
                    }
                    
                    profileAvtarTemp = UIImage(named:"user")
                    
                }
                else{
                    let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
                    if(isMaintanece){
                        self.showmaintainScreen()
                    }
                    else{
                        // Override point for customization after application launch.
                        let login: String? = UserDefaults.standard.string(forKey: "userJID")
                        let isShowTeams: String? = UserDefaults.standard.string(forKey: "isShowTeams")
                        
                        let isShowProfile: String? = UserDefaults.standard.string(forKey: "isShowProfile")
                        let isLoggedin: String? = UserDefaults.standard.string(forKey: "isLoggedin")
                        if isShowTeams != nil
                        {
                            showMyTeams()
                        }
                        //Check if user is already logged in
                        if isLoggedin == nil || isLoggedin == "NO"
                        {
                            if isShowTeams != nil
                            {
                                showMyTeams()
                            }
                            else
                            {
                                if isShowProfile == nil {
                                    if (login != nil) {
                                        let isforgate: String? = UserDefaults.standard.string(forKey: "forgate")
                                        if(isforgate != nil){
                                            let tempotp = UserDefaults.standard.string(forKey: "tempotp")
                                            if(tempotp == nil){
                                                showChangepassword()
                                                
                                            }
                                        }
                                        
                                        
                                        if self.connect() {
                                            //show buddy list
                                            
                                        } else {
                                            showLogin()
                                        }
                                        
                                        
                                    }
                                    else
                                    {
                                        //showLogin()
                                        showMainTab()
                                    }
                                }
                                else
                                {
                                    //Authenticate and fetch profile data
                                    if(self.xmppStream?.isDisconnected)!
                                    {
                                        //  if self.connect() {
                                        showMyTeams()
                                        // }
                                    }
                                    
                                }
                            }
                            
                        }
                        else
                        {
                            
                            if(self.connect())
                            {
                                //Get from local user defaults temp
                                let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                if localArrAllChats != nil
                                {
                                    //Code to parse json data
                                    if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                        do {
                                            arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                            
                                        } catch let error as NSError {
                                            print(error)
                                        }
                                    }
                                }
                                
                                //End
                            }
                            
                        }
                        
                        profileAvtarTemp = UIImage(named:"user")
                        
                    }
                }
                
                //End
                
                /*//Temp
                 if self.connect() {
                 showProfile()
                 }*/
                
                
                let strAllContacts: String? = UserDefaults.standard.string(forKey: "allContacts")
                if strAllContacts != nil
                {
                    //Code to parse json data
                    if let data = strAllContacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                        do {
                            let tmpAllContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                            
                            allContacts = NSMutableArray()
                            for record in tmpAllContacts {
                                allContacts[allContacts.count] = record
                            }
                            
                            let tmpAllAppContacts = allContacts[0] as! NSArray
                            
                            allAppContacts = NSMutableArray()
                            for record in tmpAllAppContacts {
                                allAppContacts[allAppContacts.count] = record
                            }
                            
                        }
                        catch let error as NSError {
                            print(error)
                        }
                    }
                    
                }
                
            }*/
            let strAllContacts: String? = UserDefaults.standard.string(forKey: "isTeamNotSelected")
            if strAllContacts != nil
            {
                let notificationName1 = Notification.Name("Showteam")
                NotificationCenter.default.post(name: notificationName1, object: nil)
                
            }
            // Thread.sleep(forTimeInterval: 3.0)
            
            let strNonSplitContactsLocal: String? = UserDefaults.standard.string(forKey: "allNonSplitContacts")
            if strNonSplitContactsLocal != nil
            {
                //Code to parse json data
                if let data = strNonSplitContactsLocal?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                    do {
                        let jsonData: NSArray = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                        
                        for record in jsonData {
                            phoneNotSplitContacts[phoneNotSplitContacts.count] = record
                        }
                        
                    } catch let error as NSError {
                        print(error)
                    }
                }
            }
            NotificationCenter.default.addObserver(
                self,
                selector: #selector(self.addressBookDidChange),
                name: NSNotification.Name.CNContactStoreDidChange,
                object: nil)
            //DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            // do stuff 3 seconds later
            /*  let notifycontact: String? = UserDefaults.standard.string(forKey: "notifiedcontact")
             if notifycontact != nil
             {
             let login: String? = UserDefaults.standard.string(forKey: "userJID")
             if(login != nil){
             DispatchQueue.background(background: {
             self.AddContacts()
             
             
             }, completion:{
             //self.refreshTable.endRefreshing()
             //self.storyTableView?.isScrollEnabled = true
             })
             //self.AddContacts()
             }
             
             }*/
            //}
        
            do {
                try AVAudioSession.sharedInstance().setCategory(AVAudioSession.Category(rawValue: convertFromAVAudioSessionCategory(AVAudioSession.Category.playback)))
            }
            catch {
                // report for an error
            }
            /*  DispatchQueue.main.asyncAfter(deadline: .now() + 4.0) {
             self.test()
             }*/
            /*DispatchQueue.main.async {
             AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won 10 FanCoins",fancoins: String(300))
             }*/
            //AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(String(10)) FanCoins rewards for todayâs usage. \(self.GetvalueRedeemMesg(avilablecoin: 2500))",fancoins: String(10))
            Thread.sleep(forTimeInterval: 0.1)
        if let launchOptions = launchOptions,
            let userInfo = launchOptions[.remoteNotification] as? [AnyHashable: Any]
          {
            PushHomeDic = userInfo as! [String : AnyObject]
            
          }
        
       
        FirebaseApp.configure()
       
        return true
    }
    

    @objc func addressBookDidChange(notification: NSNotification){
        //Handle event here...
        //getPhoneContacts()
        // DispatchQueue.main.async {
        if(!iscontactsyafteraddObserver){
            //iscontactsyafteraddObserver = true
            //AddContacts()
            
            DispatchQueue.background(background: {
                self.iscontactsyafterterminate = true
                self.AddContacts()
                
                
            }, completion:{
                //self.refreshTable.endRefreshing()
                //self.storyTableView?.isScrollEnabled = true
            })
            
        }
        
        //}
        //alertWithTitle(title: "Alert", message: "Contact change", ViewController: self)
    }
    func showNewPostWindow() {
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let registerController : NewFanUpdateViewController! = storyBoard.instantiateViewController(withIdentifier: "newpost") as? NewFanUpdateViewController
        //present(registerController as! UIViewController, animated: true, completion: nil)
        // self.appDelegate().curRoomType = "chat"
        window?.rootViewController!.show(registerController, sender: self)
    }
    func showchatswindows()  {
        
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let registerController : ChatsViewController! = storyBoard.instantiateViewController(withIdentifier: "Chats") as? ChatsViewController
        //present(registerController as! UIViewController, animated: true, completion: nil)
        // self.appDelegate().curRoomType = "chat"
        window?.rootViewController!.show(registerController, sender: self)
    }
    func showexternalbrowser(url:String)  {
        var strurl:String = ""
        if(url.contains("http")){
            strurl = url
        }
        else{
            strurl = "http://\(url)"
        }
        if let url = URL(string: strurl) {
            if #available(iOS 10.0, *) {
                UIApplication.shared.open(url, options: [:])
            } else {
                // Fallback on earlier versions
            }
            //  let svc = SFSafariViewController(url: url)
            // present(svc, animated: true, completion: nil)
        }
    }
    func showcontactswindows()  {
        
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let registerController : ContactsTableViewController! = storyBoard.instantiateViewController(withIdentifier: "Contacts") as? ContactsTableViewController
        //present(registerController as! UIViewController, animated: true, completion: nil)
        // self.appDelegate().curRoomType = "chat"
        window?.rootViewController!.show(registerController, sender: self)
        
    }
    func inappwindows(url:String,titel:String)  {
        UserDefaults.standard.setValue("InApp", forKey: "terms")
        UserDefaults.standard.synchronize()
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let myTeamsController : WebViewcontroller = storyBoard.instantiateViewController(withIdentifier: "webview") as! WebViewcontroller
        myTeamsController.stringtitle = titel
        myTeamsController.stringurl = url
        window?.rootViewController!.show(myTeamsController, sender: self)
        
    }
    func share() {
        let recReadUserJid: String = UserDefaults.standard.string(forKey: "userJID")!
        //let recReadTime: String = (jsonDataMessage?.value(forKey: "time") as? String)!
        let arrReadUserJid = recReadUserJid.components(separatedBy: "@")
        let userReadUserJid = arrReadUserJid[0]
        let textToShare = "Check out this cool app called \"Football Fan\". I use it to collect FanCoins rewards, participate in Football banter, post my Football stories, find fans nearby, Football news from around the world, share messages, pictures and videos.\n\nGet it free for your iPhone or Android phone at: \nwww.ifootballfan.com/app\n\nSign Up to the app and you will instantly get \(GetvalueFromInsentiveConfigTable(Key: fcsignup)) FanCoins rewards.\n\nUse my referral code \"\(userReadUserJid)\" during Sign Up to collect extra \(GetvalueFromInsentiveConfigTable(Key: fcreferral)) FanCoins."//"Check out this cool app called \"Football Fan\". I use it to earn FanCoins, participate in Football banter, post my Football stories, find fans nearby, Football news from around the world, share messages, pictures and videos.\n\nGet it free for your iPhone at:\nhttps://apple.co/2OSoN6p\n\nGet it free for your Android phone at:\nhttp://bit.ly/ff8g \n\nUse my referral code \"\(userReadUserJid)\" to earn extra \(appDelegate().GetvalueFromInsentiveConfigTable(Key: fcreferral)) FanCoins."
        
        //if let myWebsite = NSURL(string: "https://www.tridecimal.com") {
        let objectsToShare = [textToShare] as [Any]
        let activityVC = UIActivityViewController(activityItems: objectsToShare, applicationActivities: nil)
        
        //New Excluded Activities Code
        activityVC.excludedActivityTypes = [UIActivity.ActivityType.airDrop, UIActivity.ActivityType.addToReadingList]
        //
        
        activityVC.popoverPresentationController?.sourceView =  window?.rootViewController!.view
        window?.rootViewController!.present(activityVC, animated: true, completion: nil)
        //}
    }
    func application(
        _ application: UIApplication,
        continue userActivity: NSUserActivity,
        restorationHandler: @escaping ([UIUserActivityRestoring]?
        ) -> Void) -> Bool {
        
        /*
         guard userActivity.activityType == NSUserActivityTypeBrowsingWeb,
         let url = userActivity.webpageURL,
         let components = URLComponents(url: url, resolvingAgainstBaseURL: true) else {
         return false
         } */
        
        openffdeepurl = userActivity.webpageURL!.absoluteString
        if(isOnHomeView){
                   ShowDiplink()
               }
      /*  if(openffdeepurl.contains(InviteHost))
        {  let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
            
            do {
                let paramjson = openffdeepurl.replace(target: InviteHost + "?q=", withString: "")
                if(paramjson != nil)
                {
                    let decodedData = Data(base64Encoded: paramjson)
                    let decodedString = String(data: decodedData!, encoding: .utf8)!
                    
                    let data = decodedString.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                    let jsonData = try JSONSerialization.jsonObject(with:data! , options: []) as? NSDictionary
                    let type: String = (jsonData?.value(forKey: "type") as? String)!
                    //print(type)
                    isFromBanterDeepLink = true
                    if(type == "fanupdate")
                    {
                        LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Fan Story")
                        var dictRequest = [String: AnyObject]()
                        dictRequest["cmd"] = "getfanupdatebyid" as AnyObject
                        
                        var reqParams = [String: AnyObject]()
                        //reqParams["cmd"] = "getfanupdates" as AnyObject
                        let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                        reqParams["id"] = id as AnyObject
                        
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        if(myjid != nil){
                            let arrdUserJid = myjid?.components(separatedBy: "@")
                            let userUserJid = arrdUserJid?[0]
                            reqParams["username"] = userUserJid as AnyObject?
                        }
                        else{
                            reqParams["username"] = "" as AnyObject
                        }
                        
                        dictRequest["requestData"] = reqParams as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)
                        do {
                            let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                            let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                            let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                            //  print(escapedString!)
                            // print(strFanUpdates)
                            var reqParams1 = [String: AnyObject]()
                            reqParams1["request"] = strFanUpdates as AnyObject
                            let url = MediaAPIjava + "request=" + escapedString!
                            //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                            Alamofire.request(url, method:.get, parameters: nil, encoding: JSONEncoding.default,
                                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                // 2
                                .responseJSON { response in
                                    //print(response.result.value)
                                    if response.result.error == nil {
                                        if let json = response.result.value as? Dictionary<String, Any>{
                                            // print(" JSON:", json)
                                            let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                            // self.finishSyncContacts()
                                            //print(" status:", status1)
                                            if(status1){DispatchQueue.main.async {
                                                let response: NSArray = json["responseData"]  as! NSArray
                                                
                                                // print(response)
                                                //let notificationName = Notification.Name("tabindexchange")
                                                //NotificationCenter.default.post(name: notificationName, object: nil)
                                                let tabIndex:[String: Any] = ["index": "fanupdate", "response": response as [AnyObject]]
                                                if(self.isFromBanterDeepLink)
                                                {
                                                    self.isFromBanterDeepLink = false
                                                    let notificationName = Notification.Name("tabindexffdeeplink")
                                                    NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                    userInfo: tabIndex)
                                                } else {
                                                    let notificationName1 = Notification.Name("_FetchedFanUpdateByID")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                    userInfo: tabIndex)
                                                }
                                                }
                                                
                                            }
                                            else{
                                                DispatchQueue.main.async
                                                    {
                                                        
                                                        
                                                        
                                                        
                                                        
                                                }
                                                //Show Error
                                            }
                                        }
                                    } else {
                                        debugPrint(response.result.error as Any)
                                    }
                            }
                        } catch {
                            print(error.localizedDescription)
                        }
                        /* let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         let arrdUserJid = myjid?.components(separatedBy: "@")
                         let userUserJid = arrdUserJid?[0]
                         let myjidtrim: String? = userUserJid
                         var dictRequest = [String: AnyObject]()
                         dictRequest["cmd"] = "getfanupdatebyid" as AnyObject
                         var dictRequestData = [String: AnyObject]()
                         dictRequestData["id"] = id as AnyObject
                         dictRequestData["username"] = myjidtrim as AnyObject
                         dictRequest["requestData"] = dictRequestData as AnyObject
                         
                         let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                         let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                         
                         DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                         // do stuff 3 seconds later
                         self.sendRequestToAPI(strRequestDict: strFanUpdates)
                         }*/
                    } else if(type == "news")
                    {
                        LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading News")
                        let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                        let boundary = generateBoundaryString()
                        var request = URLRequest(url: URL(string: MediaAPI)!)
                        request.httpMethod = "POST"
                        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                        var reqParams = [String: AnyObject]()
                        reqParams["cmd"] = "getnewsbyid" as AnyObject
                        //reqParams["catid"] =   lastindex as AnyObject//String(describing:  lastindex)
                        
                        reqParams["id"] = id as AnyObject
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        if(myjid != nil){
                            let arrdUserJid = myjid?.components(separatedBy: "@")
                            let userUserJid = arrdUserJid?[0]
                            reqParams["username"] = userUserJid as AnyObject?
                        }
                        else{
                            reqParams["username"] = "" as AnyObject
                        }
                        
                        
                        // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                        request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                            if let data = data {
                                if String(data: data, encoding: String.Encoding.utf8) != nil {
                                    //print(stringData) //JSONSerialization
                                    
                                    
                                    
                                    //print(time)
                                    do {
                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                        
                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                        
                                        if(isSuccess)
                                        {  let response = jsonData?.value(forKey: "data") as! NSDictionary
                                            
                                            print(response)
                                            //let notificationName = Notification.Name("tabindexchange")
                                            //NotificationCenter.default.post(name: notificationName, object: nil)
                                            let tabIndex:[String: Any] = ["index": "news", "response": response ]
                                            if(self.isFromBanterDeepLink)
                                            {
                                                self.isFromBanterDeepLink = false
                                                let notificationName = Notification.Name("tabindexffdeeplink")
                                                NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                userInfo: tabIndex)
                                            } else {
                                                if(self.isOnNewsDetailView){
                                                    let notificationName1 = Notification.Name("_FetchedNewsByID")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                    userInfo: tabIndex)
                                                }
                                            }
                                        }
                                        else
                                        {
                                            LoadingIndicatorView.hide() //Show Error
                                        }
                                    } catch let error as NSError {
                                        print(error)
                                        //Show Error
                                    }
                                    
                                }
                            }
                            else
                            {
                                //Show Error
                            }
                        })
                        task.resume()
                        /*  let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         let arrdUserJid = myjid?.components(separatedBy: "@")
                         let userUserJid = arrdUserJid?[0]
                         let myjidtrim: String? = userUserJid
                         var dictRequest = [String: AnyObject]()
                         dictRequest["cmd"] = "getnewsbyid" as AnyObject
                         var dictRequestData = [String: AnyObject]()
                         dictRequestData["id"] = id as AnyObject
                         dictRequestData["username"] = myjidtrim as AnyObject
                         dictRequest["requestData"] = dictRequestData as AnyObject
                         
                         let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                         let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                         
                         DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                         // do stuff 3 seconds later
                         self.sendRequestToAPI(strRequestDict: strFanUpdates)
                         }*/
                    }
                    else if(type == "roominvite")
                    { if(myjid != nil){
                        LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Please wait while loading")
                        let id: String = (jsonData?.value(forKey: "id") as? String)!
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        let arrdUserJid = myjid?.components(separatedBy: "@")
                        let userUserJid = arrdUserJid?[0]
                        let myjidtrim: String? = userUserJid
                        var dictRequest = [String: AnyObject]()
                        dictRequest["cmd"] = "getuserroomsbyid" as AnyObject
                        var dictRequestData = [String: AnyObject]()
                        dictRequestData["roomid"] = id as AnyObject
                        dictRequestData["username"] = myjidtrim as AnyObject
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        
                        let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                        
                        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                            // do stuff 3 seconds later
                            self.sendRequestToAPI(strRequestDict: strFanUpdates)
                        }
                    }
                    else{
                        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                            // do stuff 3 seconds later
                            self.LoginwithModelPopUp()
                        }
                        }
                    }
                    else if(type == "product")
                    {
                        LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Product")
                        let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                        let boundary = generateBoundaryString()
                        var request = URLRequest(url: URL(string: MediaAPI)!)
                        request.httpMethod = "POST"
                        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                        var reqParams = [String: AnyObject]()
                        reqParams["cmd"] = "getproductbyid" as AnyObject
                        reqParams["id"] =   id as AnyObject//String(describing:  lastindex)
                        
                        
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        if(myjid != nil){
                            let arrdUserJid = myjid?.components(separatedBy: "@")
                            let userUserJid = arrdUserJid?[0]
                            reqParams["username"] = userUserJid as AnyObject?
                        }
                        else{
                            reqParams["username"] = "" as AnyObject
                        }
                        
                        
                        // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                        request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                            if let data = data {
                                if String(data: data, encoding: String.Encoding.utf8) != nil {
                                    //print(stringData) //JSONSerialization
                                    
                                    
                                    
                                    //print(time)
                                    do {
                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                        
                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                        
                                        if(isSuccess)
                                        {  // = jsonData?.value(forKey: "data") as! NSDictionary
                                            let arr = jsonData?.value(forKey: "data") as! NSArray
                                            let response = arr[0] as! NSDictionary
                                            print(response)
                                            //let notificationName = Notification.Name("tabindexchange")
                                            //NotificationCenter.default.post(name: notificationName, object: nil)
                                            let tabIndex:[String: Any] = ["index": "product", "response": response ]
                                            self.isFromBanterDeepLink = false
                                            let notificationName = Notification.Name("tabindexffdeeplink")
                                            NotificationCenter.default.post(name: notificationName, object: nil,
                                                                            userInfo: tabIndex)
                                            
                                        }
                                        else
                                        {
                                            LoadingIndicatorView.hide() //Show Error
                                        }
                                    } catch let error as NSError {
                                        print(error)
                                        //Show Error
                                    }
                                    
                                }
                            }
                            else
                            {
                                //Show Error
                            }
                        })
                        task.resume()
                        /*  let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         let arrdUserJid = myjid?.components(separatedBy: "@")
                         let userUserJid = arrdUserJid?[0]
                         let myjidtrim: String? = userUserJid
                         var dictRequest = [String: AnyObject]()
                         dictRequest["cmd"] = "getnewsbyid" as AnyObject
                         var dictRequestData = [String: AnyObject]()
                         dictRequestData["id"] = id as AnyObject
                         dictRequestData["username"] = myjidtrim as AnyObject
                         dictRequest["requestData"] = dictRequestData as AnyObject
                         
                         let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                         let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                         
                         DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                         // do stuff 3 seconds later
                         self.sendRequestToAPI(strRequestDict: strFanUpdates)
                         }*/
                    }
                   else if(type == "trivia")
                    {
                        LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Please wait while loading")
                        var dictRequest = [String: AnyObject]()
                        dictRequest["cmd"] = "gettriviabyid" as AnyObject
                        
                        
                      
                        do {
                            
                            /*let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
                             let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
                             print(strInvited)*/
                            //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                            //let arrReadUserJid = login?.components(separatedBy: "@")
                            //let userReadUserJid = arrReadUserJid?[0]
                            
                            
                            var reqParams = [String: AnyObject]()
                            let id: AnyObject = (jsonData?.value(forKey: "id") as? AnyObject)!
                            reqParams["id"] = id
                            
                            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                            if(myjid != nil){
                                let arrdUserJid = myjid?.components(separatedBy: "@")
                                let userUserJid = arrdUserJid?[0]
                                reqParams["username"] = userUserJid as AnyObject?
                            }
                            else{
                                reqParams["username"] = "" as AnyObject
                            }
                            
                            dictRequest["requestData"] = reqParams as AnyObject
                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                            //print(dictRequest)
                            let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                            let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                            let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                            //  print(escapedString!)
                            // print(strFanUpdates)
                            var reqParams1 = [String: AnyObject]()
                            reqParams1["request"] = strFanUpdates as AnyObject
                            let url = MediaAPIjava + "request=" + escapedString!
                            //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                            Alamofire.request(url, method:.get, parameters: nil, encoding: JSONEncoding.default,
                                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                // 2
                                .responseJSON { response in
                                    //print(response.result.value)
                                    if response.result.error == nil {
                                        if let json = response.result.value as? Dictionary<String, Any>{
                                            // print(" JSON:", json)
                                            let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                            // self.finishSyncContacts()
                                            //print(" status:", status1)
                                            if(status1){DispatchQueue.main.async {
                                               
                                                let arr = json["responseData"] as! NSArray
                                                let response = arr[0] as! NSDictionary
                                                print(response)
                                                //let notificationName = Notification.Name("tabindexchange")
                                                //NotificationCenter.default.post(name: notificationName, object: nil)
                                                let tabIndex:[String: Any] = ["index": "trivia", "response": response ]
                                                self.isFromBanterDeepLink = false
                                                let notificationName = Notification.Name("tabindexffdeeplink")
                                                NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                userInfo: tabIndex)
                                                
                                               
                                                }}
                                            else{
                                                DispatchQueue.main.async
                                                    {
                                                         LoadingIndicatorView.hide()
                                                        
                                                        
                                                        
                                                        
                                                }
                                                //Show Error
                                            }
                                        }
                                    } else {
                                        debugPrint(response.result.error as Any)
                                    }
                            }
                            
                            
                        } catch {
                            print(error.localizedDescription)
                        }
                      /*  let id: AnyObject = (jsonData?.value(forKey: "id") as? AnyObject)!
                        let boundary = generateBoundaryString()
                        var request = URLRequest(url: URL(string: MediaAPI)!)
                        request.httpMethod = "POST"
                        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                        var reqParams = [String: AnyObject]()
                        reqParams["cmd"] = "gettriviabyid" as AnyObject
                        reqParams["id"] =   id as AnyObject//String(describing:  lastindex)
                        
                        
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        if(myjid != nil){
                            let arrdUserJid = myjid?.components(separatedBy: "@")
                            let userUserJid = arrdUserJid?[0]
                            reqParams["username"] = userUserJid as AnyObject?
                        }
                        else{
                            reqParams["username"] = "" as AnyObject
                        }
                        
                        
                        // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                        request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                            if let data = data {
                                if String(data: data, encoding: String.Encoding.utf8) != nil {
                                    //print(stringData) //JSONSerialization
                                    
                                    
                                    
                                    //print(time)
                                    do {
                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                        
                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                        
                                        if(isSuccess)
                                        {  // = jsonData?.value(forKey: "data") as! NSDictionary
                                            let arr = jsonData?.value(forKey: "data") as! NSArray
                                            let response = arr[0] as! NSDictionary
                                            print(response)
                                            //let notificationName = Notification.Name("tabindexchange")
                                            //NotificationCenter.default.post(name: notificationName, object: nil)
                                            let tabIndex:[String: Any] = ["index": "trivia", "response": response ]
                                            self.isFromBanterDeepLink = false
                                            let notificationName = Notification.Name("tabindexffdeeplink")
                                            NotificationCenter.default.post(name: notificationName, object: nil,
                                                                            userInfo: tabIndex)
                                            
                                        }
                                        else
                                        {
                                            LoadingIndicatorView.hide() //Show Error
                                        }
                                    } catch let error as NSError {
                                        print(error)
                                        //Show Error
                                    }
                                    
                                }
                            }
                            else
                            {
                                //Show Error
                            }
                        })
                        task.resume()
                     */
                    }
                }
            } catch let error as NSError {
                print(error)
            }
            
            return true
        }*/
        
        
        
        return true
    }
    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
        //print(url)
        // Take decision according to URL
        openffdeepurl = url.absoluteString//String(contentsOf: url)//url
        if(isOnHomeView){
            ShowDiplink()
        }
        /*
         
             let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
             
             let arrdUrl = openffdeepurl.components(separatedBy: "://")
             openffdeepurl = ""
             let urlparam = arrdUrl[1]
             let arrdparam = urlparam.components(separatedBy: "/")
             // print(arrdparam)
             let scheme = arrdparam[0]
             let paramjson = arrdparam[1]
             if(scheme == "ffdeep")
             {
                 do {
                     let decodedData = Data(base64Encoded: paramjson)
                     let decodedString = String(data: decodedData!, encoding: .utf8)!
                     
                     let data = decodedString.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                     let jsonData = try JSONSerialization.jsonObject(with:data! , options: []) as? NSDictionary
                     let type: String = (jsonData?.value(forKey: "type") as? String)!
                     //print(type)
                     isFromBanterDeepLink = true
                     if(type == "fanupdate")
                     {
                         LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Fan Story")
                         var dictRequest = [String: AnyObject]()
                         dictRequest["cmd"] = "getfanupdatebyid" as AnyObject
                         
                         var reqParams = [String: AnyObject]()
                         //reqParams["cmd"] = "getfanupdates" as AnyObject
                         let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         reqParams["id"] = id as AnyObject
                         
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         if(myjid != nil){
                             let arrdUserJid = myjid?.components(separatedBy: "@")
                             let userUserJid = arrdUserJid?[0]
                             reqParams["username"] = userUserJid as AnyObject?
                         }
                         else{
                             reqParams["username"] = "" as AnyObject
                         }
                         
                         dictRequest["requestData"] = reqParams as AnyObject
                         //dictRequest.setValue(dictMobiles, forKey: "requestData")
                         //print(dictRequest)
                         do {
                             let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                             let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                             let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                             //  print(escapedString!)
                             // print(strFanUpdates)
                             var reqParams1 = [String: AnyObject]()
                             reqParams1["request"] = strFanUpdates as AnyObject
                             let url = MediaAPIjava + "request=" + escapedString!
                             //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                             Alamofire.request(url, method:.get, parameters: nil, encoding: JSONEncoding.default,
                                               headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                 // 2
                                 .responseJSON { response in
                                     //print(response.result.value)
                                     if response.result.error == nil {
                                         if let json = response.result.value as? Dictionary<String, Any>{
                                             // print(" JSON:", json)
                                             let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                             // self.finishSyncContacts()
                                             //print(" status:", status1)
                                             if(status1){DispatchQueue.main.async {
                                                 let response: NSArray = json["responseData"] as! NSArray
                                                 
                                                 // print(response)
                                                 //let notificationName = Notification.Name("tabindexchange")
                                                 //NotificationCenter.default.post(name: notificationName, object: nil)
                                                 let tabIndex:[String: Any] = ["index": "fanupdate", "response": response as [AnyObject]]
                                                 if(self.isFromBanterDeepLink)
                                                 {
                                                     self.isFromBanterDeepLink = false
                                                     let notificationName = Notification.Name("tabindexffdeeplink")
                                                     NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                     userInfo: tabIndex)
                                                 } else {
                                                     let notificationName1 = Notification.Name("_FetchedFanUpdateByID")
                                                     NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                     userInfo: tabIndex)
                                                 }
                                                 }
                                                 
                                             }
                                             else{
                                                 DispatchQueue.main.async
                                                     {
                                                         
                                                         
                                                         
                                                         
                                                         
                                                 }
                                                 //Show Error
                                             }
                                         }
                                     } else {
                                         debugPrint(response.result.error as Any)
                                     }
                             }
                         } catch {
                             print(error.localizedDescription)
                         }
                     } else if(type == "news")
                     {
                         LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading News")
                         let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let boundary = generateBoundaryString()
                         var request = URLRequest(url: URL(string: MediaAPI)!)
                         request.httpMethod = "POST"
                         request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                         var reqParams = [String: AnyObject]()
                         reqParams["cmd"] = "getnewsbyid" as AnyObject
                         //reqParams["catid"] =   lastindex as AnyObject//String(describing:  lastindex)
                         
                         reqParams["id"] = id as AnyObject
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         if(myjid != nil){
                             let arrdUserJid = myjid?.components(separatedBy: "@")
                             let userUserJid = arrdUserJid?[0]
                             reqParams["username"] = userUserJid as AnyObject?
                         }
                         else{
                             reqParams["username"] = "" as AnyObject
                         }
                         
                         
                         // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                         request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                         let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                             if let data = data {
                                 if String(data: data, encoding: String.Encoding.utf8) != nil {
                                     //print(stringData) //JSONSerialization
                                     
                                     
                                     
                                     //print(time)
                                     do {
                                         let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                         
                                         let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                         
                                         if(isSuccess)
                                         {  let response = jsonData?.value(forKey: "data") as! NSDictionary
                                             
                                             print(response)
                                             //let notificationName = Notification.Name("tabindexchange")
                                             //NotificationCenter.default.post(name: notificationName, object: nil)
                                             let tabIndex:[String: Any] = ["index": "news", "response": response ]
                                             if(self.isFromBanterDeepLink)
                                             {
                                                 self.isFromBanterDeepLink = false
                                                 let notificationName = Notification.Name("tabindexffdeeplink")
                                                 NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                 userInfo: tabIndex)
                                             } else {
                                                 if(self.isOnNewsDetailView){
                                                     let notificationName1 = Notification.Name("_FetchedNewsByID")
                                                     NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                     userInfo: tabIndex)
                                                 }
                                             }
                                         }
                                         else
                                         {
                                             LoadingIndicatorView.hide() //Show Error
                                         }
                                     } catch let error as NSError {
                                         print(error)
                                         //Show Error
                                     }
                                     
                                 }
                             }
                             else
                             {
                                 //Show Error
                             }
                         })
                         task.resume()
                         /*  let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                          let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                          let arrdUserJid = myjid?.components(separatedBy: "@")
                          let userUserJid = arrdUserJid?[0]
                          let myjidtrim: String? = userUserJid
                          var dictRequest = [String: AnyObject]()
                          dictRequest["cmd"] = "getnewsbyid" as AnyObject
                          var dictRequestData = [String: AnyObject]()
                          dictRequestData["id"] = id as AnyObject
                          dictRequestData["username"] = myjidtrim as AnyObject
                          dictRequest["requestData"] = dictRequestData as AnyObject
                          
                          let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                          let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                          
                          DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                          // do stuff 3 seconds later
                          self.sendRequestToAPI(strRequestDict: strFanUpdates)
                          }*/
                     }
                     else if(type == "roominvite")
                     {
                         if(myjid != nil)
                         {
                             LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Please wait while loading")
                             let id: String = (jsonData?.value(forKey: "id") as? String)!
                             let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                             let arrdUserJid = myjid?.components(separatedBy: "@")
                             let userUserJid = arrdUserJid?[0]
                             let myjidtrim: String? = userUserJid
                             var dictRequest = [String: AnyObject]()
                             dictRequest["cmd"] = "getuserroomsbyid" as AnyObject
                             var dictRequestData = [String: AnyObject]()
                             dictRequestData["roomid"] = id as AnyObject
                             dictRequestData["username"] = myjidtrim as AnyObject
                             dictRequest["requestData"] = dictRequestData as AnyObject
                             
                             let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                             let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                             
                             DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                 // do stuff 3 seconds later
                                 self.sendRequestToAPI(strRequestDict: strFanUpdates)
                             }
                         }else{
                             DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                 // do stuff 3 seconds later
                                 self.LoginwithModelPopUp()
                             }
                         }
                     }
                     else if(type == "product")
                     {
                         LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Product")
                         let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let boundary = generateBoundaryString()
                         var request = URLRequest(url: URL(string: MediaAPI)!)
                         request.httpMethod = "POST"
                         request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                         var reqParams = [String: AnyObject]()
                         reqParams["cmd"] = "getproductbyid" as AnyObject
                         reqParams["id"] =   id as AnyObject//String(describing:  lastindex)
                         
                         
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         if(myjid != nil){
                             let arrdUserJid = myjid?.components(separatedBy: "@")
                             let userUserJid = arrdUserJid?[0]
                             reqParams["username"] = userUserJid as AnyObject?
                         }
                         else{
                             reqParams["username"] = "" as AnyObject
                         }
                         
                         
                         // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                         request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                         let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                             if let data = data {
                                 if String(data: data, encoding: String.Encoding.utf8) != nil {
                                     //print(stringData) //JSONSerialization
                                     
                                     
                                     
                                     //print(time)
                                     do {
                                         let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                         
                                         let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                         
                                         if(isSuccess)
                                         {  //let response = jsonData?.value(forKey: "data") as! NSDictionary
                                             let arr = jsonData?.value(forKey: "data") as! NSArray
                                             let response = arr[0] as! NSDictionary
                                             // print(response)
                                             //let notificationName = Notification.Name("tabindexchange")
                                             //NotificationCenter.default.post(name: notificationName, object: nil)
                                             let tabIndex:[String: Any] = ["index": "product", "response": response ]
                                             self.isFromBanterDeepLink = false
                                             let notificationName = Notification.Name("tabindexffdeeplink")
                                             NotificationCenter.default.post(name: notificationName, object: nil,
                                                                             userInfo: tabIndex)
                                             
                                         }
                                         else
                                         {
                                             LoadingIndicatorView.hide() //Show Error
                                         }
                                     } catch let error as NSError {
                                         print(error)
                                         //Show Error
                                     }
                                     
                                 }
                             }
                             else
                             {
                                 //Show Error
                             }
                         })
                         task.resume()
                         /*  let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                          let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                          let arrdUserJid = myjid?.components(separatedBy: "@")
                          let userUserJid = arrdUserJid?[0]
                          let myjidtrim: String? = userUserJid
                          var dictRequest = [String: AnyObject]()
                          dictRequest["cmd"] = "getnewsbyid" as AnyObject
                          var dictRequestData = [String: AnyObject]()
                          dictRequestData["id"] = id as AnyObject
                          dictRequestData["username"] = myjidtrim as AnyObject
                          dictRequest["requestData"] = dictRequestData as AnyObject
                          
                          let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                          let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                          
                          DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                          // do stuff 3 seconds later
                          self.sendRequestToAPI(strRequestDict: strFanUpdates)
                          }*/
                     }
                     else if(type == "trivia")
                     {
                         LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Please wait while loading")
                         let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let boundary = generateBoundaryString()
                         var request = URLRequest(url: URL(string: MediaAPI)!)
                         request.httpMethod = "POST"
                         request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                         var reqParams = [String: AnyObject]()
                         reqParams["cmd"] = "gettriviabyid" as AnyObject
                         reqParams["id"] =   id as AnyObject//String(describing:  lastindex)
                         
                         
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         if(myjid != nil){
                             let arrdUserJid = myjid?.components(separatedBy: "@")
                             let userUserJid = arrdUserJid?[0]
                             reqParams["username"] = userUserJid as AnyObject?
                         }
                         else{
                             reqParams["username"] = "" as AnyObject
                         }
                         
                         
                         // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                         request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                         let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                             if let data = data {
                                 if String(data: data, encoding: String.Encoding.utf8) != nil {
                                     //print(stringData) //JSONSerialization
                                     
                                     
                                     
                                     //print(time)
                                     do {
                                         let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                         
                                         let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                         
                                         if(isSuccess)
                                         {  // = jsonData?.value(forKey: "data") as! NSDictionary
                                             let arr = jsonData?.value(forKey: "data") as! NSArray
                                             let response = arr[0] as! NSDictionary
                                             print(response)
                                             //let notificationName = Notification.Name("tabindexchange")
                                             //NotificationCenter.default.post(name: notificationName, object: nil)
                                             let tabIndex:[String: Any] = ["index": "trivia", "response": response ]
                                             self.isFromBanterDeepLink = false
                                             let notificationName = Notification.Name("tabindexffdeeplink")
                                             NotificationCenter.default.post(name: notificationName, object: nil,
                                                                             userInfo: tabIndex)
                                             
                                         }
                                         else
                                         {
                                             LoadingIndicatorView.hide() //Show Error
                                         }
                                     } catch let error as NSError {
                                         print(error)
                                         //Show Error
                                     }
                                     
                                 }
                             }
                             else
                             {
                                 //Show Error
                             }
                         })
                         task.resume()
                       
                         
                     }
                 } catch let error as NSError {
                     print(error)
                 }
             }
         
         */
         
        
        // }
        
        return true
    }
    func registerBackgroundTask() {
        //print("Background task started.")
        backgroundTask = UIApplication.shared.beginBackgroundTask { [weak self] in
            self?.endBackgroundTask()
        }
        assert(backgroundTask != UIBackgroundTaskIdentifier.invalid)
    }
    
    func endBackgroundTask() {
        // print("Background task ended.")
        UIApplication.shared.endBackgroundTask(convertToUIBackgroundTaskIdentifier(backgroundTask.rawValue))
        backgroundTask = UIBackgroundTaskIdentifier.invalid
    }
    
    @objc func networkStatusChanged(_ notification: NSNotification) {
        // print("Internet Checked")
        
        if let internetStatus = notification.userInfo?["internet"] as? String
        {
            if(internetStatus != "offline")
            {
                var teamver: Int64 = 0
                var tokenver: Int64 = 0
                let  data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
                let  data1 = Teams_details.rows(order:"team_Id ASC") as! [Teams_details]
                if(data.count == 0 || data1.count == 0){
                    teamver = 0
                    UserDefaults.standard.setValue(0, forKey: "teamver")
                    UserDefaults.standard.synchronize()
                }
                else{
                    teamver  = Int64(UserDefaults.standard.integer(forKey: "teamver"))
                }
                
                tokenver  = Int64(UserDefaults.standard.integer(forKey: "tokenver"))
                let boundary = generateBoundaryString()
                var request = URLRequest(url: URL(string: MediaAPI)!)
                request.httpMethod = "POST"
                request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                var reqParams = [String: String]()
                reqParams["cmd"] = "ffconfig"
                reqParams["device"] = "iphone"
                reqParams["version"] = String(Realeseversion)
                reqParams["teamver"] = String(teamver)
                 reqParams["key"] = "kXfqS9wUug6gVKDB"
                //reqParams["device"] = "ios" as String
                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                let mytriviajid: String? = UserDefaults.standard.string(forKey: "triviauser")

                           if(myjid != nil){
                               let arrdUserJid = myjid?.components(separatedBy: "@")
                               let userUserJid = arrdUserJid?[0]
                               reqParams["username"] = userUserJid
                           }
                           else if(mytriviajid != nil){
                               let arrdUserJid = mytriviajid?.components(separatedBy: "@")
                               let userUserJid = arrdUserJid?[0]
                               reqParams["username"] = userUserJid
                           }
                           else{
                               reqParams["username"] = ""
                           }
                // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                    if let data = data {
                        if String(data: data, encoding: String.Encoding.utf8) != nil {
                            //print(stringData) //JSONSerialization
                            
                            
                            
                            //print(time)
                            do {
                                let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                
                                let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                
                                if(isSuccess)
                                {
                                    let isMaintanece: Bool = (jsonData?.value(forKey: "main") as? Bool)!
                                    if(isMaintanece){
                                        let mainmsg: String = (jsonData?.value(forKey: "mainmsg") as? String)!
                                        UserDefaults.standard.setValue(isMaintanece, forKey: "maintance")
                                        UserDefaults.standard.setValue("isMaintanece", forKey: "maintancetype")
                                        UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                        UserDefaults.standard.setValue("Football Fan Maintenance", forKey: "maintanceTitel")
                                        UserDefaults.standard.synchronize()
                                        self.showmaintainScreen()
                                    }
                                    else{
                                        
                                        let isMaindeteary: Bool = (jsonData?.value(forKey: "manupdate") as? Bool)!
                                        let manver: Int64 = (jsonData?.value(forKey: "manver") as? Int64)!
                                        let latestvar: Int64 = (jsonData?.value(forKey: "ver") as? Int64)!
                                        let isprimaryteam: Int64 = (jsonData?.value(forKey: "isprimaryteam") as? Int64)!
                                        let ismobile: Int64 = (jsonData?.value(forKey: "ismobile") as? Int64)!
                                        if(isMaindeteary){
                                            if(self.Realeseversion < manver){
                                                let mainmsg: String = (jsonData?.value(forKey: "manmsg") as? String)!
                                                UserDefaults.standard.setValue(true, forKey: "maintance")
                                                UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                                UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                                UserDefaults.standard.setValue("New Mandatory Update Available", forKey: "maintanceTitel")
                                                UserDefaults.standard.synchronize()
                                                self.showmaintainScreen()
                                            }
                                            else if(self.Realeseversion < latestvar){
                                                let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
                                                UserDefaults.standard.setValue(false, forKey: "maintance")
                                                //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                                // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                                //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
                                                UserDefaults.standard.synchronize()
                                                if(isMaintanece){
                                                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                    if(login != nil)
                                                    {
                                                        self.showMainTab()
                                                    }
                                                    
                                                }
                                                self.isOnline = true
                                                
                                                let notificationName2 = Notification.Name("_isUserOnline")
                                                NotificationCenter.default.post(name: notificationName2, object: nil)
                                                
                                                let notificationName3 = Notification.Name("_isUserOnlineContacts")
                                                NotificationCenter.default.post(name: notificationName3, object: nil)
                                                let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
                                                let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
                                                let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
                                                let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
                                                let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
                                                NotificationCenter.default.post(name: notificationNametrivia, object: nil)
                                               
                                                let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                                                                               NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
                                                if(self.xmppStream != nil)
                                                {
                                                    if(self.xmppStream?.isDisconnected)!
                                                    {
                                                        if(self.connect())
                                                        {
                                                            //isSendOfflineChats = true
                                                            
                                                            DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                                // do stuff 3 seconds later
                                                                self.sendOfflineMessages()
                                                                
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        if(login != nil)
                                                        {
                                                            self.goOnline(self.xmppStream!)
                                                            
                                                            DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                                // do stuff 3 seconds later
                                                                self.sendOfflineMessages()
                                                                
                                                            }
                                                            
                                                        }
                                                    }
                                                }
                                                
                                                let cancelversion: Int64 = Int64(UserDefaults.standard.integer(forKey: "cancelversion"))
                                                if(latestvar != cancelversion){
                                                    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                        let pickedCaption:[String: AnyObject] = ["caption": latestvar as AnyObject]
                                                        let notificationName2 = Notification.Name("NewVersionOfApp")
                                                        NotificationCenter.default.post(name: notificationName2, object: nil,userInfo: pickedCaption)
                                                    }
                                                }
                                                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                                if(myjid != nil){
                                                    if(isprimaryteam == 0){
                                                        let notificationName1 = Notification.Name("Showteam")
                                                        NotificationCenter.default.post(name: notificationName1, object: nil)
                                                    }
                                                    else{
                                                        if(ismobile == 0){
                                                            UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                            UserDefaults.standard.synchronize()
                                                            UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                            UserDefaults.standard.synchronize()
                                                            let notificationName1 = Notification.Name("Showprofile")
                                                            NotificationCenter.default.post(name: notificationName1, object: nil)
                                                        }
                                                        
                                                        
                                                    }
                                                }
                                            }
                                            else{
                                                let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
                                                UserDefaults.standard.setValue(false, forKey: "maintance")
                                                UserDefaults.standard.synchronize()
                                                //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                                // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                                //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
                                                
                                                
                                                if(isMaintanece){
                                                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                    if(login != nil)
                                                    {
                                                        self.showMainTab()
                                                    }
                                                    
                                                }
                                                self.isOnline = true
                                                
                                                let notificationName2 = Notification.Name("_isUserOnline")
                                                NotificationCenter.default.post(name: notificationName2, object: nil)
                                                
                                                let notificationName3 = Notification.Name("_isUserOnlineContacts")
                                                NotificationCenter.default.post(name: notificationName3, object: nil)
                                                let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
                                                let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
                                                let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
                                                let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
                                                let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
                                                NotificationCenter.default.post(name: notificationNametrivia, object: nil)
                                                
                                                let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                                                                               NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
                                                if(self.xmppStream != nil)
                                                {
                                                    if(self.xmppStream?.isDisconnected)!
                                                    {
                                                        if(self.connect())
                                                        {
                                                            //isSendOfflineChats = true
                                                            
                                                            DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                                // do stuff 3 seconds later
                                                                self.sendOfflineMessages()
                                                                
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        if(login != nil)
                                                        {
                                                            self.goOnline(self.xmppStream!)
                                                            
                                                            DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                                // do stuff 3 seconds later
                                                                self.sendOfflineMessages()
                                                                
                                                            }
                                                            
                                                        }
                                                    }
                                                }
                                                // Comment by Mayank 18 Jun 2018
                                                /*
                                                 DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                 
                                                 var data = [TeamCategories_detail]()
                                                 data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
                                                 if(data.count == 0){
                                                 var dictRequest = [String: AnyObject]()
                                                 dictRequest["cmd"] = "teamsync" as AnyObject
                                                 var dictRequestData = [String: AnyObject]()
                                                 
                                                 dictRequestData["version"] = self.Realeseversion as AnyObject
                                                 dictRequest["requestData"] = dictRequestData as AnyObject
                                                 //dictRequest["version"] = self.Realeseversion as AnyObject
                                                 do {
                                                 let dataTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                 let strTeams = NSString(data: dataTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                 // print(strTeams)
                                                 self.sendRequestToAPI(strRequestDict: strTeams)
                                                 } catch {
                                                 //  print(error.localizedDescription)
                                                 }
                                                 }
                                                 } */
                                            }
                                            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                            if(myjid != nil){
                                                if(isprimaryteam == 0){
                                                    let notificationName1 = Notification.Name("Showteam")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil)
                                                }
                                                else{
                                                    if(ismobile == 0){
                                                        UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        let notificationName1 = Notification.Name("Showprofile")
                                                        NotificationCenter.default.post(name: notificationName1, object: nil)
                                                    }
                                                    
                                                    
                                                }
                                            }
                                        }
                                        else{
                                            if(self.Realeseversion < latestvar){
                                                let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
                                                UserDefaults.standard.setValue(false, forKey: "maintance")
                                                UserDefaults.standard.synchronize()
                                                if(isMaintanece){
                                                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                    if(login != nil)
                                                    {
                                                        self.showMainTab()
                                                    }
                                                    
                                                }
                                                
                                                //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                                // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                                //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
                                                self.isOnline = true
                                                
                                                let notificationName2 = Notification.Name("_isUserOnline")
                                                NotificationCenter.default.post(name: notificationName2, object: nil)
                                                
                                                let notificationName3 = Notification.Name("_isUserOnlineContacts")
                                                NotificationCenter.default.post(name: notificationName3, object: nil)
                                                let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
                                                let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
                                                let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
                                                let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
                                                let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
                                                NotificationCenter.default.post(name: notificationNametrivia,
                                                                                object: nil)
                                                let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                                                                                                                             NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
                                                if(self.xmppStream != nil)
                                                {
                                                    if(self.xmppStream?.isDisconnected)!
                                                    {
                                                        if(self.connect())
                                                        {
                                                            //isSendOfflineChats = true
                                                            
                                                            DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                                // do stuff 3 seconds later
                                                                self.sendOfflineMessages()
                                                                
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        if(login != nil)
                                                        {
                                                            self.goOnline(self.xmppStream!)
                                                            
                                                            DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                                // do stuff 3 seconds later
                                                                self.sendOfflineMessages()
                                                                
                                                            }
                                                            
                                                        }
                                                    }
                                                }
                                                
                                                let cancelversion: Int64 = Int64(UserDefaults.standard.integer(forKey: "cancelversion"))
                                                if(latestvar != cancelversion){
                                                    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                        let pickedCaption:[String: AnyObject] = ["caption": latestvar as AnyObject]
                                                        let notificationName2 = Notification.Name("NewVersionOfApp")
                                                        NotificationCenter.default.post(name: notificationName2, object: nil,userInfo: pickedCaption)
                                                    }
                                                }
                                                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                                if(myjid != nil){
                                                    if(isprimaryteam == 0){
                                                        let notificationName1 = Notification.Name("Showteam")
                                                        NotificationCenter.default.post(name: notificationName1, object: nil)
                                                    }
                                                    else{
                                                        if(ismobile == 0){
                                                            UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                            UserDefaults.standard.synchronize()
                                                            UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                            UserDefaults.standard.synchronize()
                                                            let notificationName1 = Notification.Name("Showprofile")
                                                            NotificationCenter.default.post(name: notificationName1, object: nil)
                                                        }
                                                        
                                                        
                                                    }
                                                }
                                            }
                                            else {
                                                let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
                                                UserDefaults.standard.setValue(false, forKey: "maintance")
                                                //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                                // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                                //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
                                                UserDefaults.standard.synchronize()
                                                if(isMaintanece){
                                                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                    if(login != nil)
                                                    {
                                                        self.showMainTab()
                                                    }
                                                    
                                                }
                                                self.isOnline = true
                                                
                                                let notificationName2 = Notification.Name("_isUserOnline")
                                                NotificationCenter.default.post(name: notificationName2, object: nil)
                                                
                                                let notificationName3 = Notification.Name("_isUserOnlineContacts")
                                                NotificationCenter.default.post(name: notificationName3, object: nil)
                                                let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
                                                let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
                                                let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
                                                let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
                                                let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
                                                NotificationCenter.default.post(name: notificationNametrivia, object: nil)
                                                let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                                                                                                                             NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
                                                if(self.xmppStream != nil)
                                                {
                                                    if(self.xmppStream?.isDisconnected)!
                                                    {
                                                        if(self.connect())
                                                        {
                                                            //isSendOfflineChats = true
                                                            
                                                            DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                                // do stuff 3 seconds later
                                                                self.sendOfflineMessages()
                                                                
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        if(login != nil)
                                                        {
                                                            self.goOnline(self.xmppStream!)
                                                            
                                                            DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                                // do stuff 3 seconds later
                                                                self.sendOfflineMessages()
                                                                
                                                            }
                                                            
                                                        }
                                                    }
                                                }
                                                // Comment by Mayank 18 Jun 2018
                                                /*
                                                 DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                 
                                                 var data = [TeamCategories_detail]()
                                                 data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
                                                 if(data.count == 0){
                                                 var dictRequest = [String: AnyObject]()
                                                 dictRequest["cmd"] = "teamsync" as AnyObject
                                                 var dictRequestData = [String: AnyObject]()
                                                 
                                                 dictRequestData["version"] = self.Realeseversion as AnyObject
                                                 dictRequest["requestData"] = dictRequestData as AnyObject
                                                 do {
                                                 let dataTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                 let strTeams = NSString(data: dataTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                 // print(strTeams)
                                                 self.sendRequestToAPI(strRequestDict: strTeams)
                                                 } catch {
                                                 //  print(error.localizedDescription)
                                                 }
                                                 }} */
                                                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                                if(myjid != nil){
                                                    if(isprimaryteam == 0){
                                                        let notificationName1 = Notification.Name("Showteam")
                                                        NotificationCenter.default.post(name: notificationName1, object: nil)
                                                    }
                                                    else{
                                                        if(ismobile == 0){
                                                            UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                            UserDefaults.standard.synchronize()
                                                            UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                            UserDefaults.standard.synchronize()
                                                            let notificationName1 = Notification.Name("Showprofile")
                                                            NotificationCenter.default.post(name: notificationName1, object: nil)
                                                        }
                                                        
                                                        
                                                    }
                                                }}
                                        }
                                        
                                        
                                        
                                        
                                        
                                    }
                                    let newscatarr = jsonData?.value(forKey: "newscategories") as! NSArray
                                    //self.arrNewsCategories = []
                                    /*for newcat in newscatarr
                                     {
                                     var dict1 = [String: AnyObject]()
                                     dict1["id"] = (newcat as! NSDictionary).value(forKey: "id") as AnyObject
                                     dict1["name"] = (newcat as! NSDictionary).value(forKey: "name") as AnyObject
                                     self.arrNewsCategories.append(dict1 as AnyObject)
                                     
                                     }*/
                                    
                                    for newcat in newscatarr
                                    {
                                        // let array = self.db.query(sql: " select * from newscategories WHERE cid = '\((newcat as! NSDictionary).value(forKey: "id"))' and cname = '\((newcat as! NSDictionary).value(forKey: "name"))'")
                                        let array = NewsCategories.rows(filter:"cid = \((newcat as! NSDictionary).value(forKey: "id") as! Int64)") as! [NewsCategories]
                                        
                                        
                                        if(array.count == 0){
                                            let newscat = NewsCategories()
                                            newscat.cid = (newcat as! NSDictionary).value(forKey: "id") as! Int64
                                            newscat.cname = (newcat as! NSDictionary).value(forKey: "name") as! String
                                            newscat.isnews = (newcat as! NSDictionary).value(forKey: "isnews") as! String
                                            newscat.isfixtures = (newcat as! NSDictionary).value(forKey: "isfixtures") as! String
                                            newscat.isstanding = (newcat as! NSDictionary).value(forKey: "isstanding") as! String
                                            newscat.isgroup = (newcat as! NSDictionary).value(forKey: "isgroup") as! String
                                            newscat.fullname = (newcat as! NSDictionary).value(forKey: "fullname") as! String
                                            if newscat.save() != 0 {
                                                
                                            }
                                        }
                                        else{
                                            let result = self.db.query(sql: " UPDATE newscategories SET cname = '\((newcat as! NSDictionary).value(forKey: "name") as! String)', isnews = '\((newcat as! NSDictionary).value(forKey: "isnews") as! String)',isfixtures = '\((newcat as! NSDictionary).value(forKey: "isfixtures") as! String)',isstanding = '\((newcat as! NSDictionary).value(forKey: "isstanding") as! String)',isgroup = '\((newcat as! NSDictionary).value(forKey: "isgroup")as! String)',fullname = '\((newcat as! NSDictionary).value(forKey: "fullname")as! String)'  WHERE cid = '\((newcat as! NSDictionary).value(forKey: "id") as! Int64)'")
                                            // print(result)
                                        }
                                    }
                                    
                                    //_RefreshNewsCategories
                                    let notificationName_refreshcat = Notification.Name("_RefreshNewsCategories")
                                    NotificationCenter.default.post(name: notificationName_refreshcat, object: nil)
                                    
                                    if(teamver < (jsonData?.value(forKey: "teamversion") as? Int64)!)
                                    {
                                        let response = jsonData?.value(forKey: "responseData") as! NSDictionary
                                        let result3 = self.db.execute(sql:"DELETE FROM teamCategories_detail")
                                        if(result3 > 0){
                                            // print("blockeduser delted")
                                        }
                                        else{
                                            _ = self.db.execute(sql:"DELETE FROM teamCategories_detail")
                                        }
                                        let result4 = self.db.execute(sql:"DELETE FROM  teams_details")
                                        if(result4 > 0){
                                            // print("blockeduser delted")
                                        }
                                        else{
                                            _ = self.db.execute(sql:"DELETE FROM  teams_details")
                                        }
                                        let catarr = response.value(forKey: "teamcategories") as! NSArray
                                        for cat in catarr
                                        {
                                            let c_id =  (cat as! NSDictionary).value(forKey: "id") as! Int64
                                            let iscat = TeamCategories_detail.rows(filter:"c_Id = \(c_id)") as! [TeamCategories_detail]
                                            if(iscat.count == 0){
                                                let teamCategories_detail = TeamCategories_detail()
                                                teamCategories_detail.c_Id = (cat as! NSDictionary).value(forKey: "id") as! Int64
                                                teamCategories_detail.c_name = (cat as! NSDictionary).value(forKey: "name") as! String
                                                teamCategories_detail.c_logo = (cat as! NSDictionary).value(forKey: "logo") as! String
                                                teamCategories_detail.save()
                                            }
                                            else{
                                                
                                            }
                                            let teamImageName = "caty" + c_id.description
                                            //print(teamImageName)
                                            self.loadImageFromUrl(url: ((cat as! NSDictionary).value(forKey: "logo") as! String), fileName: teamImageName as String)
                                        }
                                        
                                        let teamarr = response.value(forKey: "teams") as! NSArray
                                        for team in teamarr
                                        {
                                            let t_id =  (team as! NSDictionary).value(forKey: "id") as! Int64
                                            let isteam = Teams_details.rows(filter:"team_Id = \(t_id)") as! [Teams_details]
                                            if(isteam.count == 0){
                                                let teams_details = Teams_details()
                                                teams_details.team_Id = (team as! NSDictionary).value(forKey: "id") as! Int64
                                                teams_details.team_name = (team as! NSDictionary).value(forKey: "name") as! String
                                                teams_details.team_logo = (team as! NSDictionary).value(forKey: "logo") as! String
                                                let c_id =  (team as! NSDictionary).value(forKey: "catid") as! Int64
                                                teams_details.team_categoriy = c_id
                                                teams_details.isselected = true
                                                teams_details.save()
                                            }
                                            else{
                                                
                                            }
                                            
                                            
                                            let teamImageName = "Team" + t_id.description
                                            //print(teamImageName)
                                            self.loadImageFromUrl(url: ((team as! NSDictionary).value(forKey: "logo") as! String), fileName: teamImageName as String)
                                            
                                        }
                                        if(self.isOnMultiCategoriesView == true){
                                            let notificationName = Notification.Name("RefreshcatView")
                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                        }
                                        UserDefaults.standard.setValue(jsonData?.value(forKey: "teamversion") as? Int64, forKey: "teamver")
                                        UserDefaults.standard.synchronize()
                                    }
                                    if(tokenver < (jsonData?.value(forKey: "iosidnver") as? Int64)!)
                                    {
                                        if ClassReachability.isConnectedToNetwork()
                                        {
                                            let deviceToken: String? = UserDefaults.standard.string(forKey: "DeviceToken")
                                            if(deviceToken != nil){
                                                self.updatetoken(token: deviceToken!)
                                            }
                                        }
                                        
                                        
                                    }
                                    let isdailycoin = jsonData!.value(forKey: "isdailycoin") as! Bool
                                    
                                    if(isdailycoin){
                                        // print(jsonData!.value(forKey: "dailycoin"))
                                        let dailycoin = jsonData!.value(forKey: "dailycoin") as! Int
                                        let fcavailablecoin = jsonData?.value(forKey: "availablecoins") as! Int
                                        DispatchQueue.main.async {
                                            AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(String(dailycoin)) FanCoins rewards for todayâs usage. \(self.GetvalueRedeemMesg(avilablecoin: fcavailablecoin))",fancoins: String(dailycoin))
                                        }
                                        let result2 = self.db.execute(sql:"DELETE FROM activitydetailTable")
                                        if(result2 > 0){
                                            //  print("messageses delted")
                                        }
                                        else{
                                            _ = self.db.execute(sql:"DELETE FROM activitydetailTable")
                                        }
                                    }
                                    self.UpdateInsentiveConfigTable(jsonData: jsonData!)
                                }
                                else
                                {
                                    //Show Error
                                }
                            } catch let error as NSError {
                                print(error)
                                //Show Error
                            }
                            
                        }
                    }
                    else
                    {
                        //Show Error
                    }
                })
                task.resume()
                
                
                
                
                
                
            }
            else
            {
                isUserOnline = false
                isOnline = false
                let notificationName2 = Notification.Name("_isUserOnline")
                NotificationCenter.default.post(name: notificationName2, object: nil)
                let notificationName3 = Notification.Name("_isUserOnlineContacts")
                NotificationCenter.default.post(name: notificationName3, object: nil)
                let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
                NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
                let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
                NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
                let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
                NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
                let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
                NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
                let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
                NotificationCenter.default.post(name: notificationNametrivia, object: nil)
                let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                                                                                             NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
                if ClassReachability.isConnectedToNetwork() {
                    // goOffline(xmppStream!)
                    isSendingPresence = false
                }
            }
        }
    }
    func stopTheDamnRequests(){
        Alamofire.Session.default.session.getTasksWithCompletionHandler({ dataTasks, uploadTasks, downloadTasks in
        dataTasks.forEach { $0.cancel() }
        uploadTasks.forEach { $0.cancel() }
        downloadTasks.forEach { $0.cancel() }
        })
        
    }
    func sendOfflineMessages()
    {
        //stopTheDamnRequests()
        if(issendofflinemessages){
            issendofflinemessages = false
            let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
            if localArrAllChats != nil
            {
                //Code to parse json data
                if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                    do {
                        arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                        
                    } catch let error as NSError {
                        print(error)
                    }
                }
            }
            
            /*var size = 0
             repeat {
             
             
             // Increment.
             size += 1
             
             } while size < arrAllChats.count*/
            
            if(AppopenAfterTerminate){
                //print(AppopenAfterTerminate)
                AppopenAfterTerminate = false
            }
            else{
                print(AppopenAfterTerminate)
            }
            
            for tmpAllUserChats in arrAllChats
            {
                let tmpSingleUserChat: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                let tmpArrUserChats = tmpSingleUserChat["Chats"] as! [AnyObject]
                
                let dataToRead: [AnyObject] = tmpArrUserChats.filter({ (text) -> Bool in
                    let tmp: NSDictionary = text as! NSDictionary
                    let status: String = tmp.value(forKey: "status") as! String
                    //if(status == "failed" || status == "sending")
                    if(status == "failed" || status == "sending" || status == "downloading")
                    {
                        return true
                    }
                    else
                    {
                        return false
                    }
                    
                })
                
                for message in dataToRead
                {
                    
                    let toUser: String = (message as AnyObject).value(forKey: "toUserJID") as! String
                    let isIncoming: String = (message as AnyObject).value(forKey: "isIncoming") as! String
                    let messageContent: String = (message as AnyObject).value(forKey: "messageContent") as! String
                    let messageType: String = (message as AnyObject).value(forKey: "messageType") as! String
                    let messageId: String = (message as AnyObject).value(forKey: "messageId") as! String
                    let fileLocalId: String = (message as AnyObject).value(forKey: "fileLocalId") as! String
                    let caption: String = (message as AnyObject).value(forKey: "caption") as! String
                    let time: Int64 = (message as AnyObject).value(forKey: "time") as! Int64
                    let roomType: String = (message as AnyObject).value(forKey: "chatType") as! String
                    
                    let SupportedTeam: Int64 = (message as AnyObject).value(forKey: "supportteam") as! Int64
                    if(isIncoming == "YES")
                    {
                        let status: String = (message as AnyObject).value(forKey: "status") as! String
                        if(status == "downloading")
                        {
                            self.funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed",recReadUserJid: toUser)
                        }
                        
                    }
                    else
                    {
                        let status: String = (message as AnyObject).value(forKey: "status") as! String
                        let sub_type: String = (message as AnyObject).value(forKey: "sub_type") as! String
                        if(status == "downloading")
                        {
                            self.funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "download",recReadUserJid: toUser)
                        }
                        else if(status == "failed" && sub_type == "Forwarded")
                        {
                            if(messageType == "text"){
                                
                                // print(appDelegate().toUserJID)
                                self.sendMessageToServer(toUser, messageContent: messageContent, messageType: "text", messageTime: time, messageId: messageId, roomType: roomType, messageSubType: "Forwarded", mySupportTeam: SupportedTeam)
                                self.funGetSetLocalChats(messageId: messageId, chatStatus: "sent",recReadUserJid: toUser)
                                
                            }
                            if(messageType == "image" || messageType == "video"){
                                //self.appDelegate().prepareMessageForServerOut(toUserJID, messageContent: messageContent, chatType: recRoomType, messageType: "text", messageTime: time, messageId: uuid,userName:banterNickName, chatStatus: "sent", newBanterNickName: banterNickName, mySupportedTeam: mySupportedTeam)
                                // print(appDelegate().toUserJID)
                                let thumb: String = (message as AnyObject).value(forKey: "thumb") as! String
                                
                                self.sendMessageToServer(toUser, messageContent: messageContent, messageType: messageType, messageTime: time, messageId: messageId, caption: "", thumbLink: thumb, roomType: roomType, messageSubType: "Forwarded",mySupportTeam: SupportedTeam)
                                self.funGetSetLocalChats(messageId: messageId, chatStatus: "sent",recReadUserJid: toUser)
                                //  self.appDelegate().sendMessageToServer(toUserJID, messageContent: messageContent, messageType: "text", messageTime: time, messageId: uuid, roomType: recRoomType, mySupportTeam: mySupportedTeam)
                                
                            }
                        }
                        else if(messageType == "text")
                        {
                            sendMessageToServer(toUser, messageContent: messageContent, messageType: "text", messageTime: time, messageId: messageId, roomType: roomType,mySupportTeam: SupportedTeam)
                            funGetSetLocalChats(messageId: messageId, chatStatus: "sent", recReadUserJid: toUser)
                            if(roomType == "banter"){
                                if(ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                    ActivityCountManage()
                                }
                                
                            }
                            else if(roomType == "group"){
                                if(ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                    ActivityCountManage()
                                }
                            }
                        }
                            /* else if(status == "sending"){
                             // self.funGetSetLocalChats(messageId: messageId, messageContent: messageContent, chatStatus: "failed",recReadUserJid: toUser)
                             }*/
                        else
                        {
                            if(fileLocalId.isEmpty){
                                if(messageType == "image")
                                {
                                    
                                    let selVideoPath = getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)!
                                    let u = URL(string: selVideoPath)
                                    let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                                    
                                    if(FileManager.default.fileExists(atPath:u!.path))
                                    {
                                        print("available")
                                    }
                                    
                                    var reqParams = [String: String]()
                                    reqParams["cmd"] = "image"
                                    reqParams["jid"] = registorusername
                                    funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "sending")
                                    reqParams["key"] = "kXfqS9wUug6gVKDB"
                                    reqParams["device"] = "ios" as String
                                     // let httpHeaders = HTTPHeaders(header)
                                     AF.upload(multipartFormData: { multiPart in
                                         multiPart.append(u!, withName: "uploaded")
                                                                                    for (key, val) in reqParams {
                                                                                        multiPart.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                                                                    }
                                     }, to: MediaAPI, method: .post) .uploadProgress(queue: .main, closure: { progress in
                                         print("Upload Progress: \(progress.fractionCompleted)")
                                        let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                                                                                           let notificationName = Notification.Name("videoprogress")
                                                                                           NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                     }).responseJSON(completionHandler: { data in
                                                                                  switch data.result  {
                                         case .success(let resut):
                                             print("upload success result: \(resut)")
                                                                                    if let JSON = resut as? [String: Any] {
                                                                                        let isSuccess: Bool = JSON["success"] as! Bool
                                                                                                                                                               
                                                                                                                                                               if(isSuccess)
                                                                                                                                                               {
                                                                                                                                                                   let trimMessage = JSON["link"] as! String
                                                                                                                                                                   let thumbLink = JSON["thumblink"] as? String

                                                                                                                                                                self.sendMessageToServer(toUser, messageContent: trimMessage, messageType: "image", messageTime: time, messageId: messageId, caption: caption,  thumbLink: thumbLink!, roomType: roomType,mySupportTeam: SupportedTeam)
                                                                                                                                                                self.funGetSetLocalChats(messageId: messageId, messageContent: trimMessage, thumbLink: thumbLink!, chatStatus: "sent",recReadUserJid: toUser)
                                                                                                                                                                   
                                                                                                                                                                   if(roomType == "banter"){
                                                                                                                                                                       if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                                                                                                                           self.ActivityCountManage()
                                                                                                                                                                       }
                                                                                                                                             }
                                                                                                                                                                   else if(roomType == "group"){
                                                                                                                                                                       if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                                                                                                                           self.ActivityCountManage()
                                                                                                                                                                       }
                                                                                                                                                                   }
                                                                                                                                                                                           }
                                                                                                                                                               else
                                                                                                                                                               {
                                                                                                                                                                   self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                                                                                                                               }
                                                                                    }
                                         case .failure(let err):
                                             print("upload err: \(err)")
                                                                                    self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                         }

                                     })
                                    /*AF.upload(multipartFormData: { multipartFormData in
                                            // On the PHP side you can retrive the image using $_FILES["image"]["tmp_name"]
                                            multipartFormData.append(u!, withName: "uploaded")
                                            for (key, val) in reqParams {
                                                multipartFormData.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                            }
                                    },
                                              usingThreshold: UInt64.init(),
                                        to: MediaAPI,
                                        method: .post,
                                        encodingCompletion: { encodingResult in
                                            switch encodingResult {
                                            case .success(let upload, _, _):
                                                upload.uploadProgress(closure: { (progress) in
                                                    
                                                    let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                                                    let notificationName = Notification.Name("videoprogress")
                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                })
                                                upload.responseJSON { response in
                                                    if let jsonResponse = response.result.value as? [String: Any] {
                                                        print(jsonResponse)
                                                        let data = response.data
                                                        if let data = data {
                                                            if String(data: data, encoding: String.Encoding.utf8) != nil {
                                                                if(!toUser.isEmpty)
                                                                {
                                                                    do {
                                                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                                        
                                                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                                        
                                                                        if(isSuccess)
                                                                        {
                                                                            let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                                            let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                                            
                                                                            
                                                                            self.sendMessageToServer(toUser, messageContent: trimMessage, messageType: "image", messageTime: time, messageId: messageId, caption: caption,  thumbLink: thumbLink, roomType: roomType,mySupportTeam: SupportedTeam)
                                                                            
                                                                            
                                                                            
                                                                            self.funGetSetLocalChats(messageId: messageId, messageContent: trimMessage, thumbLink: thumbLink, chatStatus: "sent",recReadUserJid: toUser)
                                                                            
                                                                            if(roomType == "banter"){
                                                                                if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                                    self.ActivityCountManage()
                                                                                }
                                                                                
                                                                            }
                                                                            else if(roomType == "group"){
                                                                                if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                                    self.ActivityCountManage()
                                                                                }
                                                                            }
                                                                            
                                                                        }
                                                                        else
                                                                        {
                                                                            self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                                        }
                                                                    } catch let error as NSError {
                                                                        print(error)
                                                                        self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                                    }
                                                                    
                                                                }
                                                                
                                                                
                                                                
                                                            }
                                                        }
                                                    }
                                                    else{
                                                        self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                    }
                                                }
                                            case .failure(let encodingError):
                                                print(encodingError)
                                                self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                
                                            }
                                            
                                    })*/
                                    
                                }
                                else if(messageType == "video")
                                {
                                    let selVideoPath = getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)!
                                    let u = URL(string: selVideoPath)
                                    let thumbVideoPath = getFileNameFromPathWithFile(path: message.value(forKey: "thumb") as! String)!
                                    let tempImg = loadImageFromLocalPath(filePath: thumbVideoPath)
                                    
                                    
                                    let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                                    self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "sending",recReadUserJid: toUser)
                                    var reqParams = [String: String]()
                                    reqParams["cmd"] = "video"
                                    reqParams["sourcetype"] = "chat"
                                    reqParams["jid"] = registorusername
                                    reqParams["key"] = "kXfqS9wUug6gVKDB"
                                    reqParams["device"] = "ios" as String
                                    //let videoLogo = self.getVideoThumbnailImage(forUrl: videoURL!)
                                    //let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 30.0)
                                    let videoData: NSData = tempImg!.jpegData(compressionQuality: 0.5)! as NSData
                                    let base64String = videoData.base64EncodedString(options: [])
                                    
                                    reqParams["thumb_byte"] = base64String
                                    
                                    AF.upload(multipartFormData: { multiPart in
                                                                         multiPart.append(u!, withName: "uploaded")
                                                                           for (key, val) in reqParams {
                                                                               multiPart.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                                                           }
                                                                         }, to: MediaAPI, method: .post) .uploadProgress(queue: .main, closure: { progress in
                                                                             print("Upload Progress: \(progress.fractionCompleted)")
                                                                         }).responseJSON(completionHandler: { data in
                                                                             print("upload finished: \(data)")
                                                                           print("resultvalue\(data.result)")
                                                                           switch data.result {
                                                                                                                    case .success(let resut):
                                                                                                                      print("upload success result: \(String(describing: resut))")
                                                                                                                      if let JSON = resut as? [String: Any] {
                                                                                                                                                                        let isSuccess = JSON["success"] as! Bool
                                                                                                                                                                          if(isSuccess)
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                              //var msgDict = [String: AnyObject]()
                                                                                                                                                                                                                                              let trimMessage = JSON["link"] as! String
                                                                                                                                                                                                                                              let thumbLink = JSON["thumblink"] as! String

                                                                                                                                                                                                                                              self.sendMessageToServer(toUser, messageContent: trimMessage, messageType: "video", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink, roomType: roomType,mySupportTeam: SupportedTeam)
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                              self.funGetSetLocalChats(messageId: messageId, messageContent: trimMessage,thumbLink: thumbLink, chatStatus: "sent",recReadUserJid: toUser)
                                                                                                                                                                                                                                              if(roomType == "banter"){
                                                                                                                                                                                                                                                  if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                                                                                                                                                                                                      self.ActivityCountManage()
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              else if(roomType == "group"){
                                                                                                                                                                                                                                                  if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                                                                                                                                                                                                      self.ActivityCountManage()
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                              self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                                                                                                                                                                                                          }
                                                                                                                                                                    }
                                                                                                                    case .failure(let err):
                                                                                                                        print("upload err: \(err)")
                                                                            self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                                            
                                                                                                                    }
                                                                          /* if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                                                                           do {
                                                                               let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                                               
                                                                               let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                                               } catch let error as NSError {
                                                                                                                                                  print(error)
                                                                               }}*/
                                                                               
                                                                         })
                                    /*Alamofire.upload(
                                        multipartFormData: { multipartFormData in
                                            // On the PHP side you can retrive the image using $_FILES["image"]["tmp_name"]
                                            multipartFormData.append(u!, withName: "uploaded")
                                            for (key, val) in reqParams {
                                                multipartFormData.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                            }
                                    },
                                        to: MediaAPI,
                                        encodingCompletion: { encodingResult in
                                            print(encodingResult)
                                            switch encodingResult {
                                                
                                            case .success(let upload, _, _):
                                                
                                                upload.uploadProgress(closure: { (progress) in
                                                    print(progress.fractionCompleted)
                                                    let pickedCaption:[String: Any] = ["subcriptiontype": progress.fractionCompleted as Any, "texttag": messageId as Any]
                                                    let notificationName = Notification.Name("videoprogress")
                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                })
                                                upload.responseJSON { response in
                                                    
                                                    print("nitesh\(String(describing: response.response?.statusCode))")
                                                    if let jsonResponse = response.result.value as? [String: Any] {
                                                        print(jsonResponse)
                                                        let data = response.data
                                                        if let data = data {
                                                            if String(data: data, encoding: String.Encoding.utf8) != nil {
                                                                
                                                                do {
                                                                    let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                                    
                                                                    let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                                    
                                                                    if(isSuccess)
                                                                    {
                                                                        let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                                        let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                                        //var msgDict = [String: AnyObject]()
                                                                        
                                                                        self.sendMessageToServer(toUser, messageContent: trimMessage, messageType: "video", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink, roomType: roomType,mySupportTeam: SupportedTeam)
                                                                        
                                                                        
                                                                        
                                                                        self.funGetSetLocalChats(messageId: messageId, messageContent: trimMessage,thumbLink: thumbLink, chatStatus: "sent",recReadUserJid: toUser)
                                                                        if(roomType == "banter"){
                                                                            if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                                self.ActivityCountManage()
                                                                            }
                                                                            
                                                                        }
                                                                        else if(roomType == "group"){
                                                                            if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                                self.ActivityCountManage()
                                                                            }
                                                                        }
                                                                        
                                                                    }
                                                                    else
                                                                    {
                                                                        self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                                    }
                                                                } catch let error as NSError {
                                                                    print(error)
                                                                    self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                                }
                                                                
                                                                //}
                                                                
                                                                
                                                                
                                                            }
                                                        }
                                                    }
                                                    else{
                                                        self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                    }
                                                }
                                            case .failure(let encodingError):
                                                print(encodingError)
                                                self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                
                                            }
                                            
                                    })*/
                                    
                                }
                            }
                            else{
                                if let asset = PHAsset.fetchAssets(withLocalIdentifiers: [fileLocalId], options: nil).firstObject
                                {
                                    if(messageType == "image")
                                    {
                                        let tempImg: UIImage = self.getImageThumbnail(asset: asset)
                                        let login: String? = UserDefaults.standard.string(forKey: "registerusername")
                                        
                                        let boundary = self.generateBoundaryString()
                                        var request = URLRequest(url: URL(string: MediaAPI)!)
                                        request.httpMethod = "POST"
                                        //let postString = "cmd=image&jid=919826615203&byte="+base64String
                                        //request.httpBody = postString.data(using: .utf8)
                                        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                                        var reqParams = [String: String]()
                                        reqParams["cmd"] = "image"
                                        reqParams["jid"] = login
                                        reqParams["key"] = "kXfqS9wUug6gVKDB"
                                        reqParams["device"] = "ios" as String
                                        request.httpBody = self.createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: tempImg) as Data
                                        
                                        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                                            if let data = data {
                                                if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                                                    //  print(stringData) //JSONSerialization
                                                    
                                                    
                                                    //If Success = True
                                                    if(!toUser.isEmpty)
                                                    {
                                                        //print(time)
                                                        do {
                                                            let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                            
                                                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                            
                                                            if(isSuccess)
                                                            {
                                                                let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                                let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                                
                                                                
                                                                self.sendMessageToServer(toUser, messageContent: trimMessage, messageType: "image", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink, roomType: roomType,mySupportTeam: SupportedTeam)
                                                                
                                                                
                                                                
                                                                self.funGetSetLocalChats(messageId: messageId, messageContent: trimMessage, thumbLink: thumbLink, chatStatus: "sent", recReadUserJid: toUser)
                                                                
                                                                if(roomType == "banter"){
                                                                    if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                        self.ActivityCountManage()
                                                                    }
                                                                    
                                                                }
                                                                else if(roomType == "group"){
                                                                    if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                        self.ActivityCountManage()
                                                                    }
                                                                }
                                                                
                                                                //print(appDelegate().arrUserChat)
                                                                //self.storyTableView?.reloadData()
                                                                //storyTableView?.layoutIfNeeded()
                                                                //self.scrollToBottom()
                                                                //self.isAutoScroll = true
                                                            }
                                                            else
                                                            {
                                                                self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                            }
                                                        } catch let error as NSError {
                                                            print(error)
                                                            self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed", recReadUserJid: toUser)
                                                        }
                                                        
                                                    }
                                                    
                                                    
                                                    
                                                }
                                            }
                                            else
                                            {
                                                //print(response ?? "Responsed Failed")
                                                //print(error ?? "Error Failed")
                                                //let err: NSError = error! as NSError
                                                //print(err.userInfo["_kCFStreamErrorCodeKey"] ?? "Error Failed")
                                                //print(err.userInfo["NSLocalizedDescription"] ?? "Error Failed")
                                                self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                
                                            }
                                        })
                                        task.resume()
                                    }
                                    else if(messageType == "video")
                                    {
                                        
                                        self.getMediaURL(ofPhotoWith: asset, completionHandler: { (videoURL) in
                                            
                                            
                                            let filePath: String = "file://" + (videoURL?.path)!
                                            
                                            if(!filePath.isEmpty)
                                            {
                                                let login: String? = UserDefaults.standard.string(forKey: "registerusername")
                                                
                                                let boundary = self.generateBoundaryString()
                                                var request = URLRequest(url: URL(string: MediaAPI)!)
                                                request.httpMethod = "POST"
                                                //let postString = "cmd=image&jid=919826615203&byte="+base64String
                                                //request.httpBody = postString.data(using: .utf8)
                                                request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                                                var reqParams = [String: String]()
                                                reqParams["cmd"] = "video"
                                                reqParams["sourcetype"] = "chat"
                                                reqParams["jid"] = login
                                                reqParams["key"] = "kXfqS9wUug6gVKDB"
                                                reqParams["device"] = "ios" as String
                                                let videoLogo = self.getVideoThumbnailImage(forUrl: videoURL!)
                                                let videoLogoSquare = videoLogo?.square()?.resized(toWidth: 30.0)
                                                let videoData: NSData = videoLogoSquare!.jpegData(compressionQuality: 0.5)! as NSData
                                                let base64String = videoData.base64EncodedString(options: [])
                                                
                                                reqParams["thumb_byte"] = base64String
                                                
                                                
                                                request.httpBody = self.createRequestBodyWithVideo(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, videoURL: videoURL!) as Data
                                                
                                                let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                                                    if let data = data {
                                                        if String(data: data, encoding: String.Encoding.utf8) != nil {
                                                            // print(stringData) //JSONSerialization
                                                            
                                                            
                                                            //If Success = True
                                                            if(!toUser.isEmpty)
                                                            {
                                                                //print(time)
                                                                do {
                                                                    let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                                    
                                                                    let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                                    
                                                                    if(isSuccess)
                                                                    {
                                                                        let trimMessage = (jsonData?.value(forKey: "link") as? String)!
                                                                        let thumbLink = (jsonData?.value(forKey: "thumblink") as? String)!
                                                                        //var msgDict = [String: AnyObject]()
                                                                        
                                                                        self.sendMessageToServer(toUser, messageContent: trimMessage, messageType: "video", messageTime: time, messageId: messageId, caption: caption, thumbLink: thumbLink, roomType: roomType,mySupportTeam: SupportedTeam)
                                                                        
                                                                        
                                                                        
                                                                        self.funGetSetLocalChats(messageId: messageId, messageContent: trimMessage, thumbLink: thumbLink, chatStatus: "sent", recReadUserJid: toUser)
                                                                        if(roomType == "banter"){
                                                                            if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsBanter)){
                                                                                self.ActivityCountManage()
                                                                            }
                                                                            
                                                                        }
                                                                        else if(roomType == "group"){
                                                                            if(self.ActivityPermissionCheck(massegeId: 0, Type: ThisIsGroup)){
                                                                                self.ActivityCountManage()
                                                                            }
                                                                        }
                                                                        
                                                                        //print(appDelegate().arrUserChat)
                                                                        //self.storyTableView?.reloadData()
                                                                        //storyTableView?.layoutIfNeeded()
                                                                        //self.scrollToBottom()
                                                                        //self.isAutoScroll = true
                                                                    }
                                                                    else
                                                                    {
                                                                        self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                                    }
                                                                } catch let error as NSError {
                                                                    print(error)
                                                                    self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                                }
                                                                
                                                            }
                                                            
                                                            
                                                            
                                                        }
                                                    }
                                                    else
                                                    {
                                                        self.funGetSetLocalChats(messageId: messageId, messageContent: "", chatStatus: "failed",recReadUserJid: toUser)
                                                    }
                                                })
                                                task.resume()
                                            }
                                            
                                        })
                                        
                                    }
                                    
                                    
                                }
                                
                            }
                        }
                    }
                    
                }
                
            }
        }
        
        
    }
    
    func application(_ application: UIApplication, didRegister notificationSettings: UIUserNotificationSettings) {
        if notificationSettings.types != UIUserNotificationType() {
            application.registerForRemoteNotifications()
        }
    }
    
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data){
        let tokenParts = deviceToken.map { data -> String in
            return String(format: "%02.2hhx", data)
        }
        let token: String = tokenParts.joined()
       // print(token)
        let deviceToken: String? = UserDefaults.standard.string(forKey: "DeviceToken")
        if(deviceToken == nil){
            UserDefaults.standard.setValue(token, forKey: "DeviceToken")
            UserDefaults.standard.synchronize()
            updatetoken(token: token)
        }
        
        
    }
    
    
    @available(iOS 10.0, *)
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        
        // print("Will Present")
        
        let bestAttemptContent = (notification.request.content.mutableCopy() as? UNMutableNotificationContent)
        var myRoomId: String = ""
        var mUsername: String = ""
        var ChatType: String = ""
        let userInfo = bestAttemptContent?.userInfo as! [String:Any]
        //change the subtitle
        Clslogging.loginfo(State: "onpresent ", userinfo: userInfo as [String : AnyObject])
        if(userInfo["chattype"] != nil)
        {
            ChatType = userInfo["chattype"] as! String
            
        }
        if(ChatType == "chat"){
            if userInfo["username"] != nil{
                //bestAttemptContent.title = userInfo["roomid"] as! String
                myRoomId = userInfo["username"] as! String + JIDPostfix
            }
            
            if userInfo["roomid"] != nil{
                //bestAttemptContent.title = userInfo["roomid"] as! String
                myRoomId = userInfo["roomid"] as! String
            }
            if let un = userInfo["username"]{
                if userInfo["username"] != nil{
                    //bestAttemptContent.title = userInfo["roomid"] as! String
                    mUsername = userInfo["username"] as! String
                }
            }
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            
            if(myRoomId != self.toUserJID && myMobile != mUsername)
            {
                completionHandler([.alert,.badge,.sound])
            }
        }
        else if(ChatType == "trivia"){
             completionHandler([.alert,.badge,.sound])
        }
            else if(ChatType == "fanstory"){
                        completionHandler([.alert,.badge,.sound])
                   }
            else if(ChatType == "news"){
                                   completionHandler([.alert,.badge,.sound])
                              }
            else if(ChatType == "products"){
                 completionHandler([.alert,.badge,.sound])
            }
            else if(ChatType == "homefixed"){
                 completionHandler([.alert,.badge,.sound])
            }
            else if(ChatType == "openapp"){
                // completionHandler([.alert,.badge,.sound])
            }
        else if(ChatType == "event"){
             let AppScreen:String = userInfo["AppScreen"] as! String
            if(AppScreen == "Broadcast"){
                var subType: String = ""
                           if userInfo["subtype"] != nil{
                               //bestAttemptContent.title = userInfo["roomid"] as! String
                               subType = userInfo["subtype"] as! String
                           }
                let state: UIApplication.State = UIApplication.shared.applicationState // or use  let state =  UIApplication.sharedApplication().applicationState
                              if state == .active {
                                  Clslogging.logdebug(State: "onpresent broadcast where ismodalshow =\(ismodalshow)")
                                              if(!ismodalshow){
                                                  Clslogging.logdebug(State: "onpresent broadcast where ismodalshow =\(ismodalshow)")
                                                  ismodalshow = true
                                                  let dictNotify: [String : AnyObject] = userInfo["data"] as! [String : AnyObject]
                                                  if(subType == "broadcastall" ){
                                                      UserDefaults.standard.setValue(dictNotify["messageid"] as! String, forKey: "broadcastallid")
                                                      UserDefaults.standard.synchronize()
                                                  }
                                                  else{
                                                      UserDefaults.standard.setValue(dictNotify["messageid"] as! String, forKey: "broadcastinactiveid")
                                                      UserDefaults.standard.synchronize()
                                                      isSetInactiveTime = false
                                                      
                                                  }
                                                  
                                                  // let roomIdNotify = dictNotify["modaltype"] as! String
                                                  let receivedMessageType = dictNotify["modaltype"] as! String
                                                  
                                                  if(receivedMessageType == "action"){
                                                      let mediatype = dictNotify["mediatype"] as! String
                                                      let mediaurl = dictNotify["mediaurl"] as! String
                                                      let actionbtn = dictNotify["actionbtn"] as! String
                                                      let action = dictNotify["action"] as! String
                                                      let link = dictNotify["link"] as! String
                                                      let linktitle = dictNotify["linktitle"] as! String
                                                      let message = dictNotify["message"] as! String
                                                      customAlertVC = CustomAlertViewController.instantiate()
                                                      guard let customAlertVC = customAlertVC else { return }
                                                      
                                                      customAlertVC.titleString = "contactsync"
                                                      customAlertVC.messageString = message
                                                      customAlertVC.mediatype = mediatype
                                                      customAlertVC.mediaurl = mediaurl
                                                      customAlertVC.ActionTitle = actionbtn
                                                      customAlertVC.actioncommand = action
                                                      customAlertVC.actionlink = link
                                                      customAlertVC.LinkTitle = linktitle
                                                      DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                                          let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                                          // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                                          popupVC.cornerRadius = 20
                                                          self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                                      }
                                                  }
                                                  else{
                                                      let mediatype = dictNotify["mediatype"] as! String
                                                      let mediaurl = dictNotify["mediaurl"] as! String
                                                      let actionbtn = dictNotify["actionbtn"] as! String
                                                      let action = dictNotify["action"] as! String
                                                      let link = dictNotify["link"] as! String
                                                      let linktitle = dictNotify["linktitle"] as! String
                                                      let message = dictNotify["message"] as! String
                                                      infoAlertVC = InfoAlertViewController.instantiate()
                                                      guard let customAlertVC = infoAlertVC else { return }
                                                      
                                                      customAlertVC.titleString = "contactsync"
                                                      customAlertVC.messageString = message
                                                      customAlertVC.mediatype = mediatype
                                                      customAlertVC.mediaurl = mediaurl
                                                      customAlertVC.ActionTitle = actionbtn
                                                      customAlertVC.actioncommand = action
                                                      customAlertVC.actionlink = link
                                                      customAlertVC.LinkTitle = linktitle
                                                      DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                                          let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                                          // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                                          popupVC.cornerRadius = 20
                                                          self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                                      }
                                                      
                                                  }
                                              }
                              }
                
            }else{
                completionHandler([.alert,.badge,.sound])
            }
            getnotificationcount()
                   
        }
            
        else{
            if userInfo["roomid"] != nil{
                //bestAttemptContent.title = userInfo["roomid"] as! String
                myRoomId = userInfo["roomid"] as! String
            }
            if let un = userInfo["username"]{
                if userInfo["username"] != nil{
                    //bestAttemptContent.title = userInfo["roomid"] as! String
                    mUsername = userInfo["username"] as! String
                }
            }
            var subType: String = ""
            if userInfo["subtype"] != nil{
                //bestAttemptContent.title = userInfo["roomid"] as! String
                subType = userInfo["subtype"] as! String
            }
            if(subType == "banterinvite"){
                let state: UIApplication.State = UIApplication.shared.applicationState // or use  let state =  UIApplication.sharedApplication().applicationState
                if state == .active {
                    getroomdetails(roomid: myRoomId)
                   /* var dictRequest = [String: AnyObject]()
                    dictRequest["cmd"] = "getroomdetails" as AnyObject
                    
                    
                    
                    do {
                        //Creating Request Data
                        var dictRequestData = [String: AnyObject]()
                        
                        dictRequestData["roomid"] = myRoomId as AnyObject
                        
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        
                        
                        let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
                        // print(strGetBanterDetails)
                        self.sendRequestToAPI(strRequestDict: strGetBanterDetails)
                    } catch {
                        // print(error.localizedDescription)
                    }*/
                }
            }
            else if(subType == "broadcastall" || subType == "broadcastinactive"){
                Clslogging.loginfo(State: "onpresent broadcast", userinfo: userInfo as [String : AnyObject])
                let state: UIApplication.State = UIApplication.shared.applicationState // or use  let state =  UIApplication.sharedApplication().applicationState
                if state == .active {
                    Clslogging.logdebug(State: "onpresent broadcast where ismodalshow =\(ismodalshow)")
                                if(!ismodalshow){
                                    Clslogging.logdebug(State: "onpresent broadcast where ismodalshow =\(ismodalshow)")
                                    ismodalshow = true
                                    let dictNotify: [String : AnyObject] = userInfo["data"] as! [String : AnyObject]
                                    if(subType == "broadcastall" ){
                                        UserDefaults.standard.setValue(dictNotify["messageid"] as! String, forKey: "broadcastallid")
                                        UserDefaults.standard.synchronize()
                                    }
                                    else{
                                        UserDefaults.standard.setValue(dictNotify["messageid"] as! String, forKey: "broadcastinactiveid")
                                        UserDefaults.standard.synchronize()
                                        isSetInactiveTime = false
                                        
                                    }
                                    
                                    // let roomIdNotify = dictNotify["modaltype"] as! String
                                    let receivedMessageType = dictNotify["modaltype"] as! String
                                    
                                    if(receivedMessageType == "action"){
                                        let mediatype = dictNotify["mediatype"] as! String
                                        let mediaurl = dictNotify["mediaurl"] as! String
                                        let actionbtn = dictNotify["actionbtn"] as! String
                                        let action = dictNotify["action"] as! String
                                        let link = dictNotify["link"] as! String
                                        let linktitle = dictNotify["linktitle"] as! String
                                        let message = dictNotify["message"] as! String
                                        customAlertVC = CustomAlertViewController.instantiate()
                                        guard let customAlertVC = customAlertVC else { return }
                                        
                                        customAlertVC.titleString = "contactsync"
                                        customAlertVC.messageString = message
                                        customAlertVC.mediatype = mediatype
                                        customAlertVC.mediaurl = mediaurl
                                        customAlertVC.ActionTitle = actionbtn
                                        customAlertVC.actioncommand = action
                                        customAlertVC.actionlink = link
                                        customAlertVC.LinkTitle = linktitle
                                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                            let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                            // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                            popupVC.cornerRadius = 20
                                            self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                        }
                                    }
                                    else{
                                        let mediatype = dictNotify["mediatype"] as! String
                                        let mediaurl = dictNotify["mediaurl"] as! String
                                        let actionbtn = dictNotify["actionbtn"] as! String
                                        let action = dictNotify["action"] as! String
                                        let link = dictNotify["link"] as! String
                                        let linktitle = dictNotify["linktitle"] as! String
                                        let message = dictNotify["message"] as! String
                                        infoAlertVC = InfoAlertViewController.instantiate()
                                        guard let customAlertVC = infoAlertVC else { return }
                                        
                                        customAlertVC.titleString = "contactsync"
                                        customAlertVC.messageString = message
                                        customAlertVC.mediatype = mediatype
                                        customAlertVC.mediaurl = mediaurl
                                        customAlertVC.ActionTitle = actionbtn
                                        customAlertVC.actioncommand = action
                                        customAlertVC.actionlink = link
                                        customAlertVC.LinkTitle = linktitle
                                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                            let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                            // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                            popupVC.cornerRadius = 20
                                            self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                        }
                                        
                                    }
                                }
                }
            }
            else{
                let login: String? = UserDefaults.standard.string(forKey: "userJID")
                let arrReadUserJid = login?.components(separatedBy: "@")
                let myMobile: String? = arrReadUserJid?[0]
                
                if(myRoomId != self.toUserJID && myMobile != mUsername)
                {
                    completionHandler([.alert,.badge,.sound])
                }
            }
            
        }
       
        
        
    }
    
    @available(iOS 10.0, *)
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        
        
        //For Production
       
        let userInfo = response.notification.request.content.userInfo
        ShowPushNotification(pushUserinfo: userInfo as! [String : AnyObject])
        //print(userInfo)
        Clslogging.loginfo(State: "didReceive UNUserNotificationCenter", userinfo: userInfo as! [String : AnyObject])
    }
    func ShowDiplink()  {
        if(openffdeepurl.contains(InviteHost))
        {  let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
            
            do {
                let paramjson = openffdeepurl.replace(target: InviteHost + "?q=", withString: "")
                if(paramjson != nil)
                {
                    openffdeepurl = ""
                    let decodedData = Data(base64Encoded: paramjson)
                    let decodedString = String(data: decodedData!, encoding: .utf8)!
                    
                    let data = decodedString.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                    let jsonData = try JSONSerialization.jsonObject(with:data! , options: []) as? NSDictionary
                    let type: String = (jsonData?.value(forKey: "type") as? String)!
                    //print(type)
                    isFromBanterDeepLink = true
                    if(type == "fanupdate")
                    {
                       // LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Fan Story")
                        var dictRequest = [String: AnyObject]()
                        dictRequest["cmd"] = "getfanupdatebyid" as AnyObject
                        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                        dictRequest["device"] = "ios" as AnyObject
                        var reqParams = [String: AnyObject]()
                        //reqParams["cmd"] = "getfanupdates" as AnyObject
                        let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                        reqParams["id"] = id as AnyObject
                        
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        if(myjid != nil){
                            let arrdUserJid = myjid?.components(separatedBy: "@")
                            let userUserJid = arrdUserJid?[0]
                            reqParams["username"] = userUserJid as AnyObject?
                        }
                        else{
                            reqParams["username"] = "" as AnyObject
                        }
                        
                        dictRequest["requestData"] = reqParams as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)
                        do {
                          /*  let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                            let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                            let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                            //  print(escapedString!)
                            // print(strFanUpdates)
                            var reqParams1 = [String: AnyObject]()
                            reqParams1["request"] = strFanUpdates as AnyObject
                            let url = MediaAPIjava + "request=" + escapedString!*/
                            //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                // 2
                                .responseJSON { response in
                                    //print(response.result.value)
                                    switch response.result {
                                                                              case .success(let value):
                                                                                  if let json = value as? [String: Any] {
                                                                                                                                 let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                      // self.finishSyncContacts()
                                                                                      //print(" status:", status1)
                                                                                      if(status1){DispatchQueue.main.async {
                                                                                          let response: NSArray = json["responseData"]  as! NSArray
                                                                                          
                                                                                          // print(response)
                                                                                          //let notificationName = Notification.Name("tabindexchange")
                                                                                          //NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                          let tabIndex:[String: Any] = ["index": "fanupdate", "response": response as [AnyObject]]
                                                                                          if(self.isFromBanterDeepLink)
                                                                                          {
                                                                                              self.isFromBanterDeepLink = false
                                                                                              let notificationName = Notification.Name("tabindexffdeeplink")
                                                                                              NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                                              userInfo: tabIndex)
                                                                                          } else {
                                                                                              let notificationName1 = Notification.Name("_FetchedFanUpdateByID")
                                                                                              NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                                                              userInfo: tabIndex)
                                                                                          }
                                                                                          }
                                                                                          
                                                                                      }
                                                                                      else{
                                                                                         DispatchQueue.main.async
                                                                                              {
                                                                                                  let blocked: Bool = json["blocked"] as! Bool
                                                                                                  let error: String = json["error"] as! String
                                                                                                  let tabIndex:[String: Any] = ["blocked":blocked,"error": error]
                                                                                                  let notificationName = Notification.Name("tabindexffdeeplinkFail")
                                                                                                  NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                                                  userInfo: tabIndex)
                                                                                                  
                                                                                          }
                                                                                          //Show Error
                                                                                      }
                                                                                  }
                                                                              case .failure(let error): break
                                                                                  // error handling
                                         debugPrint(error as Any)
                                                                              }
                                    
                            }
                        } catch {
                            print(error.localizedDescription)
                        }
                        /* let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         let arrdUserJid = myjid?.components(separatedBy: "@")
                         let userUserJid = arrdUserJid?[0]
                         let myjidtrim: String? = userUserJid
                         var dictRequest = [String: AnyObject]()
                         dictRequest["cmd"] = "getfanupdatebyid" as AnyObject
                         var dictRequestData = [String: AnyObject]()
                         dictRequestData["id"] = id as AnyObject
                         dictRequestData["username"] = myjidtrim as AnyObject
                         dictRequest["requestData"] = dictRequestData as AnyObject
                         
                         let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                         let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                         
                         DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                         // do stuff 3 seconds later
                         self.sendRequestToAPI(strRequestDict: strFanUpdates)
                         }*/
                    }
                    else if(type == "videos")
                    {
                       // LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Fan Story")
                        var dictRequest = [String: AnyObject]()
                        dictRequest["cmd"] = "getvideobyid" as AnyObject
                        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                        dictRequest["device"] = "ios" as AnyObject
                        var reqParams = [String: AnyObject]()
                        //reqParams["cmd"] = "getfanupdates" as AnyObject
                        let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                        reqParams["id"] = id as AnyObject
                        
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        if(myjid != nil){
                            let arrdUserJid = myjid?.components(separatedBy: "@")
                            let userUserJid = arrdUserJid?[0]
                            reqParams["username"] = userUserJid as AnyObject?
                        }
                        else{
                            reqParams["username"] = "" as AnyObject
                        }
                        
                        dictRequest["requestData"] = reqParams as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)
                        do {
                          /*  let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                            let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                            let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                            //  print(escapedString!)
                            // print(strFanUpdates)
                            var reqParams1 = [String: AnyObject]()
                            reqParams1["request"] = strFanUpdates as AnyObject
                            let url = MediaAPIjava + "request=" + escapedString!*/
                            //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                // 2
                                .responseJSON { response in
                                    
                                    switch response.result {
                                                                            case .success(let value):
                                                                                if let json = value as? [String: Any] {
                                                                                    // print(" JSON:", json)
                                                                                    let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                    // self.finishSyncContacts()
                                                                                    //print(" status:", status1)
                                                                                    if(status1){DispatchQueue.main.async {
                                                                                        let response: NSArray = json["responseData"]  as! NSArray
                                                                                        
                                                                                        // print(response)
                                                                                        //let notificationName = Notification.Name("tabindexchange")
                                                                                        //NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                        let tabIndex:[String: Any] = ["index": "media", "response": response as [AnyObject]]
                                                                                        if(self.isFromBanterDeepLink)
                                                                                        {
                                                                                            self.isFromBanterDeepLink = false
                                                                                            let notificationName = Notification.Name("tabindexffdeeplink")
                                                                                            NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                                            userInfo: tabIndex)
                                                                                        } else {
                                                                                            let notificationName1 = Notification.Name("_FetchedMediaByID")
                                                                                            NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                                                            userInfo: tabIndex)
                                                                                        }
                                                                                        }
                                                                                        
                                                                                    }
                                                                                    else{
                                                                                       DispatchQueue.main.async
                                                                                            {
                                                                                                let blocked: Bool = json["blocked"] as! Bool
                                                                                                let error: String = json["error"] as! String
                                                                                                let tabIndex:[String: Any] = ["blocked":blocked,"error": error]
                                                                                                let notificationName = Notification.Name("tabindexffdeeplinkFail")
                                                                                                NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                                                userInfo: tabIndex)
                                                                                                
                                                                                        }
                                                                                        //Show Error
                                                                                    }
                                                                                }
                                                                            case .failure(let error):
                                                                                debugPrint(error as Any)
                                        break
                                                                                // error handling
                                                                 
                                                                            }
                                   
                            }
                        } catch {
                            print(error.localizedDescription)
                        }
                        /* let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         let arrdUserJid = myjid?.components(separatedBy: "@")
                         let userUserJid = arrdUserJid?[0]
                         let myjidtrim: String? = userUserJid
                         var dictRequest = [String: AnyObject]()
                         dictRequest["cmd"] = "getfanupdatebyid" as AnyObject
                         var dictRequestData = [String: AnyObject]()
                         dictRequestData["id"] = id as AnyObject
                         dictRequestData["username"] = myjidtrim as AnyObject
                         dictRequest["requestData"] = dictRequestData as AnyObject
                         
                         let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                         let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                         
                         DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                         // do stuff 3 seconds later
                         self.sendRequestToAPI(strRequestDict: strFanUpdates)
                         }*/
                    }
                    else if(type == "news")
                    {
                       // LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading News")
                        let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                        let boundary = generateBoundaryString()
                        var request = URLRequest(url: URL(string: MediaAPI)!)
                        request.httpMethod = "POST"
                        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                        var reqParams = [String: AnyObject]()
                        reqParams["cmd"] = "getnewsbyid" as AnyObject
                        //reqParams["catid"] =   lastindex as AnyObject//String(describing:  lastindex)
                        reqParams["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                        reqParams["device"] = "ios"  as AnyObject
                        reqParams["id"] = id as AnyObject
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        if(myjid != nil){
                            let arrdUserJid = myjid?.components(separatedBy: "@")
                            let userUserJid = arrdUserJid?[0]
                            reqParams["username"] = userUserJid as AnyObject?
                        }
                        else{
                            reqParams["username"] = "" as AnyObject
                        }
                        
                        
                        // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                        request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                            if let data = data {
                                if String(data: data, encoding: String.Encoding.utf8) != nil {
                                    //print(stringData) //JSONSerialization
                                    
                                    
                                    
                                    //print(time)
                                    do {
                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                        
                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                        
                                        if(isSuccess)
                                        {  let response = jsonData?.value(forKey: "data") as! NSDictionary
                                            
                                            print(response)
                                            //let notificationName = Notification.Name("tabindexchange")
                                            //NotificationCenter.default.post(name: notificationName, object: nil)
                                            let tabIndex:[String: Any] = ["index": "news", "response": response ]
                                            if(self.isFromBanterDeepLink)
                                            {
                                                self.isFromBanterDeepLink = false
                                                let notificationName = Notification.Name("tabindexffdeeplink")
                                                NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                userInfo: tabIndex)
                                            } else {
                                                if(self.isOnNewsDetailView){
                                                    let notificationName1 = Notification.Name("_FetchedNewsByID")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                    userInfo: tabIndex)
                                                }
                                            }
                                        }
                                        else
                                        {
                                           // LoadingIndicatorView.hide() //Show Error
                                        }
                                    } catch let error as NSError {
                                        print(error)
                                        //Show Error
                                    }
                                    
                                }
                            }
                            else
                            {
                                //Show Error
                            }
                        })
                        task.resume()
                        /*  let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         let arrdUserJid = myjid?.components(separatedBy: "@")
                         let userUserJid = arrdUserJid?[0]
                         let myjidtrim: String? = userUserJid
                         var dictRequest = [String: AnyObject]()
                         dictRequest["cmd"] = "getnewsbyid" as AnyObject
                         var dictRequestData = [String: AnyObject]()
                         dictRequestData["id"] = id as AnyObject
                         dictRequestData["username"] = myjidtrim as AnyObject
                         dictRequest["requestData"] = dictRequestData as AnyObject
                         
                         let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                         let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                         
                         DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                         // do stuff 3 seconds later
                         self.sendRequestToAPI(strRequestDict: strFanUpdates)
                         }*/
                    }
                    else if(type == "roominvite")
                    { if(myjid != nil){
                       // LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Please wait while loading")
                       /* let id: String = (jsonData?.value(forKey: "id") as? String)!
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        let arrdUserJid = myjid?.components(separatedBy: "@")
                        let userUserJid = arrdUserJid?[0]
                        let myjidtrim: String? = userUserJid
                        var dictRequest = [String: AnyObject]()
                        dictRequest["cmd"] = "getuserroomsbyid" as AnyObject
                        var dictRequestData = [String: AnyObject]()
                        dictRequestData["roomid"] = id as AnyObject
                        dictRequestData["username"] = myjidtrim as AnyObject
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        
                        let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                        
                        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                            // do stuff 3 seconds later
                            self.sendRequestToAPI(strRequestDict: strFanUpdates)
                        }*/
                        let id: String = (jsonData?.value(forKey: "id") as? String)!
                        var dictRequest = [String: AnyObject]()
                               dictRequest["cmd"] = "getuserroomsbyid" as AnyObject
                               dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                               dictRequest["device"] = "ios" as AnyObject
                               do {
                                    let time: Int64 = self.getUTCFormateDate()
                                   //Creating Request Data
                                   var dictRequestData = [String: AnyObject]()
                                   
                                   let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                   let arrReadUserJid = login?.components(separatedBy: "@")
                                   let myMobile: String? = arrReadUserJid?[0]
                                   let arrReadChatJid = toUserJID.components(separatedBy: "@")
                                   let to: String? = arrReadChatJid[0]
                                   //appDelegate().mySupportedTeam = joinTeamId
                                   dictRequestData["roomid"] = id as AnyObject//appDelegate().toUserJID as AnyObject
                                  
                                   dictRequestData["username"] = myMobile as AnyObject
                                  
                                   dictRequest["requestData"] = dictRequestData as AnyObject
                                  
                                    /*let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                        let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                             //print(strByPlace)
                                                                                             let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                                             
                                                                                             let url = MediaAPIjava + "request=" + escapedString!*/
                                                                                            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                                            headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                                              // 2
                                                                                                                              .responseJSON { response in
                                                                                 
                                                                                                                                switch response.result {
                                                                                                                                                                          case .success(let value):
                                                                                                                                                                              if let json = value as? [String: Any] {
                                                                                                                                                                                              // print(" JSON:", json)
                                                                                                                                                                                              let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                              if(status1){
                                                                                                                                                                                                  let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                                                                                         let tabIndex:[String: Any] = ["index": "roominvite", "response": response as [AnyObject]]
                                                                                                                                                                                                                                        let notificationName = Notification.Name("tabindexffdeeplink")
                                                                                                                                                                                                                                                 NotificationCenter.default.post(name: notificationName, object: nil,userInfo: tabIndex)
                                                                                                                                                                                              }
                                                                                                                                                                                              else{
                                                                                                                                                                                        //Show Error
                                                                                                                                                                                              }
                                                                                                                                                                                          }
                                                                                                                                                                          case .failure(let error):
                                                                                                                                                                            debugPrint(error as Any)
                                                                                                                                    break
                                                                                                                                                                              // error handling
                                                                                                                                                               
                                                                                                                                                                          }
                                                                                                                                
                                                                                                                          }
                                   } catch {
                                              print(error.localizedDescription)
                                          }
                    }
                    else{
                        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                            // do stuff 3 seconds later
                            self.LoginwithModelPopUp()
                        }
                        }
                    }
                    else if(type == "product")
                    {
                        //LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Product")
                        let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                        let boundary = generateBoundaryString()
                        var request = URLRequest(url: URL(string: MediaAPI)!)
                        request.httpMethod = "POST"
                        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                        var reqParams = [String: AnyObject]()
                        reqParams["cmd"] = "getproductbyid" as AnyObject
                        reqParams["id"] =   id as AnyObject//String(describing:  lastindex)
                        reqParams["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                        reqParams["device"] = "ios" as AnyObject
                        
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        if(myjid != nil){
                            let arrdUserJid = myjid?.components(separatedBy: "@")
                            let userUserJid = arrdUserJid?[0]
                            reqParams["username"] = userUserJid as AnyObject?
                        }
                        else{
                            reqParams["username"] = "" as AnyObject
                        }
                        
                        
                        // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                        request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                            if let data = data {
                                if String(data: data, encoding: String.Encoding.utf8) != nil {
                                    //print(stringData) //JSONSerialization
                                    
                                    
                                    
                                    //print(time)
                                    do {
                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                        
                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                        
                                        if(isSuccess)
                                        {  // = jsonData?.value(forKey: "data") as! NSDictionary
                                            let arr = jsonData?.value(forKey: "data") as! NSArray
                                            let response = arr[0] as! NSDictionary
                                            print(response)
                                            //let notificationName = Notification.Name("tabindexchange")
                                            //NotificationCenter.default.post(name: notificationName, object: nil)
                                            let tabIndex:[String: Any] = ["index": "product", "response": response ]
                                            self.isFromBanterDeepLink = false
                                            let notificationName = Notification.Name("tabindexffdeeplink")
                                            NotificationCenter.default.post(name: notificationName, object: nil,
                                                                            userInfo: tabIndex)
                                            
                                        }
                                        else
                                        {
                                            LoadingIndicatorView.hide() //Show Error
                                        }
                                    } catch let error as NSError {
                                        print(error)
                                        //Show Error
                                    }
                                    
                                }
                            }
                            else
                            {
                                //Show Error
                            }
                        })
                        task.resume()
                        /*  let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                         let arrdUserJid = myjid?.components(separatedBy: "@")
                         let userUserJid = arrdUserJid?[0]
                         let myjidtrim: String? = userUserJid
                         var dictRequest = [String: AnyObject]()
                         dictRequest["cmd"] = "getnewsbyid" as AnyObject
                         var dictRequestData = [String: AnyObject]()
                         dictRequestData["id"] = id as AnyObject
                         dictRequestData["username"] = myjidtrim as AnyObject
                         dictRequest["requestData"] = dictRequestData as AnyObject
                         
                         let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                         let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                         
                         DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                         // do stuff 3 seconds later
                         self.sendRequestToAPI(strRequestDict: strFanUpdates)
                         }*/
                    }
                   else if(type == "trivia")
                    {
                      //  LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Please wait while loading")
                        var dictRequest = [String: AnyObject]()
                        dictRequest["cmd"] = "gettriviabyid" as AnyObject
                        
                        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                        dictRequest["device"] = "ios" as AnyObject
                      
                        do {
                            
                            /*let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
                             let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
                             print(strInvited)*/
                            //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                            //let arrReadUserJid = login?.components(separatedBy: "@")
                            //let userReadUserJid = arrReadUserJid?[0]
                            
                            
                            var reqParams = [String: AnyObject]()
                            let id: AnyObject = (jsonData?.value(forKey: "id") as? AnyObject)!
                            reqParams["id"] = id
                            
                            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                            if(myjid != nil){
                                let arrdUserJid = myjid?.components(separatedBy: "@")
                                let userUserJid = arrdUserJid?[0]
                                reqParams["username"] = userUserJid as AnyObject?
                            }
                            else{
                                reqParams["username"] = "" as AnyObject
                            }
                            
                            dictRequest["requestData"] = reqParams as AnyObject
                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                            //print(dictRequest)
                            /*let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                            let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                            let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                            //  print(escapedString!)
                            // print(strFanUpdates)
                            var reqParams1 = [String: AnyObject]()
                            reqParams1["request"] = strFanUpdates as AnyObject
                            let url = MediaAPIjava + "request=" + escapedString!*/
                            //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                // 2
                                .responseJSON { response in
                                    
                                    switch response.result {
                                                                             case .success(let value):
                                                                                 if let json = value as? [String: Any] {
                                                                                     // print(" JSON:", json)
                                                                                     let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                     // self.finishSyncContacts()
                                                                                     //print(" status:", status1)
                                                                                     if(status1){DispatchQueue.main.async {
                                                                                        
                                                                                         let arr = json["responseData"] as! NSArray
                                                                                         let response = arr[0] as! NSDictionary
                                                                                         print(response)
                                                                                         //let notificationName = Notification.Name("tabindexchange")
                                                                                         //NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                         let tabIndex:[String: Any] = ["index": "trivia", "response": response ]
                                                                                         self.isFromBanterDeepLink = false
                                                                                         let notificationName = Notification.Name("tabindexffdeeplink")
                                                                                         NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                                         userInfo: tabIndex)
                                                                                         
                                                                                        
                                                                                         }}
                                                                                     else{
                                                                                         DispatchQueue.main.async
                                                                                             {
                                                                                                 // LoadingIndicatorView.hide()
                                                                                                 
                                                                                                 
                                                                                                 
                                                                                                 
                                                                                         }
                                                                                         //Show Error
                                                                                     }
                                                                                 }
                                                                             case .failure(let error):
                                                                                debugPrint(error as Any)
                                        break
                                                                                 // error handling
                                                                  
                                                                             }
                                    
                            }
                            
                            
                        } catch {
                            print(error.localizedDescription)
                        }
                      /*  let id: AnyObject = (jsonData?.value(forKey: "id") as? AnyObject)!
                        let boundary = generateBoundaryString()
                        var request = URLRequest(url: URL(string: MediaAPI)!)
                        request.httpMethod = "POST"
                        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                        var reqParams = [String: AnyObject]()
                        reqParams["cmd"] = "gettriviabyid" as AnyObject
                        reqParams["id"] =   id as AnyObject//String(describing:  lastindex)
                        
                        
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        if(myjid != nil){
                            let arrdUserJid = myjid?.components(separatedBy: "@")
                            let userUserJid = arrdUserJid?[0]
                            reqParams["username"] = userUserJid as AnyObject?
                        }
                        else{
                            reqParams["username"] = "" as AnyObject
                        }
                        
                        
                        // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                        request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                            if let data = data {
                                if String(data: data, encoding: String.Encoding.utf8) != nil {
                                    //print(stringData) //JSONSerialization
                                    
                                    
                                    
                                    //print(time)
                                    do {
                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                        
                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                        
                                        if(isSuccess)
                                        {  // = jsonData?.value(forKey: "data") as! NSDictionary
                                            let arr = jsonData?.value(forKey: "data") as! NSArray
                                            let response = arr[0] as! NSDictionary
                                            print(response)
                                            //let notificationName = Notification.Name("tabindexchange")
                                            //NotificationCenter.default.post(name: notificationName, object: nil)
                                            let tabIndex:[String: Any] = ["index": "trivia", "response": response ]
                                            self.isFromBanterDeepLink = false
                                            let notificationName = Notification.Name("tabindexffdeeplink")
                                            NotificationCenter.default.post(name: notificationName, object: nil,
                                                                            userInfo: tabIndex)
                                            
                                        }
                                        else
                                        {
                                            LoadingIndicatorView.hide() //Show Error
                                        }
                                    } catch let error as NSError {
                                        print(error)
                                        //Show Error
                                    }
                                    
                                }
                            }
                            else
                            {
                                //Show Error
                            }
                        })
                        task.resume()
                     */
                    }
                    else if(type == "profileinvite"){
                                           if(myjid != nil){
                                                                
                                                                  let id: String = (jsonData?.value(forKey: "id") as? String)!
                                              
                                                               let tabIndex:[String: Any] = ["index": "profileinvite", "jid": id ]
                                                                                                              
                                                                                                              let notificationName = Notification.Name("tabindexffdeeplink")
                                                                                                              NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                                                              userInfo: tabIndex)
                                                      
                                           }
                                           else{
                                                                  DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                                      // do stuff 3 seconds later
                                                                      self.LoginwithModelPopUp()
                                                                  }
                                                                  }
                                       }
                }
            } catch let error as NSError {
                print(error)
            }
            
           
        }
        
    }
    func ShowPushNotification(pushUserinfo: [String : AnyObject]){
         var ChatType: String = ""
        if(pushUserinfo["chattype"] != nil)
        {
            ChatType = pushUserinfo["chattype"] as! String
        }
        
        if(ChatType == "chat"){
            let roomid:String = pushUserinfo["username"] as! String + JIDPostfix
            /*self.isBanterClosed = ""
            self.curRoomType = "chat"
            self.isJoined = "yes"
            let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
            if localArrAllChats != nil
            {
                //Code to parse json data
                if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                    do {
                        arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                        
                    } catch let error as NSError {
                          print(error)
                    }
                }
            }
            if let dict2 = self.arrAllChats[toUserJID]
            {
                
                
                if(dict2.value(forKey: "userAvatar") != nil)
                {
                    toAvatarURL = (dict2.value(forKey: "userAvatar") as? String)!
                }
                else
                {
                    toAvatarURL = ""
                }
                
                toName = pushUserinfo["username"] as! String
            }
            else{
                toName = pushUserinfo["username"] as! String
            }*/
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                  let banterTeams:[String: AnyObject] = ["opponentTeam": 0 as AnyObject , "supportedTeam": 0 as AnyObject, "roomid":roomid as AnyObject,"roomtype":"chat" as AnyObject,"roomname":pushUserinfo["username"]   as AnyObject]
                  let notificationName = Notification.Name("ShowChatWindowFromNotification")
                  NotificationCenter.default.post(name: notificationName, object: nil,userInfo: banterTeams)
            }
        }
        else if(ChatType == "trivia"){
            LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Please wait while loading")
            var dictRequest = [String: AnyObject]()
            dictRequest["cmd"] = "gettriviabyid" as AnyObject
            dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
            dictRequest["device"] = "ios" as AnyObject
            
            
            do {
                
                /*let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
                 let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
                 print(strInvited)*/
                //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                //let arrReadUserJid = login?.components(separatedBy: "@")
                //let userReadUserJid = arrReadUserJid?[0]
                
                
                var reqParams = [String: AnyObject]()
                let id: AnyObject = pushUserinfo["id"] as AnyObject
                reqParams["id"] = id
                
                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                if(myjid != nil){
                    let arrdUserJid = myjid?.components(separatedBy: "@")
                    let userUserJid = arrdUserJid?[0]
                    reqParams["username"] = userUserJid as AnyObject?
                }
                else{
                    reqParams["username"] = "" as AnyObject
                }
                
                dictRequest["requestData"] = reqParams as AnyObject
                //dictRequest.setValue(dictMobiles, forKey: "requestData")
                //print(dictRequest)
                /*let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                //  print(escapedString!)
                // print(strFanUpdates)
                var reqParams1 = [String: AnyObject]()
                reqParams1["request"] = strFanUpdates as AnyObject
                let url = MediaAPIjava + "request=" + escapedString!*/
                //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                  headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                    // 2
                    .responseJSON { response in
                        
                        switch response.result {
                                                                  case .success(let value):
                                                                      if let json = value as? [String: Any] {
                                                                          // print(" JSON:", json)
                                                                          let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                          // self.finishSyncContacts()
                                                                          //print(" status:", status1)
                                                                          if(status1){DispatchQueue.main.async {
                                                                              
                                                                              let arr = json["responseData"] as! NSArray
                                                                              let response = arr[0] as! NSDictionary
                                                                              print(response)
                                                                              //let notificationName = Notification.Name("tabindexchange")
                                                                              //NotificationCenter.default.post(name: notificationName, object: nil)
                                                                              let tabIndex:[String: Any] = ["index": "trivia", "response": response ]
                                                                              self.isFromBanterDeepLink = false
                                                                              let notificationName = Notification.Name("tabindexffdeeplink")
                                                                              NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                              userInfo: tabIndex)
                                                                              
                                                                              
                                                                              }}
                                                                          else{
                                                                              DispatchQueue.main.async
                                                                                  {
                                                                                      LoadingIndicatorView.hide()
                                                                                      
                                                                                      
                                                                                      
                                                                                      
                                                                              }
                                                                              //Show Error
                                                                          }
                                                                      }
                                                                  case .failure(let error):
                                                                     debugPrint(error as Any)
                            break
                                                                      // error handling
                                                       
                                                                  }
                       
                }
                
                
            } catch {
                print(error.localizedDescription)
            }
            /*  let id: AnyObject = (jsonData?.value(forKey: "id") as? AnyObject)!
             let boundary = generateBoundaryString()
             var request = URLRequest(url: URL(string: MediaAPI)!)
             request.httpMethod = "POST"
             request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
             var reqParams = [String: AnyObject]()
             reqParams["cmd"] = "gettriviabyid" as AnyObject
             reqParams["id"] =   id as AnyObject//String(describing:  lastindex)
             
             
             let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
             if(myjid != nil){
             let arrdUserJid = myjid?.components(separatedBy: "@")
             let userUserJid = arrdUserJid?[0]
             reqParams["username"] = userUserJid as AnyObject?
             }
             else{
             reqParams["username"] = "" as AnyObject
             }
             
             
             // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
             request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
             let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
             if let data = data {
             if String(data: data, encoding: String.Encoding.utf8) != nil {
             //print(stringData) //JSONSerialization
             
             
             
             //print(time)
             do {
             let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
             
             let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
             
             if(isSuccess)
             {  // = jsonData?.value(forKey: "data") as! NSDictionary
             let arr = jsonData?.value(forKey: "data") as! NSArray
             let response = arr[0] as! NSDictionary
             print(response)
             //let notificationName = Notification.Name("tabindexchange")
             //NotificationCenter.default.post(name: notificationName, object: nil)
             let tabIndex:[String: Any] = ["index": "trivia", "response": response ]
             self.isFromBanterDeepLink = false
             let notificationName = Notification.Name("tabindexffdeeplink")
             NotificationCenter.default.post(name: notificationName, object: nil,
             userInfo: tabIndex)
             
             }
             else
             {
             LoadingIndicatorView.hide() //Show Error
             }
             } catch let error as NSError {
             print(error)
             //Show Error
             }
             
             }
             }
             else
             {
             //Show Error
             }
             })
             task.resume()
             */
        }
          /*  else if(ChatType == "fanstory"){
               // LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Fan Story")
                var dictRequest = [String: AnyObject]()
                dictRequest["cmd"] = "getfanupdatebyid" as AnyObject
               dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
               dictRequest["device"] = "ios" as AnyObject
                var reqParams = [String: AnyObject]()
                //reqParams["cmd"] = "getfanupdates" as AnyObject
                let id: AnyObject = pushUserinfo["id"] as AnyObject
                reqParams["id"] = id as AnyObject
                
                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                if(myjid != nil){
                    let arrdUserJid = myjid?.components(separatedBy: "@")
                    let userUserJid = arrdUserJid?[0]
                    reqParams["username"] = userUserJid as AnyObject?
                }
                else{
                    reqParams["username"] = "" as AnyObject
                }
                
                dictRequest["requestData"] = reqParams as AnyObject
                //dictRequest.setValue(dictMobiles, forKey: "requestData")
                //print(dictRequest)
                do {
                   /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                    let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                    let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                    //  print(escapedString!)
                    // print(strFanUpdates)
                    var reqParams1 = [String: AnyObject]()
                    reqParams1["request"] = strFanUpdates as AnyObject
                    let url = MediaAPIjava + "request=" + escapedString!*/
                    //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                    Alamofire.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                      headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                        // 2
                        .responseJSON { response in
                            //print(response.result.value)
                            if response.result.error == nil {
                                if let json = response.result.value as? Dictionary<String, Any>{
                                    // print(" JSON:", json)
                                    let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                    // self.finishSyncContacts()
                                    //print(" status:", status1)
                                    if(status1){DispatchQueue.main.async {
                                        let response: NSArray = json["responseData"]  as! NSArray
                                        
                                        // print(response)
                                        //let notificationName = Notification.Name("tabindexchange")
                                        //NotificationCenter.default.post(name: notificationName, object: nil)
                                        let tabIndex:[String: Any] = ["index": "fanupdate", "response": response as [AnyObject]]
                                        
                                            let notificationName = Notification.Name("tabindexffdeeplink")
                                            NotificationCenter.default.post(name: notificationName, object: nil,
                                                                            userInfo: tabIndex)
                                       
                                        }
                                        
                                    }
                                    else{
                                        DispatchQueue.main.async
                                            {
                                                let blocked: Bool = json["blocked"] as! Bool
                                                let error: String = json["error"] as! String
                                                let tabIndex:[String: Any] = ["blocked":blocked,"error": error]
                                                let notificationName = Notification.Name("tabindexffdeeplinkFail")
                                                NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                userInfo: tabIndex)
                                                
                                        }
                                        //Show Error
                                    }
                                }
                            } else {
                                debugPrint(response.result.error as Any)
                            }
                    }
                } catch {
                    print(error.localizedDescription)
                }
              
            }
            else if(ChatType == "news"){
               var dictRequest = [String: AnyObject]()
                      dictRequest["cmd"] = "getnewsbyid" as AnyObject
                      dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                      dictRequest["device"] = "ios" as AnyObject
                      
                      
                      do {
                          
                       
                          
                          var reqParams = [String: AnyObject]()
                          let id: AnyObject = pushUserinfo["id"] as AnyObject
                          reqParams["id"] = id
                          
                          let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                          if(myjid != nil){
                              let arrdUserJid = myjid?.components(separatedBy: "@")
                              let userUserJid = arrdUserJid?[0]
                              reqParams["username"] = userUserJid as AnyObject?
                          }
                          else{
                              reqParams["username"] = "" as AnyObject
                          }
                          
                          dictRequest["requestData"] = reqParams as AnyObject
                         
                          //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                          Alamofire.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                            headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                              // 2
                              .responseJSON { response in
                                  //print(response.result.value)
                                  if response.result.error == nil {
                                      if let json = response.result.value as? Dictionary<String, Any>{
                                          // print(" JSON:", json)
                                          let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                          // self.finishSyncContacts()
                                          //print(" status:", status1)
                                          if(status1){DispatchQueue.main.async {
                                              
                                              let arr = json["responseData"] as! NSArray
                                              let response = arr[0] as! NSDictionary
                                              print(response)
                                              //let notificationName = Notification.Name("tabindexchange")
                                              //NotificationCenter.default.post(name: notificationName, object: nil)
                                              
                                              self.isFromBanterDeepLink = false
                                            let tabIndex:[String: Any] = ["index": "news", "response": response ]
                                             
                                                
                                             
                                                  let notificationName = Notification.Name("tabindexffdeeplink")
                                                  NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                  userInfo: tabIndex)
                                              
                                              
                                              }}
                                          else{
                                              DispatchQueue.main.async
                                                  {
                                                      //LoadingIndicatorView.hide()
                                                      
                                                      
                                                      
                                                      
                                              }
                                              //Show Error
                                          }
                                      }
                                  } else {
                                      debugPrint(response.result.error as Any)
                                  }
                          }
                          
                          
                      } catch {
                          print(error.localizedDescription)
                      }
            
                /* let id: AnyObject = pushUserinfo["id"] as AnyObject
                let boundary = generateBoundaryString()
                var request = URLRequest(url: URL(string: MediaAPI)!)
                request.httpMethod = "POST"
                request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                var reqParams = [String: AnyObject]()
                reqParams["cmd"] = "getnewsbyid" as AnyObject
                //reqParams["catid"] =   lastindex as AnyObject//String(describing:  lastindex)
            reqParams["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                reqParams["device"] = "ios" as AnyObject
                reqParams["id"] = id as AnyObject
                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                if(myjid != nil){
                    let arrdUserJid = myjid?.components(separatedBy: "@")
                    let userUserJid = arrdUserJid?[0]
                    reqParams["username"] = userUserJid as AnyObject?
                }
                else{
                    reqParams["username"] = "" as AnyObject
                }
                
                
                // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                    if let data = data {
                        if String(data: data, encoding: String.Encoding.utf8) != nil {
                            //print(stringData) //JSONSerialization
                            
                            
                            
                            //print(time)
                            do {
                                let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                
                                let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                
                                if(isSuccess)
                                {  let response = jsonData?.value(forKey: "data") as! NSDictionary
                                    
                                    print(response)
                                    //let notificationName = Notification.Name("tabindexchange")
                                    //NotificationCenter.default.post(name: notificationName, object: nil)
                                    let tabIndex:[String: Any] = ["index": "news", "response": response ]
                                   
                                        let notificationName = Notification.Name("tabindexffdeeplink")
                                        NotificationCenter.default.post(name: notificationName, object: nil,
                                                                        userInfo: tabIndex)
                                   
                                }
                                else
                                {
                                    LoadingIndicatorView.hide() //Show Error
                                }
                            } catch let error as NSError {
                                print(error)
                                //Show Error
                            }
                            
                        }
                    }
                    else
                    {
                        //Show Error
                    }
                })
                task.resume()
               */
            }*/
            else if(ChatType == "products"){
                LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Product")
                  let id: AnyObject = pushUserinfo["id"] as AnyObject
                let boundary = generateBoundaryString()
                var request = URLRequest(url: URL(string: MediaAPI)!)
                request.httpMethod = "POST"
                request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                var reqParams = [String: AnyObject]()
                reqParams["cmd"] = "getproductbyid" as AnyObject
                reqParams["id"] =   id as AnyObject//String(describing:  lastindex)
            reqParams["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                reqParams["device"] = "ios" as AnyObject
                
                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                if(myjid != nil){
                    let arrdUserJid = myjid?.components(separatedBy: "@")
                    let userUserJid = arrdUserJid?[0]
                    reqParams["username"] = userUserJid as AnyObject?
                }
                else{
                    reqParams["username"] = "" as AnyObject
                }
                
                
                // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                    if let data = data {
                        if String(data: data, encoding: String.Encoding.utf8) != nil {
                            //print(stringData) //JSONSerialization
                            
                            
                            
                            //print(time)
                            do {
                                let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                
                                let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                
                                if(isSuccess)
                                {  // = jsonData?.value(forKey: "data") as! NSDictionary
                                    let arr = jsonData?.value(forKey: "data") as! NSArray
                                    let response = arr[0] as! NSDictionary
                                    print(response)
                                    //let notificationName = Notification.Name("tabindexchange")
                                    //NotificationCenter.default.post(name: notificationName, object: nil)
                                    let tabIndex:[String: Any] = ["index": "product", "response": response ]
                                    self.isFromBanterDeepLink = false
                                    let notificationName = Notification.Name("tabindexffdeeplink")
                                    NotificationCenter.default.post(name: notificationName, object: nil,
                                                                    userInfo: tabIndex)
                                    
                                }
                                else
                                {
                                    LoadingIndicatorView.hide() //Show Error
                                }
                            } catch let error as NSError {
                                print(error)
                                //Show Error
                            }
                            
                        }
                    }
                    else
                    {
                        //Show Error
                    }
                })
                task.resume()
            
            }
            else if(ChatType == "videos")
                               {
                                  // LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading Fan Story")
                                   var dictRequest = [String: AnyObject]()
                                   dictRequest["cmd"] = "getvideobyid" as AnyObject
                                   dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                                   dictRequest["device"] = "ios" as AnyObject
                                   var reqParams = [String: AnyObject]()
                                   //reqParams["cmd"] = "getfanupdates" as AnyObject
                                 let id: AnyObject = pushUserinfo["id"] as AnyObject
                                  // let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                                   reqParams["id"] = id as AnyObject
                                   
                                   let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                   if(myjid != nil){
                                       let arrdUserJid = myjid?.components(separatedBy: "@")
                                       let userUserJid = arrdUserJid?[0]
                                       reqParams["username"] = userUserJid as AnyObject?
                                   }
                                   else{
                                       reqParams["username"] = "" as AnyObject
                                   }
                                   
                                   dictRequest["requestData"] = reqParams as AnyObject
                                   //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                   //print(dictRequest)
                                   do {
                                     /*  let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                       let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                                       let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                       //  print(escapedString!)
                                       // print(strFanUpdates)
                                       var reqParams1 = [String: AnyObject]()
                                       reqParams1["request"] = strFanUpdates as AnyObject
                                       let url = MediaAPIjava + "request=" + escapedString!*/
                                       //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                                       AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                         headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                           // 2
                                           .responseJSON { response in
                                            switch response.result {
                                                       case .success(let value):
                                                           if let json = value as? [String: Any] {
                                                               // print(" JSON:", json)
                                                               let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                               // self.finishSyncContacts()
                                                               //print(" status:", status1)
                                                               if(status1){DispatchQueue.main.async {
                                                                   let response: NSArray = json["responseData"]  as! NSArray
                                                                   
                                                                   // print(response)
                                                                   //let notificationName = Notification.Name("tabindexchange")
                                                                   //NotificationCenter.default.post(name: notificationName, object: nil)
                                                                   let tabIndex:[String: Any] = ["index": "media", "response": response as [AnyObject]]
                                                                   if(self.isFromBanterDeepLink)
                                                                   {
                                                                       self.isFromBanterDeepLink = false
                                                                       let notificationName = Notification.Name("tabindexffdeeplink")
                                                                       NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                       userInfo: tabIndex)
                                                                   } else {
                                                                       let notificationName1 = Notification.Name("_FetchedMediaByID")
                                                                       NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                                       userInfo: tabIndex)
                                                                   }
                                                                   }
                                                                   
                                                               }
                                                               else{
                                                                  DispatchQueue.main.async
                                                                       {
                                                                           let blocked: Bool = json["blocked"] as! Bool
                                                                           let error: String = json["error"] as! String
                                                                           let tabIndex:[String: Any] = ["blocked":blocked,"error": error]
                                                                           let notificationName = Notification.Name("tabindexffdeeplinkFail")
                                                                           NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                           userInfo: tabIndex)
                                                                           
                                                                   }
                                                                   //Show Error
                                                               }
                                                           }
                                                       case .failure(let error):
                                                         debugPrint(error as Any)
                                                break
                                                           // error handling
                                            
                                                       }
                                              
                                       }
                                   } catch {
                                       print(error.localizedDescription)
                                   }
                                   /* let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                                    let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                    let arrdUserJid = myjid?.components(separatedBy: "@")
                                    let userUserJid = arrdUserJid?[0]
                                    let myjidtrim: String? = userUserJid
                                    var dictRequest = [String: AnyObject]()
                                    dictRequest["cmd"] = "getfanupdatebyid" as AnyObject
                                    var dictRequestData = [String: AnyObject]()
                                    dictRequestData["id"] = id as AnyObject
                                    dictRequestData["username"] = myjidtrim as AnyObject
                                    dictRequest["requestData"] = dictRequestData as AnyObject
                                    
                                    let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                    let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                                    
                                    DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                    // do stuff 3 seconds later
                                    self.sendRequestToAPI(strRequestDict: strFanUpdates)
                                    }*/
                               }
             else if(ChatType == "openapp"){
        }
        else if(ChatType == "homefixed"){
           // LoadingIndicatorView.show((window?.rootViewController?.view)!, loadingText: "\n Loading News")
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "gethomefixedbyid" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        
        
        do {
            
         
            
            var reqParams = [String: AnyObject]()
            let id: AnyObject = pushUserinfo["id"] as AnyObject
            reqParams["id"] = id
            
            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
            if(myjid != nil){
                let arrdUserJid = myjid?.components(separatedBy: "@")
                let userUserJid = arrdUserJid?[0]
                reqParams["username"] = userUserJid as AnyObject?
            }
            else{
                reqParams["username"] = "" as AnyObject
            }
            
            dictRequest["requestData"] = reqParams as AnyObject
           
            //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                // 2
                .responseJSON { response in
                    switch response.result {
                               case .success(let value):
                                   if let json = value as? [String: Any] {
                                       // print(" JSON:", json)
                                       let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                       // self.finishSyncContacts()
                                       //print(" status:", status1)
                                       if(status1){DispatchQueue.main.async {
                                           
                                           let arr = json["responseData"] as! NSArray
                                           let response = arr[0] as! NSDictionary
                                           print(response)
                                           //let notificationName = Notification.Name("tabindexchange")
                                           //NotificationCenter.default.post(name: notificationName, object: nil)
                                           
                                           self.isFromBanterDeepLink = false
                                          let tabIndex:[String: Any] = ["index": "homefixed", "response": response]
                                          
                                               let notificationName = Notification.Name("tabindexffdeeplink")
                                               NotificationCenter.default.post(name: notificationName, object: nil,
                                                                               userInfo: tabIndex)
                                           
                                           
                                           }}
                                       else{
                                           DispatchQueue.main.async
                                               {
                                                   //LoadingIndicatorView.hide()
                                                   
                                                   
                                                   
                                                   
                                           }
                                           //Show Error
                                       }
                                   }
                               case .failure(let error):
                                debugPrint(error as Any)
                        break
                                   // error handling
                    
                               }
                    
            }
            
            
        } catch {
            print(error.localizedDescription)
        }
           /*  let id: AnyObject = pushUserinfo["id"] as AnyObject
            let boundary = generateBoundaryString()
            var request = URLRequest(url: URL(string: MediaAPI)!)
            request.httpMethod = "POST"
            request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
            var reqParams = [String: AnyObject]()
            reqParams["cmd"] = "gethomefixedbyid" as AnyObject
            //reqParams["catid"] =   lastindex as AnyObject//String(describing:  lastindex)
        reqParams["key"] = "kXfqS9wUug6gVKDB" as AnyObject
            reqParams["device"] = "ios" as AnyObject
            reqParams["id"] = id as AnyObject
            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
            if(myjid != nil){
                let arrdUserJid = myjid?.components(separatedBy: "@")
                let userUserJid = arrdUserJid?[0]
                reqParams["username"] = userUserJid as AnyObject?
            }
            else{
                reqParams["username"] = "" as AnyObject
            }
            
            
            // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
            request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
            let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                if let data = data {
                    if String(data: data, encoding: String.Encoding.utf8) != nil {
                        //print(stringData) //JSONSerialization
                        
                        
                        
                        //print(time)
                        do {
                            let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                            
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            
                            if(isSuccess)
                            {  let response = jsonData?.value(forKey: "data") as! NSDictionary
                                
                                print(response)
                                //let notificationName = Notification.Name("tabindexchange")
                                //NotificationCenter.default.post(name: notificationName, object: nil)
                                let tabIndex:[String: Any] = ["index": "homefixed", "response": response ]
                               
                                    let notificationName = Notification.Name("tabindexffdeeplink")
                                    NotificationCenter.default.post(name: notificationName, object: nil,
                                                                    userInfo: tabIndex)
                               
                            }
                            else
                            {
                               // LoadingIndicatorView.hide() //Show Error
                            }
                        } catch let error as NSError {
                            print(error)
                            //Show Error
                        }
                        
                    }
                }
                else
                {
                    //Show Error
                }
            })
            task.resume()*/
           
        }
        else if(ChatType == "event"){
           let AppScreen:String = pushUserinfo["AppScreen"] as! String
                         if(AppScreen == "FanStory"){
                              var dictRequest = [String: AnyObject]()
                              dictRequest["cmd"] = "getfanupdatebyid" as AnyObject
                             dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                             dictRequest["device"] = "ios" as AnyObject
                              var reqParams = [String: AnyObject]()
                              //reqParams["cmd"] = "getfanupdates" as AnyObject
                              //let id: AnyObject = pushUserinfo["id"] as AnyObject
                              reqParams["id"] = pushUserinfo["Source_item_id"] as AnyObject
                              
                              let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                              if(myjid != nil){
                                  let arrdUserJid = myjid?.components(separatedBy: "@")
                                  let userUserJid = arrdUserJid?[0]
                                  reqParams["username"] = userUserJid as AnyObject?
                              }
                              else{
                                  reqParams["username"] = "" as AnyObject
                              }
                              
                              dictRequest["requestData"] = reqParams as AnyObject
                              //dictRequest.setValue(dictMobiles, forKey: "requestData")
                              //print(dictRequest)
                              do {
                                 /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                  let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                                  let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                  //  print(escapedString!)
                                  // print(strFanUpdates)
                                  var reqParams1 = [String: AnyObject]()
                                  reqParams1["request"] = strFanUpdates as AnyObject
                                  let url = MediaAPIjava + "request=" + escapedString!*/
                                  //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                                  AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                    headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                      // 2
                                      .responseJSON { response in
                                        switch response.result {
                                                   case .success(let value):
                                                       if let json = value as? [String: Any] {
                                                           // print(" JSON:", json)
                                                           let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                           // self.finishSyncContacts()
                                                           //print(" status:", status1)
                                                           if(status1){DispatchQueue.main.async {
                                                               let response: NSArray = json["responseData"]  as! NSArray
                                                               
                                                               // print(response)
                                                               //let notificationName = Notification.Name("tabindexchange")
                                                               //NotificationCenter.default.post(name: notificationName, object: nil)
                                                               let tabIndex:[String: Any] = ["index": "fanupdate", "response": response as [AnyObject]]
                                                               
                                                                   let notificationName = Notification.Name("tabindexffdeeplink")
                                                                   NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                   userInfo: tabIndex)
                                                              
                                                               }
                                                               
                                                           }
                                                           else{
                                                               DispatchQueue.main.async
                                                                   {
                                                                       let blocked: Bool = json["blocked"] as! Bool
                                                                       let error: String = json["error"] as! String
                                                                       let tabIndex:[String: Any] = ["blocked":blocked,"error": error]
                                                                       let notificationName = Notification.Name("tabindexffdeeplinkFail")
                                                                       NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                       userInfo: tabIndex)
                                                                       
                                                               }
                                                               //Show Error
                                                           }
                                                       }
                                                   case .failure(let error):
                                                    debugPrint(error as Any)
                                            break
                                                       // error handling
                                        
                                                   }
                                         
                                  }
                              } catch {
                                  print(error.localizedDescription)
                              }
                            
            }
             else  if(AppScreen == "Profile"){
                            let id:String = pushUserinfo["Followusername"] as!  String

                            let tabIndex:[String: Any] = ["index": "profileinvite", "jid": id ]
                                                                                                                                        
                                                                                                                                        let notificationName = Notification.Name("tabindexffdeeplink")
                                                                                                                                        NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                                                                                        userInfo: tabIndex)
                                                                                
            }
             else if(AppScreen == "TopSlider"){
                            var dictRequest = [String: AnyObject]()
                                   dictRequest["cmd"] = "gethomefixedbyid" as AnyObject
                                   dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                                   dictRequest["device"] = "ios" as AnyObject
                                   
                                   
                                   do {
                                       
                                    
                                       
                                       var reqParams = [String: AnyObject]()
                                       let id: AnyObject = pushUserinfo["Source_item_id"] as AnyObject
                                       reqParams["id"] = id
                                       
                                       let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                       if(myjid != nil){
                                           let arrdUserJid = myjid?.components(separatedBy: "@")
                                           let userUserJid = arrdUserJid?[0]
                                           reqParams["username"] = userUserJid as AnyObject?
                                       }
                                       else{
                                           reqParams["username"] = "" as AnyObject
                                       }
                                       
                                       dictRequest["requestData"] = reqParams as AnyObject
                                      
                                       //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                                       AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                         headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                           // 2
                                           .responseJSON { response in
                                            switch response.result {
                                                       case .success(let value):
                                                           if let json = value as? [String: Any] {
                                                               // print(" JSON:", json)
                                                               let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                               // self.finishSyncContacts()
                                                               //print(" status:", status1)
                                                               if(status1){DispatchQueue.main.async {
                                                                   
                                                                   let arr = json["responseData"] as! NSArray
                                                                   let response = arr[0] as! NSDictionary
                                                                   print(response)
                                                                   //let notificationName = Notification.Name("tabindexchange")
                                                                   //NotificationCenter.default.post(name: notificationName, object: nil)
                                                                   
                                                                   self.isFromBanterDeepLink = false
                                                                  let tabIndex:[String: Any] = ["index": "homefixed", "response": response]
                                                                  
                                                                       let notificationName = Notification.Name("tabindexffdeeplink")
                                                                       NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                       userInfo: tabIndex)
                                                                   
                                                                   
                                                                   }}
                                                               else{
                                                                   DispatchQueue.main.async
                                                                       {
                                                                           //LoadingIndicatorView.hide()
                                                                           
                                                                           
                                                                           
                                                                           
                                                                   }
                                                                   //Show Error
                                                               }
                                                           }
                                                       case .failure(let error):
                                                         debugPrint(error as Any)
                                                break
                                                           // error handling
                                            
                                                       }
                                               
                                       }
                                       
                                       
                                   } catch {
                                       print(error.localizedDescription)
                                   }
            }
            else if(AppScreen == "News"){
                            var dictRequest = [String: AnyObject]()
                                   dictRequest["cmd"] = "getnewsbyid" as AnyObject
                                   dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                                   dictRequest["device"] = "ios" as AnyObject
                                   
                                   
                                   do {
                                       
                                    
                                       
                                       var reqParams = [String: AnyObject]()
                                       let id: AnyObject = pushUserinfo["Source_item_id"] as AnyObject
                                       reqParams["id"] = id
                                       
                                       let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                       if(myjid != nil){
                                           let arrdUserJid = myjid?.components(separatedBy: "@")
                                           let userUserJid = arrdUserJid?[0]
                                           reqParams["username"] = userUserJid as AnyObject?
                                       }
                                       else{
                                           reqParams["username"] = "" as AnyObject
                                       }
                                       
                                       dictRequest["requestData"] = reqParams as AnyObject
                                      
                                       //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                                       AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                         headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                           // 2
                                           .responseJSON { response in
                                            switch response.result {
                                                       case .success(let value):
                                                           if let json = value as? [String: Any] {
                                                               // print(" JSON:", json)
                                                               let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                               // self.finishSyncContacts()
                                                               //print(" status:", status1)
                                                               if(status1){DispatchQueue.main.async {
                                                                   
                                                                   let arr = json["responseData"] as! NSArray
                                                                   let response = arr[0] as! NSDictionary
                                                                   print(response)
                                                                   //let notificationName = Notification.Name("tabindexchange")
                                                                   //NotificationCenter.default.post(name: notificationName, object: nil)
                                                                   
                                                                   self.isFromBanterDeepLink = false
                                                                 let tabIndex:[String: Any] = ["index": "news", "response": response ]
                                                                  
                                                                     
                                                                  
                                                                       let notificationName = Notification.Name("tabindexffdeeplink")
                                                                       NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                       userInfo: tabIndex)
                                                                   
                                                                   
                                                                   }}
                                                               else{
                                                                   DispatchQueue.main.async
                                                                       {
                                                                           //LoadingIndicatorView.hide()
                                                                           
                                                                           
                                                                           
                                                                           
                                                                   }
                                                                   //Show Error
                                                               }
                                                           }
                                                       case .failure(let error):
                                                        debugPrint(error as Any)
                                                break
                                                           // error handling
                                            
                                                       }
                                               
                                       }
                                       
                                       
                                   } catch {
                                       print(error.localizedDescription)
                                   }
            }
            else if(AppScreen == "Video"){
                            var dictRequest = [String: AnyObject]()
                                                          dictRequest["cmd"] = "getvideobyid" as AnyObject
                                                          dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                                                          dictRequest["device"] = "ios" as AnyObject
                                                          var reqParams = [String: AnyObject]()
                                                          //reqParams["cmd"] = "getfanupdates" as AnyObject
                                                        let id: AnyObject = pushUserinfo["Source_item_id"] as AnyObject
                                                         // let id: Int64 = (jsonData?.value(forKey: "id") as? Int64)!
                                                          reqParams["id"] = id as AnyObject
                                                          
                                                          let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                                          if(myjid != nil){
                                                              let arrdUserJid = myjid?.components(separatedBy: "@")
                                                              let userUserJid = arrdUserJid?[0]
                                                              reqParams["username"] = userUserJid as AnyObject?
                                                          }
                                                          else{
                                                              reqParams["username"] = "" as AnyObject
                                                          }
                                                          
                                                          dictRequest["requestData"] = reqParams as AnyObject
                                                          //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                          //print(dictRequest)
                                                          do {
                                                            /*  let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                              let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                                                              let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                              //  print(escapedString!)
                                                              // print(strFanUpdates)
                                                              var reqParams1 = [String: AnyObject]()
                                                              reqParams1["request"] = strFanUpdates as AnyObject
                                                              let url = MediaAPIjava + "request=" + escapedString!*/
                                                              //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                                                              AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                  // 2
                                                                  .responseJSON { response in
                                                                    switch response.result {
                                                                               case .success(let value):
                                                                                   if let json = value as? [String: Any] {
                                                                                       // print(" JSON:", json)
                                                                                       let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                       // self.finishSyncContacts()
                                                                                       //print(" status:", status1)
                                                                                       if(status1){DispatchQueue.main.async {
                                                                                           let response: NSArray = json["responseData"]  as! NSArray
                                                                                           
                                                                                           // print(response)
                                                                                           //let notificationName = Notification.Name("tabindexchange")
                                                                                           //NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                           let tabIndex:[String: Any] = ["index": "media", "response": response as [AnyObject]]
                                                                                           if(self.isFromBanterDeepLink)
                                                                                           {
                                                                                               self.isFromBanterDeepLink = false
                                                                                               let notificationName = Notification.Name("tabindexffdeeplink")
                                                                                               NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                                               userInfo: tabIndex)
                                                                                           } else {
                                                                                               let notificationName1 = Notification.Name("_FetchedMediaByID")
                                                                                               NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                                                               userInfo: tabIndex)
                                                                                           }
                                                                                           }
                                                                                           
                                                                                       }
                                                                                       else{
                                                                                          DispatchQueue.main.async
                                                                                               {
                                                                                                   let blocked: Bool = json["blocked"] as! Bool
                                                                                                   let error: String = json["error"] as! String
                                                                                                   let tabIndex:[String: Any] = ["blocked":blocked,"error": error]
                                                                                                   let notificationName = Notification.Name("tabindexffdeeplinkFail")
                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                                                                   userInfo: tabIndex)
                                                                                                   
                                                                                           }
                                                                                           //Show Error
                                                                                       }
                                                                                   }
                                                                               case .failure(let error):
                                                                        debugPrint(error as Any)
                                                                        break
                                                                                   // error handling
                                                                    
                                                                               }
                                                                
                                                              }
                                                          } catch {
                                                              print(error.localizedDescription)
                                                          }
            }
            else  if(AppScreen == "Broadcast"){
                            var subType: String = ""
                                       if pushUserinfo["subtype"] != nil{
                                           //bestAttemptContent.title = userInfo["roomid"] as! String
                                           subType = pushUserinfo["subtype"] as! String
                                       }
                            if(!ismodalshow){
                                              ismodalshow = true
                                              let dictNotify: [String : AnyObject] = pushUserinfo["data"] as! [String : AnyObject]
                                              if(subType == "broadcastall" ){
                                                  UserDefaults.standard.setValue(dictNotify["messageid"] as! String, forKey: "broadcastallid")
                                                  UserDefaults.standard.synchronize()
                                              }
                                              else{
                                                  UserDefaults.standard.setValue(dictNotify["messageid"] as! String, forKey: "broadcastinactiveid")
                                                  UserDefaults.standard.synchronize()
                                                  isSetInactiveTime = false
                                                  
                                              }
                                              
                                              // let roomIdNotify = dictNotify["modaltype"] as! String
                                              let receivedMessageType = dictNotify["modaltype"] as! String
                                              
                                              if(receivedMessageType == "action"){
                                                  let mediatype = dictNotify["mediatype"] as! String
                                                  let mediaurl = dictNotify["mediaurl"] as! String
                                                  let actionbtn = dictNotify["actionbtn"] as! String
                                                  let action = dictNotify["action"] as! String
                                                  let link = dictNotify["link"] as! String
                                                  let linktitle = dictNotify["linktitle"] as! String
                                                  let message = dictNotify["message"] as! String
                                                  customAlertVC = CustomAlertViewController.instantiate()
                                                  guard let customAlertVC = customAlertVC else { return }
                                                  
                                                  customAlertVC.titleString = "contactsync"
                                                  customAlertVC.messageString = message
                                                  customAlertVC.mediatype = mediatype
                                                  customAlertVC.mediaurl = mediaurl
                                                  customAlertVC.ActionTitle = actionbtn
                                                  customAlertVC.actioncommand = action
                                                  customAlertVC.actionlink = link
                                                  customAlertVC.LinkTitle = linktitle
                                                  DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                      let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                                      // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                                      popupVC.cornerRadius = 20
                                                      self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                                  }
                                              }
                                              else{
                                                  let mediatype = dictNotify["mediatype"] as! String
                                                  let mediaurl = dictNotify["mediaurl"] as! String
                                                  let actionbtn = dictNotify["actionbtn"] as! String
                                                  let action = dictNotify["action"] as! String
                                                  let link = dictNotify["link"] as! String
                                                  let linktitle = dictNotify["linktitle"] as! String
                                                  let message = dictNotify["message"] as! String
                                                  infoAlertVC = InfoAlertViewController.instantiate()
                                                  guard let customAlertVC = infoAlertVC else { return }
                                                  
                                                  customAlertVC.titleString = "contactsync"
                                                  customAlertVC.messageString = message
                                                  customAlertVC.mediatype = mediatype
                                                  customAlertVC.mediaurl = mediaurl
                                                  customAlertVC.ActionTitle = actionbtn
                                                  customAlertVC.actioncommand = action
                                                  customAlertVC.actionlink = link
                                                  customAlertVC.LinkTitle = linktitle
                                                  DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                      let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                                      // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                                      popupVC.cornerRadius = 20
                                                      self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                                  }
                                                  
                                              }
                                          }
            }
        }
        else
        {
            //let dictNotify: [String : AnyObject] = userInfo["aps"] as! [String : AnyObject]
            let roomIdNotify = pushUserinfo["roomid"] as! String
            
            //let dictNotify2: [String : AnyObject] = dictNotify["alert"] as! [String : AnyObject]
            var supportedTeam = 0
            var opponentTeam = 0
            let roomNameNotify = pushUserinfo["roomname"] as! String//dictNotify2["title"]
            
            
            //if state == .inactive {
            var subType: String = ""
            if pushUserinfo["subtype"] != nil{
                //bestAttemptContent.title = userInfo["roomid"] as! String
                subType = pushUserinfo["subtype"] as! String
            }
            if(subType == "referral"){
                let notificationName = Notification.Name("tabindexchange")
                NotificationCenter.default.post(name: notificationName, object: nil)
            }
            else if(subType == "broadcastall" || subType == "broadcastinactive"){
                if(!ismodalshow){
                    ismodalshow = true
                    let dictNotify: [String : AnyObject] = pushUserinfo["data"] as! [String : AnyObject]
                    if(subType == "broadcastall" ){
                        UserDefaults.standard.setValue(dictNotify["messageid"] as! String, forKey: "broadcastallid")
                        UserDefaults.standard.synchronize()
                    }
                    else{
                        UserDefaults.standard.setValue(dictNotify["messageid"] as! String, forKey: "broadcastinactiveid")
                        UserDefaults.standard.synchronize()
                        isSetInactiveTime = false
                        
                    }
                    
                    // let roomIdNotify = dictNotify["modaltype"] as! String
                    let receivedMessageType = dictNotify["modaltype"] as! String
                    
                    if(receivedMessageType == "action"){
                        let mediatype = dictNotify["mediatype"] as! String
                        let mediaurl = dictNotify["mediaurl"] as! String
                        let actionbtn = dictNotify["actionbtn"] as! String
                        let action = dictNotify["action"] as! String
                        let link = dictNotify["link"] as! String
                        let linktitle = dictNotify["linktitle"] as! String
                        let message = dictNotify["message"] as! String
                        customAlertVC = CustomAlertViewController.instantiate()
                        guard let customAlertVC = customAlertVC else { return }
                        
                        customAlertVC.titleString = "contactsync"
                        customAlertVC.messageString = message
                        customAlertVC.mediatype = mediatype
                        customAlertVC.mediaurl = mediaurl
                        customAlertVC.ActionTitle = actionbtn
                        customAlertVC.actioncommand = action
                        customAlertVC.actionlink = link
                        customAlertVC.LinkTitle = linktitle
                        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                            let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                            // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                            popupVC.cornerRadius = 20
                            self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                        }
                    }
                    else{
                        let mediatype = dictNotify["mediatype"] as! String
                        let mediaurl = dictNotify["mediaurl"] as! String
                        let actionbtn = dictNotify["actionbtn"] as! String
                        let action = dictNotify["action"] as! String
                        let link = dictNotify["link"] as! String
                        let linktitle = dictNotify["linktitle"] as! String
                        let message = dictNotify["message"] as! String
                        infoAlertVC = InfoAlertViewController.instantiate()
                        guard let customAlertVC = infoAlertVC else { return }
                        
                        customAlertVC.titleString = "contactsync"
                        customAlertVC.messageString = message
                        customAlertVC.mediatype = mediatype
                        customAlertVC.mediaurl = mediaurl
                        customAlertVC.ActionTitle = actionbtn
                        customAlertVC.actioncommand = action
                        customAlertVC.actionlink = link
                        customAlertVC.LinkTitle = linktitle
                        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                            let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                            // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                            popupVC.cornerRadius = 20
                            self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                        }
                        
                    }
                }
            }
            else{
                if(roomIdNotify != nil)
                {
                    var RoomType: String = ""
                    
                    var subTypevalue: Int = 0
                    
                    if(subType == "inviten" || subType == "invite")
                    {
                        subTypevalue = 1
                        
                    }
                    
                    //print(self.toUserJID)
                    let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                    if localArrAllChats != nil
                    {
                        //Code to parse json data
                        if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                            do {
                                arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                
                            } catch let error as NSError {
                                print(error)
                            }
                        }
                    }
                    
                    //self.toUserJID = roomIdNotify as! String
                    
                    
                    if(subType == "banterinvite")
                    {
                        subTypevalue = 2
                        let dictNotify: [String : AnyObject] = pushUserinfo["data"] as! [String : AnyObject]
                        supportedTeam = dictNotify["supportteam"] as! Int
                        opponentTeam = dictNotify["opponentteam"] as! Int
                        if self.arrAllChats[roomIdNotify as! String] != nil
                        {
                        }
                        else{
                            let mili: Int64 = self.getUTCFormateDate()
                            let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                            RoomType = "banter"
                            self.prepareMessageForServerIn(roomIdNotify as! String, messageContent: "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button.", messageType: "header", messageTime: mili, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: "banter" , banterRoomName: roomNameNotify, isJoined: "no", isAdmin: "no", supportedTeam: Int64(supportedTeam), opponentTeam: Int64(opponentTeam))
                        }
                    }
                    if let dict2 = self.arrAllChats[roomIdNotify as! String]
                    {
                       RoomType = dict2.value(forKey: "chatType") as! String
                        
                      /*  if(dict2.value(forKey: "userAvatar") != nil)
                        {
                            toAvatarURL = (dict2.value(forKey: "userAvatar") as? String)!
                        }
                        else
                        {
                            toAvatarURL = ""
                        }
                        //let chatType = dict2?.value(forKey: "chatType") as? String
                        //self.appDelegate().joinRoomOnly(with: appDelegate().toUserJID, delegate: self.appDelegate())
                        if let joined = dict2.value(forKey: "isJoined")
                        {
                            isJoined = joined as! String
                        }
                        else
                        {
                            isJoined = "no"
                        }
                        
                        if let closed = dict2.value(forKey: "banterStatus")
                        {
                            if((closed as! String) == "closed")
                            {
                                isBanterClosed = closed as! String
                            }
                            else
                            {
                                isBanterClosed = "active"
                            }
                            
                        }
                        else
                        {
                            isBanterClosed = "active"
                        }
                        
                        if (dict2.value(forKey: "supportedTeam")) != nil
                        {
                            supportedTeam = dict2.value(forKey: "supportedTeam") as! Int
                            // print(supportedTeam)
                        }
                        
                        if (dict2.value(forKey: "opponentTeam")) != nil
                        {
                            opponentTeam = dict2.value(forKey: "opponentTeam") as! Int
                            // print(opponentTeam)
                        }
                        
                        if (dict2.value(forKey: "mySupportedTeam")) != nil
                        {
                            //opponentTeam = dict2?.value(forKey: "mySupportedTeam") as! Int
                            mySupportedTeam = dict2.value(forKey: "mySupportedTeam") as! Int64
                            //print(dict2?.value(forKey: "mySupportedTeam") ?? "")
                        }
                        
                        
                        
                        
                        if(chatType == "banter")
                        {
                            
                            
                            let isOpen = isBanterIsOpen(supportedTeam: supportedTeam, opponentTeam: opponentTeam)
                            
                            if(isOpen == false)
                            {
                                isBanterClosed = "closed"
                            }
                        }
                        else{
                            if let closed = dict2.value(forKey: "banterStatus")
                            {
                                if((closed as! String) == "closed")
                                {
                                    isBanterClosed = closed as! String
                                }
                                else
                                {
                                    isBanterClosed = "active"
                                }
                                
                            }
                            else
                            {
                                isBanterClosed = "active"
                            }
                            
                            
                        }*/
                        
                    }
                    else{
                        
                        isJoined = "no"
                        if(subType == "banterinvite"){
                            
                            
                            
                        }
                    }
                    //print(self.toUserJID)["OTPStatus":masseg ,"email":tempuseremail,"otp"
                    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                        //self.toUserJID = roomIdNotify as! String
                        
                       // self.toName = roomNameNotify
                        //print("RoomName: ", self.toName ?? "")
                        let banterTeams:[String: AnyObject] = ["opponentTeam": opponentTeam as AnyObject , "supportedTeam": supportedTeam as AnyObject, "subtype": subTypevalue as AnyObject,"roomid":roomIdNotify as AnyObject,"roomtype":RoomType as AnyObject, "roomname":roomNameNotify as AnyObject]
                        let notificationName = Notification.Name("ShowChatWindowFromNotification")
                        NotificationCenter.default.post(name: notificationName, object: nil, userInfo: banterTeams)
                        //let notificationName = Notification.Name("ShowChatWindowFromNotification")
                        //NotificationCenter.default.post(name: notificationName, object: nil)
                    }
                    
                    
                }
            }
            //}
            // print("Tapped on notification InActive 10.0")
            
            
        }
        
        
        
    }
    
    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
        //timerXmppConection.invalidate()
        issendofflinemessages = true
        
        application.applicationIconBadgeNumber = 0
        let isLoggedin: String? = UserDefaults.standard.string(forKey: "isLoggedin")
        //Check if user is already logged in
        if isLoggedin == nil || isLoggedin == "NO"
        {
            //let notificationName = Notification.Name("Loginfail")
            //NotificationCenter.default.post(name: notificationName, object: nil)
            //UserDefaults.standard.setValue(nil, forKey: "bylogin")
            UserDefaults.standard.setValue(nil, forKey: "userJID")
            UserDefaults.standard.synchronize()
        }
        if(self.xmppStream != nil)
        {
            if(self.xmppStream?.isDisconnected)!
            {
                if(self.connect())
                {
                    
                }
            }
            else
            {
                let login: String? = UserDefaults.standard.string(forKey: "userJID")
                if(login != nil)
                {
                    if(self.isSendingMedia == true)
                    {
                        DispatchQueue.main.asyncAfter(deadline: .now() + 15.0) {
                            //print("media sending is true")
                            self.goOffline(self.xmppStream!)
                            
                        }
                        
                    }
                    else
                    {
                        // print("media sending is false")
                        goOffline(xmppStream!)
                    }
                }
            }
        }
        isAppForground = false
        //DispatchQueue.main.asyncAfter(deadline: .now() + 0) {
            if(!self.isAppForground){
                
                self.isUserOnline = false
            }
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            if (login != nil) {
                 //if(!self.isAppForground){
                //self.timer.invalidate()
                if(self.xmppStream != nil)
                {
                let presence = XMPPPresence(type: "unavailable")
                           self.xmppStream!.send(presence)
                }
                //}
            }
            
        //}
        iscontactsyafteraddObserver = false
        let userD: UserDefaults = UserDefaults.init(suiteName: "group.com.tridecimal.ltd.footballfan")!
        userD.set(0, forKey: "badge")
        userD.synchronize()
        UserDefaults.standard.setValue(0, forKey: "badge")
        UserDefaults.standard.synchronize()
        application.applicationIconBadgeNumber = 0
        //Clslogging.forceSendLogs(application)
    }
    
    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
        //goOnline(xmppStream!)
        
        //New code to show info screen befor show any permission
       /* let notified: String? = UserDefaults.standard.string(forKey: "openslider")
        if notified == nil
        {
            let storyBoard = UIStoryboard(name: "Main", bundle: nil)
            let registerController : NotifyPermissionController = storyBoard.instantiateViewController(withIdentifier: "Notify") as! NotifyPermissionController
            
            //registerController.notifyImage?.image = UIImage(named: "user")
            //registerController.notifyText?.text = "Please allow notifications for Football Fan to get notifications of messages."
            registerController.notifyType = "notification"
            
            self.window = UIWindow(frame: UIScreen.main.bounds)
            
            self.window?.rootViewController = registerController
            self.window?.makeKeyAndVisible()
        }
        else
        {*/
            //DispatchQueue.main.async {
            let notified: String? = UserDefaults.standard.string(forKey: "notification")
            if notified != nil
            {
                
                if #available(iOS 10.0, *) {
                    let center = UNUserNotificationCenter.current()
                    center.delegate = self as? UNUserNotificationCenterDelegate
                    center.requestAuthorization(options: [.badge, .sound, .alert], completionHandler: {(grant, error)  in
                        if error == nil {
                            if grant {
                                DispatchQueue.main.async {
                                    application.registerForRemoteNotifications()
                                    //application.unregisterForRemoteNotifications()
                                }
                            } else {
                                //User didn't grant permission
                            }
                        } else {
                            print("error: ",error ?? "")
                        }
                    })
                } else {
                    // Fallback on earlier versions
                    let settings = UIUserNotificationSettings(types: [.badge, .sound, .alert], categories: nil)
                    UIApplication.shared.registerUserNotificationSettings(settings)
                }
            }
       // }
        
        
        if ClassReachability.isConnectedToNetwork() {
            
            var teamver: Int64 = 0
            var tokenver: Int64 = 0
            let  data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
            let  data1 = Teams_details.rows(order:"team_Id ASC") as! [Teams_details]
            if(data.count == 0 || data1.count == 0){
                teamver = 0
                UserDefaults.standard.setValue(0, forKey: "teamver")
                UserDefaults.standard.synchronize()
            }
            else{
                teamver  = Int64(UserDefaults.standard.integer(forKey: "teamver"))
            }
            tokenver  = Int64(UserDefaults.standard.integer(forKey: "tokenver"))
            //let teamver: Int64 = Int64(UserDefaults.standard.integer(forKey: "teamver"))
            let boundary = generateBoundaryString()
            var request = URLRequest(url: URL(string: MediaAPI)!)
            request.httpMethod = "POST"
            request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
            var reqParams = [String: String]()
            reqParams["cmd"] = "ffconfig"
            reqParams["device"] = "iphone"
            reqParams["version"] = String(Realeseversion)
            reqParams["teamver"] = String(teamver)
            reqParams["key"] = "kXfqS9wUug6gVKDB"
            reqParams["device"] = "ios" as String
            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
            let mytriviajid: String? = UserDefaults.standard.string(forKey: "triviauser")

                       if(myjid != nil){
                           let arrdUserJid = myjid?.components(separatedBy: "@")
                           let userUserJid = arrdUserJid?[0]
                           reqParams["username"] = userUserJid
                       }
                       else if(mytriviajid != nil){
                           let arrdUserJid = mytriviajid?.components(separatedBy: "@")
                           let userUserJid = arrdUserJid?[0]
                           reqParams["username"] = userUserJid
                       }
                       else{
                           reqParams["username"] = ""
                       }
            
            
            // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
            request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
            let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                if let data = data {
                    if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                        //print(stringData) //JSONSerialization
                        
                        
                        
                        //print(time)
                        do {
                            let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                            
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            
                            if(isSuccess)
                            {
                                let isMaintanece: Bool = (jsonData?.value(forKey: "main") as? Bool)!
                                if(isMaintanece){
                                    let mainmsg: String = (jsonData?.value(forKey: "mainmsg") as? String)!
                                    UserDefaults.standard.setValue(isMaintanece, forKey: "maintance")
                                    UserDefaults.standard.setValue("isMaintanece", forKey: "maintancetype")
                                    UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                    UserDefaults.standard.setValue("Football Fan Maintenance", forKey: "maintanceTitel")
                                    UserDefaults.standard.synchronize()
                                    self.showmaintainScreen()
                                }
                                else{
                                    
                                    let isMaindeteary: Bool = (jsonData?.value(forKey: "manupdate") as? Bool)!
                                    let manver: Int64 = (jsonData?.value(forKey: "manver") as? Int64)!
                                    let latestvar: Int64 = (jsonData?.value(forKey: "ver") as? Int64)!
                                    let isprimaryteam: Int64 = (jsonData?.value(forKey: "isprimaryteam") as? Int64)!
                                    let ismobile: Int64 = (jsonData?.value(forKey: "ismobile") as? Int64)!
                                    if(isMaindeteary){
                                        if(self.Realeseversion < manver){
                                            let mainmsg: String = (jsonData?.value(forKey: "manmsg") as? String)!
                                            UserDefaults.standard.setValue(true, forKey: "maintance")
                                            UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                            UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                            UserDefaults.standard.setValue("New Mandatory Update Available", forKey: "maintanceTitel")
                                            UserDefaults.standard.synchronize()
                                            self.showmaintainScreen()
                                        }
                                        else if(self.Realeseversion < latestvar){
                                            let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
                                            UserDefaults.standard.setValue(false, forKey: "maintance")
                                            //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                            // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                            //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
                                            UserDefaults.standard.synchronize()
                                            if(isMaintanece){
                                                let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                if(login != nil)
                                                {
                                                    self.goOnline(self.xmppStream!)
                                                    self.showMainTab()
                                                }
                                                
                                            }
                                            
                                            
                                            let cancelversion: Int64 = Int64(UserDefaults.standard.integer(forKey: "cancelversion"))
                                            if(latestvar != cancelversion){
                                                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                    let pickedCaption:[String: AnyObject] = ["caption": latestvar as AnyObject]
                                                    let notificationName2 = Notification.Name("NewVersionOfApp")
                                                    NotificationCenter.default.post(name: notificationName2, object: nil,userInfo: pickedCaption)
                                                }
                                            }
                                            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                            if(myjid != nil){
                                                if(isprimaryteam == 0){
                                                    let notificationName1 = Notification.Name("Showteam")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil)
                                                }
                                                else{
                                                    if(ismobile == 0){
                                                        UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        let notificationName1 = Notification.Name("Showprofile")
                                                        NotificationCenter.default.post(name: notificationName1, object: nil)
                                                    }
                                                    
                                                    
                                                }
                                            }
                                        }
                                        else{
                                            let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
                                            UserDefaults.standard.setValue(false, forKey: "maintance")
                                            //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                            // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                            //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
                                            UserDefaults.standard.synchronize()
                                            if(isMaintanece){
                                                let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                if(login != nil)
                                                {
                                                    self.goOnline(self.xmppStream!)
                                                    self.showMainTab()
                                                    
                                                }
                                                
                                            }
                                            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                            if(myjid != nil){
                                                if(isprimaryteam == 0){
                                                    let notificationName1 = Notification.Name("Showteam")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil)
                                                }
                                                else{
                                                    if(ismobile == 0){
                                                        UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        let notificationName1 = Notification.Name("Showprofile")
                                                        NotificationCenter.default.post(name: notificationName1, object: nil)
                                                    }
                                                    
                                                    
                                                }
                                            }
                                            // Comment by Mayank 18 Jun 2018
                                            /*
                                             var data = [TeamCategories_detail]()
                                             data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
                                             if(data.count == 0){
                                             var dictRequest = [String: AnyObject]()
                                             dictRequest["cmd"] = "teamsync" as AnyObject
                                             var dictRequestData = [String: AnyObject]()
                                             
                                             dictRequestData["version"] = self.Realeseversion as AnyObject
                                             dictRequest["requestData"] = dictRequestData as AnyObject
                                             do {
                                             let dataTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                             let strTeams = NSString(data: dataTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                             // print(strTeams)
                                             self.sendRequestToAPI(strRequestDict: strTeams)
                                             } catch {
                                             //  print(error.localizedDescription)
                                             }
                                             } */
                                        }
                                        
                                    }
                                    else{
                                        if(self.Realeseversion < latestvar){
                                            let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
                                            UserDefaults.standard.setValue(false, forKey: "maintance")
                                            //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                            // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                            //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
                                            
                                            UserDefaults.standard.synchronize()
                                            if(isMaintanece){
                                                let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                if(login != nil)
                                                {
                                                    self.goOnline(self.xmppStream!)
                                                    self.showMainTab()
                                                }
                                                
                                            }
                                            
                                            let cancelversion: Int64 = Int64(UserDefaults.standard.integer(forKey: "cancelversion"))
                                            if(latestvar != cancelversion){
                                                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                    let pickedCaption:[String: AnyObject] = ["caption": latestvar as AnyObject]
                                                    let notificationName2 = Notification.Name("NewVersionOfApp")
                                                    NotificationCenter.default.post(name: notificationName2, object: nil,userInfo: pickedCaption)
                                                }
                                            }
                                            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                            if(myjid != nil){
                                                if(isprimaryteam == 0){
                                                    let notificationName1 = Notification.Name("Showteam")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil)
                                                }
                                                else{
                                                    if(ismobile == 0){
                                                        UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        let notificationName1 = Notification.Name("Showprofile")
                                                        NotificationCenter.default.post(name: notificationName1, object: nil)
                                                    }
                                                    
                                                    
                                                }
                                            }
                                        }
                                        else {
                                            let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
                                            UserDefaults.standard.setValue(false, forKey: "maintance")
                                            //UserDefaults.standard.setValue("ismanupdate", forKey: "maintancetype")
                                            // UserDefaults.standard.setValue(mainmsg, forKey: "maintancemessage")
                                            //UserDefaults.standard.setValue("New Update Available", forKey: "maintanceTitel")
                                            UserDefaults.standard.synchronize()
                                            if(isMaintanece){
                                                let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                if(login != nil)
                                                {
                                                    self.goOnline(self.xmppStream!)
                                                    self.showMainTab()
                                                }
                                                
                                            }
                                            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                            if(myjid != nil){
                                                if(isprimaryteam == 0){
                                                    let notificationName1 = Notification.Name("Showteam")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil)
                                                }
                                                else{
                                                    if(ismobile == 0){
                                                        UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                        UserDefaults.standard.synchronize()
                                                        let notificationName1 = Notification.Name("Showprofile")
                                                        NotificationCenter.default.post(name: notificationName1, object: nil)
                                                    }
                                                    
                                                    
                                                }
                                            }
                                            // Comment by Mayank 18 Jun 2018
                                            /*
                                             var data = [TeamCategories_detail]()
                                             data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
                                             if(data.count == 0){
                                             var dictRequest = [String: AnyObject]()
                                             dictRequest["cmd"] = "teamsync" as AnyObject
                                             var dictRequestData = [String: AnyObject]()
                                             
                                             dictRequestData["version"] = self.Realeseversion as AnyObject
                                             dictRequest["requestData"] = dictRequestData as AnyObject
                                             do {
                                             let dataTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                             let strTeams = NSString(data: dataTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                             // print(strTeams)
                                             self.sendRequestToAPI(strRequestDict: strTeams)
                                             } catch {
                                             //  print(error.localizedDescription)
                                             }
                                             } */
                                            
                                        }
                                    }
                                    
                                    
                                    
                                    
                                    
                                }
                                let newscatarr = jsonData?.value(forKey: "newscategories") as! NSArray
                                //self.arrNewsCategories = []
                                /*for newcat in newscatarr
                                 {
                                 var dict1 = [String: AnyObject]()
                                 dict1["id"] = (newcat as! NSDictionary).value(forKey: "id") as AnyObject
                                 dict1["name"] = (newcat as! NSDictionary).value(forKey: "name") as AnyObject
                                 self.arrNewsCategories.append(dict1 as AnyObject)
                                 
                                 }*/
                                
                                for newcat in newscatarr
                                {
                                    // let array = self.db.query(sql: " select * from newscategories WHERE cid = '\((newcat as! NSDictionary).value(forKey: "id"))' and cname = '\((newcat as! NSDictionary).value(forKey: "name"))'")
                                    let array = NewsCategories.rows(filter:"cid = \((newcat as! NSDictionary).value(forKey: "id") as! Int64)") as! [NewsCategories]
                                    
                                    
                                    if(array.count == 0){
                                        let newscat = NewsCategories()
                                        newscat.cid = (newcat as! NSDictionary).value(forKey: "id") as! Int64
                                        newscat.cname = (newcat as! NSDictionary).value(forKey: "name") as! String
                                        newscat.isnews = (newcat as! NSDictionary).value(forKey: "isnews") as! String
                                        newscat.isfixtures = (newcat as! NSDictionary).value(forKey: "isfixtures") as! String
                                        newscat.isstanding = (newcat as! NSDictionary).value(forKey: "isstanding") as! String
                                        newscat.isgroup = (newcat as! NSDictionary).value(forKey: "isgroup") as! String
                                        newscat.fullname = (newcat as! NSDictionary).value(forKey: "fullname") as! String
                                        if newscat.save() != 0 {
                                            
                                        }
                                    }
                                    else{
                                        let result = self.db.query(sql: " UPDATE newscategories SET cname = '\((newcat as! NSDictionary).value(forKey: "name") as! String)', isnews = '\((newcat as! NSDictionary).value(forKey: "isnews") as! String)',isfixtures = '\((newcat as! NSDictionary).value(forKey: "isfixtures") as! String)',isstanding = '\((newcat as! NSDictionary).value(forKey: "isstanding") as! String)',isgroup = '\((newcat as! NSDictionary).value(forKey: "isgroup")as! String)',fullname = '\((newcat as! NSDictionary).value(forKey: "fullname")as! String)'  WHERE cid = '\((newcat as! NSDictionary).value(forKey: "id") as! Int64)'")
                                        // print(result)
                                    }
                                }
                                
                                //_RefreshNewsCategories
                                let notificationName_refreshcat = Notification.Name("_RefreshNewsCategories")
                                NotificationCenter.default.post(name: notificationName_refreshcat, object: nil)
                                
                                if(teamver < (jsonData?.value(forKey: "teamversion") as? Int64)!)
                                {
                                    let response = jsonData?.value(forKey: "responseData") as! NSDictionary
                                    let result3 = self.db.execute(sql:"DELETE FROM teamCategories_detail")
                                    if(result3 > 0){
                                        // print("blockeduser delted")
                                    }
                                    else{
                                        _ = self.db.execute(sql:"DELETE FROM teamCategories_detail")
                                    }
                                    let result4 = self.db.execute(sql:"DELETE FROM  teams_details")
                                    if(result4 > 0){
                                        // print("blockeduser delted")
                                    }
                                    else{
                                        _ = self.db.execute(sql:"DELETE FROM  teams_details")
                                    }
                                    let catarr = response.value(forKey: "teamcategories") as! NSArray
                                    for cat in catarr
                                    {
                                        let c_id =  (cat as! NSDictionary).value(forKey: "id") as! Int64
                                        let iscat = TeamCategories_detail.rows(filter:"c_Id = \(c_id)") as! [TeamCategories_detail]
                                        if(iscat.count == 0){
                                            let teamCategories_detail = TeamCategories_detail()
                                            teamCategories_detail.c_Id = (cat as! NSDictionary).value(forKey: "id") as! Int64
                                            teamCategories_detail.c_name = (cat as! NSDictionary).value(forKey: "name") as! String
                                            teamCategories_detail.c_logo = (cat as! NSDictionary).value(forKey: "logo") as! String
                                            teamCategories_detail.save()
                                        }
                                        else{
                                            
                                        }
                                        let teamImageName = "caty" + c_id.description
                                        //print(teamImageName)
                                        self.loadImageFromUrl(url: ((cat as! NSDictionary).value(forKey: "logo") as! String), fileName: teamImageName as String)
                                    }
                                    
                                    let teamarr = response.value(forKey: "teams") as! NSArray
                                    for team in teamarr
                                    {
                                        let t_id =  (team as! NSDictionary).value(forKey: "id") as! Int64
                                        let isteam = Teams_details.rows(filter:"team_Id = \(t_id)") as! [Teams_details]
                                        if(isteam.count == 0){
                                            let teams_details = Teams_details()
                                            teams_details.team_Id = (team as! NSDictionary).value(forKey: "id") as! Int64
                                            teams_details.team_name = (team as! NSDictionary).value(forKey: "name") as! String
                                            teams_details.team_logo = (team as! NSDictionary).value(forKey: "logo") as! String
                                            let c_id =  (team as! NSDictionary).value(forKey: "catid") as! Int64
                                            teams_details.team_categoriy = c_id
                                            teams_details.isselected = true
                                            teams_details.save()
                                        }
                                        else{
                                            
                                        }
                                        
                                        
                                        let teamImageName = "Team" + t_id.description
                                        //print(teamImageName)
                                        self.loadImageFromUrl(url: ((team as! NSDictionary).value(forKey: "logo") as! String), fileName: teamImageName as String)
                                        
                                    }
                                    if(self.isOnMultiCategoriesView == true){
                                        let notificationName = Notification.Name("RefreshcatView")
                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                    }
                                    UserDefaults.standard.setValue(jsonData?.value(forKey: "teamversion") as? Int64, forKey: "teamver")
                                    UserDefaults.standard.synchronize()
                                    
                                }
                                if(tokenver < (jsonData?.value(forKey: "iosidnver") as? Int64)!)
                                {
                                    if ClassReachability.isConnectedToNetwork()
                                    {
                                        let deviceToken: String? = UserDefaults.standard.string(forKey: "DeviceToken")
                                        if(deviceToken != nil){
                                            self.updatetoken(token: deviceToken!)
                                        }
                                    }
                                    
                                    
                                }
                                let isdailycoin = jsonData!.value(forKey: "isdailycoin") as! Bool
                                
                                if(isdailycoin){
                                    //print(jsonData!.value(forKey: "dailycoin"))
                                    let dailycoin = jsonData!.value(forKey: "dailycoin") as! Int
                                    let fcavailablecoin = jsonData?.value(forKey: "availablecoins") as! Int
                                    DispatchQueue.main.async {
                                        AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(String(dailycoin)) FanCoins rewards for todayâs usage. \(self.GetvalueRedeemMesg(avilablecoin: fcavailablecoin))",fancoins: String(dailycoin))
                                    }
                                    let result2 = self.db.execute(sql:"DELETE FROM activitydetailTable")
                                    if(result2 > 0){
                                        //  print("messageses delted")
                                    }
                                    else{
                                        _ = self.db.execute(sql:"DELETE FROM activitydetailTable")
                                    }
                                }
                                self.UpdateInsentiveConfigTable(jsonData: jsonData!)
                            }
                            else
                            {
                                //Show Error
                            }
                        } catch let error as NSError {
                            print(error)
                            //Show Error
                        }
                        
                    }
                }
                else
                {
                    //Show Error
                }
            })
            task.resume()
            
            
            
            
            
            
        }
        
        let userD: UserDefaults = UserDefaults.init(suiteName: "group.com.tridecimal.ltd.footballfan")!
        userD.set(0, forKey: "badge")
        userD.synchronize()
        UserDefaults.standard.setValue(0, forKey: "badge")
        UserDefaults.standard.synchronize()
        //Code to uptodate teams data
        
        
        
        application.applicationIconBadgeNumber = 0
        
        //print(currentReachabilityStatus != .notReachable)
        
        
        /*if ClassReachability.isConnectedToNetwork()
         {
         if(self.xmppStream != nil)
         {
         if(self.xmppStream?.isDisconnected())!
         {
         if(self.connect())
         {
         
         }
         }
         else
         {
         let login: String? = UserDefaults.standard.string(forKey: "userJID")
         if(login != nil)
         {
         goOnline(xmppStream!)
         }
         }
         }
         }*/
        
        
        let notificationName2 = Notification.Name("_isUserOnline")
        NotificationCenter.default.post(name: notificationName2, object: nil)
        let notificationName3 = Notification.Name("_isUserOnlineContacts")
        NotificationCenter.default.post(name: notificationName3, object: nil)
        let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
        NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
        let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
        NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
        let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
        NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
        let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
        NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
        let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
        NotificationCenter.default.post(name: notificationNametrivia, object: nil)
        let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                                                                                     NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
        
    }

    func isBanterIsOpen(supportedTeam: Int64, opponentTeam: Int64) -> Bool
    {
        var checkCount: Int64 = 0
        //Check if user support both teams banter is based on
        if(supportedTeam == primaryTeamId)
        {
            checkCount = checkCount + 1
        }
        else if(supportedTeam == optionalTeam1Id)
        {
            checkCount = checkCount + 1
        }
        else if(supportedTeam == optionalTeam2Id)
        {
            checkCount = checkCount + 1
        }
        else if(supportedTeam == optionalTeam3Id)
        {
            checkCount = checkCount + 1
        }
        
        if(opponentTeam == primaryTeamId)
        {
            checkCount = checkCount + 1
        }
        else if(opponentTeam == optionalTeam1Id)
        {
            checkCount = checkCount + 1
        }
        else if(opponentTeam == optionalTeam2Id)
        {
            checkCount = checkCount + 1
        }
        else if(opponentTeam == optionalTeam3Id)
        {
            checkCount = checkCount + 1
        }
        
        if(checkCount == 0)
        {
            return false
        }
        return true
    }
    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
        //self.connect()
        
        //Code to uptodate teams data
        //timerXmppConection = Timer.scheduledTimer(timeInterval: 56.0, target: self, selector: #selector(forXmppConectionWithTimer), userInfo: nil, repeats: true)
         isAppForground = true
       
        application.applicationIconBadgeNumber = 0
        if ClassReachability.isConnectedToNetwork()
        {
            if(self.xmppStream != nil)
            {
                if(self.xmppStream?.isDisconnected)!
                {
                    self.isUserOnline = false
                    if(self.connect())
                    {
                        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                            // do stuff 3 seconds later
                            self.sendOfflineMessages()
                            
                        }
                    }
                }
                else
                {
                    
                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                    if(login != nil)
                    {
                        isAppForground = true
                        goOnline(xmppStream!)
                        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                            // do stuff 3 seconds later
                            self.sendOfflineMessages()
                            
                        }
                    }
                }
            }
        }
        /* let serialQueue = DispatchQueue(label: "serialQueue")
         serialQueue.async{  //call this whenever you need to add a new work item to your queue
         //call function here
         let notified: String? = UserDefaults.standard.string(forKey: "notifiedcontact")
         if notified != nil
         {
         AddContacts()
         }
         }*/
    }
    
    
    
    func AddContactsView()
    {
        // LoadingIndicatorView.show(self.view, loadingText: "Syncing your contacts. Please be patient as this may take few minutes.")
        
        let contactStore = CNContactStore()
        let keysToFetch = [
            CNContactFormatter.descriptorForRequiredKeys(for: .fullName),
            CNContactPhoneNumbersKey] as [Any]
        
        var allContainers: [CNContainer] = []
        do {
            allContainers = try contactStore.containers(matching: nil)
        } catch {
            print("Error fetching containers") // you can use print()
        }
        
        var results: [CNContact] = []
        
        for container in allContainers {
            let fetchPredicate = CNContact.predicateForContactsInContainer(withIdentifier: container.identifier)
            
            do {
                let containerResults = try contactStore.unifiedContacts(matching: fetchPredicate, keysToFetch: keysToFetch as! [CNKeyDescriptor])
                results.append(contentsOf: containerResults)
            } catch {
                print("Error fetching containers")
            }
        }
        
        //print(results)
        var arrMobiles = [[String: String]]()
        for contact in results {
            var currentContactFName: String? = ""
            //var phoneNumber: [String] = [String]()
            currentContactFName = (contact.givenName + " " + contact.familyName).trimmingCharacters(in: .whitespacesAndNewlines)
            
            if(currentContactFName != nil && currentContactFName != "")
            {
                for phone in contact.phoneNumbers {
                    //phoneNumber.append(phone.value.stringValue)
                    let trimmed: String = phone.value.stringValue.components(separatedBy: CharacterSet.decimalDigits.inverted)
                        .joined()
                    
                    var strMobileNo = "";
                    if(phone.value.stringValue.hasPrefix("+"))
                    {
                        strMobileNo = "+" + trimmed
                    } else {
                        strMobileNo = trimmed
                    }
                    
                    
                    let result = allPhoneContacts.filter({ (text) -> Bool in
                        let tmp: NSDictionary = text as! NSDictionary
                        let val: String = tmp.value(forKey: "mobile") as! String
                        return val.contains(strMobileNo)
                    })
                    
                    if(result.count == 0)
                    {
                        var tempDict = [String: String]()
                        
                        tempDict["jid"] = ""
                        tempDict["name"] = currentContactFName
                        tempDict["nickname"] = ""
                        tempDict["mobile"] = strMobileNo
                        tempDict["avatar"] = ""
                        tempDict["status"] = phone.value.stringValue
                        tempDict["type"] = "phone"
                        tempDict["phoneimage"] = "phone"
                        var tempDict1 = [String: String]()
                        
                        var strMobilewithcc = ""
                        
                        if(strMobileNo.hasPrefix("+"))
                        {
                            strMobilewithcc = strMobileNo
                        } else if(strMobileNo.hasPrefix("00"))
                        {
                            strMobilewithcc =  "+" + String(strMobileNo.dropFirst(2))
                        } else if (strMobileNo.hasPrefix("0"))
                        {
                            strMobilewithcc = "+" + UserDefaults.standard.string(forKey: "usercountrycode")! + String(strMobileNo.dropFirst(1))
                        } else {
                            strMobilewithcc = "+" + UserDefaults.standard.string(forKey: "usercountrycode")! + strMobileNo
                        }
                        tempDict["mobilewithcc"] = strMobilewithcc
                        tempDict1["mobile"] = strMobilewithcc
                        allPhoneContacts[allPhoneContacts.count] = tempDict
                        arrMobiles.append(tempDict1)
                        
                    }
                }
            }
            
            if(arrMobiles.count/20 == 0)
            {
                onlySendPresence()
            }
        }
        
        if(allPhoneContacts.count > 0)
        {
            
            //code to save non split contacts
            //For Temp hide
            let tmpArr = allPhoneContacts.sorted { (item1, item2) -> Bool in
                let date1 =  item1 as! [String : AnyObject]
                let date2 =  item2 as! [String : AnyObject]
                
                var dt1: String = ""
                var dt2: String = ""
                
                if date1["name"] != nil
                {
                    
                    dt1 = date1["name"] as! String
                    
                }
                
                if date2["name"] != nil
                {
                    
                    dt2 = date2["name"] as! String
                    
                }
                
                
                
                return dt1.compare(dt2) == ComparisonResult.orderedAscending
            }
            allPhoneContacts = NSMutableArray()
            var encountered = Set<String>()
            for arr in tmpArr
            {
                let tmpDict = arr as! [String : AnyObject]
                let Jid = tmpDict["mobilewithcc"] as! String
                if encountered.contains(Jid) {
                    // Do not add a duplicate element.
                }
                else {
                    // Add value to the set.
                    encountered.insert(Jid)
                    // ... Append the value.
                    // result.append(value)
                    
                    allPhoneContacts.add(tmpDict)
                }
                
                
                
            }
            
            
            phoneNotSplitContacts = allPhoneContacts //.mutableCopy() as! NSMutableArray
            
            //Store contacts to local
            do {
                if(phoneNotSplitContacts.count > 0)
                {
                    let dataNonSplitContacts = try JSONSerialization.data(withJSONObject: phoneNotSplitContacts, options: .prettyPrinted)
                    let strNonSplitContacts = NSString(data: dataNonSplitContacts, encoding: String.Encoding.utf8.rawValue)! as String
                    UserDefaults.standard.setValue(strNonSplitContacts, forKey: "allNonSplitContacts")
                    UserDefaults.standard.synchronize()
                }
            } catch {
                print(error.localizedDescription)
            }
            callsynccontacts(arrMobiles: arrMobiles)
            //let strMobiles = ""
          /*  var dictRequest = [String: AnyObject]()
            dictRequest["cmd"] = "synccontacts" as AnyObject
            //dictRequest.setValue("contactsync", forKey: "cmd")
            var dictMobiles = [String: AnyObject]()
            //code by Ravi sir
            //dictMobiles["Mobile"] = arrMobiles as AnyObject
            //code by Nitesh
            dictMobiles["Contact"] = arrMobiles as AnyObject
            //dictMobiles.setValue(arrMobiles, forKey: "Mobile")
            dictRequest["requestData"] = dictMobiles as AnyObject
            //dictRequest.setValue(dictMobiles, forKey: "requestData")
            //print(dictRequest)
            do {
                let dataMobiles = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                let strMobiles = NSString(data: dataMobiles, encoding: String.Encoding.utf8.rawValue)! as String
                //print("Contacts: " + strMobiles)
                sendRequestToGetContactsFromAPI(strContacts: strMobiles)
            } catch {
                print(error.localizedDescription)
            }
            */
            //appDelegate().sendRequestToGetContactsFromAPI(strContacts: "{\"cmd\":\"contactsync\",\"requestData\":{\"Mobile\":[\"9977564444\",\"8819096521\"]}}")
            
        }
        
    }
    
    
    func AddContacts()
    {
        // LoadingIndicatorView.show(self.view, loadingText: "Syncing your contacts. Please be patient as this may take few minutes.")
        let strNonSplitContactsLocal: String? = UserDefaults.standard.string(forKey: "allNonSplitContacts")
        if strNonSplitContactsLocal != nil
        {
            
            isUpdateContacts = true
            let contactStore = CNContactStore()
            let keysToFetch = [
                CNContactFormatter.descriptorForRequiredKeys(for: .fullName),
                CNContactPhoneNumbersKey] as [Any]
            
            var allContainers: [CNContainer] = []
            do {
                allContainers = try contactStore.containers(matching: nil)
            } catch {
                print("Error fetching containers") // you can use print()
            }
            
            var results: [CNContact] = []
            
            for container in allContainers {
                let fetchPredicate = CNContact.predicateForContactsInContainer(withIdentifier: container.identifier)
                
                do {
                    let containerResults = try contactStore.unifiedContacts(matching: fetchPredicate, keysToFetch: keysToFetch as! [CNKeyDescriptor])
                    results.append(contentsOf: containerResults)
                } catch {
                    print("Error fetching containers")
                }
            }
            
            //print(results)
            var arrMobiles = [[String: String]]()
            for contact in results {
                var currentContactFName: String? = ""
                //var phoneNumber: [String] = [String]()
                currentContactFName = (contact.givenName + " " + contact.familyName).trimmingCharacters(in: .whitespacesAndNewlines)
                
                if(currentContactFName != nil && currentContactFName != "")
                {
                    
                    
                    for phone in contact.phoneNumbers {
                        //phoneNumber.append(phone.value.stringValue)
                        let trimmed: String = phone.value.stringValue.components(separatedBy: CharacterSet.decimalDigits.inverted)
                            .joined()
                        
                        var strMobileNo = "";
                        if(phone.value.stringValue.hasPrefix("+"))
                        {
                            strMobileNo = "+" + trimmed
                        } else {
                            strMobileNo = trimmed
                        }
                        
                        
                        let result = tempallPhoneContacts.filter({ (text) -> Bool in
                            let tmp: NSDictionary = text as! NSDictionary
                            let val: String = tmp.value(forKey: "mobile") as! String
                            return val.contains(strMobileNo)
                        })
                        
                        if(result.count == 0)
                        {
                            var tempDict = [String: String]()
                            
                            tempDict["jid"] = ""
                            tempDict["name"] = currentContactFName
                            tempDict["nickname"] = ""
                            tempDict["mobile"] = strMobileNo
                            tempDict["avatar"] = ""
                            tempDict["status"] = phone.value.stringValue
                            tempDict["type"] = "phone"
                            tempDict["phoneimage"] = "phone"
                            var tempDict1 = [String: String]()
                            
                            var strMobilewithcc = ""
                            
                            if(strMobileNo.hasPrefix("+"))
                            {
                                strMobilewithcc = strMobileNo
                            } else if(strMobileNo.hasPrefix("00"))
                            {
                                strMobilewithcc =  "+" + String(strMobileNo.dropFirst(2))
                            } else if (strMobileNo.hasPrefix("0"))
                            {
                                let usercountrycode = UserDefaults.standard.string(forKey: "usercountrycode")
                                if(usercountrycode != nil){
                                    strMobilewithcc = "+" + UserDefaults.standard.string(forKey: "usercountrycode")! + String(strMobileNo.dropFirst(1))
                                }
                                else{
                                    strMobilewithcc = "+" +  String(strMobileNo.dropFirst(1))                            }
                                
                            } else {
                                let usercountrycode = UserDefaults.standard.string(forKey: "usercountrycode")
                                if(usercountrycode != nil){
                                    strMobilewithcc = "+" + UserDefaults.standard.string(forKey: "usercountrycode")! + strMobileNo
                                }
                            }
                            tempDict["mobilewithcc"] = strMobilewithcc
                            tempDict1["mobile"] = strMobilewithcc
                            tempallPhoneContacts[tempallPhoneContacts.count] = tempDict
                            arrMobiles.append(tempDict1)
                            
                        }
                    }
                }
                
                
            }
            
            if(tempallPhoneContacts.count > 0)
            {
                
                //code to save non split contacts
                //For Temp hide
                let tmpArr = tempallPhoneContacts.sorted { (item1, item2) -> Bool in
                    let date1 =  item1 as! [String : AnyObject]
                    let date2 =  item2 as! [String : AnyObject]
                    
                    var dt1: String = ""
                    var dt2: String = ""
                    
                    if date1["name"] != nil
                    {
                        
                        dt1 = date1["name"] as! String
                        
                    }
                    
                    if date2["name"] != nil
                    {
                        
                        dt2 = date2["name"] as! String
                        
                    }
                    
                    
                    
                    return dt1.compare(dt2) == ComparisonResult.orderedAscending
                }
                tempallPhoneContacts = NSMutableArray()
                var encountered = Set<String>()
                for arr in tmpArr
                {
                    let tmpDict = arr as! [String : AnyObject]
                    let Jid = tmpDict["mobilewithcc"] as! String
                    if encountered.contains(Jid) {
                        // Do not add a duplicate element.
                    }
                    else {
                        // Add value to the set.
                        encountered.insert(Jid)
                        // ... Append the value.
                        // result.append(value)
                        
                        tempallPhoneContacts.add(tmpDict)
                    }
                    
                    
                    
                }
                
                
                tempphoneNotSplitContacts = tempallPhoneContacts //.mutableCopy() as! NSMutableArray
                
                //Store contacts to local
                /*  do {
                 if(phoneNotSplitContacts.count > 0)
                 {
                 let dataNonSplitContacts = try JSONSerialization.data(withJSONObject: phoneNotSplitContacts, options: .prettyPrinted)
                 let strNonSplitContacts = NSString(data: dataNonSplitContacts, encoding: String.Encoding.utf8.rawValue)! as String
                 UserDefaults.standard.setValue(strNonSplitContacts, forKey: "allNonSplitContacts")
                 UserDefaults.standard.synchronize()
                 }
                 } catch {
                 print(error.localizedDescription)
                 }*/
                DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
                    self.callsynccontacts(arrMobiles: arrMobiles)
                }
               /* DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
                    //let strMobiles = ""
                    var dictRequest = [String: AnyObject]()
                    dictRequest["cmd"] = "synccontacts" as AnyObject
                    //dictRequest.setValue("contactsync", forKey: "cmd")
                    var dictMobiles = [String: AnyObject]()
                    //code by Ravi sir
                    //dictMobiles["Mobile"] = arrMobiles as AnyObject
                    //code by Nitesh
                    dictMobiles["Contact"] = arrMobiles as AnyObject
                    //dictMobiles.setValue(arrMobiles, forKey: "Mobile")
                    dictRequest["requestData"] = dictMobiles as AnyObject
                    //dictRequest.setValue(dictMobiles, forKey: "requestData")
                    //print(dictRequest)
                    do {
                        let dataMobiles = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strMobiles = NSString(data: dataMobiles, encoding: String.Encoding.utf8.rawValue)! as String
                        //print("Contacts: " + strMobiles)
                        self.sendRequestToGetContactsFromAPI(strContacts: strMobiles)
                    } catch {
                        print(error.localizedDescription)
                    }
                }*/
                //appDelegate().sendRequestToGetContactsFromAPI(strContacts: "{\"cmd\":\"contactsync\",\"requestData\":{\"Mobile\":[\"9977564444\",\"8819096521\"]}}")
                
            }
        }
    }
    
    /*func forXmppConectionWithTimer() {
     if(self.xmppStream?.isDisconnected())!
     {
     if(self.connect())
     {
     
     }
     }
     }*/
    
    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
        // Saves changes in the application's managed object context before the application terminates.
        
        /*if(self.xmppStream != nil)
         {
         if(self.xmppStream?.isDisconnected())!
         {
         if(self.connect())
         {
         
         }
         }
         else
         {
         let login: String? = UserDefaults.standard.string(forKey: "userJID")
         if(login != nil)
         {
         goOffline(xmppStream!)
         }
         }
         }*/
        let login: String? = UserDefaults.standard.string(forKey: "userJID")
        if (login != nil) {
            timer.invalidate()
            isContactSync = false
            //  DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
            
            let presence = XMPPPresence(type: "unavailable")
            self.xmppStream!.send(presence)
            NotificationCenter.default.removeObserver(Notification.Name.CNContactStoreDidChange)
        }
    }
    func isBanterIsOpen(supportedTeam: Int, opponentTeam: Int) -> Bool
    {
        var checkCount: Int = 0
        //Check if user support both teams banter is based on
        if(supportedTeam == primaryTeamId)
        {
            checkCount = checkCount + 1
        }
        else if(supportedTeam == optionalTeam1Id)
        {
            checkCount = checkCount + 1
        }
        else if(supportedTeam == optionalTeam2Id)
        {
            checkCount = checkCount + 1
        }
        else if(supportedTeam == optionalTeam3Id)
        {
            checkCount = checkCount + 1
        }
        
        if(opponentTeam == primaryTeamId)
        {
            checkCount = checkCount + 1
        }
        else if(opponentTeam == optionalTeam1Id)
        {
            checkCount = checkCount + 1
        }
        else if(opponentTeam == optionalTeam2Id)
        {
            checkCount = checkCount + 1
        }
        else if(opponentTeam == optionalTeam3Id)
        {
            checkCount = checkCount + 1
        }
        
        if(checkCount == 0)
        {
            return false
        }
        return true
    }
    func resolutionForLocalVideo(url: URL) -> CGSize? {
        guard let track = AVURLAsset(url: url).tracks(withMediaType: AVMediaType.video).first else { return nil }
        let size = track.naturalSize.applying(track.preferredTransform)
        return CGSize(width: abs(size.width), height: abs(size.height))
    }
    func SignOut()
    {
        
        updatetoken(token: "none")
        
        //Creating Request Dataregisterusername
        returnHomeToOtherView = true
        timer.invalidate()
        let presence = XMPPPresence(type: "unavailable")
                   self.xmppStream!.send(presence)
        self.xmppStream?.disconnect()
        openffdeepurl = ""
        UserDefaults.standard.setValue(nil, forKey: "userJID")
        UserDefaults.standard.setValue(nil, forKey: "isLoggedin")
        UserDefaults.standard.setValue(nil, forKey: "isShowProfile")
        UserDefaults.standard.setValue(nil, forKey: "isShowTeams")
        UserDefaults.standard.setValue(nil, forKey: "arrAllChats")
        UserDefaults.standard.setValue(nil, forKey: "userpassword")
        UserDefaults.standard.setValue(nil, forKey: "bylogin")
        //  UserDefaults.standard.setValue(nil, forKey: "isLoggedin")
        UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
        UserDefaults.standard.setValue(nil, forKey: "primaryTeamId")
        UserDefaults.standard.setValue(nil , forKey: "primaryTeamName")
        UserDefaults.standard.setValue(nil, forKey: "primaryTeamLogo")
        UserDefaults.standard.setValue(nil, forKey: "optionalTeam1Id")
        UserDefaults.standard.setValue(nil, forKey: "optionalTeam1Name")
        UserDefaults.standard.setValue(nil, forKey: "optionalTeam1Logo")
        UserDefaults.standard.setValue(nil, forKey: "optionalTeam2Id")
        UserDefaults.standard.setValue(nil, forKey: "optionalTeam2Name")
        UserDefaults.standard.setValue(nil, forKey: "optionalTeam2Logo")
        UserDefaults.standard.setValue(nil, forKey: "optionalTeam3Id")
        UserDefaults.standard.setValue(nil, forKey: "optionalTeam3Name")
        UserDefaults.standard.setValue(nil, forKey: "optionalTeam3Logo")
        UserDefaults.standard.setValue(nil, forKey: "userStatus")
        UserDefaults.standard.setValue(nil, forKey: "userAvatar")
        UserDefaults.standard.setValue(nil, forKey: "userName")
        UserDefaults.standard.setValue(nil, forKey: "userAvatarURL")
        UserDefaults.standard.setValue(nil, forKey: "allNonSplitContacts")
        UserDefaults.standard.setValue(nil, forKey: "allContacts")
        
        UserDefaults.standard.setValue(nil, forKey: "registerJID")
        UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue(nil, forKey: "usercountrycode")
        UserDefaults.standard.setValue(nil, forKey: "registerMobile")
        UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue(nil, forKey: "registerusername")
        UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue(nil, forKey: "userpassword")
        UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue(nil, forKey: "userName")
        UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue(nil, forKey: "useremail")
        UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue(0, forKey: "teamver")
        UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
         UserDefaults.standard.setValue(true, forKey: "istriviauser")
        UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue(nil, forKey: "paypalemail")
        UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue(nil, forKey: "tempavtar")
        UserDefaults.standard.setValue(true, forKey: "isvcardupdated")
        
                       UserDefaults.standard.synchronize()
        let userD: UserDefaults = UserDefaults.init(suiteName: "group.com.tridecimal.ltd.footballfan")!
        
        userD.set(nil, forKey: "allPhoneContacts")
        userD.synchronize()
        /*let appDomain = Bundle.main.bundleIdentifier!
         UserDefaults.standard.removePersistentDomain(forName: appDomain)*/
        getbackgroundapi()
        password = ""
        isOpen = false
        //xmppStream = nil
        isBanterLoaderOn == false
        profileAvtarTemp = UIImage()
        //profileAvtarTemp = nil
        isAvtarChanged = false
        isvCardUpdated = false
        isLoadingMyTeams = false
        isOnChatsView = false
        isOnBantersView = false
        isOnChatView = false
        isOnContactsView = false
        isShowChatWindow = false
        countrySelected = ""
        countryCodeSelected = ""
        countryFlagSelected = ""
        primaryTeamId = 0
        myTeamId = 0
        aponentTeamId = 0
        nearbyTeamId = 0
        fanUpdatesTeamId = 0
        optionalTeam1Id = 0
        optionalTeam2Id = 0
        optionalTeam3Id = 0
        myTeamName = ""
        aponentTeamName = ""
        nearbyTeamName = ""
        fanUpdatesTeamName = ""
        primaryTeamName = ""
        optionalTeam1Name = ""
        optionalTeam2Name = ""
        optionalTeam3Name = ""
        primaryTeamLogo = ""
        optionalTeam1Logo = ""
        optionalTeam2Logo = ""
        optionalTeam3Logo = ""
        teamToSet = 0
        allAppContacts = NSMutableArray()
        allPhoneContacts = NSMutableArray()
        allContacts = NSMutableArray()
        phoneNotSplitContactsDel = NSArray()
        phoneNotSplitContacts = NSMutableArray()
        fanNearByContacts = [AnyObject]()
        fanUpdates  = [] //= NSMutableArray()
        isLoadingFanUpdates  = false
        arrDataTeams = NSArray() //[Teams_details]()
       // arrFanUpdatesTeams = [AnyObject]()
       // arrMyFanUpdatesTeams = [AnyObject]()
        //var arrDataBanterUsers = NSArray()
        arrUserChat=[]
        arrAllChats = [String: AnyObject]()
        toUserJID = ""
        toName = ""
        toAvatarURL = ""
        //selectedForwardIndex
        curRoomType  = "chat"
        banterRoomName = ""
        banterRoomId = ""
        groupId = ""
        //var groupName: String = ""
        banterJIDs = [String]()
        groupJIDs = [String]()
        strBanterJIDs = [AnyObject]()
        strGroupJIDs = [AnyObject]()
        //xmppMUC: XMPPMUC!
        //xmppRoster: XMPPRoster!
        isBanterOwner = false
        isJoined = "no"
        isAdmin = "no"
        isBanterClosed = "active"
        bylogin = ""
        //var chatDelegate: ChatDelegate?
        StatusTemp = ""
        lastOfflineDate = ""
        isSendingPresence = false
        isJoiningBanterRoom = false
        isUpdatesLoaded = false
        isFromSettings = false
        NameTemp = ""
        EmailTemp = ""
        MobileTemp = ""
        CountrycodeTemp = ""
        DobTemp = 0
        // objXmppRoom: XMPPRoom!
        arrBanterUsers = NSMutableArray()
        isUserOnline = false
        isOnline = true
        isTeamsUpdated = false
        isTeamNotSelected = false
        isBanterLoaderOn = false
        _ = db.execute(sql:"UPDATE insentiveconfig SET fctotalcoin = 0 ,fcavailablecoin = 0, fcactivitycount = 0 WHERE ID = 0")
        let result = db.execute(sql:"DELETE FROM messages")
        if(result > 0){
            // print("messageses delted")
        }
        else{
            _ = db.execute(sql:"DELETE FROM messages")
        }
        let result2 = db.execute(sql:"DELETE FROM messages_details")
        if(result2 > 0){
            //  print("messageses delted")
        }
        else{
            _ = db.execute(sql:"DELETE FROM messages_details")
        }
        let result3 = db.execute(sql:"DELETE FROM blockeduser")
        if(result3 > 0){
            // print("blockeduser delted")
        }
        else{
            _ = db.execute(sql:"DELETE FROM blockeduser")
        }
        let result4 = db.execute(sql:"UPDATE teams_details SET isselected = 1")
        if(result4 > 0){
            // print("blockeduser delted")
        }
        else{
            _ = db.execute(sql:"UPDATE teams_details SET isselected = 1")
        }
        
        let result5 = db.execute(sql:"DELETE FROM badgecount")
        if(result5 > 0){
            // print("blockeduser delted")
        }
        else{
            _ = db.execute(sql:"DELETE FROM badgecount")
        }
        /* let result6 = db.execute(sql:"DELETE FROM last_activity_date")
         if(result6 > 0){
         // print("blockeduser delted")
         }
         else{
         _ = db.execute(sql:"DELETE FROM last_activity_date")
         }*/
        
        //showLogin()
        let notificationName = Notification.Name("RefreshBadgeCount")
               NotificationCenter.default.post(name: notificationName, object: nil)
        let RefreshSubTabBadgeCount = Notification.Name("RefreshSubTabBadgeCount")
        NotificationCenter.default.post(name: RefreshSubTabBadgeCount, object: nil)
    }
    
    func onlySendPresence()
    {
        let presence = XMPPPresence(type: "available")
        xmppStream!.send(presence)
    }
    
    func showLogin() {
        UserDefaults.standard.setValue(nil, forKey: "forgate")
        
        UserDefaults.standard.setValue(true, forKey: "ConvertationTone")
        //UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue("Everyone", forKey: "BanterNotification")
        UserDefaults.standard.synchronize()
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let registerController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "firstview")
        
        self.window = UIWindow(frame: UIScreen.main.bounds)
        
        self.window?.rootViewController = registerController as? UIViewController
        self.window?.makeKeyAndVisible()
        
        //present(registerController as! UIViewController, animated: true, completion: nil)
    }
    func showChangepassword() {
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let registerController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "changp")
        
        self.window = UIWindow(frame: UIScreen.main.bounds)
        
        self.window?.rootViewController = registerController as? UIViewController
        self.window?.makeKeyAndVisible()
        
        //present(registerController as! UIViewController, animated: true, completion: nil)
    }
    func showregister() {
        
        /* let storyBoard = UIStoryboard(name: "Main", bundle: nil)
         let registerController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "Register")
         
         self.window = UIWindow(frame: UIScreen.main.bounds)
         
         self.window?.rootViewController = registerController as? UIViewController
         self.window?.makeKeyAndVisible()
         */
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let registerController : RegisterViewController = storyBoard.instantiateViewController(withIdentifier: "Register") as! RegisterViewController
        
        window?.rootViewController!.show(registerController, sender: self)
        //present(registerController as! UIViewController, animated: true, completion: nil)
    }
    func showProfile() {
        UserDefaults.standard.setValue("YES", forKey: "isShowProfile")
        UserDefaults.standard.synchronize()
        
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let profileController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "Profile")
        self.window = UIWindow(frame: UIScreen.main.bounds)
        
        self.window?.rootViewController = profileController as? UIViewController
        self.window?.makeKeyAndVisible()
        //present(profileController as! UIViewController, animated: true, completion: nil)
    }
    func showforget() {
        // UserDefaults.standard.setValue("YES", forKey: "")
        //UserDefaults.standard.synchronize()
        
        /* let storyBoard = UIStoryboard(name: "Main", bundle: nil)
         let profileController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "Forget")
         self.window = UIWindow(frame: UIScreen.main.bounds)
         
         self.window?.rootViewController = profileController as? UIViewController
         self.window?.makeKeyAndVisible()*/
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let registerController : Forget = storyBoard.instantiateViewController(withIdentifier: "Forget") as! Forget
        
        window?.rootViewController!.show(registerController, sender: self)
        //present(profileController as! UIViewController, animated: true, completion: nil)
    }
    func showmaintainScreen() {
        // UserDefaults.standard.setValue("YES", forKey: "")
        //UserDefaults.standard.synchronize()
        DispatchQueue.main.async {
            let storyBoard = UIStoryboard(name: "Main", bundle: nil)
            let profileController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "maintaintedNotify")
            self.window = UIWindow(frame: UIScreen.main.bounds)
            
            self.window?.rootViewController = profileController as? UIViewController
            self.window?.makeKeyAndVisible()
        }
        //present(profileController as! UIViewController, animated: true, completion: nil)
    }
    
    
    func showMyTeams() {
        UserDefaults.standard.setValue("YES", forKey: "isShowTeams")
        UserDefaults.standard.synchronize()
     profileAvtarTemp = UIImage(named:"avatar")
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let showTeamController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "MyTeams")
        self.window = UIWindow(frame: UIScreen.main.bounds)
        usernotcomplete = true
        self.window?.rootViewController = showTeamController as? UIViewController
        self.window?.makeKeyAndVisible()
        
    }
    @objc func showMyTeamsUserNotComplete() {
        if connect(){
            
        }
        UserDefaults.standard.setValue("YES", forKey: "isTeamNotSelected")
        UserDefaults.standard.synchronize()
        DispatchQueue.main.async {
            let storyBoard = UIStoryboard(name: "Main", bundle: nil)
            let showTeamController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "MyTeams")
            self.window = UIWindow(frame: UIScreen.main.bounds)
            self.isTeamNotSelected = true
            self.window?.rootViewController = showTeamController as? UIViewController
            self.window?.makeKeyAndVisible()
        }
        
    }
    func showSimAlert() {
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let profileController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "SimAlert")
        self.window = UIWindow(frame: UIScreen.main.bounds)
        
        self.window?.rootViewController = profileController as? UIViewController
        self.window?.makeKeyAndVisible()
    }
    
    func showCropAvtar() {
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let cropAvtarController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "CropAvtar")
        self.window = UIWindow(frame: UIScreen.main.bounds)
        
        self.window?.rootViewController = cropAvtarController as? UIViewController
        self.window?.makeKeyAndVisible()
        //present(profileController as! UIViewController, animated: true, completion: nil)
    }
    
    func showMainTab() {
        //  DispatchQueue.main.async {
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let profileController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "MainNavigation")
       /* self.window = UIWindow(frame: UIScreen.main.bounds)
       
        self.window?.rootViewController = profileController as? UIViewController
         self.window?.backgroundColor = UIColor.white
        self.window?.makeKeyAndVisible()*/
        //  }
        //let notificationName2 = Notification.Name("_isUserOnline")
        //NotificationCenter.default.post(name: notificationName2, object: nil)
        //present(profileController as! UIViewController, animated: true, completion: nil)
       /* let snapshot = (UIApplication.shared.keyWindow?.snapshotView(afterScreenUpdates: true))!
        profileController.view.addSubview(snapshot)

        UIApplication.shared.keyWindow?.rootViewController = profileController as! UIViewController
        UIView.transition(with: snapshot,
                          duration: 0.2,
                          options: .transitionFlipFromLeft,
                          animations: {
                              snapshot.layer.opacity = 0
                          },
                          completion: { status in
                              snapshot.removeFromSuperview()
                          })*/
        guard let window = UIApplication.shared.keyWindow else {
            return
        }

        
        // Set the new rootViewController of the window.
        // Calling "UIView.transition" below will animate the swap.
        window.rootViewController = profileController as! UIViewController

        // A mask of options indicating how you want to perform the animations.
        let options: UIView.AnimationOptions = .transitionFlipFromLeft

        // The duration of the transition animation, measured in seconds.
        let duration: TimeInterval = 0.3

        // Creates a transition animation.
        // Though `animations` is optional, the documentation tells us that it must not be nil. Â¯\_(ã)_/Â¯
        UIView.transition(with: window, duration: duration, options: options, animations: {}, completion:
        { completed in
            // maybe do something on completion here
        })
    }
    
    func connect() -> Bool {
        
        Clslogging.logdebug(State: "connet call")
        xmppStream = XMPPStream()
        xmppStream?.addDelegate(self, delegateQueue: DispatchQueue.main)
        
        xmppMUC = XMPPMUC(dispatchQueue: DispatchQueue.main)
        xmppMUC!.activate(xmppStream!)
        xmppMUC!.addDelegate(self, delegateQueue: DispatchQueue.main)
        
        xmppReconnect = XMPPReconnect(dispatchQueue: DispatchQueue.main)
        xmppReconnect?.addDelegate(self, delegateQueue: DispatchQueue.main)
        xmppReconnect!.activate(xmppStream!)
        //xmppReconnect.autoReconnect = true
        
        /* xmppAutoPing = XMPPAutoPing(dispatchQueue: DispatchQueue.main)
         xmppAutoPing.pingInterval = 20 // default is 60
         xmppAutoPing.pingTimeout = 10.0 // default is 10
         xmppAutoPing?.addDelegate(self, delegateQueue: DispatchQueue.main)
         xmppAutoPing!.activate(xmppStream!)
         */
       
       /* xmppRosterStorage = XMPPRosterCoreDataStorage()
        if(xmppRosterStorage != nil){
            xmppRoster = XMPPRoster(rosterStorage: xmppRosterStorage!)
            xmppRoster.activate(xmppStream!)
            xmppRoster.addDelegate(self, delegateQueue: DispatchQueue.main)
        }*/
        
        
        
        //xmppRoster.subscribePresence(toUser: <#T##XMPPJID!#>) //Sync
        //xmppRoster.unsubscribePresence(fromUser: <#T##XMPPJID!#>) //Block
        //When fetch Profile Details
        //xmppRoster.xmppRosterStorage.getSubscription(<#T##subscription: AutoreleasingUnsafeMutablePointer<NSString?>!##AutoreleasingUnsafeMutablePointer<NSString?>!#>, ask: <#T##AutoreleasingUnsafeMutablePointer<NSString?>!#>, nickname: <#T##AutoreleasingUnsafeMutablePointer<NSString?>!#>, groups: <#T##AutoreleasingUnsafeMutablePointer<NSArray?>!#>, for: <#T##XMPPJID!#>, xmppStream: <#T##XMPPStream!#>)
        
        //didReceive Rooster delegate
        //xmppRoster.acceptPresenceSubscriptionRequest(from: <#T##XMPPJID!#>, andAddToRoster: <#T##Bool#>)
        /*xmppCapabilitiesStorage = XMPPCapabilitiesCoreDataStorage.init()//init(inMemoryStore:)()
         
         xmppCapabilities = XMPPCapabilities.init(capabilitiesStorage: xmppCapabilitiesStorage!)
         xmppCapabilities?.activate(xmppStream!)
         xmppCapabilities?.autoFetchHashedCapabilities = true
         xmppCapabilities?.autoFetchNonHashedCapabilities = false*/
        
        
        if !(xmppStream?.isDisconnected)! {
            return true
        }
        
        //Connect user if user is in mobile validation process
        /*let registerJIDTemp: String? = UserDefaults.standard.string(forKey: "registerJIDTemp")
         
         //Check if user is reactivating his account
         if registerJIDTemp != nil {
         
         xmppStream?.myJID = XMPPJID(string:registerJIDTemp)
         password = "123456";
         xmppStream?.hostName = "amazomcdn.com"
         xmppStream?.hostPort = 5222
         xmppStream?.enableBackgroundingOnSocket = true
         do {
         try xmppStream?.connect(withTimeout: XMPPStreamTimeoutNone)
         return true
         } catch {
         print("error connecting")
         return false
         }
         }*/
        let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
        if(!istriviauser){
        let registerJID: String? = UserDefaults.standard.string(forKey: "registerJID")
        
        //Check if user is reactivating his account
        if registerJID != nil {
            
            xmppStream?.myJID = XMPPJID(string:registerJID!)
            password = UserDefaults.standard.string(forKey: "userpassword")!;
            xmppStream?.hostName = HostName
            xmppStream?.hostPort = 5222
            xmppStream?.enableBackgroundingOnSocket = true
            do {
                try xmppStream?.connect(withTimeout: XMPPStreamTimeoutNone)
                return true
            } catch  let error as NSError {
            print("error connecting\(error)")
                let errorinfo:[String: AnyObject] = ["error": error as AnyObject]
                Clslogging.logerror(State: "connect with registerJID", userinfo: errorinfo)
                return false
            }
        }
        
        let userJID: String? = UserDefaults.standard.string(forKey: "userJID")
        if userJID == nil {
            let errorinfo:[String: AnyObject] = ["error": "userjid is nill" as AnyObject]
            Clslogging.logerror(State: "connect", userinfo: errorinfo)
            return false
        }
       // print(userJID)
            print(UserDefaults.standard.string(forKey: "userpassword"))
        xmppStream?.myJID = XMPPJID(string:userJID!)
              password = UserDefaults.standard.string(forKey: "userpassword")!;
    }
        else{
            let triviauser: String? = UserDefaults.standard.string(forKey: "triviauser")
            if triviauser == nil {
                let errorinfo:[String: AnyObject] = ["error": "anonymous user is nill" as AnyObject]
                          Clslogging.logerror(State: "connect", userinfo: errorinfo)
                       return false
                   }
             xmppStream?.myJID = XMPPJID(string:triviauser!)
              password = UserDefaults.standard.string(forKey: "tuserpassword")!;
        }
      
        xmppStream?.hostName = HostName
        xmppStream?.hostPort = 5222
        xmppStream?.enableBackgroundingOnSocket = true
        do {
            try xmppStream?.connect(withTimeout: XMPPStreamTimeoutNone)
            return true
        } catch {
            print("error connecting")
            return false
        }
        Clslogging.logdebug(State: "connet end")
    }
    func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
        return self.orientationLock
    }
    
    struct AppUtility {
        static func lockOrientation(_ orientation: UIInterfaceOrientationMask) {
            if let delegate = UIApplication.shared.delegate as? AppDelegate {
                delegate.orientationLock = orientation
            }
        }
        
        static func lockOrientation(_ orientation: UIInterfaceOrientationMask, andRotateTo rotateOrientation:UIInterfaceOrientation) {
            self.lockOrientation(orientation)
            UIDevice.current.setValue(rotateOrientation.rawValue, forKey: "orientation")
        }
    }
    
    
    /*func xmppStreamDidDisconnect(_ sender: XMPPStream) {
       // print("faild")
        
    }
    func xmppStreamConnectDidTimeout(_ sender: XMPPStream) {
       // print("faild")
        
    }*/
    func xmppStreamDidConnect(_ sender: XMPPStream) {
        //  print("xmppStreamDidConnect")
         Clslogging.logdebug(State: "xmppStreamDidConnect start")
        isOpen = true
        issendofflinemessages = true
        let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
        if(!istriviauser){
            
        do {
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            if (login != nil) {
                //Authenticate
                let byChangePassword: String? = UserDefaults.standard.string(forKey: "byChangePassword")
                if(byChangePassword != nil){
                    try xmppStream?.authenticate(withPassword: UserDefaults.standard.string(forKey: "oldpassword")!)
                }
                else
                {
                    try xmppStream?.authenticate(withPassword: UserDefaults.standard.string(forKey: "userpassword")!)
                }
                
                //print("authentification successful")
            }
            else
            {
                //Check if user is reactivating his account
                let register: String? = UserDefaults.standard.string(forKey: "registerJID")
                if (register != nil) {
                    //Authenticate
                    try xmppStream?.authenticate(withPassword: UserDefaults.standard.string(forKey: "userpassword")!)
                    //print("authentification successful")
                    
                }
                /* else
                 {
                 let registerTemp: String? = UserDefaults.standard.string(forKey: "registerJIDTemp")
                 if (registerTemp != nil) {
                 //Authenticate
                 try xmppStream?.authenticate(withPassword: "123456")
                 //print("authentification successful")
                 
                 }
                 }*/
                
            }
            
        } catch {
            /// print("Something went wrong!")
        }
        }else{
            do{
              try xmppStream?.authenticate(withPassword: UserDefaults.standard.string(forKey: "tuserpassword")!)
            } catch {
                /// print("Something went wrong!")
            }
        }
    }
    
    func xmppStreamDidAuthenticate(_ sender: XMPPStream) {
        //  print("didAuthenticate")
        isDidAuthenticate = true
        //This code is checking if user is temporary registered to validate mobile from SMS
        /* let registerTemp: String? = UserDefaults.standard.string(forKey: "registerJIDTemp")
         if (registerTemp != nil) {
         let presence = XMPPPresence(type: "available")
         xmppStream!.send(presence)
         
         //Now show SMS Options to validate mobile
         let notificationName = Notification.Name("showSMSOptions")
         NotificationCenter.default.post(name: notificationName, object: nil)
         
         }
         else
         {*/
        Clslogging.logdebug(State: "Authenticate ")
        let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
        if(!istriviauser){
            
        
        let login: String? = UserDefaults.standard.string(forKey: "userJID")
        let isforgate: String? = UserDefaults.standard.string(forKey: "forgate")
        let register: String? = UserDefaults.standard.string(forKey: "registerJID")
        if (register != nil) {
            //Fetch profile details of user and post notification to open profile view (User is already registered and reactivated his account)
            /*
             var data = [TeamCategories_detail]()
             data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
             if(data.count == 0){
             var dictRequest = [String: AnyObject]()
             dictRequest["cmd"] = "teamsync" as AnyObject
             var dictRequestData = [String: AnyObject]()
             
             dictRequestData["version"] = self.Realeseversion as AnyObject
             dictRequest["requestData"] = dictRequestData as AnyObject
             do {
             let dataTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
             let strTeams = NSString(data: dataTeams, encoding: String.Encoding.utf8.rawValue)! as String
             // print(strTeams)
             sendRequestToAPI(strRequestDict: strTeams)
             } catch {
             //  print(error.localizedDescription)
             }
             }
             */
            isBanterLoaderOn = true
            let notificationName = Notification.Name("_fanDidRegister")
            NotificationCenter.default.post(name: notificationName, object: nil)
            let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegistering")
            /* if (isRegistering == nil) {
             
             xmppvCardStorage = XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
             
             xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: xmppvCardStorage!)
             xmppvCardTempModule?.activate(xmppStream!)
             xmppvCardTempModule?.addDelegate(self, delegateQueue: DispatchQueue.main)
             
             xmppvCardTempModule?.fetchvCardTemp(for: xmppStream!.myJID!, ignoreStorage: true)
             
             }*/
            
        }
        else
        {
            let bylogin=UserDefaults.standard.string(forKey: "bylogin")
            let byChangePassword: String? = UserDefaults.standard.string(forKey: "byChangePassword")
            
            if(login != nil)
            {
                
                if(isforgate != nil){
                     UserDefaults.standard.setValue("YES", forKey: "isLoggedin")
                     UserDefaults.standard.synchronize()
                    showChangepassword();
                    Clslogging.logdebug(State: "Authenticate by Forgotpassword")
                }
                else{
                    
                    if(bylogin != nil){
                        //Fetch profile details
                        isBanterLoaderOn = true
                       // xmppvCardStorage = XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
                        Clslogging.logdebug(State: "Authenticate by login")
                        recentlylogin = true
                        getbackgroundapi()
                        /*if(xmppvCardStorage != nil)
                        {
                            xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: xmppvCardStorage!)
                            xmppvCardTempModule?.activate(xmppStream!)
                            xmppvCardTempModule?.addDelegate(self, delegateQueue: DispatchQueue.main)
                            
                            xmppvCardTempModule?.fetchvCardTemp(for: xmppStream!.myJID!, ignoreStorage: true)
                        }
                        else
                        {
                            xmppvCardStorage2 = XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
                            
                            if(xmppvCardStorage2 != nil)
                            {
                                xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: xmppvCardStorage2!)
                                xmppvCardTempModule?.activate(xmppStream!)
                                xmppvCardTempModule?.addDelegate(self, delegateQueue: DispatchQueue.main)
                                
                                xmppvCardTempModule?.fetchvCardTemp(for: xmppStream!.myJID!, ignoreStorage: true)
                            }
                        }*/
                        let deviceToken: String? = UserDefaults.standard.string(forKey: "DeviceToken")
                        if(deviceToken != nil){
                            updatetoken(token: deviceToken!)
                        }
                        
                        //Team sync
                        UserDefaults.standard.setValue("YES", forKey: "isRegisterProcess")
                        UserDefaults.standard.synchronize()
                        /*
                         var data = [TeamCategories_detail]()
                         data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
                         if(data.count == 0){
                         var dictRequest = [String: AnyObject]()
                         dictRequest["cmd"] = "teamsync" as AnyObject
                         var dictRequestData = [String: AnyObject]()
                         
                         dictRequestData["version"] = self.Realeseversion as AnyObject
                         dictRequest["requestData"] = dictRequestData as AnyObject
                         do {
                         let dataTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                         let strTeams = NSString(data: dataTeams, encoding: String.Encoding.utf8.rawValue)! as String
                         //print(strTeams)
                         sendRequestToAPI(strRequestDict: strTeams)
                         } catch {
                         // print(error.localizedDescription)
                         }
                         }
                         */
                        
                        callingFFConfig()
                        //Code to get my teams.
                         GetmyTeam()
                       
                      getblockusers()
                        
                        
                        //Save nickname and username here if required
                        UserDefaults.standard.setValue("", forKey: "banterNickName")
                        UserDefaults.standard.setValue("", forKey: "myMobileNo")
                        UserDefaults.standard.setValue("YES", forKey: "isLoggedin")
                        UserDefaults.standard.setValue(nil, forKey: "bylogin")
                        UserDefaults.standard.synchronize()
                        
                        //  goOnline(xmppStream!)
                        
                        //sendRequestToResetPassword()
                        showMainTab()
                        
                        
                    }
                    else if(byChangePassword != nil)
                    {
                        isBanterLoaderOn = true
                        self.sendRequestToResetPasswordFromSetting()
                    }
                    
                }
                goOnline(xmppStream!)
            }
            
            if(isforgate == nil){
                goOnline(xmppStream!)
            }
            
        }
        }
        else{
            let presence = XMPPPresence(type: "available")
            xmppStream!.send(presence)
            self.runTimer()
            isUserOnline = true
             Clslogging.logdebug(State: "Authenticate by anonymous")
            let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
            NotificationCenter.default.post(name: notificationNametrivia, object: nil)
             joinRoombroadcastall(joindate: "")
            let deviceToken: String? = UserDefaults.standard.string(forKey: "DeviceToken")
                                   if(deviceToken != nil){
                                       updatetoken(token: deviceToken!)
                                   }
        }
        //Finish all main loading activities here before show any screen. This cmd will change with all config data
        //This team sync will be shift to
        
        
        
        
        //End
        
        /*print("goOnline")
         let presence = XMPPPresence(type: "available")
         sender.send(presence)*/
        
        //}
        
        
        
        
    }
    
    func xmppStream(_ sender: XMPPStream, didNotAuthenticate error: DDXMLElement) {
        // print("didNotAuthenticate")
        let errorinfo:[String: AnyObject] = ["error": error as AnyObject]
        let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
        if(!istriviauser){
        
        let myArray : NSMutableArray = []
        
        let userUName: XMLElement = XMLElement.element(withName: "username") as! XMLElement
        userUName.stringValue = UserDefaults.standard.string(forKey: "registerusername")
        userUName.addChild(userUName)
        
        let userPwd: XMLElement = XMLElement.element(withName: "password") as! XMLElement
        userPwd.stringValue = UserDefaults.standard.string(forKey: "userpassword")
        userPwd.addChild(userPwd)
        
        let userName: XMLElement = XMLElement.element(withName: "name") as! XMLElement
        userName.stringValue = UserDefaults.standard.string(forKey: "userName")
        userName.addChild(userName)
        
        let userEmail: XMLElement = XMLElement.element(withName: "email") as! XMLElement
        userEmail.stringValue = UserDefaults.standard.string(forKey: "useremail")
        userEmail.addChild(userEmail)
        
        
        myArray.insert(userUName, at: 0)
        myArray.insert(userPwd, at: 1)
        myArray.insert(userName, at: 2)
        myArray.insert(userEmail, at:3)
        
        
        
        let bylogin=UserDefaults.standard.string(forKey: "bylogin")
        let byChangePassword: String? = UserDefaults.standard.string(forKey: "byChangePassword")
        
        if(bylogin != nil){
            let notificationName = Notification.Name("Loginfail")
            NotificationCenter.default.post(name: notificationName, object: nil)
            UserDefaults.standard.setValue(nil, forKey: "bylogin")
            UserDefaults.standard.synchronize()
            UserDefaults.standard.setValue(nil, forKey: "userJID")
            UserDefaults.standard.synchronize()
            
             Clslogging.logerror(State: "didNotAuthenticate by login", userinfo: errorinfo)
        }
        else if(byChangePassword != nil){
            UserDefaults.standard.setValue(nil, forKey: "byChangePassword")
            UserDefaults.standard.synchronize()
            let notificationName = Notification.Name("resetPasswordFromSettingsfail")
            NotificationCenter.default.post(name: notificationName, object: nil)
             Clslogging.logerror(State: "didNotAuthenticate by byChangePassword", userinfo: errorinfo)
            
        }
        else{
            
            
            let isLoggedin: String? = UserDefaults.standard.string(forKey: "isLoggedin")
            //Check if user is already logged in
            if isLoggedin != nil || isLoggedin == "YES"
            {
                if(self.xmppStream?.isDisconnected)!
                {
                    if self.connect(){
                        
                    }
                }
            }
            else if isLoggedin == nil
            {
                let allowregistration: String? = UserDefaults.standard.string(forKey: "allowregistration")
                if (allowregistration != nil) {
                    do {
                        //try xmppStream!.register(withPassword: UserDefaults.standard.string(forKey: "userpassword")!)
                        //try sender.register(withElements: myArray as! [Any])
                        //code change nitesh
                        //  try xmppStream!.register(withElements: myArray as! [Any])
                        Clslogging.logerror(State: "didNotAuthenticate because verify new user", userinfo: errorinfo)
                        UserDefaults.standard.setValue(nil, forKey: "allowregistration")
                        UserDefaults.standard.synchronize()
                        try xmppStream?.register(with: myArray as! [DDXMLElement])
                    } catch {
                        // print("error registering")
                    }
                }
                //Register new user
                
            }
            
            
            
            
        }
        }
        else{
            let myArray : NSMutableArray = []
          let  triviauser = UserDefaults.standard.string(forKey: "triviauser")
            let arrReadUserJid = triviauser?.components(separatedBy: "@")
            let userReadUserJid = arrReadUserJid?[0]
            let userUName: XMLElement = XMLElement.element(withName: "username") as! XMLElement
            userUName.stringValue = userReadUserJid//UserDefaults.standard.string(forKey: "userReadUserJid")
            userUName.addChild(userUName)
            
            let userPwd: XMLElement = XMLElement.element(withName: "password") as! XMLElement
            userPwd.stringValue = UserDefaults.standard.string(forKey: "tuserpassword")
            userPwd.addChild(userPwd)
            
          
            
            myArray.insert(userUName, at: 0)
            myArray.insert(userPwd, at: 1)
            do {
                //try xmppStream!.register(withPassword: UserDefaults.standard.string(forKey: "userpassword")!)
                //try sender.register(withElements: myArray as! [Any])
                //code change nitesh
                //  try xmppStream!.register(withElements: myArray as! [Any])
                UserDefaults.standard.setValue(nil, forKey: "allowregistration")
                UserDefaults.standard.synchronize()
                try xmppStream?.register(with: myArray as! [DDXMLElement])
                Clslogging.logerror(State: "didNotAuthenticate because verify new anonymous", userinfo: errorinfo)
            } catch {
                // print("error registering")
            }
            
        }
    }
    
    func xmppStreamDidRegister(_ sender: XMPPStream) {
        // print("registered!")
        let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
               if(!istriviauser){
               
        do {
            try xmppStream!.authenticate(withPassword: UserDefaults.standard.string(forKey: "userpassword")!)
            //Authenticate and post notification from here and open new profile window
            UserDefaults.standard.setValue("YES", forKey: "isRegistering")
            UserDefaults.standard.synchronize()
            //showProfile()
            // showMyTeams()
            
            
        } catch {
            // print("error authenticating")
        }
               }else{
                do {
                           try xmppStream!.authenticate(withPassword: UserDefaults.standard.string(forKey: "tuserpassword")!)
                           //Authenticate and post notification from here and open new profile window
                          // UserDefaults.standard.setValue("YES", forKey: "isRegistering")
                          // UserDefaults.standard.synchronize()
                           //showProfile()
                           // showMyTeams()
                           
                           
                       } catch {
                           // print("error authenticating")
                       }
                
        }
    }
    
    func xmppStreamDidNotRegister(_ sender: XMPPStream) {
         print("Not registered!")
        
    }
    
    @nonobjc func xmppReconnect(_ sender: XMPPReconnect!, didDetectAccidentalDisconnect connectionFlags: SCNetworkReachabilityFlags)
    {
         print("didDetectAccidentalDisconnect")
    }
    
    @nonobjc func xmppReconnect(_ sender: XMPPReconnect!, shouldAttemptAutoReconnect reachabilityFlags: SCNetworkReachabilityFlags)
    {
        print("shouldAttemptAutoReconnect")
    }
    
    func xmppAutoPingDidSend(_ sender: XMPPAutoPing!)
    {
        // print("xmppAutoPingDidSendPing")
    }
    
    func xmppAutoPingDidReceivePong(_ sender: XMPPAutoPing!)
    {
        // print("xmppAutoPingDidReceivePong")
    }
    
   /* func xmppvCardTempModule(_ vCardTempModule: XMPPvCardTempModule, didReceivevCardTemp vCardTemp: XMPPvCardTemp, for jid: XMPPJID)
    {
        // print("Card Received")
        
        if(xmppvCardStorage != nil)
        {
            let vCard: XMPPvCardTemp  = (xmppvCardStorage?.vCardTemp(for: jid, xmppStream: xmppStream!))!
            //Store received card to local storage so we can use this in whole app.
            
            
            let eleName = vCard.forName("name")
            if (eleName != nil)
            {
                UserDefaults.standard.setValue((eleName?.stringValue)!, forKey: "userName")
                UserDefaults.standard.synchronize()
            }
            
            
            
            let eleAvatar = vCard.forName("avatar")
            if (eleAvatar != nil)
            {
                UserDefaults.standard.setValue((eleAvatar?.stringValue)!, forKey: "userAvatarURL")
                UserDefaults.standard.synchronize()
                loadImageFromUrl(url: (eleAvatar?.stringValue)!, fileName: "userAvatar")
            }
            
            let eleStatus = vCard.forName("status")
            if (eleStatus != nil)
            {
                UserDefaults.standard.setValue((eleStatus?.stringValue)!, forKey: "userStatus")
                UserDefaults.standard.synchronize()
            }
            let eleMobile = vCard.forName("profilemobile")
            if (eleMobile != nil)
            {
                UserDefaults.standard.setValue((eleMobile?.stringValue)!, forKey: "Mobilesetting")
                UserDefaults.standard.synchronize()
            }
            let eleEmail = vCard.forName("profileemail")
            if (eleEmail != nil)
            {
                UserDefaults.standard.setValue((eleEmail?.stringValue)!, forKey: "Emailsetting")
                UserDefaults.standard.synchronize()
            }
        }
        else if(xmppvCardStorage2 != nil)
        {
            let vCard: XMPPvCardTemp  = (xmppvCardStorage2?.vCardTemp(for: jid, xmppStream: xmppStream!))!
            //Store received card to local storage so we can use this in whole app.
            
            
            let eleName = vCard.forName("name")
            if (eleName != nil)
            {
                UserDefaults.standard.setValue((eleName?.stringValue)!, forKey: "userName")
                UserDefaults.standard.synchronize()
            }
            
            
            
            let eleAvatar = vCard.forName("avatar")
            if (eleAvatar != nil)
            {
                UserDefaults.standard.setValue((eleAvatar?.stringValue)!, forKey: "userAvatarURL")
                UserDefaults.standard.synchronize()
                loadImageFromUrl(url: (eleAvatar?.stringValue)!, fileName: "userAvatar")
            }
            
            let eleStatus = vCard.forName("status")
            if (eleStatus != nil)
            {
                UserDefaults.standard.setValue((eleStatus?.stringValue)!, forKey: "userStatus")
                UserDefaults.standard.synchronize()
            }
            let eleMobile = vCard.forName("profilemobile")
            if (eleMobile != nil)
            {
                UserDefaults.standard.setValue((eleMobile?.stringValue)!, forKey: "Mobilesetting")
                UserDefaults.standard.synchronize()
            }
            let eleEmail = vCard.forName("profileemail")
            if (eleEmail != nil)
            {
                UserDefaults.standard.setValue((eleEmail?.stringValue)!, forKey: "Emailsetting")
                UserDefaults.standard.synchronize()
            }
        }
        
        
        //showProfile()
        if(isOnprofileviewView == true){
            let notificationName1 = Notification.Name("setVCard")
            NotificationCenter.default.post(name: notificationName1, object: nil)
        }
        
    }
    */
    func xmppvCardTempModule(_ vCardTempModule: XMPPvCardTempModule!, didUpdateMyvCard vCardTemp: XMPPvCardTemp!, for jid: XMPPJID!)
    {
        
        //@nonobjc func xmppvCardTempModuleDidUpdateMyvCard(_ vCardTempModule: XMPPvCardTempModule!) {
        //print("Card updated")
      Calleditprofile()
    }
    
    func xmppvCardTempModule(_ vCardTempModule: XMPPvCardTempModule, failedToFetchvCardFor jid: XMPPJID, error: DDXMLElement?)
    {
        print("Card Receive Failed")
    }
    
    //New code to send IQ to get all app contacts
    func sendRequestToGetContactsFromAPI(strContacts: String)
    {
        //let myArray = NSMutableArray()
        let iq: XMLElement = XMLElement.element(withName: "iq") as! XMLElement
        iq.addAttribute(withName: "type", stringValue: "set")
        iq.addAttribute(withName: "id", stringValue: "searchByUserName")
        iq.addAttribute(withName: "to", stringValue: "ffapi." + HostName)
        iq.addAttribute(withName: "from", stringValue: "*")
        
        // Insert more arrays with insertObject or addObject
        let query: XMLElement = XMLElement.element(withName: "query") as! XMLElement
        query.addAttribute(withName: "xmlns", stringValue: "jabber:iq:ffapi")
        
        let x: XMLElement = XMLElement.element(withName: "x") as! XMLElement
        //x.addAttribute(withName: "xmlns", stringValue: "jabber:x:data")
        x.setXmlns("jabber:x:data")
        x.addAttribute(withName: "type", stringValue: "submit")
        
        let formType: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        formType.addAttribute(withName: "type", stringValue: "hidden")
        formType.addAttribute(withName: "var", stringValue: "FORM_TYPE")
        let formVal: XMLElement = XMLElement.element(withName: "value") as! XMLElement
        formVal.addAttribute(withName: "value", stringValue: "jabber:iq:ffapi")
        formType.addChild(formVal)
        
        let userName: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        userName.addAttribute(withName: "var", stringValue: "request")
        //userName.addAttribute(withName: "value", intValue: 1)
        //userName.addAttribute(withName: "value", stringValue: "1")
        let userVal: XMLElement = XMLElement.element(withName: "value") as! XMLElement
        userVal.stringValue = "1"
        userName.addChild(userVal)
        
        
        let name: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        name.addAttribute(withName: "type", stringValue: "text-single")
        name.addAttribute(withName: "var", stringValue: "ffapi")
        let nameVal: XMLElement = XMLElement.element(withName: "value") as! XMLElement
        nameVal.stringValue = strContacts //"{\"cmd\":\"contactsync\",\"requestData\":{\"Mobile\":[\"9977564444\",\"8819096521\"]}}"
        name.addChild(nameVal)
        
        
        x.addChild(formType)
        x.addChild(userName)
        x.addChild(name)
        query.addChild(x)
        
        
        iq.addChild(query)
        
        xmppStream?.send(iq)
        
    }
    
    //New code to send IQ to save my teams
    func sendRequestToAPI(strRequestDict: String)
    {
        
        //let myArray = NSMutableArray()
        let iq: XMLElement = XMLElement.element(withName: "iq") as! XMLElement
        iq.addAttribute(withName: "type", stringValue: "set")
        //iq.addAttribute(withName: "id", stringValue: "searchByUserName")
        iq.addAttribute(withName: "to", stringValue: "ffapi." + HostName)
        iq.addAttribute(withName: "from", stringValue: "*")
        
        // Insert more arrays with insertObject or addObject
        let query: XMLElement = XMLElement.element(withName: "query") as! XMLElement
        query.addAttribute(withName: "xmlns", stringValue: "jabber:iq:ffapi")
        
        let x: XMLElement = XMLElement.element(withName: "x") as! XMLElement
        //x.addAttribute(withName: "xmlns", stringValue: "jabber:x:data")
        x.setXmlns("jabber:x:data")
        x.addAttribute(withName: "type", stringValue: "submit")
        
        let formType: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        formType.addAttribute(withName: "type", stringValue: "hidden")
        formType.addAttribute(withName: "var", stringValue: "FORM_TYPE")
        let formVal: XMLElement = XMLElement.element(withName: "value") as! XMLElement
        formVal.addAttribute(withName: "value", stringValue: "jabber:iq:ffapi")
        formType.addChild(formVal)
        
        let userName: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        userName.addAttribute(withName: "var", stringValue: "request")
        //userName.addAttribute(withName: "value", intValue: 1)
        //userName.addAttribute(withName: "value", stringValue: "1")
        let userVal: XMLElement = XMLElement.element(withName: "value") as! XMLElement
        userVal.stringValue = "1"
        userName.addChild(userVal)
        
        
        let name: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        name.addAttribute(withName: "type", stringValue: "text-single")
        name.addAttribute(withName: "var", stringValue: "ffapi")
        let nameVal: XMLElement = XMLElement.element(withName: "value") as! XMLElement
        nameVal.stringValue = strRequestDict //"{\"cmd\":\"contactsync\",\"requestData\":{\"Mobile\":[\"9977564444\",\"8819096521\"]}}"
        name.addChild(nameVal)
        
        
        x.addChild(formType)
        x.addChild(userName)
        x.addChild(name)
        query.addChild(x)
        
        
        iq.addChild(query)
        
        xmppStream?.send(iq)
        
    }
    
    //func sendRequestToResetPassword(strRequestDict: String)
    func sendRequestToResetPassword()
    {
        
        /*NSXMLElement *query = [NSXMLElement elementWithName:@"query" xmlns:@"jabber:iq:register"];
         
         NSXMLElement *username = [NSXMLElement elementWithName:@"username"
         stringValue:[self xmppStream].myJID.user];
         NSXMLElement *password = [NSXMLElement elementWithName:@"password"
         stringValue:newPassword];
         [query addChild:username];
         [query addChild:password];*/
        let username: String? = UserDefaults.standard.string(forKey: "registerusername")
        let userpassword: String? = UserDefaults.standard.string(forKey: "userpassword")
        
        //let myArray = NSMutableArray()
        let iq: XMLElement = XMLElement.element(withName: "iq") as! XMLElement
        iq.addAttribute(withName: "type", stringValue: "set")
        iq.addAttribute(withName: "id", stringValue: "resetPassword")
        //iq.addAttribute(withName: "to", stringValue: "ffapi.amazomcdn.com")
        //iq.addAttribute(withName: "from", stringValue: "*")
        
        // Insert more arrays with insertObject or addObject
        let query: XMLElement = XMLElement.element(withName: "query") as! XMLElement
        query.addAttribute(withName: "xmlns", stringValue: "jabber:iq:register")
        
        
        
        let userName: XMLElement = XMLElement.element(withName: "username") as! XMLElement
        userName.stringValue = username
        userName.addChild(userName)
        
        let userPwd: XMLElement = XMLElement.element(withName: "password") as! XMLElement
        userPwd.stringValue = userpassword
        userPwd.addChild(userPwd)
        
        
        
        query.addChild(userName)
        query.addChild(userPwd)
        
        
        iq.addChild(query)
        
        xmppStream?.send(iq)
        
    }
    func sendRequestToGetsubscription()
    {
        
        /*NSXMLElement *query = [NSXMLElement elementWithName:@"query" xmlns:@"jabber:iq:register"];
         
         NSXMLElement *username = [NSXMLElement elementWithName:@"username"
         stringValue:[self xmppStream].myJID.user];
         NSXMLElement *password = [NSXMLElement elementWithName:@"password"
         stringValue:newPassword];
         [query addChild:username];
         [query addChild:password];*/
        let username: String? = UserDefaults.standard.string(forKey: "userJID")
        
        //let myArray = NSMutableArray()
        let iq: XMLElement = XMLElement.element(withName: "iq") as! XMLElement
        iq.addAttribute(withName: "type", stringValue: "get")
        iq.addAttribute(withName: "id", stringValue: "getsubcription")
        //iq.addAttribute(withName: "to", stringValue: "ffapi.amazomcdn.com")
        iq.addAttribute(withName: "from", stringValue:toUserJID)
        
        // Insert more arrays with insertObject or addObject
        let query: XMLElement = XMLElement.element(withName: "query") as! XMLElement
        query.addAttribute(withName: "xmlns", stringValue: "jabber:iq:roster")
        
        
        
        
        
        iq.addChild(query)
        
        xmppStream?.send(iq)
        
    }
    
    func sendRequestToResetPasswordFromSetting()
    {
        
        /*NSXMLElement *query = [NSXMLElement elementWithName:@"query" xmlns:@"jabber:iq:register"];
         
         NSXMLElement *username = [NSXMLElement elementWithName:@"username"
         stringValue:[self xmppStream].myJID.user];
         NSXMLElement *password = [NSXMLElement elementWithName:@"password"
         stringValue:newPassword];
         [query addChild:username];
         [query addChild:password];*/
        let username: String? = UserDefaults.standard.string(forKey: "registerusername")
        let userpassword: String? = UserDefaults.standard.string(forKey: "newpassword")
        
        //let myArray = NSMutableArray()
        let iq: XMLElement = XMLElement.element(withName: "iq") as! XMLElement
        iq.addAttribute(withName: "type", stringValue: "set")
        iq.addAttribute(withName: "id", stringValue: "resetPasswordFromSettings")
        //iq.addAttribute(withName: "to", stringValue: "ffapi.amazomcdn.com")
        //iq.addAttribute(withName: "from", stringValue: "*")
        
        // Insert more arrays with insertObject or addObject
        let query: XMLElement = XMLElement.element(withName: "query") as! XMLElement
        query.addAttribute(withName: "xmlns", stringValue: "jabber:iq:register")
        
        
        
        let userName: XMLElement = XMLElement.element(withName: "username") as! XMLElement
        userName.stringValue = username
        userName.addChild(userName)
        
        let userPwd: XMLElement = XMLElement.element(withName: "password") as! XMLElement
        userPwd.stringValue = userpassword
        userPwd.addChild(userPwd)
        
        
        
        query.addChild(userName)
        query.addChild(userPwd)
        
        
        iq.addChild(query)
        
        xmppStream?.send(iq)
        
    }
    func sendRequestDefaultSearch()
    {
        //let myArray = NSMutableArray()
        let iq: XMLElement = XMLElement.element(withName: "iq") as! XMLElement
        iq.addAttribute(withName: "type", stringValue: "set")
        iq.addAttribute(withName: "id", stringValue: "searchByUserName")
        iq.addAttribute(withName: "to", stringValue: "search." + HostName)
        iq.addAttribute(withName: "from", stringValue: "*")
        
        // Insert more arrays with insertObject or addObject
        let query: XMLElement = XMLElement.element(withName: "query") as! XMLElement
        query.addAttribute(withName: "xmlns", stringValue: "jabber:iq:search")
        
        let x: XMLElement = XMLElement.element(withName: "x") as! XMLElement
        x.addAttribute(withName: "xmlns", stringValue: "jabber:x:data")
        x.addAttribute(withName: "type", stringValue: "submit")
        
        let formType: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        formType.addAttribute(withName: "type", stringValue: "hidden")
        formType.addAttribute(withName: "var", stringValue: "FORM_TYPE")
        formType.addAttribute(withName: "value", stringValue: "jabber:iq:search")
        
        let userName: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        userName.addAttribute(withName: "var", stringValue: "Username")
        userName.addAttribute(withName: "value", stringValue: "1")
        
        let name: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        name.addAttribute(withName: "var", stringValue: "Name")
        name.addAttribute(withName: "value", stringValue: "1")
        
        let email: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        email.addAttribute(withName: "var", stringValue: "Email")
        email.addAttribute(withName: "value", stringValue: "1")
        
        let search: XMLElement = XMLElement.element(withName: "field") as! XMLElement
        search.addAttribute(withName: "var", stringValue: "search")
        search.addAttribute(withName: "value", stringValue: String(format: "%@%", "919977564444"))
        //search.addAttribute(withName: "value", stringValue: "*")
        
        x.addChild(formType)
        x.addChild(userName)
        x.addChild(name)
        x.addChild(email)
        x.addChild(search)
        query.addChild(x)
        
        
        iq.addChild(query)
        
        xmppStream?.send(iq)
        
    }
    /* func xmppRoster(sender: XMPPRoster, didReceivePresenceSubscriptionRequest presence: XMPPPresence ){
     xmppRoster.acceptPresenceSubscriptionRequest(from: XMPPJID!, andAddToRoster: true)
     }*/
    func xmppRoster(_ sender: XMPPRoster, didReceivePresenceSubscriptionRequest presence: XMPPPresence) {
        // debugPrint("XMPPRoster : didReceivePresenceSubscriptionRequest ")
        //debugPrint(presence)
        sender.acceptPresenceSubscriptionRequest(from: presence.from!, andAddToRoster: true)
    }
    func xmppStream(_ sender: XMPPStream, didReceive iq: XMPPIQ) -> Bool
    {
        
        //New code to leave banter rooms
        /* let isIQTypeResult = iq.attributeStringValue(forName: "type")
         
         if(isIQTypeResult == "result")
         {
         print("It is result")
         let iqResultMessageId = iq.attributeStringValue(forName: "id")
         print(iqResultMessageId ?? "No Message ID")
         }*/
        //End
        
        
        
        let queryElementAlluser = iq.element(forName: "query", xmlns: "jabber:iq:ffapi")//forName("query", xmlns: "jabber:iq:ffapi")
        
        if (queryElementAlluser != nil)
        {
            let ele = queryElementAlluser?.element(forName: "x", xmlns: "jabber:x:data")//forName("x", xmlns: "jabber:x:data")
            if (ele != nil)
            {
                let ele2 = ele?.element(forName: "item")//forName("item")
                if (ele2 != nil)
                {
                    let ele3 = ele2?.element(forName: "field")//forName("field")
                    if (ele3 != nil)
                    {
                        let ele4 = ele3?.element(forName: "value")//forName("value")
                        if (ele4 != nil)
                        {
                            let str: String = (ele4?.stringValue)!
                            if(!str.isEmpty)
                            {
                                if let data = str.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                    do {
                                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                        
                                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                        
                                        if(isSuccess)
                                        {
                                            
                                            //New code to manage response from API on base of "cmd"
                                            let Cmd: String = (jsonData?.value(forKey: "cmd") as? String)!
                                            //print(Cmd)
                                            if(Cmd == "teamsave")
                                            {
                                                /*let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //print(response)
                                                let myProfileDict: NSDictionary = response[0] as! NSDictionary
                                                //Save my teams in user defaults here
                                                //Primary
                                                
                                                let banterNickName = myProfileDict.value(forKey: "username") as! String
                                                let myMobileNo = myProfileDict.value(forKey: "username") as! String
                                                
                                                //Save nickname and username here if required
                                                UserDefaults.standard.setValue(banterNickName, forKey: "banterNickName")
                                                UserDefaults.standard.setValue(myMobileNo, forKey: "myMobileNo")
                                                UserDefaults.standard.synchronize()
                                                //Save user Avatar
                                                /*if let userAvatar = myProfileDict.value(forKey: "avatar")
                                                 {
                                                 let avatar: String = userAvatar as! String
                                                 let decodedimage = UIImage(data: Data.init(base64Encoded: avatar)!)
                                                 profileAvtarTemp! = decodedimage!
                                                 
                                                 saveProfileImage(decodedimage!)
                                                 }*/
                                                
                                                
                                                
                                                
                                                //This for only Teams Change
                                                if(self.isFromSettings){
                                                    
                                                    /*UserDefaults.standard.setValue(self.primaryTeamId, forKey: "primaryTeamId")
                                                     UserDefaults.standard.setValue(self.primaryTeamName as String, forKey: "primaryTeamName")
                                                     UserDefaults.standard.setValue(self.primaryTeamLogo as String, forKey: "primaryTeamLogo")
                                                     // UserDefaults.standard.synchronize()
                                                     UserDefaults.standard.setValue(self.optionalTeam1Id, forKey: "optionalTeam1Id")
                                                     UserDefaults.standard.setValue( self.optionalTeam1Name, forKey: "optionalTeam1Name")
                                                     UserDefaults.standard.setValue(self.optionalTeam1Logo, forKey: "optionalTeam1Logo")
                                                     
                                                     UserDefaults.standard.setValue(self.optionalTeam2Id, forKey: "optionalTeam2Id")
                                                     UserDefaults.standard.setValue( self.optionalTeam2Name, forKey: "optionalTeam2Name")
                                                     UserDefaults.standard.setValue(self.optionalTeam2Logo, forKey: "optionalTeam2Logo")
                                                     
                                                     UserDefaults.standard.setValue(self.optionalTeam3Id, forKey: "optionalTeam3Id")
                                                     UserDefaults.standard.setValue( self.optionalTeam3Name, forKey: "optionalTeam3Name")
                                                     UserDefaults.standard.setValue(self.optionalTeam3Logo, forKey: "optionalTeam3Logo")
                                                     
                                                     UserDefaults.standard.synchronize()*/
                                                    
                                                    
                                                    
                                                    let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                    if localArrAllChats != nil
                                                    {
                                                        //Code to parse json data
                                                        if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                            do {
                                                                arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                
                                                            } catch let error as NSError {
                                                                // print(error)
                                                            }
                                                        }
                                                    }
                                                    
                                                    //New code for Banter rooms, Group Chats and user updates
                                                    var tmpArrAllChats = [String: AnyObject]()
                                                    for tmpAllUserChats in arrAllChats
                                                    { //DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                        let tmpSingleUserChat: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                        let chatType: String = tmpSingleUserChat["chatType"] as! String
                                                        if(chatType == "banter")
                                                        {
                                                            let isJoined: String = tmpSingleUserChat["isJoined"] as! String
                                                            let isAdmin: String = tmpSingleUserChat["isAdmin"] as! String
                                                            var adminSupportedTeam: Int = 0
                                                            var mySupportedTeam: Int = 0
                                                            
                                                            if let admSupTeam = tmpSingleUserChat["supportedTeam"]
                                                            {
                                                                adminSupportedTeam = admSupTeam as! Int
                                                            }
                                                            let roomid: String = tmpSingleUserChat["roomJID"] as! String
                                                            
                                                            if(isJoined == "yes")
                                                            {
                                                                if(isAdmin == "yes")
                                                                {
                                                                    let isClose = self.isCloseLeaveBanter(mySupportedTeam: adminSupportedTeam)
                                                                    if(isClose)
                                                                    {
                                                                        //Close this banter
                                                                        //  print("closed")
                                                                        //Code to close banter room
                                                                        var dictRequest = [String: AnyObject]()
                                                                        dictRequest["cmd"] = "deletebanterroom" as AnyObject
                                                                        
                                                                        do {
                                                                            //Creating Request Data
                                                                            var dictRequestData = [String: AnyObject]()
                                                                            
                                                                            let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                            let arrReadUserJid = login?.components(separatedBy: "@")
                                                                            let myMobile: String? = arrReadUserJid?[0]
                                                                            
                                                                            dictRequestData["roomid"] = roomid as AnyObject
                                                                            dictRequestData["username"] = myMobile as AnyObject
                                                                            
                                                                            dictRequest["requestData"] = dictRequestData as AnyObject
                                                                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                            //print(dictRequest)
                                                                            
                                                                            let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                            let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
                                                                            //print(strSaveBanter)
                                                                            self.sendRequestToAPI(strRequestDict: strSaveBanter)
                                                                        } catch {
                                                                            print(error.localizedDescription)
                                                                        }
                                                                        //End Code to savebanterroom.
                                                                        
                                                                        
                                                                        
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    
                                                                    if let steam = tmpSingleUserChat["mySupportedTeam"]
                                                                    {
                                                                        mySupportedTeam = steam as! Int
                                                                        if(mySupportedTeam > 0)
                                                                        {
                                                                            let isLeave = self.isCloseLeaveBanter(mySupportedTeam: mySupportedTeam)
                                                                            if(isLeave)
                                                                            {
                                                                                var dictRequest = [String: AnyObject]()
                                                                                dictRequest["cmd"] = "deletebanterroomdetails" as AnyObject
                                                                                
                                                                                do {
                                                                                    //Creating Request Data
                                                                                    var dictRequestData = [String: AnyObject]()
                                                                                    
                                                                                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                    let arrReadUserJid = login?.components(separatedBy: "@")
                                                                                    let myMobile: String? = arrReadUserJid?[0]
                                                                                    
                                                                                    dictRequestData["roomid"] = roomid as AnyObject
                                                                                    dictRequestData["username"] = myMobile as AnyObject
                                                                                    
                                                                                    dictRequest["requestData"] = dictRequestData as AnyObject
                                                                                    //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                                    //print(dictRequest)
                                                                                    
                                                                                    let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                                    let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                    //print(strSaveBanter)
                                                                                    self.sendRequestToAPI(strRequestDict: strSaveBanter)
                                                                                } catch {
                                                                                    //print(error.localizedDescription)
                                                                                }
                                                                                //Close this banter
                                                                                // print("leave")
                                                                            }
                                                                        }
                                                                        
                                                                        
                                                                    }
                                                                    
                                                                }
                                                            }
                                                            else{
                                                                       let    supportedTeam = tmpSingleUserChat[ "supportedTeam"] as! Int
                                                                                                     let opponentTeam = tmpSingleUserChat[ "opponentTeam"] as! Int
                                                                 
                                                               let isOpen = isBanterIsOpen(supportedTeam: supportedTeam, opponentTeam: opponentTeam)
                                                                                           
                                                                                                                                  if(isOpen == false)
                                                                                                                                  {
                                                                  let time2: Int64 = getUTCFormateDate()
                                                                                                                                    let uuid = UUID().uuidString
                                                                   let messageId = uuid
                                                                                                                   let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                    let roomname = tmpSingleUserChat[ "userName"] as! String                                                                         //self.prepareMessageForServerIn(roomid!, messageContent: "You are ", messageType: "header", messageTime: time2 as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: login!, isIncoming: "YES", chatType: "banter", recBanterNickName: "", banterRoomName: roomname, isJoined: "no")
                                                                }
                                                            }
                                                            
                                                        }
                                                        //}
                                                        
                                                    }
                                                    
                                                }
                                                else
                                                {
                                                    Clslogging.loginfo(State: "fanDidRegister response", userinfo: myProfileDict as! [String : AnyObject])
                                                    //In loop of banters details
                                                    let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                    UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                    UserDefaults.standard.synchronize()
                                                    let totalcoins = myProfileDict.value(forKey: "totalcoins") as! Int
                                                    let isreferralcoins = myProfileDict.value(forKey: "isreferralcoins") as! Bool
                                                    let issignupcoins = myProfileDict.value(forKey: "issignupcoins") as! Bool
                                                    let availablecoins = myProfileDict.value(forKey: "availablecoins") as! Int
                                                    if(isreferralcoins ){
                                                        DispatchQueue.main.async {
                                                            AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(availablecoins) FanCoins rewards for signing up by referral code. \(self.GetvalueRedeemMesg(avilablecoin: availablecoins))" ,fancoins: String(availablecoins) )
                                                            Clslogging.logdebug(State: "You won \(availablecoins) FanCoins rewards for signing up by referral code. \(self.GetvalueRedeemMesg(avilablecoin: availablecoins))")
                                                        }
                                                        let uuid = UUID().uuidString
                                                        let time: Int64 = self.getUTCFormateDate()
                                                        let refrral: String? = UserDefaults.standard.string(forKey: "refralcode")
                                                        let referraluserJID: String = refrral! + JIDPostfix
                                                        let recReadUserJid: String = UserDefaults.standard.string(forKey: "userJID") as! String
                                                        
                                                        //let recReadTime: String = (jsonDataMessage?.value(forKey: "time") as? String)!
                                                        let arrReadUserJid = recReadUserJid.components(separatedBy: "@")
                                                        let userReadUserJid = arrReadUserJid[0]
                                                        //let myjidtrim: String = userUserJid!
                                                        sendMessageToServer(referraluserJID as AnyObject as! String, messageContent: "You won \(GetvalueFromInsentiveConfigTable(Key: fcreferral)) FanCoins rewards as a referral bonus from \(userReadUserJid)", messageType: "header", messageTime: time, messageId: uuid, roomType: "chat", messageSubType: "referral" ,roomid:referraluserJID , roomName: "Referral Bonus")
                                                         Clslogging.logdebug(State: "You won \(GetvalueFromInsentiveConfigTable(Key: fcreferral)) FanCoins rewards as a referral bonus from \(userReadUserJid)")
                                                    }
                                                    else if(issignupcoins){
                                                        DispatchQueue.main.async {
                                                            AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(availablecoins) FanCoins rewards for signing up.\(self.GetvalueRedeemMesg(avilablecoin: availablecoins)) " ,fancoins: String(availablecoins) )
                                                             Clslogging.logdebug(State: "You won \(availablecoins) FanCoins rewards for signing up.\(self.GetvalueRedeemMesg(avilablecoin: availablecoins))")
                                                        }
                                                    }
                                                    AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
                                                    if(isRegistering != nil)
                                                    {
                                                        let response2: NSArray = myProfileDict.value(forKey: "banterlist") as! NSArray
                                                        //print(response2)
                                                        Clslogging.logdebug(State: "fanDidRegister get banterlist array")
                                                        if(response2.count > 0)
                                                        {
                                                            
                                                            for record in response2
                                                            {
                                                                let jidsDict: NSDictionary = record as! NSDictionary
                                                                //Save my teams in user defaults here
                                                                //Primary
                                                                let roomJID: String = jidsDict.value(forKey: "roomid") as! String
                                                                let time: Int64 = self.getUTCFormateDate()
                                                                var messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                let chatType: String = jidsDict.value(forKey: "roomtype") as! String
                                                                let banterName: String = jidsDict.value(forKey: "roomname") as! String
                                                                
                                                                let supportTeam = jidsDict.value(forKey: "supportteam") as! Int64
                                                                let opponentTeam = jidsDict.value(forKey: "opponentteam") as! Int64
                                                                
                                                                if(messageTo == nil)
                                                                {
                                                                    messageTo = UserDefaults.standard.string(forKey: "registerJID")
                                                                }
                                                                
                                                                if(messageTo == nil)
                                                                {
                                                                    messageTo = ""
                                                                }
                                                                
                                                                self.prepareMessageForServerIn(roomJID, messageContent: "You can join this Banter Room by Join button.", messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: banterName, banterRoomName: banterName,isJoined: "no",isAdmin: "no", supportedTeam: supportTeam, opponentTeam: opponentTeam)
                                                                
                                                            }
                                                            let notificationName = Notification.Name("RefreshBantersViewFromOthers")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                            
                                                            //RegisterProcess should be nil
                                                            //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                            //UserDefaults.standard.synchronize()
                                                            
                                                        }
                                                        /*
                                                         
                                                         self.prepareMessageForServerIn(messageFromTrim, messageContent: recMessageContent, messageType: "text", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: recBanterNickName, banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdmin)
                                                         //, banterRoomLogo: String = ""
                                                         
                                                         if(isOnBantersView == true)
                                                         {
                                                         //Post notification if user is on chats window and received any message
                                                         let notificationName = Notification.Name("RefreshBantersView")
                                                         NotificationCenter.default.post(name: notificationName, object: nil)
                                                         }
                                                         
                                                         
                                                         
                                                         */
                                                        UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                        UserDefaults.standard.synchronize()
                                                    }
                                                    if(self.isOnBantersView == true && curRoomType == "banter")
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                     Clslogging.logdebug(State: "fanDidRegister team save End")
                                                }
                                                GetmyTeam()
                                               
                                                */
                                            }
                                            else if(Cmd == "teamsync")
                                            {
                                                //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                do {
                                                    // Comment by Mayank 18 Jun 2018
                                                    /*
                                                     let response = jsonData?.value(forKey: "responseData") as! NSArray
                                                     //print(arrDataTeams)
                                                     //Save array to local temp
                                                     for res in response
                                                     {
                                                     let catarr = (res as! NSDictionary).value(forKey: "teamcategories") as! NSArray
                                                     for cat in catarr
                                                     {
                                                     let c_id =  (cat as! NSDictionary).value(forKey: "id") as! Int64
                                                     let iscat = TeamCategories_detail.rows(filter:"c_Id = \(c_id)") as! [TeamCategories_detail]
                                                     if(iscat.count == 0){
                                                     let teamCategories_detail = TeamCategories_detail()
                                                     teamCategories_detail.c_Id = (cat as! NSDictionary).value(forKey: "id") as! Int64
                                                     teamCategories_detail.c_name = (cat as! NSDictionary).value(forKey: "name") as! String
                                                     teamCategories_detail.c_logo = (cat as! NSDictionary).value(forKey: "logo") as! String
                                                     teamCategories_detail.save()
                                                     }
                                                     else{
                                                     
                                                     }
                                                     let teamImageName = "caty" + c_id.description
                                                     //print(teamImageName)
                                                     self.loadImageFromUrl(url: ((cat as! NSDictionary).value(forKey: "logo") as! String), fileName: teamImageName as String)
                                                     }
                                                     
                                                     let teamarr = (res as! NSDictionary).value(forKey: "teams") as! NSArray
                                                     for team in teamarr
                                                     {
                                                     let t_id =  (team as! NSDictionary).value(forKey: "id") as! Int64
                                                     let isteam = Teams_details.rows(filter:"team_Id = \(t_id)") as! [Teams_details]
                                                     if(isteam.count == 0){
                                                     let teams_details = Teams_details()
                                                     teams_details.team_Id = (team as! NSDictionary).value(forKey: "id") as! Int64
                                                     teams_details.team_name = (team as! NSDictionary).value(forKey: "name") as! String
                                                     teams_details.team_logo = (team as! NSDictionary).value(forKey: "logo") as! String
                                                     let c_id =  (team as! NSDictionary).value(forKey: "catid") as! Int64
                                                     teams_details.team_categoriy = c_id
                                                     teams_details.isselected = true
                                                     teams_details.save()
                                                     }
                                                     else{
                                                     
                                                     }
                                                     
                                                     
                                                     let teamImageName = "Team" + t_id.description
                                                     //print(teamImageName)
                                                     self.loadImageFromUrl(url: ((team as! NSDictionary).value(forKey: "logo") as! String), fileName: teamImageName as String)
                                                     
                                                     }
                                                     }
                                                     let team_msg: String = jsonData?.value(forKey: "team_msg") as! String
                                                     UserDefaults.standard.setValue(team_msg, forKey: "teamcopyright")
                                                     UserDefaults.standard.synchronize()
                                                     */
                                                    
                                                } catch {
                                                    print(error.localizedDescription)
                                                }
                                                //End
                                                
                                                
                                                
                                                //If we are on banters view then refresh it
                                                if(isOnBantersView == true)
                                                {
                                                    //Post notification if user is on chats window and received any message
                                                    let notificationName = Notification.Name("RefreshBantersViewFromOthers")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                
                                                
                                                
                                            }
                                            else if(Cmd == "getfanupdatesteam")
                                            {
                                                //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                arrFanUpdatesTeams = jsonData?.value(forKey: "responseData")  as! [AnyObject]
                                                
                                                //print(arrFanUpdatesTeams)
                                                let notificationName = Notification.Name("_FechedFanUpdateTeams")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                            }
                                            else if(Cmd == "getstandings")
                                            {
                                                //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //arrFanUpdatesTeams = jsonData?.value(forKey: "responseData")  as! [AnyObject]
                                                arrStanding = jsonData?.value(forKey: "responseData") as! [AnyObject]
                                                // let pickedCaption:[String: Any] = ["responseData": jsonData?.value(forKey: "responseData")  as! [AnyObject]]
                                                
                                                //print(arrFanUpdatesTeams)
                                                let notificationName = Notification.Name("_Fechedstandings")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                            }
                                            else if(Cmd == "getfixtures"){
                                                arrFixtures = jsonData?.value(forKey: "responseData") as! [AnyObject]
                                                // let pickedCaption:[String: Any] = ["responseData": jsonData?.value(forKey: "responseData")  as! [AnyObject]]
                                                
                                                //print(arrFanUpdatesTeams)
                                                let notificationName = Notification.Name("_FechedarrFixtures")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                            }
                                            else if(Cmd == "blockuserinroom"){
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                for res in response
                                                {
                                                    let roomId = (res as! NSDictionary).value(forKey: "roomid") as! String
                                                    let blockedusername = (res as! NSDictionary).value(forKey: "username") as! String
                                                    let uuid = UUID().uuidString
                                                    let roomType = (res as! NSDictionary).value(forKey: "roomtype") as! String
                                                    let messageId = uuid
                                                    let time: Int64 = self.getUTCFormateDate()
                                                    
                                                    let login: String = UserDefaults.standard.string(forKey: "registerusername")!
                                                    let arrdUserJid = blockedusername.components(separatedBy: "@")
                                                    //  let userUserJid =
                                                    let username = arrdUserJid[0]
                                                    if(roomType == "banter")
                                                    {
                                                        sendMessageToServer(roomId , messageContent: username + " is blocked by " + login + ".", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "roomuserblocked",BlockUnblockUserName: blockedusername)
                                                        //+ JIDPostfix
                                                        let array = db.query(sql: " select * from blockeduser WHERE roomId = '\(roomId)' and touser = '\(blockedusername)'")
                                                        if(array.count == 0){
                                                            let BlockeduserTable = Blockeduser()
                                                            BlockeduserTable.chatType = "banter"
                                                            BlockeduserTable.roomId = roomId
                                                            BlockeduserTable.touser = blockedusername
                                                            BlockeduserTable.unblocked_time = 0
                                                            BlockeduserTable.status = "Blocked"
                                                            BlockeduserTable.blocked_time = time
                                                            if BlockeduserTable.save() != 0 {
                                                                
                                                            }
                                                        }
                                                        else{
                                                            let time: Int64 = self.getUTCFormateDate()
                                                            
                                                            let result = db.query(sql: " UPDATE blockeduser SET status = 'Blocked', unblocked_time = 0,blocked_time = \(time) WHERE roomId = '\(roomId)'")
                                                            // print(result)
                                                        }
                                                    }
                                                    else if(roomType == "group")
                                                    {
                                                        sendMessageToServer(roomId , messageContent: username + " is blocked by " + login + ".", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "roomuserblocked",BlockUnblockUserName: blockedusername)
                                                        // let blockedusername = username //+ JIDPostfix
                                                        let array = db.query(sql: " select * from blockeduser WHERE roomId = '\(roomId)' and touser = '\(blockedusername)'")
                                                        if(array.count == 0){
                                                            let BlockeduserTable = Blockeduser()
                                                            BlockeduserTable.chatType = "group"
                                                            BlockeduserTable.roomId = roomId
                                                            BlockeduserTable.touser = blockedusername
                                                            BlockeduserTable.unblocked_time = 0
                                                            BlockeduserTable.status = "Blocked"
                                                            BlockeduserTable.blocked_time = time
                                                            if BlockeduserTable.save() != 0 {
                                                                
                                                            }
                                                        }
                                                        else{
                                                            let time: Int64 = self.getUTCFormateDate()
                                                            
                                                            _ = db.query(sql: " UPDATE blockeduser SET status = 'Blocked', unblocked_time = 0,blocked_time = \(time) WHERE roomId = '\(roomId)'")
                                                            // print(result)
                                                        }
                                                    }
                                                }
                                                
                                                
                                                
                                            }
                                            else if(Cmd == "unblockuserinroom"){
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                for res in response
                                                {
                                                    let roomId = (res as! NSDictionary).value(forKey: "roomid") as! String
                                                    let username = (res as! NSDictionary).value(forKey: "username") as! String
                                                    let uuid = UUID().uuidString
                                                    let messageId = uuid
                                                    let time: Int64 = self.getUTCFormateDate()
                                                    
                                                    let login: String = UserDefaults.standard.string(forKey: "registerusername")!
                                                    let roomType = (res as! NSDictionary).value(forKey: "roomtype") as! String
                                                    let arrdUserJid = username.components(separatedBy: "@")
                                                    //  let userUserJid =
                                                    let unblockedusername = arrdUserJid[0] //+ JIDPostfix
                                                    if(roomType == "banter")
                                                    {
                                                        
                                                        sendMessageToServer(roomId , messageContent: unblockedusername + " is unblocked by "+login + ".", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "roomuserunblocked",BlockUnblockUserName: username)
                                                        let result = db.query(sql: " Delete from blockeduser  WHERE roomId = '\(roomId)'  and touser = '\(username)'")
                                                    }
                                                    else if(roomType == "group")
                                                    {
                                                        sendMessageToServer(roomId , messageContent: unblockedusername + " is unblocked by "+login + ".", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "roomuserunblocked",BlockUnblockUserName: username)
                                                        let result = db.query(sql: " Delete from blockeduser  WHERE roomId = '\(roomId)'  and touser = '\(username)'")
                                                        //print(result)
                                                    }
                                                    if(isOnBlockeduserView == true){
                                                        if(roomType == "banter")
                                                        {
                                                        }
                                                        else if(roomType == "group")
                                                        {
                                                        }
                                                        let pickedCaption:[String: Any] = ["userdetail": "banter"]
                                                        let notificationName = Notification.Name("unblockFromBlocklist")
                                                        NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                        
                                                        
                                                    }
                                                }
                                                
                                                
                                                
                                            }
                                            /*else if(Cmd == "getbanterroomusers"){
                                                //code to fetch phone contacts from local
                                                
                                                if(self.allContacts.count == 0)
                                                {
                                                    let strAllContacts: String? = UserDefaults.standard.string(forKey: "allContacts")
                                                    if strAllContacts != nil
                                                    {
                                                        //Code to parse json data
                                                        if let data = strAllContacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                            do {
                                                                let tmpAllContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                
                                                                self.allContacts = NSMutableArray()
                                                                for record in tmpAllContacts {
                                                                    self.allContacts[self.allContacts.count] = record
                                                                }
                                                                
                                                                let tmpAllAppContacts = self.allContacts[0] as! NSArray
                                                                
                                                                self.allAppContacts = NSMutableArray()
                                                                for record in tmpAllAppContacts {
                                                                    self.allAppContacts[self.allAppContacts.count] = record
                                                                }
                                                                
                                                            }
                                                        }
                                                        
                                                    }
                                                }
                                                
                                                
                                                arrBanterUsers = NSMutableArray()
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                // print(response)
                                                let dict: NSDictionary = response[0] as! NSDictionary
                                                let roomid: String = (dict.value(forKey: "roomid") as? String)!
                                                // fancount update
                                                self.fancountupdate(roomid, fancount: Int64(response.count))
                                                if( roomid == toUserJID){
                                                    for res in response
                                                    {
                                                        if(allAppContacts.count>0){
                                                            
                                                            
                                                            var strName1: String = ""
                                                            _ = allAppContacts.filter({ (text) -> Bool in
                                                                let tmp: NSDictionary = text as! NSDictionary
                                                                let val: String = tmp.value(forKey: "jid") as! String
                                                                let val2: String = (res as! NSDictionary).value(forKey: "username") as! String
                                                                
                                                                
                                                                if(val.contains(val2))
                                                                {
                                                                    let ind = tmp.value(forKey: "name") as! String
                                                                    //print(ind)
                                                                    //tempPoneContacts.removeObject(at: Int(ind))
                                                                    if(ind == " " || ind == nil)
                                                                    {
                                                                        strName1 = (res as! NSDictionary).value(forKey: "username") as! String
                                                                    }
                                                                    else{
                                                                        strName1 = tmp.value(forKey: "name") as! String
                                                                    }
                                                                    
                                                                    //return true
                                                                }
                                                                
                                                                // }
                                                                
                                                                
                                                                return false
                                                            })
                                                            var tmpBUserDict: [String : AnyObject] = res as! [String : AnyObject]
                                                            
                                                            tmpBUserDict["jid"] = tmpBUserDict["username"] as AnyObject
                                                            
                                                            if(!strName1.isEmpty)
                                                            {
                                                                tmpBUserDict["username"] = strName1 as AnyObject
                                                            }
                                                            
                                                            arrBanterUsers.add(tmpBUserDict as NSDictionary)
                                                            
                                                            
                                                            
                                                        }
                                                        else{
                                                            var tmpBUserDict: [String : AnyObject] = res as! [String : AnyObject]
                                                            
                                                            tmpBUserDict["jid"] = tmpBUserDict["username"] as AnyObject
                                                            arrBanterUsers.add(tmpBUserDict as NSDictionary)
                                                        }
                                                        
                                                        //Here we will sort the array
                                                        let tmpArr = arrBanterUsers.sorted { (item1, item2) -> Bool in
                                                            let date1 =  item1 as! [String : AnyObject]
                                                            let date2 =  item2 as! [String : AnyObject]
                                                            
                                                            var dt1: String = ""
                                                            var dt2: String = ""
                                                            
                                                            if date1["username"] != nil
                                                            {
                                                                
                                                                dt1 = date1["username"] as! String
                                                                
                                                            }
                                                            
                                                            if date2["username"] != nil
                                                            {
                                                                
                                                                dt2 = date2["username"] as! String
                                                                
                                                            }
                                                            
                                                            
                                                            
                                                            return dt1.compare(dt2) == ComparisonResult.orderedAscending
                                                        }
                                                        
                                                        arrBanterUsers = NSMutableArray()
                                                        for arr in tmpArr
                                                        {
                                                            
                                                            let tmpDict = arr as! [String : AnyObject]
                                                            
                                                            if((tmpDict["isAdmin"] as! Int) == 1)
                                                            {
                                                                arrBanterUsers.add(tmpDict)
                                                                break;
                                                            }
                                                            
                                                        }
                                                        
                                                        for arr in tmpArr
                                                        {
                                                            
                                                            let tmpDict = arr as! [String : AnyObject]
                                                            if((tmpDict["isAdmin"] as! Int) == 0)
                                                            {
                                                                arrBanterUsers.add(tmpDict)
                                                                
                                                            }
                                                            
                                                        }
                                                        
                                                        
                                                        
                                                        
                                                        
                                                        let detailedDict: NSDictionary = res as! NSDictionary
                                                        //Save my teams in user defaults here
                                                        //Primary
                                                        let isAdminT: Bool = detailedDict.value(forKey: "isAdmin") as! Bool
                                                        let isJoinedS: String = detailedDict.value(forKey: "userstatus") as! String
                                                        var isAdminS: String = ""
                                                        if(isAdminT)
                                                        {
                                                            isAdminS = "yes"
                                                        }
                                                        else
                                                        {
                                                            isAdminS = "no"
                                                        }
                                                        
                                                        /* if(isJoinedS == "active")
                                                         {
                                                         doubleCheckUserStatusInBanterRoom(isJoined: "yes", isAdmin: isAdminS)
                                                         }
                                                         else
                                                         {
                                                         doubleCheckUserStatusInBanterRoom(isJoined: "no", isAdmin: isAdminS)
                                                         }*/
                                                        
                                                        
                                                        
                                                    }
                                                    if(isOnUserDetailView == true)
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("UserdetailRefresh")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    if(self.isOnBantersView == true)
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if (self.isOnChatsView == true)
                                                    {
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                }
                                                
                                                //print(arrBanterUsers)
                                            }*/
                                            else if(Cmd == "getmyteam")
                                            {
                                                isLoadingMyTeams = true
                                                isTeamNotSelected = false
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //  print(response)
                                                let myTeamsDict: NSDictionary = response[0] as! NSDictionary
                                                //Save my teams in user defaults here
                                                //Primary
                                                primaryTeamId = myTeamsDict.value(forKey: "primaryteam") as! Int64
                                                primaryTeamName = myTeamsDict.value(forKey: "primaryteamname") as! String
                                                primaryTeamLogo = myTeamsDict.value(forKey: "primaryteamlogo") as! String
                                                
                                                let teamImageName = "Team" + primaryTeamId.description
                                                //print(teamImageName)
                                                let usercity: String? = myTeamsDict.value(forKey: "city") as? String
                                                let userstate: String? = myTeamsDict.value(forKey: "state") as? String
                                                let usercontry: String? = myTeamsDict.value(forKey: "country") as? String
                                                let useremail: String? = myTeamsDict.value(forKey: "email") as? String
                                                let usercountrycode: Int64 = (myTeamsDict.value(forKey: "countrycode") as? Int64)!
                                                let teamImage: String? = UserDefaults.standard.string(forKey: teamImageName)
                                                let shortcode: String? = myTeamsDict.value(forKey: "shortcode") as? String
                                                let usermobileno: String? = myTeamsDict.value(forKey: "mobile") as? String
                                                //let userdob: Int64? = Int64(myTeamsDict.value(forKey: "birthday") as! Int)
                                                //let userlat: String? = myTeamsDict.value(forKey: "latitude") as? String
                                                //let userlong: String? = myTeamsDict.value(forKey: "longitude") as? String
                                                let notification: String = myTeamsDict.value(forKey: "notifications") as! String
                                                if (notification == "yes"){
                                                   // priority = "Everyone"
                                                               UserDefaults.standard.setValue("Everyone", forKey: "BanterNotification")
                                                               UserDefaults.standard.synchronize()
                                                }
                                                else{
                                                    //priority = "Nobody"
                                                               UserDefaults.standard.setValue("Nobody", forKey: "BanterNotification")
                                                               UserDefaults.standard.synchronize()
                                                }
                                                
                                                if((teamImage) == nil)
                                                {
                                                    self.loadTeamImageFromUrl(url: primaryTeamLogo, fileName: teamImageName as String)
                                                }
                                                
                                                
                                                UserDefaults.standard.setValue(primaryTeamId, forKey: "primaryTeamId")
                                                UserDefaults.standard.setValue(primaryTeamName, forKey: "primaryTeamName")
                                                UserDefaults.standard.setValue(primaryTeamLogo, forKey: "primaryTeamLogo")
                                                
                                                UserDefaults.standard.setValue(usercity, forKey: "userecity")
                                                UserDefaults.standard.setValue(userstate, forKey: "userstate")
                                                UserDefaults.standard.setValue(usercontry, forKey: "usercountry")
                                                UserDefaults.standard.setValue(usermobileno, forKey: "registerMobile")
                                                UserDefaults.standard.setValue(0, forKey: "userdob")
                                                UserDefaults.standard.setValue(0, forKey: "latitude")
                                                UserDefaults.standard.setValue(0, forKey: "longitude")
                                                UserDefaults.standard.setValue(useremail, forKey: "useremail")
                                                UserDefaults.standard.setValue(usercountrycode, forKey: "usercountrycode")
                                                UserDefaults.standard.setValue(shortcode, forKey: "usercountryshortcode")
                                                UserDefaults.standard.synchronize()
                                                //Optional 1
                                                optionalTeam1Id = myTeamsDict.value(forKey: "followedteam1") as! Int64
                                                optionalTeam1Name = myTeamsDict.value(forKey: "followedteam1name") as! String
                                                optionalTeam1Logo = myTeamsDict.value(forKey: "followedteam1logo") as! String
                                                var myteam = ""
                                                let teamImageName1 = "Team" + optionalTeam1Id.description
                                                //print(teamImageName)
                                                if(primaryTeamId != 0 && usermobileno == "")
                                                {
                                                    myteam += "\(String(describing: primaryTeamId))"
                                                    UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                    UserDefaults.standard.synchronize()
                                                    UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                    UserDefaults.standard.synchronize()
                                                    let notificationName1 = Notification.Name("Showprofile")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil)
                                                }
                                                
                                                let teamImage1: String? = UserDefaults.standard.string(forKey: teamImageName1)
                                                if((teamImage1) == nil)
                                                {
                                                    self.loadTeamImageFromUrl(url: optionalTeam1Logo, fileName: teamImageName1 as String)
                                                }
                                                
                                                UserDefaults.standard.setValue(optionalTeam1Id, forKey: "optionalTeam1Id")
                                                UserDefaults.standard.setValue(optionalTeam1Name, forKey: "optionalTeam1Name")
                                                UserDefaults.standard.setValue(optionalTeam1Logo, forKey: "optionalTeam1Logo")
                                                UserDefaults.standard.synchronize()
                                                //Optional 2
                                                optionalTeam2Id = myTeamsDict.value(forKey: "followedteam2") as! Int64
                                                optionalTeam2Name = myTeamsDict.value(forKey: "followedteam2name") as! String
                                                optionalTeam2Logo = myTeamsDict.value(forKey: "followedteam2logo") as! String
                                                
                                                let teamImageName2 = "Team" + optionalTeam2Id.description
                                                //print(teamImageName)
                                                
                                                let teamImage2: String? = UserDefaults.standard.string(forKey: teamImageName2)
                                                if((teamImage2) == nil)
                                                {
                                                    self.loadTeamImageFromUrl(url: optionalTeam2Logo, fileName: teamImageName2 as String)
                                                }
                                                
                                                UserDefaults.standard.setValue(optionalTeam2Id, forKey: "optionalTeam2Id")
                                                UserDefaults.standard.setValue(optionalTeam2Name, forKey: "optionalTeam2Name")
                                                UserDefaults.standard.setValue(optionalTeam2Logo, forKey: "optionalTeam2Logo")
                                                UserDefaults.standard.synchronize()
                                                //Optional 3
                                                optionalTeam3Id = myTeamsDict.value(forKey: "followedteam3") as! Int64
                                                optionalTeam3Name = myTeamsDict.value(forKey: "followedteam3name") as! String
                                                optionalTeam3Logo = myTeamsDict.value(forKey: "followedteam3logo") as! String
                                                
                                                let teamImageName3 = "Team" + optionalTeam3Id.description
                                                //print(teamImageName)
                                                
                                                let teamImage3: String? = UserDefaults.standard.string(forKey: teamImageName3)
                                                if((teamImage3) == nil)
                                                {
                                                    self.loadTeamImageFromUrl(url: optionalTeam3Logo, fileName: teamImageName3 as String)
                                                }
                                                
                                                UserDefaults.standard.setValue(optionalTeam3Id, forKey: "optionalTeam3Id")
                                                UserDefaults.standard.setValue(optionalTeam3Name, forKey: "optionalTeam3Name")
                                                UserDefaults.standard.setValue(optionalTeam3Logo, forKey: "optionalTeam3Logo")
                                                UserDefaults.standard.synchronize()
                                                
                                                if(primaryTeamId == 0)
                                                {
                                                    isLoadingMyTeams = false
                                                    let notificationName = Notification.Name("FetchedMyTeamsDetails")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    let notificationName1 = Notification.Name("Showteam")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil)
                                                }
                                                if(optionalTeam1Id != 0)
                                                {
                                                    myteam += ",\(String(describing: optionalTeam1Id))"
                                                }
                                                if(optionalTeam2Id != 0)
                                                {
                                                    myteam += ",\(String(describing: optionalTeam2Id))"
                                                }
                                                if(optionalTeam3Id != 0)
                                                {
                                                    myteam += ",\(String(describing: optionalTeam3Id))"
                                                }
                                                /*
                                                 let defalteamSelection: String? = UserDefaults.standard.string(forKey: "defalteamSelection")
                                                 if((defalteamSelection) == nil)
                                                 {
                                                 let _ = db.query(sql:"UPDATE Teams_details SET isselected = 1 WHERE  team_Id IN (\(myteam))")
                                                 
                                                 let _ = db.query(sql:"UPDATE teams_details SET isselected = 0 WHERE  team_Id NOT IN (\(myteam))")
                                                 UserDefaults.standard.setValue("ishave", forKey: "defalteamSelection")
                                                 UserDefaults.standard.synchronize()
                                                 }
                                                 */
                                                
                                            }
                                            else if(Cmd == "getbanterinviteusers")
                                            {
                                                //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                var arrDataBanterUsers = NSArray()
                                                arrDataBanterUsers = jsonData?.value(forKey: "responseData") as! NSArray
                                                //Send invite to all users
                                                //print(arrDataBanterUsers)
                                                if(arrDataBanterUsers.count > 0)
                                                {
                                                    
                                                    for record in arrDataBanterUsers
                                                    {
                                                        let jidsDict: NSDictionary = record as! NSDictionary
                                                        //Save my teams in user defaults here
                                                        //Primary
                                                        let jid: String = jidsDict.value(forKey: "username") as! String
                                                        
                                                        //let userJid = XMPPJID(string: jid)
                                                        
                                                        banterJIDs.append(jid)
                                                        
                                                        let varMobile = jid.split{$0 == "@"}.map(String.init)
                                                        var tempDict1 = [String: String]()
                                                        tempDict1["username"] = varMobile[0]
                                                        strBanterJIDs.append( tempDict1 as AnyObject)
                                                    }
                                                    
                                                    //Now we will create room if followers are greater then 1
                                                    
                                                    let code = self.shortCodeGenerator(length: 4)
                                                    let ticks = String(Date().ticks)
                                                    self.banterRoomId = code + ticks + "@conference." + HostName
                                                    
                                                    let result = self.joinRoom(with: self.banterRoomId, delegate: self)
                                                    //print(result)
                                                    //sendMessageToServer(appDelegate().toUserJID as AnyObject as! String, messageContent: username + " joined.", messageType: "header", messageTime: time, messageId: messageId, roomType: appDelegate().curRoomType, messageSubType: "roomuseradd", mySupportTeam: joinTeamId)
                                                    
                                                    
                                                    //myRoom.inviteUsers(jids as! [XMPPJID], withMessage: "You are invited to this banter room. You can join this banter room by tap on join button.")
                                                }
                                                
                                                
                                                
                                            }
                                            else if(Cmd == "saveroom")
                                            {
                                              /*  let _: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //let arrRoomId: NSDictionary = response[0] as! NSDictionary
                                                //let myRoomId = arrRoomId.value(forKey: "roomid") as! String
                                                
                                                //print(arrDataTeams)
                                                /*if(arrDataTeams.count > 0)
                                                 {
                                                 for record in arrDataTeams
                                                 {
                                                 
                                                 }
                                                 }*/
                                                //This IQ should be change. Mayank can save this internally to Server
                                                if(self.curRoomType == "banter")
                                                {
                                                    isBanterOwner = true
                                                    //Code to savebanterroom.
                                                    var dictRequest = [String: AnyObject]()
                                                    dictRequest["cmd"] = "savebanterroom" as AnyObject
                                                    
                                                    do {
                                                        //Creating Request Data
                                                        var dictRequestData = [String: AnyObject]()
                                                        
                                                        let myMobile: String? = UserDefaults.standard.string(forKey: "myMobileNo")
                                                        if(self.curRoomType == "banter")
                                                        {
                                                            dictRequestData["roomid"] = self.banterRoomId as AnyObject
                                                            dictRequestData["supportteam"] = self.myTeamId as AnyObject
                                                        }
                                                        else if(self.curRoomType == "group")
                                                        {
                                                            dictRequestData["roomid"] = self.groupId as AnyObject
                                                            dictRequestData["supportteam"] = 0 as AnyObject
                                                        }
                                                        
                                                        
                                                        
                                                        dictRequestData["username"] = myMobile as AnyObject
                                                        dictRequestData["status"] = "active" as AnyObject
                                                        
                                                        dictRequest["requestData"] = dictRequestData as AnyObject
                                                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                        //print(dictRequest)
                                                        
                                                        let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                        let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
                                                        //print(strSaveBanter)
                                                        self.sendRequestToAPI(strRequestDict: strSaveBanter)
                                                    } catch {
                                                        //print(error.localizedDescription)
                                                    }
                                                    //End Code to savebanterroom.
                                                }
                                                else if(self.curRoomType == "group"){
                                                    let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                    // print(response)
                                                    let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                    //Save my teams in user defaults here
                                                    //Primary
                                                    
                                                    
                                                    /*
                                                     (
                                                     {
                                                     opponentteam = 3;
                                                     roomid = "NY9r636404829420412032@conference.amazomcdn.com";
                                                     roomstatus = active;
                                                     roomtype = banter;
                                                     supportteam = 1;
                                                     }
                                                     )*/
                                                    
                                                    
                                                    //These line will be shift in IQ
                                                    let time: Int64 = self.getUTCFormateDate()
                                                    let uuid = UUID().uuidString
                                                    let banterId = roomDetailsDict.value(forKey: "roomid") as! String
                                                    /// let myNSData = self.banterRoomName.data(using: String.Encoding.utf8)! as NSData
                                                    
                                                    //Encode to base64
                                                    //let myBase64Data = myNSData.base64EncodedData(options: NSData.Base64EncodingOptions.endLineWithLineFeed)
                                                    
                                                    //let resultNSString = NSString(data: myBase64Data as Data, encoding: String.Encoding.utf8.rawValue)!
                                                    
                                                    self.prepareMessageForServerIn(banterId, messageContent: "You are now ready to post messages, pictures, videos in this group.", messageType: "header", messageTime: time, messageId: uuid, filePath: "", fileLocalId: "", caption: "", thumbLink: "", isIncoming: "YES", chatType: "group", recBanterNickName: self.banterRoomName as String, banterRoomName: self.banterRoomName as String, isJoined: "yes", isAdmin: "yes", supportedTeam: 0, opponentTeam: 0, mySupportTeam : 0,fansCount:1,roomavatar:Groupimagelink)
                                                    let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                    for invite in groupJIDs
                                                    {
                                                        let inviteArrUser = invite.components(separatedBy: "/")
                                                        let inviteUser = inviteArrUser[0]
                                                        //let userJid = XMPPJID(string: inviteUser)
                                                        let uuid = UUID().uuidString
                                                        let messageId = uuid
                                                        let time2: Int64 = self.getUTCFormateDate()
                                                        if(myJID != inviteUser)
                                                        {
                                                            let arrdUserJid = inviteUser.components(separatedBy: "@")
                                                            let username = arrdUserJid[0]
                                                            self.sendMessageToServer(banterId as AnyObject as! String, messageContent: username + " has joined.", messageType: "header", messageTime: time2, messageId: messageId, roomType: "group", messageSubType: "roomuseradd", mySupportTeam: 0, JoindUserName: inviteUser)
                                                            
                                                        }
                                                    }
                                                    let notificationName = Notification.Name("_GroupChatCreated")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    
                                                }
                                                
                                                */
                                                
                                            }
                                            else if(Cmd == "savebanterroom")
                                            {
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                // print(response)
                                                let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                //Save my teams in user defaults here
                                                //Primary
                                                
                                              
                                                //These line will be shift in IQ
                                                let chatType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                
                                                let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                let banterId = roomDetailsDict.value(forKey: "roomid") as! String
                                                
                                                //let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                
                                                
                                                
                                                if(chatType == "banter")
                                                {
                                                    
                                                    /* if(chatType == "banter")
                                                     {
                                                     let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                     /* for invite in banterJIDs
                                                     {
                                                     let inviteArrUser = invite.components(separatedBy: "/")
                                                     let inviteUser = inviteArrUser[0]
                                                     let userJid = XMPPJID(string: inviteUser)
                                                     if(myJID != inviteUser)
                                                     {
                                                     if(objXmppRoom != nil)
                                                     {
                                                     objXmppRoom.inviteUser(userJid!, withMessage: self.banterRoomName)
                                                     
                                                     
                                                     let uuid = UUID().uuidString
                                                     let time: Int64 = getUTCFormateDate()
                                                     //  sendMessageToServer(inviteUser as AnyObject as! String, messageContent: "Invitation to join Banter Room: " + banterName , messageType: "header", messageTime: time, messageId: uuid, roomType: "banter", messageSubType: "invite", roomid: banterId , roomName: banterName,SupportTeam: supportTeam,OpponentTeam:opponentTeam)
                                                     
                                                     
                                                     
                                                     
                                                     }
                                                     
                                                     }
                                                     }*/
                                                     if(isBanterOwner)
                                                     {
                                                     
                                                     }
                                                     }*/
                                                    
                                                    
                                                    var recMessageContent: String = ""
                                                    
                                                   /* if(isBanterOwner)
                                                    {
                                                        if(chatType == "group")
                                                        {
                                                            recMessageContent = "You have created this group."
                                                        }
                                                        else  if(chatType == "banter")
                                                        {
                                                            recMessageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                            let uuid = UUID().uuidString
                                                            let time: Int64 = getUTCFormateDate()
                                                            sendMessageToServer(banterId as AnyObject as! String, messageContent: "Invitation to join Banter Room: " + banterName , messageType: "header", messageTime: time, messageId: uuid, roomType: "banter", messageSubType: "banterinvite", roomid: banterId , roomName: banterName,SupportTeam: supportTeam,OpponentTeam:opponentTeam)
                                                            
                                                            objXmppRoom = nil
                                                        }
                                                        
                                                    }*/
                                                     if (self.isJoiningBanterRoom == true)
                                                    {
                                                        if(chatType == "banter")
                                                        {
                                                            recMessageContent = ""//"You have joined this banter room."
                                                            //isBanterOwner = true
                                                        }
                                                        else if(chatType == "group")
                                                        {
                                                            recMessageContent = "You have joined this group."
                                                        }
                                                        else
                                                        {
                                                            recMessageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                            
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if(chatType == "group")
                                                        {
                                                            recMessageContent = "You have joined this group."
                                                        }
                                                        else
                                                        {
                                                            recMessageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                        }
                                                        
                                                        
                                                    }
                                                    //let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    //let messageId = message?.attributeStringValue(forName: "id")
                                                    
                                                    let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                    let messageFrom = roomDetailsDict.value(forKey: "roomid") as! String
                                                    let arrMessageFrom = messageFrom.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom[0]
                                                    let recBanterNickName = ""//arrMessageFrom[1]
                                                    let time: Int64 = self.getUTCFormateDate()
                                                    
                                                    // print(messageFromTrim) // This is Room JID
                                                    
                                                    
                                                    /*let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                     let roomJID = XMPPJID(string: messageFromTrim)
                                                     let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                     room.activate(xmppStream)*/
                                                    //let banterName = roomName//self.banterRoomName//room.roomSubject
                                                    
                                                    //let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                    
                                                    //Now create message for this room
                                                    //Code to prepare data before send to server // text is for temp
                                                    var isJoined: String = "no"
                                                    var isAdmin: String = "no"
                                                    if(isBanterOwner || isJoiningBanterRoom)
                                                    {
                                                        isJoined = "yes"
                                                        
                                                    }
                                                    if(isBanterOwner)
                                                    {
                                                        isAdmin = "yes"
                                                        
                                                    }
                                                    //self.isJoiningBanterRoom = false
                                                    if(!recMessageContent.isEmpty)
                                                    {
                                                        self.prepareMessageForServerIn(messageFromTrim, messageContent: recMessageContent, messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: recBanterNickName, banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdmin, supportedTeam: supportTeam, opponentTeam: opponentTeam, mySupportTeam : supportTeam,fansCount:1)
                                                    }
                                                    
                                                    if(isJoiningBanterRoom)
                                                    {
                                                        //DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                        let uuid = UUID().uuidString
                                                        let messageId = uuid
                                                        let time2: Int64 = self.getUTCFormateDate()
                                                        let username: String = UserDefaults.standard.string(forKey: "userJID")!
                                                        let arrUserName = username.components(separatedBy: "@")
                                                        let objUserNameTrim = arrUserName[0]
                                                        let buser = objUserNameTrim
                                                        self.sendMessageToServer(messageFromTrim as AnyObject as! String, messageContent: buser + " joined.", messageType: "header", messageTime: time2, messageId: messageId, roomType: chatType, messageSubType: "roomuseradd", mySupportTeam: mySupportedTeam,JoindUserName: username)
                                                        //}
                                                        
                                                        
                                                    }
                                                    
                                                    
                                                    //, banterRoomLogo: String = ""
                                                    let notificationName = Notification.Name("MessageReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    if(isOnBantersView == true)
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if(isOnChatsView == true)
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    
                                                    isBanterOwner = false
                                                    isJoiningBanterRoom = false
                                                    
                                                    /*if(arrDataTeams.count > 0)
                                                     {
                                                     for record in arrDataTeams
                                                     {
                                                     
                                                     }
                                                     }*/
                                                    if(chatType == "banter")
                                                    {
                                                        let notificationName = Notification.Name("_BanterRoomCreated")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if(chatType == "group")
                                                    {
                                                        let notificationName = Notification.Name("_GroupChatCreated")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    
                                                }
                                                else if(chatType == "group"){
                                                    let uuid = UUID().uuidString
                                                    let messageId = uuid
                                                    let time2: Int64 = self.getUTCFormateDate()
                                                    let inviteUser: String = roomDetailsDict.value(forKey: "username") as! String + JIDPostfix
                                                    if(isFromBanterDeepLink){
                                                        isFromBanterDeepLink = false
                                                        self.sendMessageToServer(banterId as AnyObject as! String, messageContent: roomDetailsDict.value(forKey: "username") as! String  + " has joined via Invite Link", messageType: "header", messageTime: time2, messageId: messageId, roomType: "group", messageSubType: "roomuseradd", mySupportTeam: 0, JoindUserName: inviteUser)
                                                    }
                                                    else{
                                                        self.sendMessageToServer(banterId as AnyObject as! String, messageContent: roomDetailsDict.value(forKey: "username") as! String  + " has joined.", messageType: "header", messageTime: time2, messageId: messageId, roomType: "group", messageSubType: "roomuseradd", mySupportTeam: 0, JoindUserName: inviteUser)
                                                    }
                                                    
                                                    
                                                    
                                                }
                                                //insentive for chatType == "banter"
                                                if(chatType == "banter")
                                                {
                                                    let availablecoins = roomDetailsDict.value(forKey: "availablecoins") as! Int
                                                    
                                                    let totalcoins = roomDetailsDict.value(forKey: "totalcoins") as! Int
                                                    
                                                    
                                                    let isjoinbantercoins = roomDetailsDict.value(forKey: "isjoinbantercoins") as! Bool
                                                    AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
                                                    
                                                    if(isjoinbantercoins){
                                                        // self.sendMessageToServer(banterId as AnyObject as! String, messageContent: adminusername  + " has more coins.", messageType: "header", messageTime: time2, messageId: messageId, roomType: "group", messageSubType: "roomuseradd", mySupportTeam: 0, JoindUserName: inviteUser)
                                                        let adminusername = roomDetailsDict.value(forKey: "adminusername") as! String + JIDPostfix
                                                        let coinsreceived = GetvalueFromInsentiveConfigTable(Key: fcjoinbanter)
                                                        let uuid = UUID().uuidString
                                                        let messageId = uuid
                                                        let time2: Int64 = self.getUTCFormateDate()
                                                        let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                        let messageFrom = roomDetailsDict.value(forKey: "roomid") as! String
                                                        let arrMessageFrom = messageFrom.components(separatedBy: "/")
                                                        let messageFromTrim = arrMessageFrom[0]
                                                        let admintotalcoin = roomDetailsDict.value(forKey: "admintotalcoins") as! Int
                                                        
                                                        let adminAvailablecoin = roomDetailsDict.value(forKey: "adminavailablecoins") as! Int
                                                        self.sendMessageToServer(messageFromTrim as AnyObject as! String, messageContent: "Hurray!! \nYour Banter Room manager won \(GetvalueFromInsentiveConfigTable(Key: fcjoinbanter)) FanCoins.\nTap to learn more.", messageType: "header", messageTime: time2, messageId: messageId, roomType: chatType, messageSubType: "coinsreceived", mySupportTeam: 0,roomid: messageFromTrim, JoindUserName: adminusername, admintotalcoin:Int64(admintotalcoin), adminAvailablecoin:Int64(adminAvailablecoin), coinsreceived:coinsreceived as! Int)
                                                    }
                                                    
                                                }
                                                
                                                //Send notification of room created
                                                
                                            }
                                            else if(Cmd == "deletebanterroomdetails")
                                            {
                                              /*  // print("deletebanterroomdetails")
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                // print(response)
                                                let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                let roomid = roomDetailsDict.value(forKey: "roomid")
                                                
                                                if(roomid != nil)
                                                {
                                                    var strName1: String = ""
                                                    _ = arrBanterDeleteLocal.filter({ (text) -> Bool in
                                                        let tmp: NSDictionary = text as! NSDictionary
                                                        let val: String = tmp.value(forKey: "roomJID") as! String
                                                        let val2: String = roomid as! String
                                                        
                                                        
                                                        if(val.contains(val2))
                                                        {
                                                            strName1 = tmp.value(forKey: "roomJID") as! String
                                                            //print(ind)
                                                            //tempPoneContacts.removeObject(at: Int(ind))
                                                            
                                                            
                                                            //return true
                                                        }
                                                        
                                                        // }
                                                        
                                                        
                                                        return false
                                                    })
                                                    if(!strName1.isEmpty)
                                                    {
                                                        let uuid = UUID().uuidString
                                                        let messageId = uuid
                                                        let time: Int64 = self.getUTCFormateDate()
                                                        
                                                        let username: String = UserDefaults.standard.string(forKey: "registerusername")!
                                                        if(curRoomType == "banter"){
                                                            sendMessageToServer(roomid as! String, messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "roomuserleft")
                                                        }
                                                        else if(curRoomType == "group"){
                                                            sendMessageToServer(roomid as! String, messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "roomuserleft")
                                                        }
                                                        
                                                        
                                                        //Finally leave user from room
                                                        /*let roomJID = XMPPJID(string: roomid as! String)
                                                         let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                         
                                                         let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                         
                                                         room.activate(self.xmppStream)
                                                         
                                                         room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                         //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                         
                                                         room.leave()*/
                                                        
                                                        
                                                        arrBanterDeleteLocal.remove(strName1)
                                                        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                        if localArrAllChats != nil
                                                        {
                                                            //Code to parse json data
                                                            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                do {
                                                                    self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                    
                                                                } catch let error as NSError {
                                                                    print(error)
                                                                }
                                                            }
                                                        }
                                                        
                                                        
                                                        for tmpAllUserChats in self.arrAllChats
                                                        {
                                                            let tmpSingleUserChat: String = tmpAllUserChats.key
                                                            
                                                            if(tmpSingleUserChat == strName1)
                                                            {
                                                                
                                                                //var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                                
                                                                
                                                                self.arrAllChats.removeValue(forKey: tmpAllUserChats.key)
                                                                
                                                                break
                                                                
                                                                //self.arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                                                                
                                                                
                                                            }
                                                            
                                                        }
                                                        
                                                        //Save array to local temp
                                                        do {
                                                            if(self.arrAllChats.count > 0)
                                                            {
                                                                let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.arrAllChats, options: .prettyPrinted)
                                                                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                                                UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                                                UserDefaults.standard.synchronize()
                                                            }
                                                            else{
                                                                UserDefaults.standard.setValue(nil, forKey: "arrAllChats")
                                                                UserDefaults.standard.synchronize()
                                                            }
                                                        } catch {
                                                            // print(error.localizedDescription)
                                                        }
                                                        if(isOnBantersView == true)
                                                        {
                                                            //Post notification if user is on chats window and received any message
                                                            let notificationName = Notification.Name("RefreshBantersView")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                        }
                                                        if( isOnChatsView  == true)
                                                        {
                                                            //Post notification if user is on chats window and received any message
                                                            let notificationName = Notification.Name("RefreshChatsView")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                        }
                                                        
                                                    }
                                                    else{
                                                        //New code to get all joined users
                                                        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                        if localArrAllChats != nil
                                                        {
                                                            //Code to parse json data
                                                            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                do {
                                                                    self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                    
                                                                } catch let error as NSError {
                                                                    // print(error)
                                                                }
                                                            }
                                                        }
                                                        
                                                        
                                                        for tmpAllUserChats in self.arrAllChats
                                                        {
                                                            let tmpSingleUserChat: String = tmpAllUserChats.key
                                                            
                                                            if(tmpSingleUserChat == (roomid as! String))
                                                            {
                                                                var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                                tmpArrChatDetails["isJoined"] = "no" as AnyObject
                                                                
                                                                self.arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                                                                
                                                                
                                                            }
                                                            
                                                        }
                                                        
                                                        //Save array to local temp
                                                        do {
                                                            if(self.arrAllChats.count > 0)
                                                            {
                                                                let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.arrAllChats, options: .prettyPrinted)
                                                                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                                                UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                                                UserDefaults.standard.synchronize()
                                                            }
                                                        } catch {
                                                            // print(error.localizedDescription)
                                                        }
                                                        //End
                                                        //End
                                                        
                                                        //Send message to all users that I am left
                                                        //DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                                                        let uuid = UUID().uuidString
                                                        let messageId = uuid
                                                        let time: Int64 = self.getUTCFormateDate()
                                                        
                                                        let username: String = UserDefaults.standard.string(forKey: "registerusername")!
                                                        if(curRoomType == "banter"){
                                                            self.sendMessageToServer(roomid as! String, messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "roomuserleft")
                                                        }
                                                        else  if(curRoomType == "group"){
                                                            self.sendMessageToServer(roomid as! String, messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "roomuserleft")
                                                        }
                                                        //}
                                                        
                                                        
                                                        //Finally leave user from room
                                                        /*let roomJID = XMPPJID(string: roomid as! String)
                                                         let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                         
                                                         let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                         
                                                         room.activate(self.xmppStream)
                                                         
                                                         room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                         //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                         
                                                         room.leave()*/
                                                        
                                                    }
                                                    
                                                }*/
                                            }
                                            else if(Cmd == "deletebanterroom")
                                            {
                                                /*let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //print(response)
                                                let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                let roomid = roomDetailsDict.value(forKey: "roomid")
                                                
                                                _ = db.query(sql: " Delete from blockeduser  WHERE roomId = '\(roomid as! String)'")
                                                if(roomid != nil)
                                                {
                                                    var strName1: String = ""
                                                    _ = arrBanterDeleteLocal.filter({ (text) -> Bool in
                                                        let tmp: NSDictionary = text as! NSDictionary
                                                        let val: String = tmp.value(forKey: "roomJID") as! String
                                                        let val2: String = roomid as! String
                                                        
                                                        
                                                        if(val.contains(val2))
                                                        {
                                                            strName1 = tmp.value(forKey: "roomJID") as! String
                                                            //print(ind)
                                                            //tempPoneContacts.removeObject(at: Int(ind))
                                                            
                                                            
                                                            //return true
                                                        }
                                                        
                                                        // }
                                                        
                                                        
                                                        return false
                                                    })
                                                    if(!strName1.isEmpty)
                                                    {
                                                        let uuid = UUID().uuidString
                                                        let messageId = uuid
                                                        let time: Int64 = self.getUTCFormateDate()
                                                        let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                        if(curRoomType == "banter"){
                                                            sendMessageToServer(roomid as! String, messageContent: "Banter Room closed.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "deletegroup")
                                                            
                                                            
                                                        }
                                                        else if(curRoomType == "banter"){
                                                            sendMessageToServer(roomid as! String, messageContent: "Banter Room closed.", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "deletegroup")
                                                            
                                                        }
                                                        let notificationName = Notification.Name("closeBanterFromServer")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                        //Save banter status
                                                        //print(self.toName)
                                                        
                                                        //End
                                                        
                                                        //Finally leave user from room
                                                        /* let roomJID = XMPPJID(string: roomid as! String)
                                                         let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                         
                                                         let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                         
                                                         room.activate(self.xmppStream)
                                                         
                                                         room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                         //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                         
                                                         room.leave()*/
                                                        arrBanterDeleteLocal.remove(strName1)
                                                        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                        if localArrAllChats != nil
                                                        {
                                                            //Code to parse json data
                                                            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                do {
                                                                    self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                    
                                                                } catch let error as NSError {
                                                                    //print(error)
                                                                }
                                                            }
                                                        }
                                                        
                                                        
                                                        for tmpAllUserChats in self.arrAllChats
                                                        {
                                                            let tmpSingleUserChat: String = tmpAllUserChats.key
                                                            
                                                            if(tmpSingleUserChat == strName1)
                                                            {
                                                                
                                                                //var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                                
                                                                
                                                                self.arrAllChats.removeValue(forKey: tmpAllUserChats.key)
                                                                
                                                                break
                                                                
                                                                //self.arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                                                                
                                                                
                                                            }
                                                            
                                                        }
                                                        
                                                        //Save array to local temp
                                                        do {
                                                            if(self.arrAllChats.count > 0)
                                                            {
                                                                let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.arrAllChats, options: .prettyPrinted)
                                                                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                                                UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                                                UserDefaults.standard.synchronize()
                                                            }
                                                        } catch {
                                                            //print(error.localizedDescription)
                                                        }
                                                        
                                                        if(isOnBantersView == true)
                                                        {
                                                            //Post notification if user is on chats window and received any message
                                                            let notificationName = Notification.Name("RefreshBantersViewFromOthers")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                        }
                                                        
                                                    }
                                                    else{
                                                        let uuid = UUID().uuidString
                                                        let messageId = uuid
                                                        let time: Int64 = self.getUTCFormateDate()
                                                        let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                        if(curRoomType == "banter"){
                                                            sendMessageToServer(roomid as! String, messageContent: "Banter Room closed.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "deletegroup")
                                                        }
                                                        else if(curRoomType == "group"){
                                                            sendMessageToServer(roomid as! String, messageContent: "Group closed.", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "deletegroup")
                                                        }
                                                        //Save banter status
                                                        //print(self.toName)
                                                        //  self.prepareMessageForServerIn(roomid as! String, messageContent: "Sorry to see you delete this Banter Room.", messageType: "header", messageTime: time , messageId: messageId, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: "banter", recBanterNickName: "", banterRoomName: self.toName, banterStatus: "closed")
                                                        
                                                        //End
                                                        let notificationName = Notification.Name("RedirecttoBanters")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                        //Finally leave user from room
                                                        /*let roomJID = XMPPJID(string: roomid as! String)
                                                         let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                         
                                                         let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                         
                                                         room.activate(self.xmppStream)
                                                         
                                                         room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                         //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                         
                                                         room.leave()*/
                                                        
                                                    }
                                                    
                                                    //End
                                                    
                                                    //Send user back to banter room & refresh banter room
                                                    
                                                }*/
                                            }
                                            else if(Cmd == "getroomdetails")
                                            {
                                                //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //arrDataTeams = jsonData?.value(forKey: "responseData") as! NSArray
                                                //print(arrDataTeams)
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //print(response)
                                                let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                //Save my teams in user defaults here
                                                //Primary
                                                
                                                
                                                /*
                                                 (
                                                 {
                                                 opponentteam = 3;
                                                 roomid = "NY9r636404829420412032@conference.amazomcdn.com";
                                                 roomstatus = active;
                                                 roomtype = banter;
                                                 supportteam = 1;
                                                 }
                                                 )*/
                                                
                                                
                                                //These line will be shift in IQ
                                                let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                
                                                let chatType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                
                                                let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                let supportteam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                
                                                let opponentteam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                
                                                if(chatType == "banter")
                                                {
                                                    var recMessageContent: String = ""
                                                    
                                                    if(isBanterOwner)
                                                    {
                                                        
                                                        recMessageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                        
                                                    }
                                                    else if (self.isJoiningBanterRoom == true)
                                                    {
                                                        //self.isJoiningBanterRoom = false
                                                        recMessageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                        //isBanterOwner = true
                                                    }
                                                    else
                                                    {
                                                        if(chatType == "group")
                                                        {
                                                            recMessageContent = "You have joined this group."
                                                        }
                                                        else
                                                        {
                                                            recMessageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                        }
                                                        
                                                        
                                                    }
                                                    //let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    //let messageId = message?.attributeStringValue(forName: "id")
                                                    
                                                    let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                    let messageFrom = roomDetailsDict.value(forKey: "roomid") as! String
                                                    let arrMessageFrom = messageFrom.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom[0]
                                                    let recBanterNickName = ""//arrMessageFrom[1]
                                                    let time: Int64 = self.getUTCFormateDate()
                                                    
                                                    // print(messageFromTrim) // This is Room JID
                                                    
                                                    
                                                    /*let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                     let roomJID = XMPPJID(string: messageFromTrim)
                                                     let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                     room.activate(xmppStream)*/
                                                    //let banterName = roomName//self.banterRoomName//room.roomSubject
                                                    
                                                    //let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                    
                                                    //Now create message for this room
                                                    //Code to prepare data before send to server // text is for temp
                                                    
                                                    var isJoined: String = "no"
                                                    var isAdmin: String = "no"
                                                    if(isBanterOwner || isJoiningBanterRoom)
                                                    {
                                                        isJoined = "yes"
                                                        
                                                    }
                                                    
                                                    if(isBanterOwner)
                                                    {
                                                        isAdmin = "yes"
                                                    }
                                                    
                                                    self.isJoiningBanterRoom = false
                                                    
                                                    
                                                    self.prepareMessageForServerIn(messageFromTrim, messageContent: recMessageContent, messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: recBanterNickName, banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdmin, supportedTeam: supportteam, opponentTeam: opponentteam)
                                                    //, banterRoomLogo: String = ""
                                                    
                                                    
                                                    
                                                    let notificationName = Notification.Name("MessageReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    if(isOnBantersView == true)
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if(isOnChatsView == true)
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    
                                                    let notificationName2 = Notification.Name("_BanterRoomCreated")
                                                    NotificationCenter.default.post(name: notificationName2, object: nil)
                                                    
                                                    /*if(arrDataTeams.count > 0)
                                                     {
                                                     for record in arrDataTeams
                                                     {
                                                     
                                                     }
                                                     }*/
                                                }
                                                else if(chatType == "group")
                                                {
                                                    //joinRoomOnly(with: roomId, delegate:self)
                                                    
                                                    let recMessageContent: String =  "You are now ready to post messages, pictures, videos in this group."
                                                    
                                                    
                                                    
                                                    let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                    let messageFrom = roomDetailsDict.value(forKey: "roomid") as! String
                                                    let arrMessageFrom = messageFrom.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom[0]
                                                    let recBanterNickName = ""//arrMessageFrom[1]
                                                    let time: Int64 = self.getUTCFormateDate()
                                                    let groupAvatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                    
                                                    let isJoined: String = "yes"
                                                    let isAdmin: String = "no"
                                                    
                                                    joinRoomOnlyforGroup(with: messageFrom, delegate: self, joindate: UserDefaults.standard.double(forKey: messageFrom))
                                                    
                                                    self.prepareMessageForServerIn(messageFromTrim, messageContent: recMessageContent, messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: recBanterNickName, banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdmin, supportedTeam: supportteam, opponentTeam: opponentteam,roomavatar:groupAvatar)
                                                    
                                                    
                                                    
                                                    let notificationName = Notification.Name("MessageReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    let notificationName2 = Notification.Name("RefreshChatsView")
                                                    NotificationCenter.default.post(name: notificationName2, object: nil)
                                                    
                                                    
                                                    
                                                    
                                                    
                                                    
                                                    /*
                                                     if(isOnBantersView == true)
                                                     {
                                                     //Post notification if user is on chats window and received any message
                                                     let notificationName = Notification.Name("RefreshBantersView")
                                                     NotificationCenter.default.post(name: notificationName, object: nil)
                                                     }
                                                     else if(isOnChatsView == true)
                                                     {
                                                     //Post notification if user is on chats window and received any message
                                                     let notificationName = Notification.Name("RefreshChatsView")
                                                     NotificationCenter.default.post(name: notificationName, object: nil)
                                                     }
                                                     
                                                     let notificationName2 = Notification.Name("_BanterRoomCreated")
                                                     NotificationCenter.default.post(name: notificationName2, object: nil)
                                                     */
                                                }
                                                
                                                
                                                //Send notification of room created
                                                /*if(chatType == "banter")
                                                 {
                                                 
                                                 }
                                                 else if(chatType == "group")
                                                 {
                                                 let notificationName = Notification.Name("_GroupChatCreated")
                                                 NotificationCenter.default.post(name: notificationName, object: nil)
                                                 }*/
                                                
                                            }
                                            else if(Cmd == "getuserrooms")
                                            {/*
                                                /* DispatchQueue.background(background: {
                                                 // do something in background
                                                 }, completion:{
                                                 // when background job finished, do something in main thread
                                                 })*/
                                                
                                                //let presence = XMPPPresence(type: "available")
                                                //xmppStream!.send(presence)
                                                Clslogging.logdebug(State: "getuserrooms responce true")
                                                self.isUserOnline = true
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //print("getuserrooms:")
                                                //print(response)
                                                let roomDetails: NSDictionary = response[0] as! NSDictionary
                                                if let offlineDate = roomDetails.value(forKey: "offlineDate")
                                                {
                                                    
                                                    let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                    if(isRegistering != nil)
                                                    {
                                                        joinRoombroadcastall(joindate: "")
                                                        joinRoombroadcastinactive(joindate: "")
                                                        for res in response
                                                        {
                                                            let roomDetailsDict: NSDictionary = res as! NSDictionary
                                                            lastOfflineDate = offlineDate as! String
                                                            let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                            let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                            let isAdmin = roomDetailsDict.value(forKey: "isAdmin") as! Bool
                                                            let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                            let roomType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                            let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                            
                                                            let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                            let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                            
                                                            let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                            
                                                            let userCount = roomDetailsDict.value(forKey: "userCount") as! Int64
                                                            
                                                            let useravatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                            let lastactivitytime: Int64? = Int64(roomDetailsDict.value(forKey: "lastactivitytime") as! String)
                                                            var isAdminS: String = ""
                                                            
                                                            if(roomStatus == "active" && userStatus == "active")
                                                            {
                                                                let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                
                                                                //Send presence to room
                                                                /*let presence = XMPPPresence()
                                                                 presence?.addAttribute(withName: "to", stringValue: roomId + "/" + myJID!)
                                                                 presence?.addAttribute(withName: "from", stringValue: myJID!)
                                                                 let x: XMLElement = XMLElement.element(withName: "x") as! XMLElement
                                                                 x.addAttribute(withName: "xmlns", stringValue: "http://jabber.org/protocol/muc")
                                                                 
                                                                 presence?.addChild(x)
                                                                 self.xmppStream!.send(presence)
                                                                 
                                                                 xmppRoster.acceptPresenceSubscriptionRequest(from: xmppStream?.myJID, andAddToRoster: true)*/
                                                                
                                                                let roomJID = XMPPJID(string: roomId)
                                                                let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                
                                                                let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                                
                                                                room.activate(xmppStream!)
                                                                
                                                                room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                
                                                                
                                                                
                                                                /*let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                                 
                                                                 let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                                 
                                                                 
                                                                 //let dt = NSDate().timeIntervalSince1970 * 1000
                                                                 //print(dt.description)
                                                                 print(myMilliseconds.dateFull.description)
                                                                 let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                 history.addAttribute(withName: "since", stringValue: myMilliseconds.dateFull.description)*/
                                                                
                                                                let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                
                                                                // room.join(usingNickname: myJID!, history: history)
                                                                if(!room.isJoined){
                                                                    room.join(usingNickname: myJID!, history: history)
                                                                    
                                                                    
                                                                }
                                                                
                                                                
                                                                
                                                                //History was clear so first send a message to user that you were joined this group
                                                                /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                                 if(banterName == nil)
                                                                 {
                                                                 banterName = ""
                                                                 }*/
                                                                let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                                if(isRegistering != nil)
                                                                {
                                                                    if(roomType == "banter" || roomType == "group" || roomType == "teambr")
                                                                    {
                                                                        //Now create message for this room
                                                                        //Code to prepare data before send to server // text is for temp
                                                                        var messageContent = ""
                                                                        if (isAdmin)
                                                                        {
                                                                            isAdminS = "yes"
                                                                            
                                                                            if(roomType == "banter" ){
                                                                                messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                            }
                                                                            else if(roomType == "group" ){
                                                                                messageContent = "You are now ready to post messages, pictures, videos in this group."
                                                                            }
                                                                            else if(roomType == "teambr" ){
                                                                                messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                            }
                                                                            
                                                                        }
                                                                        else
                                                                        {
                                                                            isAdminS = "no"
                                                                            if(roomType == "banter" ){
                                                                                messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                            }
                                                                            else if(roomType == "group" ){
                                                                                messageContent = "You are now ready to post messages, pictures, videos in this group."
                                                                            }
                                                                            else if(roomType == "teambr" ){
                                                                                                                                                           messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                                                                                                       }
                                                                        }
                                                                        var isJoined: String = "no"
                                                                        if(userStatus == "active")
                                                                        {
                                                                            isJoined = "yes"
                                                                        }
                                                                        
                                                                        //let mili: Int64 = self.getUTCFormateDate()
                                                                        self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers,fansCount:userCount,roomavatar:useravatar)
                                                                    }
                                                                }
                                                                
                                                            }
                                                            else if(roomStatus == "active" && userStatus == "blocked")//if user blocked
                                                            {
                                                                let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                //let mili: Int64 = self.getUTCFormateDate()
                                                                let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                if localArrAllChats != nil
                                                                {
                                                                    //Code to parse json data
                                                                    if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                        do {
                                                                            arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                            
                                                                        } catch let error as NSError {
                                                                            //print(error)
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                if let dt = self.arrAllChats[roomId]
                                                                {
                                                                    let isjoined: String = dt.value(forKey: "isJoined") as! String
                                                                    if(isjoined != "blocked"){
                                                                        self.prepareMessageForServerIn(roomId, messageContent: "Manager Room has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "blocked", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers,fansCount:userCount,roomavatar:useravatar)
                                                                    }
                                                                }
                                                                else{
                                                                    self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "blocked", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers,fansCount:userCount,roomavatar:useravatar)
                                                                }
                                                                
                                                                
                                                            }
                                                        }
                                                        
                                                        //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                        //UserDefaults.standard.synchronize()
                                                        
                                                    }
                                                    else
                                                    {
                                                        self.lastOfflineDate = offlineDate as! String
                                                        //print(offlineDate)
                                                        let mili: Double = (offlineDate as! NSString).doubleValue
                                                        //print(mili)
                                                        
                                                        let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                        
                                                        //print(myMilliseconds.dateFull)
                                                        let array = Last_activity_date.rows(filter:"activityType = 'lastoflinedate'") as! [Last_activity_date]
                                                        if(array.count != 0){
                                                            let time: Int64 = myMilliseconds
                                                            _ = self.db.execute(sql:" UPDATE last_activity_date SET activity_date = \(time) WHERE activityType = 'lastoflinedate'")
                                                        }
                                                        else{
                                                            let activity = Last_activity_date()
                                                            activity.activityType = "lastoflinedate"
                                                            let time: Int64 = myMilliseconds
                                                            activity.activity_date = time
                                                            activity.save()
                                                        }
                                                        let calendar = NSCalendar.autoupdatingCurrent
                                                        let timeStampTmp = calendar.date(byAdding: .minute, value: -3, to: myMilliseconds.dateFull)
                                                        // let timeStampTmp = calendar.date(byAdding: .minute, value: -1, to: myMilliseconds.dateFull)
                                                        //print(timeStampTmp)
                                                        let formatter = DateFormatter()
                                                        formatter.dateFormat = "yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"
                                                        //formatter.dateStyle = DateFormatter.Style.full
                                                        //formatter.timeStyle = DateFormatter.Style.long
                                                        
                                                        formatter.timeZone = NSTimeZone(name: "UTC") as TimeZone?//TimeZone.current
                                                        let timeStamp = formatter.string(from: timeStampTmp as! Date)
                                                        joinRoombroadcastinactive(joindate: offlineDate as! String)
                                                        joinRoombroadcastall(joindate: offlineDate as! String)
                                                        
                                                        if(response.count == 0){
                                                            let presence = XMPPPresence(type: "available")
                                                            self.xmppStream!.send(presence)
                                                            self.isUserOnline = true
                                                            self.runTimer()
                                                        }
                                                        
                                                        // print(timeStamp)
                                                        for i in 0...response.count-1 {
                                                            // for res in response
                                                            //{
                                                            //let roomDetailsDict: NSDictionary = res as! NSDictionary
                                                            let roomDetailsDict: NSDictionary = response[i] as! NSDictionary
                                                            lastOfflineDate = offlineDate as! String
                                                            let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                            let useravatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                            let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                            
                                                            let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                            let userCount = roomDetailsDict.value(forKey: "userCount") as! Int64
                                                            let lastactivitytime: Int64? = Int64(roomDetailsDict.value(forKey: "lastactivitytime") as! String)
                                                            if(roomStatus == "active" && userStatus == "active")
                                                            {
                                                                let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                
                                                                
                                                                let roomJID = XMPPJID(string: roomId)
                                                                let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                
                                                                let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                                
                                                                room.activate(xmppStream!)
                                                                
                                                                room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                
                                                                
                                                                /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                 history.addAttribute(withName: "maxchars", stringValue: "0")*/
                                                                
                                                                let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                history.addAttribute(withName: "since", stringValue: timeStamp)
                                                                // history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                // room.join(usingNickname: myJID!, history: history)
                                                                if(!room.isJoined){
                                                                    //   DispatchQueue.main.asyncAfter(deadline: .now() +  1.0) {
                                                                    room.join(usingNickname: myJID!, history: history)
                                                                    // }
                                                                    
                                                                }
                                                                let isfancountupdated: String? = UserDefaults.standard.string(forKey: "isfancountupdated")
                                                                if(isfancountupdated == nil){
                                                                    self.fancountupdate(roomId, fancount: userCount)
                                                                }
                                                            }
                                                            else if(roomStatus == "active" && userStatus == "blocked")//if user blocked
                                                            {
                                                                let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                //let mili: Int64 = self.getUTCFormateDate()
                                                                let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                if localArrAllChats != nil
                                                                {
                                                                    //Code to parse json data
                                                                    if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                        do {
                                                                            arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                            
                                                                        } catch let error as NSError {
                                                                            // print(error)
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                if let dt = self.arrAllChats[roomId]
                                                                {
                                                                    let isjoined: String = dt.value(forKey: "isJoined") as! String
                                                                    
                                                                    if(userStatus == "blocked" && isjoined == "yes"){
                                                                        var tmpArrChatDetails = [String : AnyObject]()
                                                                        
                                                                        tmpArrChatDetails = dt as! [String : AnyObject]
                                                                        let chatType = dt.value(forKey: "chatType") as! String
                                                                        
                                                                        if(chatType == "group"){
                                                                            self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: dt.value(forKey: "chatType") as! String , banterRoomName: dt.value(forKey: "userName") as! String , isJoined: "blocked", isAdmin: dt.value(forKey: "isAdmin") as! String,fansCount:userCount,roomavatar:useravatar)
                                                                        }
                                                                        else{
                                                                            self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: dt.value(forKey: "chatType") as! String , banterRoomName: dt.value(forKey: "userName") as! String , isJoined: "blocked", isAdmin: dt.value(forKey: "isAdmin") as! String, supportedTeam: dt.value(forKey: "supportedTeam") as! Int64, opponentTeam: dt.value(forKey: "opponentTeam") as! Int64, mySupportTeam: dt.value(forKey: "mySupportedTeam") as! Int64,fansCount:userCount,roomavatar:useravatar)
                                                                        }
                                                                        
                                                                    }
                                                                }
                                                                
                                                                
                                                                
                                                            }
                                                            if(i == response.count - 1){
                                                                let presence = XMPPPresence(type: "available")
                                                                self.xmppStream!.send(presence)
                                                                self.isUserOnline = true
                                                                self.runTimer()
                                                            }
                                                            if(roomStatus == "active" && userStatus == "inactive")
                                                            {
                                                                let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                if localArrAllChats != nil
                                                                {
                                                                    //Code to parse json data
                                                                    if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                        do {
                                                                            arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                            
                                                                        } catch let error as NSError {
                                                                            // print(error)
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                if let dt = self.arrAllChats[roomId]
                                                                {
                                                                }
                                                                else{
                                                                    
                                                                    
                                                                    let roomJID = XMPPJID(string: roomId)
                                                                    let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                    
                                                                    let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                                    
                                                                    room.activate(xmppStream!)
                                                                    
                                                                    room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                    let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                    
                                                                    
                                                                    //let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                                    
                                                                    //let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                                    
                                                                    
                                                                    //let dt = NSDate().timeIntervalSince1970 * 1000
                                                                    
                                                                    //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                    //history.addAttribute(withName: "since", stringValue: lastOfflineDate)
                                                                    
                                                                    let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                    history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                    /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                     history.addAttribute(withName: "since", stringValue: lastOfflineDate)*/
                                                                    
                                                                    //room.join(usingNickname: myJID, history: history)
                                                                    
                                                                    /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                                     if(banterName == nil)
                                                                     {
                                                                     banterName = ""
                                                                     }*/
                                                                    let roomDetailsDict: NSDictionary = response[i] as! NSDictionary
                                                                    
                                                                    //  let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                                    let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                                    let isAdmin = roomDetailsDict.value(forKey: "isAdmin") as! Bool
                                                                    // let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                                    let roomType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                                    let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                                    let useravatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                                    //print(banterName)
                                                                    let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                                    let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                                    
                                                                    let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                                    var isAdminS: String = ""
                                                                    
                                                                    
                                                                    let userCount = roomDetailsDict.value(forKey: "userCount") as! Int64
                                                                    if(roomType == "banter")
                                                                    {
                                                                        var messageContent = ""
                                                                        if (isAdmin)
                                                                        {
                                                                            isAdminS = "yes"
                                                                            messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                        }
                                                                        else
                                                                        {
                                                                            isAdminS = "no"
                                                                            messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                        }
                                                                        
                                                                       // let mili: Int64 = self.getUTCFormateDate()
                                                                        self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isAdminS, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers,fansCount:userCount,roomavatar:useravatar)
                                                                    }
                                                                    else   if(roomType == "teambr")
                                                                                                                                      {
                                                                                                                                          var messageContent = ""
                                                                                                                                          if (isAdmin)
                                                                                                                                          {
                                                                                                                                              isAdminS = "yes"
                                                                                                                                              messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                                                                                          }
                                                                                                                                          else
                                                                                                                                          {
                                                                                                                                              isAdminS = "no"
                                                                                                                                              messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                                                                                          }
                                                                                                                                          
                                                                                                                                         // let mili: Int64 = self.getUTCFormateDate()
                                                                                                                                          self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isAdminS, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers,fansCount:userCount,roomavatar:useravatar)
                                                                                                                                      }
                                                                    
                                                                    //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                                    //UserDefaults.standard.synchronize()
                                                                    // }
                                                                }
                                                                
                                                            }
                                                        }
                                                        //New code to get all joined users
                                                        /*for tmpAllUserChats in arrAllChats
                                                         {
                                                         let tmpSingleUserChat: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                         let isUserJoined = tmpSingleUserChat["isJoined"] as! Bool
                                                         if(isUserJoined)
                                                         {
                                                         print(tmpAllUserChats.key)
                                                         self.joinRoomOnly(with: tmpAllUserChats.key, delegate: self)
                                                         }
                                                         
                                                         }
                                                         */
                                                    }
                                                    
                                                    
                                                    
                                                    
                                                    
                                                    
                                                }
                                                else
                                                {
                                                    // UserDefaults.standard.setValue(true, forKey: "banterSequence")
                                                    // UserDefaults.standard.synchronize()
                                                    let Loginjid: String? = UserDefaults.standard.string(forKey: "userJID") as!  String
                                                    joinRoombroadcastall(joindate: "")
                                                    joinRoombroadcastinactive(joindate: "")
                                                    for res in response
                                                    {
                                                        let roomDetailsDict: NSDictionary = res as! NSDictionary
                                                        
                                                        let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                        let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                        let isAdmin = roomDetailsDict.value(forKey: "isAdmin") as! Bool
                                                        let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                        let roomType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                        let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                        let useravatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                        //print(banterName)
                                                        let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                        let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                        
                                                        let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                        var isAdminS: String = ""
                                                        
                                                        
                                                        let userCount = roomDetailsDict.value(forKey: "userCount") as! Int64
                                                        let lastactivitytime: Int64? = Int64(roomDetailsDict.value(forKey: "lastactivitytime") as! String)
                                                        var strMyTeam: Int64 = 0
                                                        _ = banterUsers.filter({ (text) -> Bool in
                                                            let tmp: NSDictionary = text as! NSDictionary
                                                            let val: String = tmp.value(forKey: "username") as! String
                                                            let val2: String = Loginjid!
                                                            
                                                            
                                                            if(val.contains(val2))
                                                            {
                                                                let ind = tmp.value(forKey: "supportteam") as! Int64
                                                                //print(ind)
                                                                //tempPoneContacts.removeObject(at: Int(ind))
                                                                if(ind == 0 || ind == nil)
                                                                {
                                                                    strMyTeam = 0
                                                                }
                                                                else{
                                                                    strMyTeam = ind as Int64
                                                                }
                                                                
                                                                return true
                                                            }
                                                            
                                                            // }
                                                            
                                                            
                                                            return false
                                                        })
                                                        
                                                        
                                                        if(roomStatus == "active" && userStatus == "active")
                                                        {
                                                            let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                            //Send presence to room
                                                            /*let presence = XMPPPresence()
                                                             presence?.addAttribute(withName: "to", stringValue: roomId + "/" + myJID!)
                                                             //presence?.addAttribute(withName: "from", stringValue: "+919826615203@amazomcdn.com")
                                                             let x: XMLElement = XMLElement.element(withName: "x") as! XMLElement
                                                             x.addAttribute(withName: "xmlns", stringValue: "http://jabber.org/protocol/muc")
                                                             
                                                             presence?.addChild(x)
                                                             self.xmppStream!.send(presence)*/
                                                            
                                                            let roomJID = XMPPJID(string: roomId)
                                                            let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                            
                                                            let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                            
                                                            room.activate(xmppStream!)
                                                            
                                                            room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                            
                                                            
                                                            
                                                            //let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                            
                                                            //let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                            
                                                            
                                                            //let dt = NSDate().timeIntervalSince1970 * 1000
                                                            
                                                            let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                            history.addAttribute(withName: "maxchars", stringValue: "0")
                                                            
                                                            //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                            //history.addAttribute(withName: "maxchars", stringValue: "0")
                                                            
                                                            //room.join(usingNickname: myJID!, history: history)
                                                            // print(2222222222)
                                                            if(!room.isJoined){
                                                                room.join(usingNickname: myJID!, history: history)
                                                                
                                                                
                                                            }
                                                            
                                                            //History was clear so first send a message to user that you were joined this group
                                                            /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                             if(banterName == nil)
                                                             {
                                                             banterName = ""
                                                             }*/
                                                            let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                            if(isRegistering != nil)
                                                            {
                                                                if(roomType == "banter" || roomType == "group" || roomType == "teambr")
                                                                {
                                                                    //Now create message for this room
                                                                    //Code to prepare data before send to server // text is for temp
                                                                    var messageContent = ""
                                                                    if (isAdmin)
                                                                    {
                                                                        isAdminS = "yes"
                                                                        if(roomType == "banter" ){
                                                                            messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                        }
                                                                        else if(roomType == "group" ){
                                                                            messageContent = "You are now ready to post messages, pictures, videos in this group."
                                                                        }
                                                                        else if(roomType == "teambr" ){
                                                                            messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                        }
                                                                        
                                                                    }
                                                                    else
                                                                    {
                                                                        isAdminS = "no"
                                                                        if(roomType == "banter" ){
                                                                            messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                        }
                                                                        else if(roomType == "group" ){
                                                                            messageContent = "You are now ready to post messages, pictures, videos in this group."
                                                                        }
                                                                        else if(roomType == "teambr" ){
                                                                            messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    var isJoined: String = "no"
                                                                    if(userStatus == "active")
                                                                    {
                                                                        isJoined = "yes"
                                                                    }
                                                                    
                                                                    //let mili: Int64 = self.getUTCFormateDate()
                                                                    self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers, mySupportTeam: strMyTeam,fansCount:userCount,roomavatar:useravatar)
                                                                }
                                                                
                                                                //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                                //UserDefaults.standard.synchronize()
                                                            }
                                                            
                                                            
                                                            
                                                        }
                                                        else if(roomStatus == "active" && userStatus == "blocked")//if user blocked
                                                        {
                                                            let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                           // let mili: Int64 = self.getUTCFormateDate()
                                                            let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                            if localArrAllChats != nil
                                                            {
                                                                //Code to parse json data
                                                                if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                    do {
                                                                        arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                        
                                                                    } catch let error as NSError {
                                                                        //print(error)
                                                                    }
                                                                }
                                                            }
                                                            
                                                            if let dt = self.arrAllChats[roomId]
                                                            {
                                                                let isjoined: String = dt.value(forKey: "isJoined") as! String
                                                                if(isjoined != "blocked"){
                                                                    self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "blocked", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers, mySupportTeam: strMyTeam,fansCount:userCount,roomavatar:useravatar)
                                                                }
                                                            }
                                                            else{
                                                                self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "blocked", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers, mySupportTeam: strMyTeam,fansCount:userCount,roomavatar:useravatar)
                                                            }
                                                            
                                                            
                                                        }
                                                        else if(roomStatus == "active" && userStatus == "inactive")
                                                        {
                                                            
                                                            
                                                            let roomJID = XMPPJID(string: roomId)
                                                            let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                            
                                                            let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                            
                                                            room.activate(xmppStream!)
                                                            
                                                            room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                            let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                            
                                                            
                                                            //let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                            
                                                            //let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                            
                                                            
                                                            //let dt = NSDate().timeIntervalSince1970 * 1000
                                                            
                                                            //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                            //history.addAttribute(withName: "since", stringValue: lastOfflineDate)
                                                            
                                                            let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                            history.addAttribute(withName: "maxchars", stringValue: "0")
                                                            /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                             history.addAttribute(withName: "since", stringValue: lastOfflineDate)*/
                                                            
                                                            //room.join(usingNickname: myJID, history: history)
                                                            
                                                            /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                             if(banterName == nil)
                                                             {
                                                             banterName = ""
                                                             }*/
                                                            let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                            if(isRegistering != nil)
                                                            {
                                                                if(roomType == "banter")
                                                                {
                                                                    var messageContent = ""
                                                                    if (isAdmin)
                                                                    {
                                                                        isAdminS = "yes"
                                                                        messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                    }
                                                                    else
                                                                    {
                                                                        isAdminS = "no"
                                                                        messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                    }
                                                                    
                                                                   // let mili: Int64 = self.getUTCFormateDate()
                                                                    self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isAdminS, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers,fansCount:userCount,roomavatar:useravatar)
                                                                }
                                                                else  if(roomType == "teambr")
                                                                                                                               {
                                                                                                                                   var messageContent = ""
                                                                                                                                   if (isAdmin)
                                                                                                                                   {
                                                                                                                                       isAdminS = "yes"
                                                                                                                                       messageContent = "Start earning FanCoins by being active in Banter.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                                                                                   }
                                                                                                                                   else
                                                                                                                                   {
                                                                                                                                       isAdminS = "no"
                                                                                                                                       messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                                                                                   }
                                                                                                                                   
                                                                                                                                  // let mili: Int64 = self.getUTCFormateDate()
                                                                                                                                   self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isAdminS, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers,fansCount:userCount,roomavatar:useravatar)
                                                                                                                               }
                                                                
                                                                //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                                //UserDefaults.standard.synchronize()
                                                            }
                                                            
                                                            
                                                        }
                                                    }
                                                    
                                                    /* for res in response
                                                     {
                                                     let roomDetailsDict: NSDictionary = res as! NSDictionary
                                                     
                                                     let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                     let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                     let isAdmin = roomDetailsDict.value(forKey: "isAdmin") as! Bool
                                                     let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                     let roomType = roomDetailsDict.value(forKey: "roomtype")as! String
                                                     
                                                     let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                     let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                     
                                                     let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                     
                                                     let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                     var isAdminS: String = ""
                                                     
                                                     if(roomStatus == "active" && userStatus == "inactive")
                                                     {
                                                     
                                                     
                                                     let roomJID = XMPPJID(string: roomId)
                                                     let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                     
                                                     let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                     
                                                     room.activate(xmppStream!)
                                                     
                                                     room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                     let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                     
                                                     
                                                     //let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                     
                                                     //let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                     
                                                     
                                                     //let dt = NSDate().timeIntervalSince1970 * 1000
                                                     
                                                     //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                     //history.addAttribute(withName: "since", stringValue: lastOfflineDate)
                                                     
                                                     let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                     history.addAttribute(withName: "maxchars", stringValue: "0")
                                                     /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                     history.addAttribute(withName: "since", stringValue: lastOfflineDate)*/
                                                     
                                                     //room.join(usingNickname: myJID, history: history)
                                                     
                                                     /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                     if(banterName == nil)
                                                     {
                                                     banterName = ""
                                                     }*/
                                                     let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                     if(isRegistering != nil)
                                                     {
                                                     if(roomType == "banter")
                                                     {
                                                     var messageContent = ""
                                                     if (isAdmin)
                                                     {
                                                     isAdminS = "yes"
                                                     messageContent = "You are now ready to post the funniest banters in football."
                                                     }
                                                     else
                                                     {
                                                     isAdminS = "no"
                                                     messageContent = "You are invited to this Banter Room. You can join this Banter Room by tap on join button."
                                                     }
                                                     
                                                     let mili: Int64 = self.getUTCFormateDate()
                                                     self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: mili, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isAdminS, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers)
                                                     }
                                                     
                                                     //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                     //UserDefaults.standard.synchronize()
                                                     }
                                                     
                                                     
                                                     }
                                                     }*/
                                                    
                                                    
                                                }
                                                /*else
                                                 {
                                                 let presence = XMPPPresence(type: "available")
                                                 xmppStream!.send(presence)
                                                 }*/
                                                
                                                
                                                //print("Last Offline Date: " + lastOfflineDate)
                                                
                                                //let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                //if(isRegistering != nil)
                                                //{
                                                UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                UserDefaults.standard.synchronize()
                                                
                                                //}
                                                
                                                
                                                
                                                
                                                //New code to refresh Banters view
                                                if(isOnBantersView == true)
                                                {
                                                    //Post notification if user is on chats window and received any message
                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                
                                                let notificationName2 = Notification.Name("_isUserOnline")
                                                NotificationCenter.default.post(name: notificationName2, object: nil)
                                                let notificationName3 = Notification.Name("_isUserOnlineContacts")
                                                NotificationCenter.default.post(name: notificationName3, object: nil)
                                                let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
                                                let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
                                                let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
                                                let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
                                                NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
                                                let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
                                                NotificationCenter.default.post(name: notificationNametrivia, object: nil)
                                                let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                                                                                                                             NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
                                                if(isBanterLoaderOn == false){
                                                    // DispatchQueue.main.asyncAfter(deadline: .now() +  3.0) {
                                                    // DispatchQueue.main.async { //code }
                                                    // LoadingIndicatorView.hide()
                                                    //}
                                                    //}
                                                }
                                                UserDefaults.standard.setValue("updated", forKey: "isfancountupdated")
                                                UserDefaults.standard.synchronize()
                                                if(!iscontactsyafterterminate)    {
                                                    
                                                    let notifycontact: String? = UserDefaults.standard.string(forKey: "notifiedcontact")
                                                    if notifycontact != nil
                                                    {
                                                        let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        if(login != nil){
                                                            DispatchQueue.background(background: {
                                                                self.iscontactsyafterterminate = true
                                                                self.AddContacts()
                                                                
                                                                
                                                            }, completion:{
                                                                //self.refreshTable.endRefreshing()
                                                                //self.storyTableView?.isScrollEnabled = true
                                                            })
                                                            //self.AddContacts()
                                                        }
                                                        
                                                    }}
                                                 Clslogging.logdebug(State: "getuserrooms end")*/
                                            }
                                              
                                            else if(Cmd == "getnearbyusers")
                                            {
                                               /* let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                // print(response)
                                                
                                                fanNearByContacts = NSMutableArray()
                                                
                                                if(response.count > 0)
                                                {
                                                    let strAllContacts: String? = UserDefaults.standard.string(forKey: "allContacts")
                                                    if strAllContacts != nil
                                                    {
                                                        //Code to parse json data
                                                        if let data = strAllContacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                            do {
                                                                //appDelegate().allContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray as! NSMutableArray
                                                                let tmpAllContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                
                                                                self.allContacts = NSMutableArray()
                                                                for record in tmpAllContacts {
                                                                    self.allContacts[self.allContacts.count] = record
                                                                }
                                                                
                                                                //appDelegate().allContacts = tmpAllAppContacts as! NSMutableArray
                                                                //newChatAppContacts = appDelegate().allContacts[0] as! NSMutableArray
                                                                
                                                                let tmpAllAppContacts = self.allContacts[0] as! NSArray
                                                                
                                                                //newChatAppContacts = NSMutableArray()
                                                                
                                                                
                                                                
                                                                //newChatAppContacts[newChatAppContacts.count] = tempDict
                                                                /*let fansNearBy: NSDictionary = response[0] as! NSDictionary
                                                                 
                                                                 let fanNearbyJid = fansNearBy.value(forKey: "username") as! String
                                                                 let fanNearbyDistance = fansNearBy.value(forKey: "distance") as! String
                                                                 let fanNearbyNick = fansNearBy.value(forKey: "nickname") as! String
                                                                 */
                                                                
                                                                /*for record in tmpAllAppContacts {
                                                                 
                                                                 let appContacts: NSDictionary = record as! NSDictionary
                                                                 let appContactsJid = appContacts.value(forKey: "jid") as! String
                                                                 let appContactsName = appContacts.value(forKey: "name") as! String
                                                                 let appContactsNickName = appContacts.value(forKey: "nickname") as! String
                                                                 let appContactsMobile = appContacts.value(forKey: "mobile") as! String
                                                                 let appContactsAvatar = appContacts.value(forKey: "avatar") as! String
                                                                 let appContactsStatus = appContacts.value(forKey: "status") as! String
                                                                 
                                                                 if(fanNearbyJid == appContactsJid)
                                                                 {
                                                                 var tempDict = [String: String]()
                                                                 
                                                                 tempDict["jid"] = appContactsJid
                                                                 tempDict["name"] = appContactsName
                                                                 tempDict["nickname"] = appContactsNickName
                                                                 tempDict["mobile"] = appContactsMobile
                                                                 tempDict["avatar"] = appContactsAvatar
                                                                 tempDict["status"] = appContactsStatus
                                                                 tempDict["type"] = "button"
                                                                 
                                                                 self.fanNearByContacts[self.fanNearByContacts.count] = record
                                                                 }
                                                                 
                                                                 }*/
                                                                
                                                                for record in response {
                                                                    
                                                                    //Code to check if contact is available in local contacts
                                                                    /*let result = phoneNotSplitContactsDel.filter({ (text) -> Bool in
                                                                     let tmp: NSDictionary = text as! NSDictionary
                                                                     let val = tmp.value(forKey: "mobile")
                                                                     let val2: String = (record as! NSDictionary).value(forKey: "mobile") as! String
                                                                     let range = (val as AnyObject).range(of: val2, options: NSString.CompareOptions.caseInsensitive)
                                                                     return range.location != NSNotFound
                                                                     })*/
                                                                    let fansNearBy: NSDictionary = record as! NSDictionary
                                                                    let fanNearbyJid = fansNearBy.value(forKey: "username") as! String
                                                                    let fanNearbyDistance = fansNearBy.value(forKey: "distance") as! String
                                                                    let fanNearbyNick = fansNearBy.value(forKey: "nickname") as! String
                                                                    let avtarurl = fansNearBy.value(forKey: "avatar") as! String
                                                                    var strName: String = ""
                                                                    //var strLogo: String = ""
                                                                    var strStatus: String = ""
                                                                    var strMobile: String = ""
                                                                    _ = tmpAllAppContacts.filter({ (text) -> Bool in
                                                                        let tmp: NSDictionary = text as! NSDictionary
                                                                        let jid: String = tmp.value(forKey: "jid") as! String
                                                                        if(jid == fanNearbyJid)
                                                                        {                                                                                  strName = tmp.value(forKey: "name") as! String
                                                                            
                                                                            // strLogo = tmp.value(forKey: "avatar") as! String
                                                                            strStatus = tmp.value(forKey: "status") as! String
                                                                            strMobile = tmp.value(forKey: "mobile") as! String
                                                                            //return true
                                                                        }
                                                                        
                                                                        return false
                                                                    })
                                                                    
                                                                    if(!strName.isEmpty)
                                                                    {
                                                                        var tempDict = [String: String]()
                                                                        
                                                                        tempDict["jid"] = fanNearbyJid
                                                                        tempDict["name"] = strName
                                                                        tempDict["nickname"] = fanNearbyNick
                                                                        tempDict["mobile"] = strMobile
                                                                        tempDict["avatar"] = avtarurl//strLogo
                                                                        let status: String? = strStatus
                                                                        if status != nil
                                                                        {
                                                                            tempDict["status"] = status
                                                                        }
                                                                        else
                                                                        {
                                                                            tempDict["status"] = "Hello! I am a Football Fan"
                                                                        }
                                                                        
                                                                        tempDict["type"] = "nearby"
                                                                        tempDict["distance"] = fanNearbyDistance
                                                                        
                                                                        self.fanNearByContacts[self.fanNearByContacts.count] = tempDict
                                                                    }
                                                                    else
                                                                    {
                                                                        let varMobile = fanNearbyJid.split{$0 == "@"}.map(String.init)
                                                                        
                                                                        var tempDict = [String: String]()
                                                                        
                                                                        tempDict["jid"] = fanNearbyJid
                                                                        tempDict["name"] = varMobile[0]
                                                                        tempDict["nickname"] = fanNearbyNick
                                                                        tempDict["mobile"] = ""
                                                                        tempDict["avatar"] = avtarurl
                                                                        tempDict["status"] = "Hello! I am a Football Fan"
                                                                        
                                                                        tempDict["type"] = "nearby"
                                                                        tempDict["distance"] = fanNearbyDistance
                                                                        
                                                                        self.fanNearByContacts[self.fanNearByContacts.count] = tempDict
                                                                    }
                                                                    
                                                                }
                                                                //if(self.fanNearByContacts.count > 0)
                                                                //{
                                                                //Send notification to reload table
                                                                
                                                                let notificationName = Notification.Name("_RefreshNearbyView")
                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                                //}
                                                                //print(fanNearByContacts)
                                                                
                                                                /*var size = 0
                                                                 repeat {
                                                                 let colour = "clear"
                                                                 tmpSelected.add(colour)
                                                                 // Increment.
                                                                 size += 1
                                                                 
                                                                 } while size < newChatAppContacts.count*/
                                                                
                                                                
                                                                //print(tmpSelected.count)
                                                                //print(newChatAppContacts.count)
                                                                
                                                            } catch let error as NSError {
                                                                //print(error)
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        for record in response {
                                                            
                                                            
                                                            let fansNearBy: NSDictionary = record as! NSDictionary
                                                            let fanNearbyJid = fansNearBy.value(forKey: "username") as! String
                                                            let fanNearbyDistance = fansNearBy.value(forKey: "distance") as! String
                                                            let fanNearbyNick = fansNearBy.value(forKey: "nickname") as! String
                                                            let avtarurl = fansNearBy.value(forKey: "avatar") as! String
                                                            let varMobile = fanNearbyJid.split{$0 == "@"}.map(String.init)
                                                            
                                                            var tempDict = [String: String]()
                                                            
                                                            tempDict["jid"] = fanNearbyJid
                                                            tempDict["name"] = varMobile[0]
                                                            tempDict["nickname"] = fanNearbyNick
                                                            tempDict["mobile"] = ""
                                                            tempDict["avatar"] = avtarurl
                                                            tempDict["status"] = "Hello! I am a Football Fan"
                                                            
                                                            tempDict["type"] = "nearby"
                                                            tempDict["distance"] = fanNearbyDistance
                                                            
                                                            self.fanNearByContacts[self.fanNearByContacts.count] = tempDict
                                                            
                                                            
                                                        }
                                                        //if(self.fanNearByContacts.count > 0)
                                                        //{
                                                        //Send notification to reload table
                                                        
                                                        let notificationName = Notification.Name("_RefreshNearbyView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                        //}
                                                    }
                                                }*/
                                                
                                            } else if(Cmd == "updateviewcount")
                                            {
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                let tabIndex:[String: Any] = ["response": response as [AnyObject]]
                                                let notificationName = Notification.Name("_UpdateViewCount")
                                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo:tabIndex)
                                                
                                            } else if (Cmd == "savelike")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let pickedCaption:[String: Any] = ["savelike": response[0]]
                                                let notificationName = Notification.Name("_FanUpdateSaveLike")
                                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                
                                                let dict = response[0] as! NSDictionary
                                                let liked = dict.value(forKey: "liked") as! Bool
                                                if(liked){
                                                    let fanupdateid = dict.value(forKey: "fanupdateid") as! Int
                                                    if(ActivityPermissionCheck(massegeId: fanupdateid, Type: ThisIsupdateLike)){
                                                        ActivityCountManage()
                                                    }
                                                }
                                                
                                            } else if (Cmd == "getupdatecomments")
                                            {
                                               /* let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                if(isFanPageCommentRefresh)
                                                {
                                                    arrFanUpdateComments = response  as [AnyObject]
                                                }
                                                else
                                                {
                                                    arrFanUpdateComments += response  as [AnyObject]
                                                }
                                                
                                                //arrFanUpdateComments = response
                                                
                                                let notificationName = Notification.Name("_FanUpdateGetComments")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                */
                                                
                                            } else if (Cmd == "getupdatelikes")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //arrFanUpdateLikes = response
                                               /* if(isFanPageLikeRefresh)
                                                {
                                                    arrFanUpdateLikes = response  as [AnyObject]
                                                }
                                                else
                                                {
                                                    arrFanUpdateLikes += response  as [AnyObject]
                                                }
                                                
                                                let notificationName = Notification.Name("_FanUpdateGetLikes")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                */
                                                
                                            }
                                                
                                            else if(Cmd == "getfanupdates")
                                            {
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                //print(response)
                                                if(isFanPageRefresh)
                                                {
                                                    //arrFanUpdatesTeams
                                                    arrFanUpdatesTeams = response  as [AnyObject]
                                                }
                                                else
                                                {
                                                    arrFanUpdatesTeams += response  as [AnyObject]
                                                }
                                                //print(arrFanUpdatesTeams.count)
                                                // print(fanUpdates)
                                                let notificationName = Notification.Name("_FechedFanUpdateTeams")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                
                                                
                                            }
                                                
                                            else if(Cmd == "getmyfanupdates")
                                            {
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                //print(response)
                                                if(isMyFanPageRefresh)
                                                {
                                                    //arrFanUpdatesTeams
                                                    temparrMyFanUpdatesTeams = response  as [AnyObject]
                                                }
                                                else
                                                {
                                                    temparrMyFanUpdatesTeams += response  as [AnyObject]
                                                }
                                                //print(arrFanUpdatesTeams.count)
                                                // print(fanUpdates)
                                                let notificationName = Notification.Name("_MyFechedFanUpdateTeams")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                
                                                
                                            }
                                                
                                            else if(Cmd == "getfanupdatebyid")
                                            {
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                // print(response)
                                                //let notificationName = Notification.Name("tabindexchange")
                                                //NotificationCenter.default.post(name: notificationName, object: nil)
                                                let tabIndex:[String: Any] = ["index": "fanupdate", "response": response as [AnyObject]]
                                                if(isFromBanterDeepLink)
                                                {
                                                    isFromBanterDeepLink = false
                                                    let notificationName = Notification.Name("tabindexffdeeplink")
                                                    NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                    userInfo: tabIndex)
                                                } else {
                                                    let notificationName1 = Notification.Name("_FetchedFanUpdateByID")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                    userInfo: tabIndex)
                                                }
                                                
                                                /* let storyBoard = UIStoryboard(name: "Main", bundle: nil)
                                                 let registerController : FanUpdateDetailViewController! = storyBoard.instantiateViewController(withIdentifier: "fanupdatedetail") as! FanUpdateDetailViewController
                                                 registerController.fanupdatedetail = response as [AnyObject]
                                                 self.window = UIWindow(frame: UIScreen.main.bounds)
                                                 
                                                 self.window?.rootViewController = registerController as? UIViewController
                                                 self.window?.makeKeyAndVisible()
                                                 */
                                                
                                                /*if(isFanPageRefresh)
                                                 {
                                                 //arrFanUpdatesTeams
                                                 arrFanUpdatesTeams = response  as [AnyObject]
                                                 }
                                                 else
                                                 {
                                                 arrFanUpdatesTeams += response  as [AnyObject]
                                                 }
                                                 //print(arrFanUpdatesTeams.count)
                                                 // print(fanUpdates)
                                                 let notificationName = Notification.Name("_FechedFanUpdateTeams")
                                                 NotificationCenter.default.post(name: notificationName, object: nil)
                                                 */
                                                
                                                
                                            }
                                            else if(Cmd == "savefanupdates")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let notificationName = Notification.Name("_SaveFanUpdates")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                let dict = response[0] as! NSDictionary
                                                let totalcoins = dict.value(forKey: "totalcoins") as! Int
                                                let availablecoins = dict.value(forKey: "availablecoins") as! Int
                                                AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins )
                                                DispatchQueue.main.async {
                                                                                       AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText:"You won \(String(10)) FanCoins rewards for todayâs usage.\(self.GetvalueRedeemMesg(avilablecoin: availablecoins))",fancoins: String(10))
                                                                                   }
                                                
                                            } else if(Cmd == "editfanupdate")
                                            {
                                                //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let notificationName = Notification.Name("_SaveFanUpdates")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                
                                            } else if(Cmd == "deletefanupdate")
                                            {
                                                if(isOnMyFanStories){
                                                    let notificationName = Notification.Name("_MyFechedFanUpdate")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                else if(isOnFanDetail){
                                                    let notificationName = Notification.Name("_fanupdatedelete")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                else{
                                                    let notificationName = Notification.Name("_FechedFanUpdate")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                
                                                
                                            }
                                            else if(Cmd == "savecomment")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let notificationName = Notification.Name("_SaveCommentFanUpdate")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                let dict = response[0] as! NSDictionary
                                                
                                                let fanupdateid = dict.value(forKey: "fanupdateid") as! Int
                                                if(ActivityPermissionCheck(massegeId: fanupdateid, Type: ThisIsupdateComment)){
                                                    ActivityCountManage()
                                                }
                                                // }
                                            } else if(Cmd == "deletecomment")
                                            {
                                                //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let notificationName = Notification.Name("_FanUpdateDeleteComments")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                            } else if(Cmd == "getnews")
                                            {
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let dic: NSDictionary = response[0] as! NSDictionary
                                                //print(response)
                                                BrakingNews = (dic.value(forKey: "breakingnews") as! NSArray) as [AnyObject]
                                                let news = dic.value(forKey: "news") as! NSArray
                                                if(isNewsPageRefresh)
                                                {
                                                    //arrFanUpdatesTeams
                                                    arrNews = news  as [AnyObject]
                                                }
                                                else
                                                {
                                                    arrNews += news  as [AnyObject]
                                                }
                                                //print(arrFanUpdatesTeams.count)
                                                // print(fanUpdates)
                                                let notificationName = Notification.Name("_FetchedNews")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                
                                                
                                            } else if(Cmd == "getleaderboard")
                                            {
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                arrLeaderBoard  = [AnyObject]()
                                                arrLeaderTopUsers  = [AnyObject]()
                                                //arrFanUpdatesTeams
                                                arrLeaderBoard = response  as [AnyObject]
                                                arrLeaderTopUsers = arrLeaderBoard[0].value(forKey: "topusers") as! [AnyObject]
                                                
                                                let notificationName = Notification.Name("_FetchedLeaderBoard")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                
                                                
                                            } else if(Cmd == "gettransactionhistory")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                arrTotalFC = response  as [AnyObject]
                                                
                                                if(isTotalFCRefresh)
                                                {
                                                    arrTotalFCTrans = arrTotalFC[0].value(forKey: "fancoins") as! [AnyObject]
                                                } else  {
                                                    arrTotalFCTrans += arrTotalFC[0].value(forKey: "fancoins") as! [AnyObject]
                                                }
                                                
                                                let notificationName = Notification.Name("_FetchedTotalFC")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                
                                                
                                            } else if(Cmd == "getredeemhistory")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                arrTotalEarn = response  as [AnyObject]
                                                
                                                if(isTotalEarnRefresh)
                                                {
                                                    arrTotalEarnTrans = arrTotalEarn[0].value(forKey: "fancoins") as! [AnyObject]
                                                } else  {
                                                    arrTotalEarnTrans += arrTotalEarn[0].value(forKey: "fancoins") as! [AnyObject]
                                                }
                                                
                                                let notificationName = Notification.Name("_FetchedTotalEarn")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                
                                                
                                            } else if (Cmd == "savenewslike")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let pickedCaption:[String: Any] = ["savelike": response[0]]
                                                let notificationName = Notification.Name("_NewsSaveLike")
                                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                let dict = response[0] as! NSDictionary
                                                let liked = dict.value(forKey: "liked") as! Bool
                                                if(liked){
                                                    let newsid = dict.value(forKey: "newsid") as! Int
                                                    if(ActivityPermissionCheck(massegeId: newsid, Type: ThisIsNewsLike)){
                                                        ActivityCountManage()
                                                    }
                                                }
                                            } else if (Cmd == "getnewscomments")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                if(isNewsPageCommentRefresh)
                                                {
                                                    arrNewsComments = response  as [AnyObject]
                                                }
                                                else
                                                {
                                                    arrNewsComments += response  as [AnyObject]
                                                }
                                                
                                                //arrFanUpdateComments = response
                                                
                                                let notificationName = Notification.Name("_NewsGetComments")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                
                                            } else if (Cmd == "getnewslikes")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //arrFanUpdateLikes = response
                                                if(isNewsPageLikeRefresh)
                                                {
                                                    arrNewsLikes = response  as [AnyObject]
                                                }
                                                else
                                                {
                                                    arrNewsLikes += response  as [AnyObject]
                                                }
                                                
                                                let notificationName = Notification.Name("_NewsGetLikes")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                
                                            }
                                            else if(Cmd == "savenewscomment")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let notificationName = Notification.Name("_SaveCommentNews")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                let dict = response[0] as! NSDictionary
                                                
                                                let newsid = dict.value(forKey: "newsid") as! Int
                                                if(ActivityPermissionCheck(massegeId: newsid, Type: ThisIsNewsComment)){
                                                    ActivityCountManage()
                                                }
                                            } else if(Cmd == "deletenewscomment")
                                            {
                                                //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let notificationName = Notification.Name("_NewsDeleteComments")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                            }
                                            else if(Cmd == "updatecoins"){
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let dict = response[0] as! NSDictionary
                                                // print("updatecoins responce \(dict)")
                                                let totalcoins = dict.value(forKey: "totalcoins") as! Int
                                                let availablecoins = dict.value(forKey: "availablecoins") as! Int
                                                let activity = dict.value(forKey: "activity") as! String
                                                if(activity == "activities"){
                                                    let activitycount = GetvalueFromInsentiveConfigTable(Key: fcactivitycount) as! Int
                                                    let activityth = GetvalueFromInsentiveConfigTable(Key: fcactivityth) as! Int
                                                    let activitycoin = GetvalueFromInsentiveConfigTable(Key: fcactivity) as! Int
                                                    let r = activitycount % activityth
                                                    _ = db.execute(sql:"UPDATE insentiveconfig SET fcactivitycount = \(r) WHERE ID = 0")
                                                    let Q = (activitycount - r) / activityth
                                                    print(Q)
                                                    let totelactivitycoin = activitycoin * Q
                                                    print("activitycoin\(totelactivitycoin)")
                                                    AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
                                                    DispatchQueue.main.async {
                                                        AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText:"You won \(String(totelactivitycoin)) FanCoins rewards for completing \(activityth) app contributions. \(self.GetvalueRedeemMesg(avilablecoin: availablecoins))", fancoins: String(totelactivitycoin))
                                                        self.canICallUpdatecoin = false
                                                    }
                                                    
                                                }
                                                else if(activity == "bonus"){
                                                    let level = dict.value(forKey: "level") as! String
                                                    _ = db.execute(sql:" UPDATE insentiveconfig SET fccurrentlevel = '\(level)' WHERE ID = 0")
                                                    let notificationName = Notification.Name("newlavel")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)

                                                    var bonuscoin: Int = 0
                                                    if(level.isEqual("Bronze")){
                                                        bonuscoin = GetvalueFromInsentiveConfigTable(Key: fcbonusthb) as! Int
                                                    }
                                                    else if(level.isEqual("Silver")){
                                                        bonuscoin = GetvalueFromInsentiveConfigTable(Key: fcbonusths) as! Int
                                                        
                                                    }
                                                    else if(level.isEqual("Gold")){
                                                        bonuscoin = GetvalueFromInsentiveConfigTable(Key: fcbonusthg) as! Int
                                                    }
                                                    else if(level.isEqual("Platinum")){
                                                        bonuscoin = GetvalueFromInsentiveConfigTable(Key: fcbonusthp) as! Int
                                                    }
                                                    else if(level.isEqual("Diamond")){
                                                        bonuscoin = GetvalueFromInsentiveConfigTable(Key: fcbonusthd) as! Int
                                                    }
                                                    AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
                                                    
                                                    DispatchQueue.main.asyncAfter(deadline: .now() +  7.0) {
                                                        // hide()
                                                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        //if(myjid != nil){
                                                        let arrdUserJid = myjid?.components(separatedBy: "@")
                                                        let userUserJid = arrdUserJid?[0]
                                                        AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(String(bonuscoin)) FanCoins rewards and you are now a \(level) level Fan.\(self.GetvalueRedeemMesg(avilablecoin: availablecoins))",fancoins: String(bonuscoin))
                                                    }
                                                }
                                                
                                            }
                                            else if(Cmd == "updatepaypalemail"){
                                                UserDefaults.standard.setValue(TemppaypalEmail, forKey: "paypalemail")
                                                UserDefaults.standard.synchronize()
                                                let tabIndex:[String: String] = ["msg": ""]
                                                let notificationName = Notification.Name("paypalverifiedsuccs")
                                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo:tabIndex)
                                                
                                            }
                                            else if(Cmd == "updateredeems"){
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let dict = response[0] as! NSDictionary
                                                let totalcoins = dict.value(forKey: "totalcoins") as! Int
                                                let availablecoins = dict.value(forKey: "availablecoins") as! Int
                                                let tabIndex:[String: String] = ["msg": "FanCoins redeemed successfully.\nUsually takes up to 14 working days for cash to reflect into your PayPal account."]
                                                let notificationName = Notification.Name("updateredeemssuccs")
                                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo:tabIndex)
                                                AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
                                            }
                                            else if(Cmd == "editprofile")
                                            {
                                                //UserDefaults.standard.setValue(usercity, forKey: "userecity")
                                                //UserDefaults.standard.setValue(userstate, forKey: "userstate")
                                                //UserDefaults.standard.setValue(usercontry, forKey: "usercountry")
                                                Clslogging.logdebug(State: "editprofile success = true")
                                                UserDefaults.standard.setValue(self.MobileTemp, forKey: "registerMobile")
                                                // UserDefaults.standard.setValue(userdob, forKey: "userdob")
                                                //UserDefaults.standard.setValue(userlat, forKey: "latitude")
                                                // UserDefaults.standard.setValue(userlong, forKey: "longitude")
                                                UserDefaults.standard.setValue(self.EmailTemp, forKey: "useremail")
                                                UserDefaults.standard.setValue(self.CountrycodeTemp, forKey: "usercountrycode")
                                                UserDefaults.standard.setValue(self.CountryShotcutTemp, forKey: "usercountryshortcode")
                                                UserDefaults.standard.setValue(self.DobTemp, forKey: "userdob")
                                                UserDefaults.standard.synchronize()
                                                UserDefaults.standard.setValue(nil, forKey: "isprofileNotSelected")
                                                UserDefaults.standard.synchronize()
                                                //Featch card
                                                //print(self.isvCardUpdated)
                                                /*if(isvCardUpdated)
                                                 {
                                                 xmppvCardStorage = XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
                                                 
                                                 if(xmppvCardStorage != nil)
                                                 {
                                                 xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: xmppvCardStorage!)
                                                 xmppvCardTempModule?.activate(xmppStream!)
                                                 xmppvCardTempModule?.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                 
                                                 xmppvCardTempModule?.fetchvCardTemp(for: xmppStream!.myJID, ignoreStorage: true)
                                                 }
                                                 
                                                 
                                                 }*/
                                                let notificationName1 = Notification.Name("succefullprofile")
                                                NotificationCenter.default.post(name: notificationName1, object: nil)
                                            }
                                            else if(Cmd == "updatedevicetocken")
                                            {
                                                print("token updated")
                                            }
                                            else if(Cmd == "userdetail")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                let pickedCaption:[String: Any] = ["userdetail": response[0]]
                                                let notificationName = Notification.Name("showProfileWithNotify")
                                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                            }
                                            else if(Cmd == "userblock")
                                            {
                                                // let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                if(isOnFanContactlistView == true){
                                                    let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                    for record in response {
                                                        let roomDetailsDict = record as! [String : AnyObject]
                                                        
                                                        let userJid = roomDetailsDict["username"] as! String
                                                        let pickedCaption:[String: Any] = ["userdetail": userJid]
                                                        let notificationName = Notification.Name("Blockuser")
                                                        NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                        
                                                    }
                                                }
                                                else{
                                                    let pickedCaption:[String: Any] = ["userdetail": "Blocked"]
                                                    let notificationName = Notification.Name("singlechat")
                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                }
                                                
                                                
                                            }
                                            else if(Cmd == "userunblock")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                if(isOnBlockeduserView == true){
                                                    let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                    for record in response {
                                                        let roomDetailsDict = record as! [String : AnyObject]
                                                        
                                                        let userJid = roomDetailsDict["username"] as! String
                                                        let pickedCaption:[String: Any] = ["userdetail": userJid]
                                                        let notificationName = Notification.Name("unblockFromBlocklist")
                                                        NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                        
                                                    }
                                                }
                                                else{
                                                    let pickedCaption:[String: Any] = ["userdetail": "unblocked"]
                                                    let notificationName = Notification.Name("singlechat")
                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                    
                                                    
                                                }
                                                
                                            }
                                            else if(Cmd == "getuserroomsbyid")
                                            {
                                                
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                let tabIndex:[String: Any] = ["index": "roominvite", "response": response as [AnyObject]]
                                                
                                                let notificationName = Notification.Name("tabindexffdeeplink")
                                                NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                userInfo: tabIndex)
                                                
                                            }
                                            else if(Cmd == "getnewsbyid")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                print(response)
                                                //let notificationName = Notification.Name("tabindexchange")
                                                //NotificationCenter.default.post(name: notificationName, object: nil)
                                                let tabIndex:[String: Any] = ["index": "news", "response": response as [AnyObject]]
                                                if(isFromBanterDeepLink)
                                                {
                                                    isFromBanterDeepLink = false
                                                    let notificationName = Notification.Name("tabindexffdeeplink")
                                                    NotificationCenter.default.post(name: notificationName, object: nil,
                                                                                    userInfo: tabIndex)
                                                } else {
                                                    if(isOnNewsDetailView){
                                                        let notificationName1 = Notification.Name("_FetchedNewsByID")
                                                        NotificationCenter.default.post(name: notificationName1, object: nil,
                                                                                        userInfo: tabIndex)
                                                    }
                                                }
                                            }
                                            /*else if(Cmd == "blockusers")
                                            {
                                                let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                for record in response {
                                                    let roomDetailsDict = record as! [String : AnyObject]
                                                    
                                                    let userJid = roomDetailsDict["blockedusername"]
                                                    let userType = roomDetailsDict["type"] as! String
                                                    let blockedtime = roomDetailsDict["blockedtime"]
                                                    //Int64(truncating: (roomDetailsDict.value(forKey: "blockedtime") as! AnyObject) as! NSNumber )
                                                    let unblockedtime = roomDetailsDict["unblockedtime"]  //roomDetailsDict.value(forKey: "unblockedtime").int
                                                    let BlockeduserTable = Blockeduser()
                                                    if(userType == "banter"){
                                                        let roomid = roomDetailsDict["roomid"]
                                                        BlockeduserTable.chatType = userType
                                                        BlockeduserTable.roomId = roomid as! String
                                                        BlockeduserTable.touser = userJid as! String
                                                    }
                                                    else if(userType == "group"){
                                                        let roomid = roomDetailsDict["roomid"]
                                                        BlockeduserTable.chatType = userType
                                                        BlockeduserTable.roomId = roomid as! String
                                                        BlockeduserTable.touser = userJid as! String
                                                    }
                                                    else{
                                                        BlockeduserTable.chatType = userType
                                                        BlockeduserTable.touser = userJid as! String
                                                        BlockeduserTable.roomId = userJid as! String
                                                    }
                                                    BlockeduserTable.status = "Blocked"
                                                    
                                                    BlockeduserTable.unblocked_time = (unblockedtime?.int64Value)!
                                                    BlockeduserTable.blocked_time = (blockedtime?.int64Value)!
                                                    if BlockeduserTable.save() != 0 {
                                                        
                                                    }
                                                }
                                                
                                                
                                            }*/
                                            else if(Cmd == "synccontacts") //More elobrate
                                            {
                                                DispatchQueue.background(background: {
                                                    self.getsyncedcontact(jsonData: jsonData!)
                                                }, completion:{
                                                    //self.refreshTable.endRefreshing()
                                                    //self.storyTableView?.isScrollEnabled = true
                                                })
                                            }
                                            
                                        }
                                        else
                                        {
                                            if(jsonData?.value(forKey: "cmd") as? String != nil){
                                                
                                                let Cmd: String = (jsonData?.value(forKey: "cmd") as? String)!
                                                // let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                
                                                if(Cmd == "synccontacts")
                                                {
                                                    let notificationName = Notification.Name("FetchedContactsDetails")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                else if(Cmd == "getstandings")
                                                {
                                                    //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                    //arrFanUpdatesTeams = jsonData?.value(forKey: "responseData")  as! [AnyObject]
                                                    // let pickedCaption:[String: Any] = ["responseData": jsonData?.value(forKey: "responseData")  as! [AnyObject]]
                                                    arrStanding =  [AnyObject]  ()
                                                    //print(arrFanUpdatesTeams)
                                                    let notificationName = Notification.Name("UpdateStandingfail")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                }
                                                else if(Cmd == "getfixtures"){
                                                    arrFixtures = [AnyObject] ()
                                                    let notificationName = Notification.Name("UpdateFixturesfail")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                else if(Cmd == "updatepaypalemail"){
                                                    let tabIndex:[String: String] = ["msg": "System error!\nUnable to process your request to redeem FanCoins. Please try again later."]
                                                    let notificationName = Notification.Name("paypalverifiedfail")
                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo:tabIndex)
                                                    
                                                }
                                                else if(Cmd == "updateredeems"){
                                                    let tabIndex:[String: String] = ["msg": "System error! \nUnable to process your request to redeem FanCoins. Please try again later."]
                                                    let notificationName = Notification.Name("updateredeemsfail")
                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo:tabIndex)
                                                }
                                                else if(Cmd == "editprofile")
                                                {
                                                    //UserDefaults.standard.setValue(usercity, forKey: "userecity")
                                                    //UserDefaults.standard.setValue(userstate, forKey: "userstate")
                                                    Clslogging.logdebug(State: "editprofile success = false")
                                                    let notificationName1 = Notification.Name("failprofile")
                                                    NotificationCenter.default.post(name: notificationName1, object: nil)
                                                }
                                                else if(Cmd == "getnearbyusers")
                                                {
                                                    let notificationName = Notification.Name("_RefreshNearbyView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                else if(Cmd == "getuserrooms")
                                                {
                                                    Clslogging.loginfo(State: "getuserrooms", userinfo: jsonData as! [String : AnyObject])
                                                     Clslogging.logdebug(State: "getuserrooms responce false")
                                                    let presence = XMPPPresence(type: "available")
                                                    self.xmppStream!.send(presence)
                                                    self.isUserOnline = true
                                                    self.runTimer()
                                                    if(self.isOnBantersView == true && curRoomType == "banter")
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    let notificationName2 = Notification.Name("_isUserOnline")
                                                    NotificationCenter.default.post(name: notificationName2, object: nil)
                                                    let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
                                                    NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
                                                    let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
                                                    NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
                                                    let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
                                                    NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
                                                    let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
                                                    NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
                                                    let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
                                                    NotificationCenter.default.post(name: notificationNametrivia, object: nil)
                                                    let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                                                                                                                                 NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
                                                    Clslogging.logdebug(State: "getuserrooms end")
                                                }
                                                else if(Cmd == "userblock")
                                                {
                                                    let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                    let pickedCaption:[String: Any] = ["userdetail": "Blocked"]
                                                    let notificationName = Notification.Name("singlechatfail")
                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                    
                                                }
                                               /* else if(Cmd == "getbanterroomusers"){
                                                    if(isOnUserDetailView == true)
                                                    {
                                                        arrBanterUsers = NSMutableArray()
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("UserdetailRefresh")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                }*/
                                                else if(Cmd == "updatedevicetocken")
                                                {
                                                    let deviceToken: String? = UserDefaults.standard.string(forKey: "DeviceToken")
                                                    if(deviceToken != nil){
                                                        self.updatetoken(token: deviceToken!)
                                                    }
                                                }
                                                else if(Cmd == "userunblock")
                                                {
                                                    let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                    
                                                    let pickedCaption:[String: Any] = ["userdetail": "unblocked"]
                                                    let notificationName = Notification.Name("singlechatfail")
                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                    
                                                    
                                                    
                                                    
                                                }
                                                else if(Cmd == "updatecoins"){
                                                    canICallUpdatecoin = false
                                                }
                                                else if(Cmd == "savebanterroom")
                                                {
                                                    isBanterOwner = false
                                                    isJoiningBanterRoom = false
                                                    
                                                    if(!toUserJID.isEmpty){
                                                        let uuid = UUID().uuidString
                                                        let messageId = uuid
                                                        let time: Int64 = self.getUTCFormateDate()
                                                        let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                        
                                                        
                                                        //Save banter status
                                                        //print(self.toName)
                                                        self.prepareMessageForServerIn(toUserJID , messageContent: "Manager closed this Banter Room.", messageType: "header", messageTime: time , messageId: messageId, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: "banter", recBanterNickName: "", banterRoomName: self.toName, banterStatus: "closed")
                                                        
                                                        //End
                                                        
                                                        
                                                        if(self.isOnBantersView == true && curRoomType == "banter")
                                                        {
                                                            //Post notification if user is on chats window and received any message
                                                            let notificationName = Notification.Name("RefreshBantersView")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                        }
                                                        else if (self.isOnChatView == true)
                                                        {
                                                            let notificationName = Notification.Name("closeBanterFromServer")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                        }
                                                        
                                                    }
                                                    
                                                } else if (Cmd == "getupdatecomments")
                                                {
                                                   /* if(isFanPageCommentRefresh)
                                                    {
                                                        arrFanUpdateComments = [AnyObject]()
                                                        let notificationName = Notification.Name("_FanUpdateGetComments")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                        
                                                        
                                                    }*/
                                                    
                                                    
                                                }
                                                else if(Cmd == "savefanupdates")
                                                {
                                                    //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                    let notificationName = Notification.Name("_failSaveFanUpdates")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    
                                                } else if(Cmd == "editfanupdate")
                                                {
                                                    //let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                                                    let notificationName = Notification.Name("_failSaveFanUpdates")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                } else if (Cmd == "getupdatelikes")
                                                {
                                                    /*if(isFanPageLikeRefresh)
                                                    {
                                                        arrFanUpdateLikes = [AnyObject]()
                                                        
                                                        let notificationName = Notification.Name("_FanUpdateGetLikes")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                        
                                                    }*/
                                                    
                                                    
                                                } else if (Cmd == "getfanupdates")
                                                {
                                                    
                                                    if(isFanPageRefresh)
                                                    {
                                                        arrFanUpdatesTeams  = [AnyObject]()
                                                        let notificationName = Notification.Name("_FechedFanUpdateTeams")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    } else
                                                    {
                                                        let notificationName = Notification.Name("_FetchedFanUpdates")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                        
                                                    }
                                                    
                                                }
                                                else if (Cmd == "getmyfanupdates")
                                                {
                                                  /*
                                                    if(isMyFanPageRefresh)
                                                    {
                                                        arrMyFanUpdatesTeams  = [AnyObject]()
                                                        let notificationName = Notification.Name("_MyFechedFanUpdateTeams")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    } else
                                                    {
                                                        let notificationName = Notification.Name("_MyFetchedFanUpdates")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                        
                                                    }
                                                    */
                                                }
                                                    
                                                else if(Cmd == "deletefanupdate")
                                                {
                                                    /* let notificationName = Notification.Name("_FechedFanUpdate")
                                                     NotificationCenter.default.post(name: notificationName, object: nil)*/
                                                    if(isOnMyFanStories){
                                                        let notificationName = Notification.Name("_MyFechedFanUpdate")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else{
                                                        let notificationName = Notification.Name("_FechedFanUpdate")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    
                                                }
                                                    // News
                                                else if (Cmd == "getnewscomments")
                                                {
                                                    if(isNewsPageCommentRefresh)
                                                    {
                                                        arrNewsComments = [AnyObject]()
                                                        let notificationName = Notification.Name("_NewsGetComments")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                } else if (Cmd == "getnewslikes")
                                                {
                                                    if(isNewsPageLikeRefresh)
                                                    {
                                                        arrNewsLikes = [AnyObject]()
                                                        let notificationName = Notification.Name("_NewsGetLikes")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    
                                                } else if (Cmd == "getnews")
                                                {
                                                    
                                                    if(isNewsPageRefresh)
                                                    {
                                                        arrNews  = [AnyObject]()
                                                        let notificationName = Notification.Name("_FetchedNews")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    } else
                                                    {
                                                        let notificationName = Notification.Name("_FetchedNewsFail")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    
                                                }
                                                else
                                                {
                                                    //let presence = XMPPPresence(type: "available")
                                                    //xmppStream!.send(presence)
                                                    isLoadingMyTeams = false
                                                   // fanNearByContacts = NSMutableArray()
                                                    let notificationName = Notification.Name("_RefreshNearbyView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                            }
                                            
                                        }
                                        
                                        //print(allAppContacts)
                                        /*if let myDictionary = dictonary
                                         {
                                         print(" First name is: \(myDictionary["first_name"]!)")
                                         }*/
                                    } catch let error as NSError {
                                        print(error)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        let queryElementAlluserreset = iq.attributeStringValue(forName: "id")
        if(queryElementAlluserreset != nil){
            if(queryElementAlluserreset?.elementsEqual("resetPassword"))!
            {
                UserDefaults.standard.setValue(nil, forKey: "forgate")
                UserDefaults.standard.synchronize()
                //if(self.xmppStream?.isDisconnected())!
                //{
                
                if(self.connect())
                {
                    
                }
                //}
            }
            else if(queryElementAlluserreset?.elementsEqual("resetPasswordFromSettings"))!
            {
                
                
                UserDefaults.standard.setValue(nil, forKey: "byChangePassword")
                UserDefaults.standard.setValue(nil, forKey: "oldpassword")
                let newpassword = UserDefaults.standard.string(forKey: "newpassword")
                if(newpassword != nil)
                {
                    UserDefaults.standard.setValue(newpassword, forKey: "userpassword")
                }
                UserDefaults.standard.synchronize()
                if(self.connect())
                {
                    let notificationName = Notification.Name("resetPasswordFromSettingsSucssfull")
                    NotificationCenter.default.post(name: notificationName, object: nil)
                }
            }
            
        }
        let queryElementroster = iq.element(forName: "query", xmlns: "jabber:iq:roster")//forName("query", xmlns: "jabber:iq:roster")
        
        if (queryElementroster != nil)
        {
            let  itemElements = queryElementroster?.elements(forName: "item")
            
            for item in itemElements!{
                let jid: String = item.attributeStringValue(forName: "jid")!
                if(jid == toUserJID){
                    let subcription: String = item.attributeStringValue(forName: "subscription")!
                    let pickedCaption:[String: Any] = ["subcriptiontype": subcription]
                    let notificationName = Notification.Name("getsubcribeWithNotify")
                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                    break
                }
                // print(jid)
                
            }
        } // By Mayank on 25 Sep 2018
        else
        {
            //let notificationName = Notification.Name("getsubcribeFail")
            //NotificationCenter.default.post(name: notificationName, object: nil, userInfo: nil)
        }
        // By Mayank on 25 Sep 2018
        return true
    }
    //Single chat
    func xmppStream(_ sender: XMPPStream, didReceive message: XMPPMessage)
    {
        //print("didReceive Chat Message")
        let isMessageTypeChat = message.attributeStringValue(forName: "type")
        
        if(isMessageTypeChat != "chat" && isMessageTypeChat != nil)
        {
            //print("Yes it is MUC Message")
        }
        else
        {
            //print("No it is not MUC Message")
            //print(message)
            /*let queryMessage = message.forName("message", xmlns: "jabber:client")
             
             if (queryMessage != nil)
             {*/
            
            //let messageIQ: String = ""
            //let iqMessageId: String = ""
            /*let eleRead = message?.forName("read")
             if (eleRead != nil)
             {
             iqMessageId = (message?.attributeStringValue(forName: "id"))!
             if (!iqMessageId.isEmpty)
             {
             messageIQ = "read"
             }
             
             }*/
            
            var messageIQ: String = ""
            var iqMessageId: String = ""
            
            
            let eleCompose = message.element(forName: "composing")//forName("composing")
            if (eleCompose != nil)
            {
                messageIQ = "composing"
            }
            
            if(messageIQ == "composing")
            {
                //print("composing")
            }
            else
            {
                let eleRec = message.element(forName: "received")//forName("received")
                if (eleRec != nil)
                {
                    iqMessageId = (eleRec?.attributeStringValue(forName: "id"))!
                    if (!iqMessageId.isEmpty)
                    {
                        messageIQ = "received"
                    }
                    
                }
                
                let eleRead = message.element(forName: "read")//forName("read")
                if (eleRead != nil)
                {
                    iqMessageId = (eleRead?.attributeStringValue(forName: "id"))!
                    if (!iqMessageId.isEmpty)
                    {
                        messageIQ = "read"
                    }
                    
                }
                
                let eleBody = message.element(forName: "body")//forName("body")
                if (eleBody != nil)
                {
                    let messageContent: String = (eleBody?.stringValue)!
                    if(!messageContent.isEmpty)
                    {
                        
                        let dupMessageId = message.attributeStringValue(forName: "id")
                        
                        
                        let messageFromTemp = message.attributeStringValue(forName: "from")
                        let arrMessageFromTemp = messageFromTemp?.components(separatedBy: "/")
                        let messageFromTrimTemp = arrMessageFromTemp?[0]
                        
                        if(messageIQ == "received")
                        {
                            if(self.curRoomType == "chat") //Temp
                            {
                                if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                {
                                    do {
                                        
                                        let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                        
                                        let recReadUserJid: String = (jsonDataMessage?.value(forKey: "userJid") as? String)!
                                        //let recReadTime: String = (jsonDataMessage?.value(forKey: "time") as? String)!
                                        
                                        let arrReadUserJid = recReadUserJid.components(separatedBy: "/")
                                        let userReadUserJid = arrReadUserJid[0]
                                        
                                        self.funGetSetLocalChats(messageId: iqMessageId, chatStatus: "delivered", receivedUsers: messageContent, recReadUserJid: userReadUserJid)
                                        
                                    } catch let error as NSError {
                                        // print(error)
                                    }
                                }
                            }
                            
                        }
                        else if(messageIQ == "read")
                        {
                            if(self.curRoomType == "chat") //Temp
                            {
                                if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                {
                                    do {
                                        
                                        let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                        
                                        let recReadUserJid: String = (jsonDataMessage?.value(forKey: "userJid") as? String)!
                                        //let recReadTime: String = (jsonDataMessage?.value(forKey: "time") as? String)!
                                        
                                        let arrReadUserJid = recReadUserJid.components(separatedBy: "/")
                                        let userReadUserJid = arrReadUserJid[0]
                                        
                                        // self.funGetSetLocalChats(messageId: iqMessageId, chatStatus: "received", receivedUsers: messageContent, recReadUserJid: userReadUserJid)
                                        
                                    } catch let error as NSError {
                                        //print(error)
                                    }
                                }
                            }
                            
                            
                        }
                        else
                        {
                            if let dt = arrAllChats[messageFromTrimTemp!]
                            {
                                //print("dupMessageId:",dupMessageId )
                                let temparrUserChat2 = dt["Chats"] as! [AnyObject]
                                var isDuplicateMessage: Bool = false
                                let _: [AnyObject] = temparrUserChat2.filter({ (text) -> Bool in
                                    let tmp: NSDictionary = text as! NSDictionary
                                    
                                    let msgId: String = tmp.value(forKey: "messageId") as! String
                                    // print("dupMessageId:")
                                    //print("messageId:",msgId)
                                    
                                    if(msgId == dupMessageId)
                                    {
                                        
                                        isDuplicateMessage = true
                                        // print("isDuplicateMessage:",isDuplicateMessage)
                                        return true
                                    }
                                    else
                                    {
                                        
                                        //isDuplicateMessage = false
                                        //print("isDuplicateMessage:",isDuplicateMessage)
                                        return false
                                    }
                                    //We have to check if duplicateMsgId is empty
                                    
                                    
                                })
                                //print("isDuplicateMessage Ravi:",isDuplicateMessage)
                                if(isDuplicateMessage == false)
                                {
                                    
                                    let messageType = message.attributeStringValue(forName: "type")
                                    if(messageType == "chat") //This is single one to one chat
                                    {
                                        
                                        if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                        {
                                            // print(dataMessage)
                                            do {
                                                let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                                
                                                let recMessageType: String = (jsonDataMessage?.value(forKey: "type") as? String)!
                                                
                                                let recBanterNickName: String = ""//(jsonDataMessage?.value(forKey: "banternickname") as? String)!
                                                
                                                
                                                //Else of this we have to manage image/video/files etc.
                                                if(recMessageType == "verification")
                                                {
                                                    //let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    //let messageFrom = message?.attributeStringValue(forName: "from")
                                                    
                                                    let registerJIDTemp: String? = UserDefaults.standard.string(forKey: "registerJIDTemp")
                                                    
                                                    //Check if user is reactivating his account
                                                    if registerJIDTemp != nil {
                                                        if(messageTo == registerJIDTemp)
                                                        {
                                                            
                                                            let notificationName = Notification.Name("verificationSuccess")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                            
                                                            //Now go to profile details
                                                            let registerMobileTemp: String? = UserDefaults.standard.string(forKey: "registerMobileTemp")
                                                            
                                                            UserDefaults.standard.setValue(registerJIDTemp, forKey: "registerJID")
                                                            UserDefaults.standard.synchronize()
                                                            UserDefaults.standard.setValue(registerMobileTemp, forKey: "registerMobile")
                                                            UserDefaults.standard.synchronize()
                                                            
                                                            UserDefaults.standard.setValue(nil, forKey: "registerJIDTemp")
                                                            UserDefaults.standard.synchronize()
                                                            UserDefaults.standard.setValue(nil, forKey: "registerMobileTemp")
                                                            UserDefaults.standard.synchronize()
                                                            
                                                            //Profile data fetched
                                                            let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegistering")
                                                            if (isRegistering == nil) {
                                                                /*xmppvCardStorage = XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
                                                                
                                                                xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: xmppvCardStorage!)
                                                                xmppvCardTempModule?.activate(xmppStream!)
                                                                xmppvCardTempModule?.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                
                                                                xmppvCardTempModule?.fetchvCardTemp(for: xmppStream!.myJID!, ignoreStorage: true)*/
                                                            }
                                                            else
                                                            {
                                                                showProfile()
                                                            }
                                                            
                                                            
                                                            //Finish all main loading activities here before show any screen. This cmd will change with all config data
                                                            //This team sync will be shift to
                                                            // Comment by Mayank 18 Jun 2018
                                                            /*
                                                             var data = [TeamCategories_detail]()
                                                             data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
                                                             if(data.count == 0){
                                                             var dictRequest = [String: AnyObject]()
                                                             dictRequest["cmd"] = "teamsync" as AnyObject
                                                             var dictRequestData = [String: AnyObject]()
                                                             
                                                             dictRequestData["version"] = self.Realeseversion as AnyObject
                                                             dictRequest["requestData"] = dictRequestData as AnyObject
                                                             do {
                                                             let dataTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                             let strTeams = NSString(data: dataTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                             //print(strTeams)
                                                             sendRequestToAPI(strRequestDict: strTeams)
                                                             } catch {
                                                             //  print(error.localizedDescription)
                                                             }
                                                             }
                                                             */
                                                            //End
                                                            
                                                            
                                                            
                                                            
                                                        }
                                                    }
                                                    
                                                    
                                                }
                                                else if(recMessageType == "text")
                                                {
                                                    let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    //let  messageSubType: String = (jsonDataMessage?.value(forKey: "sub_type") as? String)!
                                                    //let isJoined: Bool = sender.isJoined
                                                    var messageSubType :String = ""
                                                    if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                    {
                                                        messageSubType = sub_type as! String
                                                    }
                                                    
                                                    
                                                    /*if #available(iOS 10.0, *) {
                                                     let content = UNMutableNotificationContent()
                                                     content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                     content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                     arguments: nil)
                                                     content.sound = UNNotificationSound.default()
                                                     let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                     }*/
                                                    
                                                    
                                                    //Code to prepare data before send to server
                                                    self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, messageSubType:  messageSubType)
                                                    
                                                    //We have recevied message from user so he will always To for me
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    
                                                    if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                    {
                                                        self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                        self.funGetSetLocalChats(messageId: messageId!, chatStatus: "read", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                    }
                                                    
                                                    let notificationName = Notification.Name("messageInReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if (self.isOnChatsView == true)
                                                    {
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    //End
                                                    
                                                    
                                                    
                                                }
                                                else if(recMessageType == "header")
                                                {
                                                    /*let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!*/
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    
                                                    
                                                    
                                                    
                                                    // let objUserName: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    //let arrUserName = objUserName.components(separatedBy: "@")
                                                    //let objUserNameTrim = arrUserName[0]
                                                    /*if(!msgSentByUserToGroup.isEmpty)
                                                     {
                                                     messageTo = msgSentByUserToGroup
                                                     }*/
                                                    //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                    if let recSubType = jsonDataMessage?.value(forKey: "subtype")
                                                    {
                                                        if(recRoomType == "banter")
                                                        {
                                                            if((recSubType as! String) == "invite") //Revisit
                                                            {
                                                                let recRoomName: String = (jsonDataMessage?.value(forKey: "roomname") as? String)!
                                                                self.banterRoomName = recRoomName
                                                                let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                                                getroomdetails(roomid: recRoomId)
                                                                
                                                               /* var dictRequest = [String: AnyObject]()
                                                                dictRequest["cmd"] = "getroomdetails" as AnyObject
                                                                
                                                                
                                                                
                                                                do {
                                                                    //Creating Request Data
                                                                    var dictRequestData = [String: AnyObject]()
                                                                    
                                                                    dictRequestData["roomid"] = recRoomId as AnyObject
                                                                    
                                                                    dictRequest["requestData"] = dictRequestData as AnyObject
                                                                    
                                                                    
                                                                    let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                    let strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
                                                                    // print(strGetBanterDetails)
                                                                    self.sendRequestToAPI(strRequestDict: strGetBanterDetails)
                                                                } catch {
                                                                    // print(error.localizedDescription)
                                                                }*/
                                                                /*self.prepareMessageForServerIn(messageFromTrim!, messageContent: "You are invited to this banter room. You can join this banter room by tap on join button.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, isJoined: false)*/
                                                                
                                                            }
                                                        }
                                                        else  if(recRoomType == "group")
                                                        {
                                                            if((recSubType as! String) == "invite") //Revisit
                                                            {
                                                                let recRoomName: String = (jsonDataMessage?.value(forKey: "roomname") as? String)!
                                                                self.banterRoomName = recRoomName
                                                                let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                                                UserDefaults.standard.setValue(jsonDataMessage?.value(forKey: "time"), forKey: recRoomId)
                                                                UserDefaults.standard.synchronize()
                                                                getroomdetails(roomid: recRoomId)
                                                                /*var dictRequest = [String: AnyObject]()
                                                                dictRequest["cmd"] = "getroomdetails" as AnyObject
                                                                
                                                                
                                                                
                                                                do {
                                                                    //Creating Request Data
                                                                    var dictRequestData = [String: AnyObject]()
                                                                    
                                                                    dictRequestData["roomid"] = recRoomId as AnyObject
                                                                    
                                                                    dictRequest["requestData"] = dictRequestData as AnyObject
                                                                    
                                                                    
                                                                    let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                    let strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
                                                                    // print(strGetBanterDetails)
                                                                    self.sendRequestToAPI(strRequestDict: strGetBanterDetails)
                                                                } catch {
                                                                    // print(error.localizedDescription)
                                                                }*/
                                                                /*self.prepareMessageForServerIn(messageFromTrim!, messageContent: "You are invited to this banter room. You can join this banter room by tap on join button.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, isJoined: false)*/
                                                                
                                                            }
                                                        }
                                                        if((recSubType as! String) == "merchandise") //Revisit
                                                        {
                                                            
                                                        }
                                                        
                                                        
                                                        if((recSubType as! String) == "grouproomuserunblocked"){
                                                            
                                                            let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                                            
                                                            let roomJID = XMPPJID(string: recRoomId)
                                                            let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                            
                                                            let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                            
                                                            room.activate(self.xmppStream!)
                                                            
                                                            room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                            //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                            let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                            history.addAttribute(withName: "maxchars", stringValue: "0")
                                                            let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                            
                                                            
                                                            room.join(usingNickname: myJID!, history: history)
                                                            
                                                            
                                                            self.prepareMessageForServerIn(recRoomId, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: "group", recBanterNickName: "", isJoined: "yes")
                                                            let pickedAllAssets:[String: String] = ["banterstatus": "unblock"]
                                                            //print(pickedAllAssets)
                                                            
                                                            if(self.isOnChatView)
                                                            {
                                                                let notificationName = Notification.Name("blockunblocknotify")
                                                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                            }
                                                                
                                                            else if (self.isOnChatsView == true)
                                                            {
                                                                let notificationName = Notification.Name("RefreshChatsView")
                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                            }
                                                            
                                                            
                                                            
                                                        }
                                                        if((recSubType as! String) == "roomuserunblocked"){
                                                            
                                                            let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                                            
                                                            let roomJID = XMPPJID(string: recRoomId)
                                                            let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                            
                                                            let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                            
                                                            room.activate(self.xmppStream!)
                                                            
                                                            room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                            //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                            let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                            history.addAttribute(withName: "maxchars", stringValue: "0")
                                                            let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                            
                                                            
                                                            room.join(usingNickname: myJID!, history: history)
                                                           
                                                            
                                                            self.prepareMessageForServerIn(recRoomId, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: "banter", recBanterNickName: "", isJoined: "yes")
                                                            let pickedAllAssets:[String: String] = ["banterstatus": "unblock"]
                                                            //print(pickedAllAssets)
                                                            
                                                            if(self.isOnChatView)
                                                            {
                                                                let notificationName = Notification.Name("blockunblocknotify")
                                                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                            }
                                                            
                                                            
                                                            
                                                            
                                                            
                                                        }
                                                         if((recSubType as! String) == "singleblock"){
                                                            let time: Int64 = self.getUTCFormateDate()
                                                            let array =  db.query(sql: "SELECT * FROM Blockeduser where roomId = '\(messageFromTrim!)' And chatType = 'chatR'")
                                                                       if(array.count == 0){
                                                                       let BlockeduserTable = Blockeduser()
                                                                       BlockeduserTable.chatType = "chatR"
                                                                       BlockeduserTable.roomId = messageFromTrim!
                                                                            BlockeduserTable.touser = messageFromTrim!
                                                                       BlockeduserTable.unblocked_time = 0
                                                                       BlockeduserTable.status = "Blocked"
                                                                       BlockeduserTable.blocked_time = time
                                                                       if BlockeduserTable.save() != 0 {
                                                                           //isBlocked = true
                                                                          
                                                                       }
                                                                       }
                                                                       else{
                                                                           
                                                                          
                                                                          // let login = self.appDelegate().toUserJID as String
                                                                           
                                                                           _ = db.query(sql: " UPDATE blockeduser SET status = 'Blocked', unblocked_time = 0,blocked_time = \(time) WHERE roomId = '\(messageFromTrim!)' And chatType = 'chatR'")
                                                                           //print(result)
                                                                       }
                                                            /*if(self.isOnChatView)
                                                                                                                       {
                                                                                                                           let notificationName = Notification.Name("blockunblocknotify")
                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                                                                                       }*/
                                                                                                                       
                                                        }
                                                        if((recSubType as! String) == "singleunblock"){
                                                            let time: Int64 = self.getUTCFormateDate()
                                                            let array =  db.query(sql: "SELECT * FROM Blockeduser where roomId = '\(messageFromTrim!)' And chatType = 'chatR'")
                                                            
                                                                       if(array.count == 0){
                                                                       let BlockeduserTable = Blockeduser()
                                                                       BlockeduserTable.chatType = "chatR"
                                                                       BlockeduserTable.roomId = messageFromTrim!
                                                                            BlockeduserTable.touser = messageFromTrim!
                                                                       BlockeduserTable.unblocked_time = time
                                                                       BlockeduserTable.status = "unblocked"
                                                                       BlockeduserTable.blocked_time = 0
                                                                       if BlockeduserTable.save() != 0 {
                                                                           //isBlocked = true
                                                                          
                                                                       }
                                                                       }
                                                                       else{
                                                                           
                                                                          
                                                                          // let login = self.appDelegate().toUserJID as String
                                                                           
                                                                           _ = db.query(sql: " UPDATE blockeduser SET status = 'unblocked', unblocked_time = \(time) WHERE roomId = '\(messageFromTrim!)' And chatType = 'chatR'")
                                                                           //print(result)
                                                                       }
                                                            /*if(self.isOnChatView)
                                                                                                                       {
                                                                                                                           let notificationName = Notification.Name("blockunblocknotify")
                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                                                                                       }*/
                                                                                                                       
                                                        }
                                                    }
                                                    
                                                    
                                                    
                                                    
                                                    
                                                    let notificationName = Notification.Name("MessageReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    
                                                    
                                                    
                                                }
                                                else if(recMessageType == "image")
                                                {
                                                    let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    //var msgDict = [String: AnyObject]()
                                                    //var badgeCounts: Int = 0
                                                    let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                    let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    // let  messageSubType: String = (jsonDataMessage?.value(forKey: "sub_type") as? String)!
                                                    //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                    //print(messageTo ?? "")
                                                    //print(messageFromTrim ?? "")
                                                    //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                    //msgDict["toUserMobile"] = "+919826615203"
                                                    var messageSubType :String = ""
                                                    if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                    {
                                                        messageSubType = sub_type as! String
                                                    }
                                                    let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    
                                                    //Code to fetch media from live URL
                                                    let url = NSURL(string: recThumbLink)!
                                                    
                                                    //Code to prepare data before send to server
                                                    self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "image", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, messageSubType:  messageSubType)
                                                    
                                                    //We have recevied message from user so he will always To for me
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    
                                                    if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                    {
                                                        self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                        self.funGetSetLocalChats(messageId: messageId!, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                    }
                                                    
                                                    let notificationName = Notification.Name("messageInReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if (self.isOnChatsView == true)
                                                    {
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    //End
                                                    
                                                    // Download task:
                                                    // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                    let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                        // if responseData is not null...
                                                        if let data = responseData{
                                                            
                                                            // execute in UI thread
                                                            DispatchQueue.main.async(execute: { () -> Void in
                                                                //let tmpImg = UIImage(data: data)
                                                                //Store image to local path
                                                                //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: "")
                                                                // let uuid = UUID().uuidString
                                                                //let filePath = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: uuid)
                                                                let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                let imageId = arrReadselVideoPath.last
                                                                let arrReadimageId = imageId?.components(separatedBy: ".")
                                                                
                                                                _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                
                                                                self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: "", filePath: "", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                                
                                                                if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                                {
                                                                    //Post notification if user is on chats window and received any message
                                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                }
                                                                else if (self.isOnChatsView == true)
                                                                {
                                                                    let notificationName = Notification.Name("RefreshChatsView")
                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                }
                                                                /*ALAssetsLibrary().writeImage(toSavedPhotosAlbum: tmpImg?.cgImage!, orientation: ALAssetOrientation(rawValue: (tmpImg?.imageOrientation.rawValue)!)!) { (path, error) in
                                                                 print(path ?? "")
                                                                 let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                                                                 
                                                                 //print(asset)
                                                                 //Write code to save asset local id to previously prepared dat
                                                                 //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier)
                                                                 
                                                                 self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: asset.localIdentifier, recReadUserJid: messageFromTrim!)
                                                                 
                                                                 if(self.isOnBantersView == true && recRoomType == "banter")
                                                                 {
                                                                 //Post notification if user is on chats window and received any message
                                                                 let notificationName = Notification.Name("RefreshBantersView")
                                                                 NotificationCenter.default.post(name: notificationName, object: nil)
                                                                 }
                                                                 else if (self.isOnChatsView == true)
                                                                 {
                                                                 let notificationName = Notification.Name("RefreshChatsView")
                                                                 NotificationCenter.default.post(name: notificationName, object: nil)
                                                                 }
                                                                 
                                                                 //End prepare chat data
                                                                 
                                                                 
                                                                 
                                                                 
                                                                 
                                                                 
                                                                 }*/
                                                                
                                                                
                                                            })
                                                        }
                                                        else
                                                        {
                                                            //Error
                                                            // print(error ?? "Error")
                                                            self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                            
                                                        }
                                                    }
                                                    
                                                    // Run task
                                                    task.resume()
                                                    //End Code to fetch media from live URL
                                                    
                                                }
                                                else if(recMessageType == "video")
                                                {
                                                    let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    //var msgDict = [String: AnyObject]()
                                                    //var badgeCounts: Int = 0
                                                    let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                    let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    // let  messageSubType: String = (jsonDataMessage?.value(forKey: "sub_type") as? String)!
                                                    let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    var messageSubType :String = ""
                                                    if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                    {
                                                        messageSubType = sub_type as! String
                                                    }
                                                    //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                    //print(messageTo ?? "")
                                                    //print(messageFromTrim ?? "")
                                                    //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                    //msgDict["toUserMobile"] = "+919826615203"
                                                    
                                                    
                                                    //Code to fetch media from live URL
                                                    let url = NSURL(string: recThumbLink)!
                                                    
                                                    
                                                    //Code to prepare data before send to server
                                                    self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "video", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, messageSubType:  messageSubType)
                                                    
                                                    //We have recevied message from user so he will always To for me
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    
                                                    if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                    {
                                                        self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                        self.funGetSetLocalChats(messageId: messageId!, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                    }
                                                    
                                                    let notificationName = Notification.Name("messageInReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if (self.isOnChatsView == true)
                                                    {
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    //End
                                                    
                                                    // Download task:
                                                    // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                    let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                        // if responseData is not null...
                                                        if let data = responseData{
                                                            // print(responseUrl ?? "")
                                                            // print(data)
                                                            // execute in UI thread
                                                            DispatchQueue.main.async(execute: { () -> Void in
                                                                //let tmpImg = UIImage(data: data)
                                                                //Store image to local path
                                                                //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: fileName)
                                                                // let uuid = UUID().uuidString
                                                                //let documentsPath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0];
                                                                //let filePath = "file://" + "\(documentsPath)/" + uuid + ".mp4";
                                                                let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                let imageId = arrReadselVideoPath.last
                                                                let arrReadimageId = imageId?.components(separatedBy: ".")
                                                                
                                                                _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                
                                                                do
                                                                {
                                                                    // try data.write(to: NSURL(string:filePath) as URL!, options: NSData.WritingOptions.atomicWrite)
                                                                    
                                                                    //print(videoURL?.path ?? "")
                                                                    
                                                                    //Write code to save asset local id to previously prepared dat
                                                                    
                                                                    //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier, filePath: "file://" + (videoURL?.path)!)
                                                                    
                                                                    self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: "", filePath: "", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                                    
                                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                                    {
                                                                        //Post notification if user is on chats window and received any message
                                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                                    }
                                                                    else if (self.isOnChatsView == true)
                                                                    {
                                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                                    }
                                                                    
                                                                    
                                                                    
                                                                }
                                                                catch {
                                                                    //print(error.localizedDescription)
                                                                }
                                                                
                                                                
                                                                
                                                                
                                                                
                                                            })
                                                        }
                                                        else
                                                        {
                                                            //Error
                                                            // print(error ?? "Error")
                                                            self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                            
                                                        }
                                                    }
                                                    
                                                    // Run task
                                                    task.resume()
                                                    //End Code to fetch media from live URL
                                                    
                                                }
                                                
                                                
                                            } catch let error as NSError {
                                                //print(error)
                                            }
                                        }
                                        
                                    }// Else of this we have to put here groupchat/banterroom and userupdates
                                    
                                    
                                    
                                    
                                }
                            }
                            else
                            {
                                let messageType = message.attributeStringValue(forName: "type")
                                if(messageType == "chat") //This is single one to one chat
                                {
                                    
                                    if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                    {
                                        do {
                                            let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                            
                                            let recMessageType: String = (jsonDataMessage?.value(forKey: "type") as? String)!
                                            
                                            let recBanterNickName: String = ""//(jsonDataMessage?.value(forKey: "banternickname") as? String)!
                                            
                                            if(recMessageType == "text")
                                            {
                                                let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                
                                                let messageId = message.attributeStringValue(forName: "id")
                                                let messageTo = message.attributeStringValue(forName: "to")
                                                let messageFrom = message.attributeStringValue(forName: "from")
                                                let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                let messageFromTrim = arrMessageFrom?[0]
                                                
                                                let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                //let  messageSubType: String = (jsonDataMessage?.value(forKey: "sub_type") as? String)!
                                                //let isJoined: Bool = sender.isJoined
                                                var messageSubType :String = ""
                                                if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                {
                                                    messageSubType = sub_type as! String
                                                }
                                                
                                                
                                                /*if #available(iOS 10.0, *) {
                                                 let content = UNMutableNotificationContent()
                                                 content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                 content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                 arguments: nil)
                                                 content.sound = UNNotificationSound.default()
                                                 let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                 }*/
                                                
                                                
                                                //Code to prepare data before send to server
                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName,messageSubType:  messageSubType)
                                                
                                                //We have recevied message from user so he will always To for me
                                                self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                
                                                if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                {
                                                    self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    self.funGetSetLocalChats(messageId: messageId!, chatStatus: "read", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                }
                                                
                                                let notificationName = Notification.Name("messageInReceivedFromServer")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                {
                                                    //Post notification if user is on chats window and received any message
                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                else if (self.isOnChatsView == true)
                                                {
                                                    let notificationName = Notification.Name("RefreshChatsView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                //End
                                                
                                                
                                                
                                            }
                                            else if(recMessageType == "header")
                                            {
                                                /*let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!*/
                                                let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                
                                                let messageId = message.attributeStringValue(forName: "id")
                                                let messageTo = message.attributeStringValue(forName: "to")
                                                let messageFrom = message.attributeStringValue(forName: "from")
                                                let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                let messageFromTrim = arrMessageFrom?[0]
                                                
                                                let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                
                                                
                                                
                                                
                                                // let objUserName: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                //let arrUserName = objUserName.components(separatedBy: "@")
                                                //let objUserNameTrim = arrUserName[0]
                                                /*if(!msgSentByUserToGroup.isEmpty)
                                                 {
                                                 messageTo = msgSentByUserToGroup
                                                 }*/
                                                //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                if let recSubType = jsonDataMessage?.value(forKey: "subtype")
                                                {
                                                    if(recRoomType == "banter")
                                                    {
                                                        if((recSubType as! String) == "invite") //Revisit
                                                        {
                                                            let recRoomName: String = (jsonDataMessage?.value(forKey: "roomname") as? String)!
                                                            let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                                            self.banterRoomName = recRoomName
                                                           getroomdetails(roomid: recRoomId)
                                                           /* var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "getroomdetails" as AnyObject
                                                            
                                                            
                                                            
                                                            do {
                                                                //Creating Request Data
                                                                var dictRequestData = [String: AnyObject]()
                                                                
                                                                dictRequestData["roomid"] = recRoomId as AnyObject
                                                                
                                                                dictRequest["requestData"] = dictRequestData as AnyObject
                                                                
                                                                
                                                                let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
                                                                // print(strGetBanterDetails)
                                                                self.sendRequestToAPI(strRequestDict: strGetBanterDetails)
                                                            } catch {
                                                                //print(error.localizedDescription)
                                                            }*/
                                                            /*self.prepareMessageForServerIn(messageFromTrim!, messageContent: "You are invited to this banter room. You can join this banter room by tap on join button.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, isJoined: false)*/
                                                            
                                                        }
                                                        
                                                        
                                                        
                                                    }
                                                    else  if(recRoomType == "group")
                                                    {
                                                        if((recSubType as! String) == "invite") //Revisit
                                                        {
                                                            
                                                            // let recRoomName: String = (jsonDataMessage?.value(forKey: "roomname") as? String)!
                                                            //self.banterRoomName = recRoomName
                                                            let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                                            UserDefaults.standard.setValue(jsonDataMessage?.value(forKey: "time"), forKey: recRoomId)
                                                            UserDefaults.standard.synchronize()
                                                            getroomdetails(roomid: recRoomId)
                                                          /*  var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "getroomdetails" as AnyObject
                                                            
                                                            
                                                            
                                                            do {
                                                                //Creating Request Data
                                                                var dictRequestData = [String: AnyObject]()
                                                                
                                                                dictRequestData["roomid"] = recRoomId as AnyObject
                                                                
                                                                dictRequest["requestData"] = dictRequestData as AnyObject
                                                                
                                                                
                                                                let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
                                                                // print(strGetBanterDetails)
                                                                self.sendRequestToAPI(strRequestDict: strGetBanterDetails)
                                                            } catch {
                                                                //print(error.localizedDescription)
                                                            }*/
                                                            /*self.prepareMessageForServerIn(messageFromTrim!, messageContent: "You are invited to this banter room. You can join this banter room by tap on join button.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, isJoined: false)*/
                                                            
                                                        }
                                                        
                                                        
                                                        
                                                    }
                                                    if((recSubType as! String) == "merchandise") //Revisit
                                                    {
                                                        let messages1: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                        let totalcoins: Int = (jsonDataMessage?.value(forKey: "totalcoins") as? Int)!
                                                        let availablecoins: Int = (jsonDataMessage?.value(forKey: "availablecoins") as? Int)!
                                                        AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
                                                        DispatchQueue.main.async { AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: messages1+"\(self.GetvalueRedeemMesg(avilablecoin: availablecoins))" ,fancoins: String(70))
                                                        }
                                                    }
                                                    if((recSubType as! String) == "grouproomuserunblocked"){
                                                        
                                                        let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                                        
                                                        let roomJID = XMPPJID(string: recRoomId)
                                                        let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                        
                                                        let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                        
                                                        room.activate(self.xmppStream!)
                                                        
                                                        room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                        //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                        history.addAttribute(withName: "maxchars", stringValue: "0")
                                                        let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        
                                                        
                                                        room.join(usingNickname: myJID!, history: history)
                                                        
                                                        
                                                        self.prepareMessageForServerIn(recRoomId, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: "group", recBanterNickName: "", isJoined: "yes")
                                                        let pickedAllAssets:[String: String] = ["banterstatus": "unblock"]
                                                        //print(pickedAllAssets)
                                                        
                                                        if(self.isOnChatView)
                                                        {
                                                            let notificationName = Notification.Name("blockunblocknotify")
                                                            NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                        }
                                                            
                                                            
                                                        else if (self.isOnChatsView == true)
                                                        {
                                                            let notificationName = Notification.Name("RefreshChatsView")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                        }
                                                        
                                                        
                                                    }
                                                    if((recSubType as! String) == "roomuserunblocked"){
                                                        
                                                        let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                                        
                                                        let roomJID = XMPPJID(string: recRoomId)
                                                        let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                        
                                                        let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                        
                                                        room.activate(self.xmppStream!)
                                                        
                                                        room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                        //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                        history.addAttribute(withName: "maxchars", stringValue: "0")
                                                        let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                        
                                                        
                                                        room.join(usingNickname: myJID!, history: history)
                                                        
                                                        
                                                        self.prepareMessageForServerIn(recRoomId, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: "banter", recBanterNickName: "", isJoined: "yes")
                                                        let pickedAllAssets:[String: String] = ["banterstatus": "unblock"]
                                                        //print(pickedAllAssets)
                                                        
                                                        if(self.isOnChatView)
                                                        {
                                                            let notificationName = Notification.Name("blockunblocknotify")
                                                            NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                        }
                                                        if(self.isOnBantersView == true )
                                                        {
                                                            //Post notification if user is on chats window and received any message
                                                            let notificationName = Notification.Name("RefreshBantersView")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                        }
                                                        
                                                        
                                                        
                                                        
                                                    }
                                                    if((recSubType as! String) == "singleblock"){
                                                                                                              let time: Int64 = self.getUTCFormateDate()
                                                                                                              let array =  db.query(sql: "SELECT * FROM Blockeduser where roomId = '\(messageFromTrim!)' And chatType = 'chatR'")
                                                                                                                         if(array.count == 0){
                                                                                                                         let BlockeduserTable = Blockeduser()
                                                                                                                         BlockeduserTable.chatType = "chatR"
                                                                                                                         BlockeduserTable.roomId = messageFromTrim!
                                                                                                                              BlockeduserTable.touser = messageFromTrim!
                                                                                                                         BlockeduserTable.unblocked_time = 0
                                                                                                                         BlockeduserTable.status = "Blocked"
                                                                                                                         BlockeduserTable.blocked_time = time
                                                                                                                         if BlockeduserTable.save() != 0 {
                                                                                                                             //isBlocked = true
                                                                                                                            
                                                                                                                         }
                                                                                                                         }
                                                                                                                         else{
                                                                                                                             
                                                                                                                            
                                                                                                                            // let login = self.appDelegate().toUserJID as String
                                                                                                                             
                                                                                                                             _ = db.query(sql: " UPDATE blockeduser SET status = 'Blocked', unblocked_time = 0,blocked_time = \(time) WHERE roomId = '\(messageFromTrim!)' And chatType = 'chatR'")
                                                                                                                             //print(result)
                                                                                                                         }
                                                                                                              /*if(self.isOnChatView)
                                                                                                                                                                         {
                                                                                                                                                                             let notificationName = Notification.Name("blockunblocknotify")
                                                                                                                                                                             NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                                                                                                                                         }*/
                                                                                                                                                                         
                                                                                                          }
                                                    if((recSubType as! String) == "singleunblock"){
                                                                                                               let time: Int64 = self.getUTCFormateDate()
                                                                                                               let array =  db.query(sql: "SELECT * FROM Blockeduser where roomId = '\(messageFromTrim!)' And chatType = 'chatR'")
                                                                                                                          if(array.count == 0){
                                                                                                                          let BlockeduserTable = Blockeduser()
                                                                                                                          BlockeduserTable.chatType = "chatR"
                                                                                                                          BlockeduserTable.roomId = messageFromTrim!
                                                                                                                               BlockeduserTable.touser = messageFromTrim!
                                                                                                                          BlockeduserTable.unblocked_time = time
                                                                                                                          BlockeduserTable.status = "unblocked"
                                                                                                                          BlockeduserTable.blocked_time = 0
                                                                                                                          if BlockeduserTable.save() != 0 {
                                                                                                                              //isBlocked = true
                                                                                                                             
                                                                                                                          }
                                                                                                                          }
                                                                                                                          else{
                                                                                                                              
                                                                                                                             
                                                                                                                             // let login = self.appDelegate().toUserJID as String
                                                                                                                              
                                                                                                                              _ = db.query(sql: " UPDATE blockeduser SET status = 'unblocked', unblocked_time = \(time) WHERE roomId = '\(messageFromTrim!)' And chatType = 'chatR'")
                                                                                                                              //print(result)
                                                                                                                          }
                                                                                                               /*if(self.isOnChatView)
                                                                                                                                                                          {
                                                                                                                                                                              let notificationName = Notification.Name("blockunblocknotify")
                                                                                                                                                                              NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                                                                                                                                          }*/
                                                                                                                                                                          
                                                                                                           }
                                                }
                                                
                                                
                                                
                                                
                                                
                                                let notificationName = Notification.Name("MessageReceivedFromServer")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                {
                                                    //Post notification if user is on chats window and received any message
                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                
                                                
                                                
                                                
                                            }
                                            else if(recMessageType == "image")
                                            {
                                                let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                
                                                let messageId = message.attributeStringValue(forName: "id")
                                                let messageTo = message.attributeStringValue(forName: "to")
                                                let messageFrom = message.attributeStringValue(forName: "from")
                                                let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                let messageFromTrim = arrMessageFrom?[0]
                                                //var msgDict = [String: AnyObject]()
                                                //var badgeCounts: Int = 0
                                                let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                //let  messageSubType: String = (jsonDataMessage?.value(forKey: "sub_type") as? String)!
                                                var messageSubType :String = ""
                                                if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                {
                                                    messageSubType = sub_type as! String
                                                }
                                                //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                //print(messageTo ?? "")
                                                //print(messageFromTrim ?? "")
                                                //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                //msgDict["toUserMobile"] = "+919826615203"
                                                let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                
                                                //Code to fetch media from live URL
                                                let url = NSURL(string: recThumbLink)!
                                                
                                                //Code to prepare data before send to server
                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "image", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, messageSubType:  messageSubType)
                                                
                                                //We have recevied message from user so he will always To for me
                                                self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                
                                                if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                {
                                                    self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    self.funGetSetLocalChats(messageId: messageId!, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                }
                                                
                                                let notificationName = Notification.Name("messageInReceivedFromServer")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                {
                                                    //Post notification if user is on chats window and received any message
                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                else if (self.isOnChatsView == true)
                                                {
                                                    let notificationName = Notification.Name("RefreshChatsView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                //End
                                                
                                                // Download task:
                                                // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                    // if responseData is not null...
                                                    if let data = responseData{
                                                        
                                                        // execute in UI thread
                                                        DispatchQueue.main.async(execute: { () -> Void in
                                                            //let tmpImg = UIImage(data: data)
                                                            //Store image to local path
                                                            //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: "")
                                                            // let uuid = UUID().uuidString
                                                            // let filePath = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: uuid)
                                                            let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                            let imageId = arrReadselVideoPath.last
                                                            let arrReadimageId = imageId?.components(separatedBy: ".")
                                                            
                                                            _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                            self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: "", filePath: "", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                            
                                                            if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                            {
                                                                //Post notification if user is on chats window and received any message
                                                                let notificationName = Notification.Name("RefreshBantersView")
                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                            }
                                                            else if (self.isOnChatsView == true)
                                                            {
                                                                let notificationName = Notification.Name("RefreshChatsView")
                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                            }
                                                            /*ALAssetsLibrary().writeImage(toSavedPhotosAlbum: tmpImg?.cgImage!, orientation: ALAssetOrientation(rawValue: (tmpImg?.imageOrientation.rawValue)!)!) { (path, error) in
                                                             print(path ?? "")
                                                             let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                                                             
                                                             //print(asset)
                                                             //Write code to save asset local id to previously prepared dat
                                                             //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier)
                                                             
                                                             self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: asset.localIdentifier, recReadUserJid: messageFromTrim!)
                                                             
                                                             if(self.isOnBantersView == true && recRoomType == "banter")
                                                             {
                                                             //Post notification if user is on chats window and received any message
                                                             let notificationName = Notification.Name("RefreshBantersView")
                                                             NotificationCenter.default.post(name: notificationName, object: nil)
                                                             }
                                                             else if (self.isOnChatsView == true)
                                                             {
                                                             let notificationName = Notification.Name("RefreshChatsView")
                                                             NotificationCenter.default.post(name: notificationName, object: nil)
                                                             }
                                                             
                                                             //End prepare chat data
                                                             
                                                             
                                                             
                                                             
                                                             
                                                             
                                                             }*/
                                                            
                                                            
                                                        })
                                                    }
                                                    else
                                                    {
                                                        //Error
                                                        // print(error ?? "Error")
                                                        self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                        
                                                    }
                                                }
                                                
                                                // Run task
                                                task.resume()
                                                //End Code to fetch media from live URL
                                                
                                            }
                                            else if(recMessageType == "video")
                                            {
                                                let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                
                                                let messageId = message.attributeStringValue(forName: "id")
                                                let messageTo = message.attributeStringValue(forName: "to")
                                                let messageFrom = message.attributeStringValue(forName: "from")
                                                let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                let messageFromTrim = arrMessageFrom?[0]
                                                //var msgDict = [String: AnyObject]()
                                                //var badgeCounts: Int = 0
                                                let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                //let  messageSubType: String = (jsonDataMessage?.value(forKey: "sub_type") as? String)!
                                                let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                var messageSubType :String = ""
                                                if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                {
                                                    messageSubType = sub_type as! String
                                                }
                                                //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                //print(messageTo ?? "")
                                                //print(messageFromTrim ?? "")
                                                //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                //msgDict["toUserMobile"] = "+919826615203"
                                                
                                                
                                                //Code to fetch media from live URL
                                                let url = NSURL(string: recThumbLink)!
                                                
                                                
                                                //Code to prepare data before send to server
                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "video", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, messageSubType:  messageSubType)
                                                
                                                //We have recevied message from user so he will always To for me
                                                self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                
                                                if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                {
                                                    self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    self.funGetSetLocalChats(messageId: messageId!, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                }
                                                
                                                let notificationName = Notification.Name("messageInReceivedFromServer")
                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                {
                                                    //Post notification if user is on chats window and received any message
                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                else if (self.isOnChatsView == true)
                                                {
                                                    let notificationName = Notification.Name("RefreshChatsView")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                                //End
                                                
                                                // Download task:
                                                // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                    // if responseData is not null...
                                                    if let data = responseData{
                                                        // print(responseUrl ?? "")
                                                        // print(data)
                                                        // execute in UI thread
                                                        DispatchQueue.main.async(execute: { () -> Void in
                                                            //let tmpImg = UIImage(data: data)
                                                            //Store image to local path
                                                            //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: fileName)
                                                            // let uuid = UUID().uuidString
                                                            // let documentsPath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0];
                                                            //let filePath = "file://" + "\(documentsPath)/" + uuid + ".mp4";
                                                            
                                                            // do
                                                            //{
                                                            //try data.write(to: NSURL(string:filePath) as URL!, options: NSData.WritingOptions.atomicWrite)
                                                            let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                            let imageId = arrReadselVideoPath.last
                                                            let arrReadimageId = imageId?.components(separatedBy: ".")
                                                            
                                                            _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                            
                                                            //print(videoURL?.path ?? "")
                                                            
                                                            //Write code to save asset local id to previously prepared dat
                                                            
                                                            //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier, filePath: "file://" + (videoURL?.path)!)
                                                            
                                                            self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: "", filePath: "", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                            
                                                            if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                            {
                                                                //Post notification if user is on chats window and received any message
                                                                let notificationName = Notification.Name("RefreshBantersView")
                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                            }
                                                            else if (self.isOnChatsView == true)
                                                            {
                                                                let notificationName = Notification.Name("RefreshChatsView")
                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                            }
                                                            
                                                            
                                                            
                                                            //  }
                                                            
                                                            
                                                            
                                                            
                                                            
                                                        })
                                                    }
                                                    else
                                                    {
                                                        //Error
                                                        //print(error ?? "Error")
                                                        self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                        
                                                    }
                                                }
                                                
                                                // Run task
                                                task.resume()
                                                //End Code to fetch media from live URL
                                                
                                            }
                                        } catch let error as NSError {
                                            print(error)
                                        }
                                        
                                    }
                                    
                                    
                                    
                                }
                            }
                        }
                    }
                }
                
                //}
            }
            
        }
        
        
    }
    
    func doubleCheckUserStatusInBanterRoom(isJoined: String = "no", isAdmin: String = "no")
    {
        if(self.arrAllChats.count > 0)
        {
            if let dt = self.arrAllChats[AppDelegate().toUserJID]
            {
                
                //New code to manage read badge counts
                var tmpArrChatDetails = [String : AnyObject]()
                
                tmpArrChatDetails = dt as! [String : AnyObject]
                
                self.isJoined = isJoined as AnyObject as! String
                tmpArrChatDetails["isJoined"] = isJoined as AnyObject
                self.isAdmin = isAdmin
                tmpArrChatDetails["isAdmin"] = isAdmin as AnyObject
                
                
                self.arrAllChats[self.toUserJID] = tmpArrChatDetails as AnyObject
                
                //Save array to local temp
                do {
                    if(self.arrAllChats.count > 0)
                    {
                        let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.arrAllChats, options: .prettyPrinted)
                        let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                        UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                        UserDefaults.standard.synchronize()
                    }
                } catch {
                    //print(error.localizedDescription)
                }
                //End
                
            }
            
        }
        
        
    }
    
    func isCloseLeaveBanter(mySupportedTeam: Int) -> Bool
    {
        var checkCount: Int = 0
        //Check if user support both teams banter is based on
        if(mySupportedTeam == self.primaryTeamId)
        {
            checkCount = checkCount + 1
        }
        else if(mySupportedTeam == self.optionalTeam1Id)
        {
            checkCount = checkCount + 1
        }
        else if(mySupportedTeam == self.optionalTeam2Id)
        {
            checkCount = checkCount + 1
        }
        else if(mySupportedTeam == self.optionalTeam3Id)
        {
            checkCount = checkCount + 1
        }
        
        
        if(checkCount > 0)
        {
            return false
        }
        
        return true
    }
    func isCloseLeaveTeambr(mySupportedTeam: Int) -> Bool
       {
           var checkCount: Int = 0
           //Check if user support both teams banter is based on
           if(mySupportedTeam == self.primaryTeamId)
           {
               checkCount = checkCount + 1
           }
           else if(mySupportedTeam == self.optionalTeam1Id)
           {
               checkCount = checkCount + 1
           }
           else if(mySupportedTeam == self.optionalTeam2Id)
           {
               checkCount = checkCount + 1
           }
           else if(mySupportedTeam == self.optionalTeam3Id)
           {
               checkCount = checkCount + 1
           }
           
           
           if(checkCount > 0)
           {
               return true
           }
           
           return false
       }
    func funSendGroupMessageDelivery(messageTo: String, messageFrom: String, messageId: String)
    {
        
        
        //Save array to local temp
        do {
            
            //Code to send message to XMPP Server
            var messageDict = [String: AnyObject]()
            //type //value //time //caption //banternickname //ip
            let time: Int64 = self.getUTCFormateDate()
            messageDict["userJid"] = messageFrom as AnyObject
            messageDict["time"] = time as AnyObject
            
            let dataMessage = try JSONSerialization.data(withJSONObject: messageDict, options: .prettyPrinted)
            let strMessage = NSString(data: dataMessage, encoding: String.Encoding.utf8.rawValue)! as String
            // print(strMessage)
            
            let body: XMLElement = XMLElement.element(withName: "body") as! XMLElement
            body.stringValue = strMessage
            
            let readElement: XMLElement = XMLElement.element(withName: "received") as! XMLElement
            readElement.addAttribute(withName: "xmlns", stringValue: "urn:xmpp:receipts")
            readElement.addAttribute(withName: "id", stringValue: messageId)
            
            let message: XMLElement = XMLElement.element(withName: "message") as! XMLElement
            
            message.addAttribute(withName: "type", stringValue: "groupchat")
            //message.addAttribute(withName: "id", stringValue: messageId)
            message.addAttribute(withName: "to", stringValue: messageTo)
            message.addAttribute(withName: "from", stringValue: messageFrom)
            message.addChild(body)
            message.addChild(readElement)
            
            //print(message)
            
            xmppStream?.send(message)
            
            //End Code to send message to XMPP Server
            
        } catch {
            //print(error.localizedDescription)
        }
        //End
        
        //Last 3 fields will be used for groups and banter room.
        //self.funGetSetLocalChats(messageId: messageId, chatStatus: "received", deleverUsers: "", receivedUsers: "", deleverUsersCount: 0)
    }
    
    func funSendMessageDelivery(messageTo: String, messageFrom: String, messageId: String)
    {
        
        
        //Save array to local temp
        do {
            
            //Code to send message to XMPP Server
            var messageDict = [String: AnyObject]()
            //type //value //time //caption //banternickname //ip
            let time: Int64 = self.getUTCFormateDate()
            messageDict["userJid"] = messageFrom as AnyObject
            messageDict["time"] = time as AnyObject
            
            let dataMessage = try JSONSerialization.data(withJSONObject: messageDict, options: .prettyPrinted)
            let strMessage = NSString(data: dataMessage, encoding: String.Encoding.utf8.rawValue)! as String
            //print(strMessage)
            
            let body: XMLElement = XMLElement.element(withName: "body") as! XMLElement
            body.stringValue = strMessage
            
            let readElement: XMLElement = XMLElement.element(withName: "received") as! XMLElement
            readElement.addAttribute(withName: "xmlns", stringValue: "urn:xmpp:receipts")
            readElement.addAttribute(withName: "id", stringValue: messageId)
            
            let message: XMLElement = XMLElement.element(withName: "message") as! XMLElement
            
            //message.addAttribute(withName: "type", stringValue: "chat")
            //message.addAttribute(withName: "id", stringValue: messageId)
            message.addAttribute(withName: "to", stringValue: messageTo)
            message.addAttribute(withName: "from", stringValue: messageFrom)
            message.addChild(body)
            message.addChild(readElement)
            
            //print(message)
            
            xmppStream?.send(message)
            
            //End Code to send message to XMPP Server
            
        } catch {
            //print(error.localizedDescription)
        }
        //End
        
        //Last 3 fields will be used for groups and banter room.
        //self.funGetSetLocalChats(messageId: messageId, chatStatus: "received", deleverUsers: "", receivedUsers: "", deleverUsersCount: 0)
    }
    
    func funSendMessageReceived(messageTo: String, messageFrom: String, messageId: String)
    {
        
        
        //Save array to local temp
        do {
            
            //Code to send message to XMPP Server
            var messageDict = [String: AnyObject]()
            //type //value //time //caption //banternickname //ip
            let time: Int64 = self.getUTCFormateDate()
            messageDict["userJid"] = messageFrom as AnyObject
            messageDict["time"] = time as AnyObject
            
            let dataMessage = try JSONSerialization.data(withJSONObject: messageDict, options: .prettyPrinted)
            let strMessage = NSString(data: dataMessage, encoding: String.Encoding.utf8.rawValue)! as String
            // print(strMessage)
            
            let body: XMLElement = XMLElement.element(withName: "body") as! XMLElement
            body.stringValue = strMessage
            
            let readElement: XMLElement = XMLElement.element(withName: "read") as! XMLElement
            readElement.addAttribute(withName: "xmlns", stringValue: "urn:xmpp:read")
            readElement.addAttribute(withName: "id", stringValue: messageId)
            
            let message: XMLElement = XMLElement.element(withName: "message") as! XMLElement
            
            //message.addAttribute(withName: "type", stringValue: "chat")
            //message.addAttribute(withName: "id", stringValue: messageId)
            message.addAttribute(withName: "to", stringValue: messageTo)
            message.addAttribute(withName: "from", stringValue: messageFrom)
            message.addChild(body)
            message.addChild(readElement)
            
            //print(message)
            
            xmppStream?.send(message)
            
            //End Code to send message to XMPP Server
            
        } catch {
            //print(error.localizedDescription)
        }
        //End
        
        //Last 3 fields will be used for groups and banter room.
        //self.funGetSetLocalChats(messageId: messageId, chatStatus: "received", deleverUsers: "", receivedUsers: "", deleverUsersCount: 0)
    }
    
    func funSendGroupMessageReceived(messageTo: String, messageFrom: String, messageId: String)
    {
        
        
        //Save array to local temp
        do {
            
            //Code to send message to XMPP Server
            var messageDict = [String: AnyObject]()
            //type //value //time //caption //banternickname //ip
            let time: Int64 = self.getUTCFormateDate()
            messageDict["userJid"] = messageFrom as AnyObject
            messageDict["time"] = time as AnyObject
            
            let dataMessage = try JSONSerialization.data(withJSONObject: messageDict, options: .prettyPrinted)
            let strMessage = NSString(data: dataMessage, encoding: String.Encoding.utf8.rawValue)! as String
            ///print(strMessage)
            
            let body: XMLElement = XMLElement.element(withName: "body") as! XMLElement
            body.stringValue = strMessage
            
            let readElement: XMLElement = XMLElement.element(withName: "read") as! XMLElement
            readElement.addAttribute(withName: "xmlns", stringValue: "urn:xmpp:read")
            readElement.addAttribute(withName: "id", stringValue: messageId)
            
            let message: XMLElement = XMLElement.element(withName: "message") as! XMLElement
            
            message.addAttribute(withName: "type", stringValue: "groupchat")
            //message.addAttribute(withName: "id", stringValue: messageId)
            message.addAttribute(withName: "to", stringValue: messageTo)
            message.addAttribute(withName: "from", stringValue: messageFrom)
            message.addChild(body)
            message.addChild(readElement)
            
            //print(message)
            
            xmppStream?.send(message)
            
            //End Code to send message to XMPP Server
            
        } catch {
            // print(error.localizedDescription)
        }
        //End
        
        //Last 3 fields will be used for groups and banter room.
        //self.funGetSetLocalChats(messageId: messageId, chatStatus: "received", deleverUsers: "", receivedUsers: "", deleverUsersCount: 0)
    }
    
    func funGetSetLocalChats(messageId: String, messageContent: String = "", thumbLink: String = "", chatStatus: String = "", fileLocalId: String = "", filePath: String = "", deleverUsers: String = "", deleverTime: Int64 = 0, receivedUsers: String = "", receivedTime: Int64 = 0, deleverUsersCount: Int = 0, recReadUserJid: String  = "", isScrollToBottom: Bool = true)
    {
        //Write code to save asset local id to previously prepared dat
        
        var msgDict = [String: AnyObject]()
        //Get from local user defaults temp
        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
        if localArrAllChats != nil
        {
            //Code to parse json data
            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                do {
                    self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                    
                } catch let error as NSError {
                    // print(error)
                }
            }
        }
        
        //End
        if((self.arrAllChats.count > 0) && !(messageId.isEmpty))
        {
            //Get and Set Chat Data
            var tmpArrChatDetails = [String : AnyObject]()
            var isChatsAvailable = false
            if(!recReadUserJid.isEmpty)
            {
                for tmpKey in self.self.arrAllChats
                {
                    if(tmpKey.key == recReadUserJid)
                    {
                        isChatsAvailable = true
                    }
                }
                if(isChatsAvailable)
                {
                    tmpArrChatDetails = self.arrAllChats[recReadUserJid] as! [String : AnyObject]
                }
            }
            else
            {
                if(!toUserJID.isEmpty){
                    tmpArrChatDetails = self.arrAllChats[self.toUserJID] as! [String : AnyObject]
                }
                
            }
            
            if(tmpArrChatDetails.count > 0)
            {
                //self.arrUserChat = tmpArrChatDetails["Chats"] as! [AnyObject]
                var tmpArrUserChat = tmpArrChatDetails["Chats"] as! [AnyObject]
                //let tmpArray: NSArray = tmpArrUserChat as NSArray
                //let namePredicate = NSPredicate(format: "messageId = %@", messageId!);
                //var filteredArray = tmpArray.filter { namePredicate.evaluate(with: $0) };
                //if filteredArray.count != 0
                //{
                //msgDict = filteredArray[0] as! [String: AnyObject]
                
                let ind = tmpArrUserChat.firstIndex(where: { (item) -> Bool in
                    if((item["messageId"] as! String) == messageId)
                    {
                        msgDict = item as! [String : AnyObject]
                        return true
                    }
                    return false
                })
                
                if(ind != nil)
                {
                    if(!messageContent.isEmpty)
                    {
                        msgDict["messageContent"] = messageContent as AnyObject
                    }
                    /* else
                     {
                     msgDict["messageContent"] = "" as AnyObject
                     }*/
                    if(!thumbLink.isEmpty)
                    {
                        msgDict["thumb"] = thumbLink as AnyObject
                    }
                    /*else
                     {
                     msgDict["thumb"] = "" as AnyObject
                     }*/
                    if(!chatStatus.isEmpty)
                    {
                        msgDict["status"] = chatStatus as AnyObject
                    }
                    /*else
                     {
                     msgDict["status"] = "" as AnyObject
                     }*/
                    if(!fileLocalId.isEmpty)
                    {
                        msgDict["fileLocalId"] = fileLocalId as AnyObject
                    }
                    /*else
                     {
                     msgDict["fileLocalId"] = "" as AnyObject
                     }*/
                    if(!filePath.isEmpty)
                    {
                        msgDict["filePath"] = filePath as AnyObject
                    }
                    /*else
                     {
                     msgDict["filePath"] = "" as AnyObject
                     }*/
                    if(!deleverUsers.isEmpty)
                    {
                        if msgDict["deleverUsers"] != nil
                        {
                            var arrDeleverUsers: [AnyObject] = msgDict["deleverUsers"] as! [AnyObject]
                            
                            var tmpDeleverUsers: [String : AnyObject] = [:]
                            tmpDeleverUsers["delUserJID"] = deleverUsers as AnyObject
                            tmpDeleverUsers["delUserTime"] = deleverTime as AnyObject
                            //arrDeleverUsers.add(tmpDeleverUsers)
                            arrDeleverUsers.append(tmpDeleverUsers as AnyObject)
                            msgDict["deleverUsers"] = arrDeleverUsers as AnyObject
                            //print("Delever")
                            /// print(arrDeleverUsers)
                        }
                        else
                        {
                            var arrDeleverUsers: [AnyObject] = [AnyObject]()
                            
                            var tmpDeleverUsers: [String : AnyObject] = [:]
                            tmpDeleverUsers["delUserJID"] = deleverUsers as AnyObject
                            tmpDeleverUsers["delUserTime"] = deleverTime as AnyObject
                            //arrDeleverUsers.add(tmpDeleverUsers)
                            arrDeleverUsers.append(tmpDeleverUsers as AnyObject)
                            msgDict["deleverUsers"] = arrDeleverUsers as AnyObject
                            // print("Delever")
                            /// print(arrDeleverUsers)
                        }
                        
                        
                    }
                    if(!receivedUsers.isEmpty)
                    {
                        if msgDict["receivedUsers"] != nil
                        {
                            var arrReceivedUsers: [AnyObject] = msgDict["receivedUsers"] as! [AnyObject]
                            
                            var tmpReceivedUsers: [String : AnyObject] = [:]
                            tmpReceivedUsers["recUserJID"] = receivedUsers as AnyObject
                            tmpReceivedUsers["recUserTime"] = receivedTime as AnyObject
                            //arrReceivedUsers.add(tmpReceivedUsers)
                            arrReceivedUsers.append(tmpReceivedUsers as AnyObject)
                            msgDict["receivedUsers"] = arrReceivedUsers as AnyObject
                            //print("Read")
                            //print(arrReceivedUsers)
                        }
                        else
                        {
                            var arrReceivedUsers: [AnyObject] = [AnyObject]()
                            
                            var tmpReceivedUsers: [String : AnyObject] = [:]
                            tmpReceivedUsers["recUserJID"] = receivedUsers as AnyObject
                            tmpReceivedUsers["recUserTime"] = receivedTime as AnyObject
                            arrReceivedUsers.append(tmpReceivedUsers as AnyObject)
                            
                            msgDict["receivedUsers"] = arrReceivedUsers as AnyObject
                            // print("Read")
                            // print(arrReceivedUsers)
                        }
                        
                    }
                    if(deleverUsersCount > 0)
                    {
                        
                    }
                    
                    tmpArrUserChat[ind!] = msgDict as AnyObject
                    //}
                    
                    tmpArrChatDetails["Chats"] = tmpArrUserChat as AnyObject
                    
                    if(!recReadUserJid.isEmpty)
                    {
                        self.arrAllChats[recReadUserJid] = tmpArrChatDetails as AnyObject
                    }
                    else
                    {
                        self.arrAllChats[self.toUserJID] = tmpArrChatDetails as AnyObject
                    }
                    
                    //sqllite code by nitesh
                    
                    //let result = db.execute(sql:" UPDATE messages_details SET messageContent = '\(msgDict["messageContent"] as! String)', thumb = '\(msgDict["thumb"] as! String)', status = '\(msgDict["status"] as! String)', fileLocalId = '\(msgDict["fileLocalId"] as! String)', filePath = '\(msgDict["filePath"] as! String)' WHERE messageId = '\(messageId)'")
                    
                    
                    //print("messages_details update",result)
                    //  db.GetSetLocalChats("messages_details", ColumnsAndValues: msgDict as NSDictionary, WHERE: messageId)
                    /* if(!recReadUserJid.isEmpty)
                     {
                     //self.arrAllChats[recReadUserJid] = tmpArrChatDetails as AnyObject
                     db.GetSetLocalChats("messages_details", ColumnsAndValues: msgDict as NSDictionary, WHERE: messageId)
                     }
                     else
                     {
                     //self.arrAllChats[self.toUserJID] = tmpArrChatDetails as AnyObject
                     db.GetSetLocalChats("messages_details", ColumnsAndValues: msgDict as NSDictionary, WHERE: messageId)
                     }*/
                    //end by nitesh
                    //Update both tables
                    
                    
                    //Save array to local temp
                    do {
                        if(self.arrAllChats.count > 0)
                        {
                            let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.arrAllChats, options: .prettyPrinted)
                            let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                            UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                            UserDefaults.standard.synchronize()
                        }
                    } catch {
                        //print(error.localizedDescription)
                    }
                    //End
                    
                    //Post notification that message receicved so we can display incoming message to UI
                    
                    if(isScrollToBottom == true)
                    {
                        let notificationName = Notification.Name("MessageReceivedFromServer")
                        NotificationCenter.default.post(name: notificationName, object: nil)
                    }
                    else
                    {
                        let notificationName = Notification.Name("messageInReceivedFromServer")
                        NotificationCenter.default.post(name: notificationName, object: nil)
                    }
                    
                    
                    
                }
            }
            
            
        }
        
        //End Get and Set Chat Data
        self.isSendingMedia = false
        /*if backgroundTask != UIBackgroundTaskInvalid {
         endBackgroundTask()
         }*/
        
        
    }
    
    func funGetSetFanUpdates(messageId: String, messageContent: String = "", thumbLink: String = "", chatStatus: String = "", fileLocalId: String = "", filePath: String = "", deleverUsers: String = "", receivedUsers: String = "", deleverUsersCount: Int = 0, recReadUserJid: String  = "")
    {
        //Write code to save asset local id to previously prepared dat
        var msgDict = [String: AnyObject]()
        
        
        //End
        if((fanUpdates.count > 0) && !(messageId.isEmpty))
        {
            //self.arrUserChat = tmpArrChatDetails["Chats"] as! [AnyObject]
            var tmpArrUserChat = fanUpdates as [AnyObject]
            //let tmpArray: NSArray = tmpArrUserChat as NSArray
            //let namePredicate = NSPredicate(format: "messageId = %@", messageId!);
            //var filteredArray = tmpArray.filter { namePredicate.evaluate(with: $0) };
            //if filteredArray.count != 0
            //{
            //msgDict = filteredArray[0] as! [String: AnyObject]
            
            let ind = tmpArrUserChat.firstIndex(where: { (item) -> Bool in
                if((item["messageId"] as! String) == messageId)
                {
                    msgDict = item as! [String : AnyObject]
                    return true
                }
                return false
            })
            
            if(ind != nil)
            {
                if(!messageContent.isEmpty)
                {
                    msgDict["messageContent"] = messageContent as AnyObject
                }
                if(!thumbLink.isEmpty)
                {
                    msgDict["thumb"] = thumbLink as AnyObject
                }
                if(!chatStatus.isEmpty)
                {
                    msgDict["status"] = chatStatus as AnyObject
                }
                if(!fileLocalId.isEmpty)
                {
                    msgDict["fileLocalId"] = fileLocalId as AnyObject
                }
                if(!filePath.isEmpty)
                {
                    msgDict["filePath"] = filePath as AnyObject
                }
                
                
                tmpArrUserChat[ind!] = msgDict as AnyObject
                //}
                
                fanUpdates = tmpArrUserChat
                
                
                //Post notification that message receicved so we can display incoming message to UI
                let notificationName = Notification.Name("FanUpdatesMessageReceived")
                NotificationCenter.default.post(name: notificationName, object: nil)
            }
            
            
            
        }
        
        //End Get and Set Chat Data
    }
    
    func saveProfileImageURL(_ image: UIImage, strAvatarURL: String = ""){
        let fileManager = FileManager.default
        let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent("avtar.jpg")
        //let image = UIImage(named: "avtar.jpg")
        //print(paths)
         Clslogging.logdebug(State: "saveProfileImageURL start")
        let imageData = image.jpegData(compressionQuality: 1)
        fileManager.createFile(atPath: paths as String, contents: imageData, attributes: nil)
        
        UserDefaults.standard.setValue("file://" + paths, forKey: "userAvatar")
        UserDefaults.standard.synchronize()
        
        //This code will shift at response of Avatar save IQ
        let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegistering")
        if ((isRegistering != nil && isRegistering == "YES") || (isvCardUpdated == true)) {
            //If user is doing registration, We have to save his v-card
            DispatchQueue.background(background: {
                // do something in background
                 Clslogging.logdebug(State: "saveProfileImageURL isRegistering != nil && isRegistering == YES) || (isvCardUpdated == true)")
                if (self.xmppStream?.isConnected)!
                {
                    UserDefaults.standard.setValue(strAvatarURL, forKey: "userAvatarURL")
                    UserDefaults.standard.synchronize()
                   /* self.xmppvCardStorage = XMPPvCardCoreDataStorage.init()
                    //XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
                    if(self.xmppvCardStorage != nil){
                        self.xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: self.xmppvCardStorage!)
                        
                        self.xmppvCardTempModule?.activate(self.xmppStream!)
                        
                        let vCardXML = XMLElement(name: "vCard", xmlns:"vcard-temp")
                        
                        let newvCardTemp: XMPPvCardTemp  = XMPPvCardTemp.vCardTemp(from: vCardXML)
                        
                        //New code for custom field
                        let avatarField: XMLElement = XMLElement.element(withName: "avatar") as! XMLElement
                        avatarField.stringValue = strAvatarURL
                        newvCardTemp.addChild(avatarField)
                        
                        UserDefaults.standard.setValue(strAvatarURL, forKey: "userAvatarURL")
                        UserDefaults.standard.synchronize()
                        
                        let statusField: XMLElement = XMLElement.element(withName: "status") as! XMLElement
                        statusField.stringValue = UserDefaults.standard.string(forKey: "userStatus")
                        newvCardTemp.addChild(statusField)
                        //End
                        
                        //newvCardTemp.photo = imageData
                        //newvCardTemp.nickname = self.NameTemp
                        let nameField: XMLElement = XMLElement.element(withName: "name") as! XMLElement
                        nameField.stringValue = self.NameTemp
                        newvCardTemp.addChild(nameField)
                        let MobilesettingField: XMLElement = XMLElement.element(withName: "profilemobile") as! XMLElement
                        MobilesettingField.stringValue = UserDefaults.standard.string(forKey: "Mobilesetting")
                        newvCardTemp.addChild(MobilesettingField)
                        
                        let EmailsettingField: XMLElement = XMLElement.element(withName: "profileemail") as! XMLElement
                        EmailsettingField.stringValue = UserDefaults.standard.string(forKey: "Emailsetting")
                        newvCardTemp.addChild(EmailsettingField)
                        //newvCardTemp.status = "Hey there! I am using Football Fan"
                        self.xmppvCardTempModule?.updateMyvCardTemp(newvCardTemp)
                    }
                    else{
                        self.xmppvCardStorage2 = XMPPvCardCoreDataStorage.init()
                        //XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
                        if(self.xmppvCardStorage2 != nil){
                            self.xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: self.xmppvCardStorage2!)
                            
                            self.xmppvCardTempModule?.activate(self.xmppStream!)
                            
                            let vCardXML = XMLElement(name: "vCard", xmlns:"vcard-temp")
                            
                            let newvCardTemp: XMPPvCardTemp  = XMPPvCardTemp.vCardTemp(from: vCardXML)
                            
                            //New code for custom field
                            let avatarField: XMLElement = XMLElement.element(withName: "avatar") as! XMLElement
                            avatarField.stringValue = strAvatarURL
                            newvCardTemp.addChild(avatarField)
                            
                            UserDefaults.standard.setValue(strAvatarURL, forKey: "userAvatarURL")
                            UserDefaults.standard.synchronize()
                            
                            let statusField: XMLElement = XMLElement.element(withName: "status") as! XMLElement
                            statusField.stringValue = UserDefaults.standard.string(forKey: "userStatus")
                            newvCardTemp.addChild(statusField)
                            //End
                            
                            //newvCardTemp.photo = imageData
                            //newvCardTemp.nickname = self.NameTemp
                            let nameField: XMLElement = XMLElement.element(withName: "name") as! XMLElement
                            nameField.stringValue = self.NameTemp
                            newvCardTemp.addChild(nameField)
                            let MobilesettingField: XMLElement = XMLElement.element(withName: "profilemobile") as! XMLElement
                            MobilesettingField.stringValue = UserDefaults.standard.string(forKey: "Mobilesetting")
                            newvCardTemp.addChild(MobilesettingField)
                            
                            let EmailsettingField: XMLElement = XMLElement.element(withName: "profileemail") as! XMLElement
                            EmailsettingField.stringValue = UserDefaults.standard.string(forKey: "Emailsetting")
                            newvCardTemp.addChild(EmailsettingField)
                            //newvCardTemp.status = "Hey there! I am using Football Fan"
                            self.xmppvCardTempModule?.updateMyvCardTemp(newvCardTemp)
                        }
                    }
                    */
                    
                    if(self.isFromSettings == false)
                    {
                        Clslogging.logdebug(State: "saveProfileImageURL isFromSettings = false")
                        //Anyway just login user
                        UserDefaults.standard.setValue(nil, forKey: "isShowProfile")
                        UserDefaults.standard.setValue(nil, forKey: "isRegistering")
                        UserDefaults.standard.setValue("YES", forKey: "isLoggedin")
                        if(!self.isTeamNotSelected){
                            UserDefaults.standard.setValue(UserDefaults.standard.string(forKey: "registerJID"), forKey: "userJID")
                        }
                        UserDefaults.standard.setValue(nil, forKey: "registerJID")
                        UserDefaults.standard.synchronize()
                       /* var dictRequest = [String: AnyObject]()
                        dictRequest["cmd"] = "updateavatar" as AnyObject
                        
                        var dictRequestData = [String: AnyObject]()
                        
                        let userJID: String? = UserDefaults.standard.string(forKey: "registerusername")
                        dictRequestData["username"] = userJID as AnyObject
                        dictRequestData["avatar"] = strAvatarURL as AnyObject
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)strAvatarURL
                        do {
                            let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                            let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                            //print(strMyTeams)
                            self.sendRequestToAPI(strRequestDict: strMyTeams)
                        } catch {
                            // print(error.localizedDescription)
                        }*/
                        self.updateavatar(avatar: strAvatarURL)
                    }
                    else
                    {
                        let deviceToken: String? = UserDefaults.standard.string(forKey: "DeviceToken")
                        Clslogging.logdebug(State: "saveProfileImageURL isFromSettings = true")
                        Clslogging.logdebug(State: "saveProfileImageURL editprofile start")
                        self.Calleditprofile()
                        self.updateavatar(avatar: strAvatarURL)
                        //self.isFromSettings = false
                        //self.showMainTab()
                    }
                    self.isAvtarChanged = false
                    self.isvCardUpdated = false
                    
                    
                }
                
            }, completion:{
                // when background job finished, do something in main thread
                //Send notification to Profile View that profile details fetched successfully
                //let notificationName = Notification.Name("FetchedProfileDetails")
                //NotificationCenter.default.post(name: notificationName, object: nil)
                
                
                
                
            })
            //End
            
        }
        else{
            Clslogging.logdebug(State: "saveProfileImageURL Faild isRegistering != nil && isRegistering == YES) || (isvCardUpdated == true)")
        }
        
        
        
        /*if (isRegistering == nil && isvCardUpdated == false)
         {
         //Send notification to Profile View that profile details fetched successfully
         let notificationName = Notification.Name("FetchedProfileDetails")
         NotificationCenter.default.post(name: notificationName, object: nil)
         }*/
        Clslogging.logdebug(State: "saveProfileImageURL End")
    }
    func formatPoints(num: Double) ->String{
        var thousandNum = num/1000
        var millionNum = num/1000000
        if num >= 1000 && num < 1000000{
            if(floor(thousandNum) == thousandNum){
                return("\(Int(thousandNum))k")
            }
            return("\(thousandNum.roundToPlaces(1))k")
        }
        if num > 1000000{
            if(floor(millionNum) == millionNum){
                return("\(Int(thousandNum))k")
            }
            return ("\(millionNum.roundToPlaces(1))M")
        }
        else{
            if(floor(num) == num){
                return ("\(Int(num))")
            }
            return ("\(num)")
        }
        
    }
    /*func saveProfileImage(_ image: UIImage){
     let fileManager = FileManager.default
     let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent("avtar.jpg")
     //let image = UIImage(named: "avtar.jpg")
     //print(paths)
     let imageData = UIImageJPEGRepresentation(image, 1)
     fileManager.createFile(atPath: paths as String, contents: imageData, attributes: nil)
     
     UserDefaults.standard.setValue("file://" + paths, forKey: "userAvatar")
     UserDefaults.standard.synchronize()
     
     //This code will shift at response of Avatar save IQ
     let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegistering")
     if ((isRegistering != nil && isRegistering == "YES") || (isvCardUpdated == true)) {
     //If user is doing registration, We have to save his v-card
     DispatchQueue.background(background: {
     // do something in background
     if (self.xmppStream?.isConnected())!
     {
     self.xmppvCardStorage = XMPPvCardCoreDataStorage.init(inMemoryStore:)()
     //XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
     
     self.xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: self.xmppvCardStorage!)
     
     self.xmppvCardTempModule?.activate(self.xmppStream!)
     
     let vCardXML = XMLElement(name: "vCard", xmlns:"vcard-temp")
     
     let newvCardTemp: XMPPvCardTemp  = XMPPvCardTemp.vCardTemp(from: vCardXML)
     
     //New code for custom field
     /*let avatarField: XMLElement = XMLElement.element(withName: "avatar") as! XMLElement
     avatarField.stringValue = "Test Avatar"
     newvCardTemp.addChild(avatarField)*/
     //End
     
     newvCardTemp.photo = imageData
     newvCardTemp.nickname = UserDefaults.standard.string(forKey: "userName")
     //newvCardTemp.status = "Hey there! I am using Football Fan"
     self.xmppvCardTempModule?.updateMyvCardTemp(newvCardTemp)
     
     }
     
     }, completion:{
     // when background job finished, do something in main thread
     //Send notification to Profile View that profile details fetched successfully
     let notificationName = Notification.Name("FetchedProfileDetails")
     NotificationCenter.default.post(name: notificationName, object: nil)
     
     })
     //End
     
     }
     
     if (isRegistering == nil && isvCardUpdated == false)
     {
     //Send notification to Profile View that profile details fetched successfully
     let notificationName = Notification.Name("FetchedProfileDetails")
     NotificationCenter.default.post(name: notificationName, object: nil)
     }
     
     }*/
    func ExistingContact(username: String) -> String? {
        var contactname: String = ""
        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
        let arrdUserJid = myjid?.components(separatedBy: "@")
        let userUserJid = arrdUserJid?[0]
        if(userUserJid == username)
        {
            contactname = "You"
        } else {
            if(allAppContacts.count>0){
                
                
                var strName1: String = ""
                _ = allAppContacts.filter({ (text) -> Bool in
                    let tmp: NSDictionary = text as! NSDictionary
                    let val: String = tmp.value(forKey: "jid") as! String
                    let val2: String = username
                    
                    
                    if(val.contains(val2))
                    {
                        strName1 = tmp.value(forKey: "name") as! String
                        
                    }
                    
                    return false
                })
                if(!strName1.isEmpty){
                    contactname = strName1//dict2?.value(forKey: "userName") as? String
                }
                else{
                    let recReadUserJid = username
                    
                    let arrReadUserJid = recReadUserJid.components(separatedBy: "@")
                    let userReadUserJid = arrReadUserJid[0]
                    contactname =  userReadUserJid
                }
            }
            else{
                let recReadUserJid = username
                
                let arrReadUserJid = recReadUserJid.components(separatedBy: "@")
                let userReadUserJid = arrReadUserJid[0]
                contactname = userReadUserJid
            }
        }
        return  contactname
    }
    func loadProfileImage(filePath: String) -> UIImage? {
        let fileURL:URL = URL(string : getFileNameFromPathWithFile(path: filePath)!)!
        
        do {
            let imageData = try Data(contentsOf: fileURL)
            return UIImage(data: imageData)
        } catch {
            //print("Error loading image : \(error)")
        }
        return nil
    }
    
    func loadImageFromLocalPath(filePath: String) -> UIImage? {
        if(!filePath.isEmpty)
        {
            let fileURL:URL = URL(string : filePath)!
            
            do {
                let imageData = try Data(contentsOf: fileURL)
                return UIImage(data: imageData)
            } catch {
                //print("Error loading image : \(error)")
            }
        }
        else
        {
            return UIImage(named: "splash_bg")
        }
        return UIImage(named: "splash_bg")
    }
    
    func loadImageFromUrl(url: String, view: UIImageView, fileName: String){
        
        // Create Url from string
        let url = NSURL(string: url)!
        
        // Download task:
        // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
        let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
            // if responseData is not null...
            if let data = responseData{
                
                // execute in UI thread
                DispatchQueue.main.async(execute: { () -> Void in
                    view.image = UIImage(data: data)
                    //Store image to local path
                    self.saveImageToLocalWithName(view.image!,fileName: fileName)
                })
            }
        }
        
        // Run task
        task.resume()
    }
    
    func loadImageFromUrl(url: String, fileName: String){
        
        // Create Url from string
        let url = NSURL(string: url)!
        //print(url)
        // Download task:
        // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
        let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
            // if responseData is not null...
            if let data = responseData{
                
                // execute in UI thread
                DispatchQueue.main.async(execute: { () -> Void in
                    //view.image = UIImage(data: data)
                    let img: UIImage = UIImage(data: data)!
                    //Store image to local path
                    self.saveImageToLocalWithName(img, fileName: fileName)
                })
            }
        }
        
        // Run task
        task.resume()
    }
    
    func loadImageFromUrl(url: String, view: UIImageView) {
        
        // Create Url from string
        let url = NSURL(string: url)!
        
        // Download task:
        // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
        let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
            // if responseData is not null...
            if let data = responseData{
                
                // execute in UI thread
                DispatchQueue.main.async(execute: { () -> Void in
                    view.image = UIImage(data: data)
                })
            }
        }
        
        // Run task
        task.resume()
    }
    
    func loadTeamImageFromUrl(url: String, fileName: String){
        
        // Create Url from string
        let url = NSURL(string: url)!
        
        // Download task:
        // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
        let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
            // if responseData is not null...
            if let data = responseData{
                
                // execute in UI thread
                DispatchQueue.main.async(execute: { () -> Void in
                    //view.image = UIImage(data: data)
                    //Store image to local path
                    self.saveImageToLocalWithName(UIImage(data: data)!,fileName: fileName)
                    let notificationName = Notification.Name("FetchedMyTeamsDetails")
                    NotificationCenter.default.post(name: notificationName, object: nil)
                })
            }
        }
        
        // Run task
        task.resume()
    }
    
    func saveImageToLocalWithName(_ image: UIImage, fileName: String){
        let fileManager = FileManager.default
        let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent(fileName + ".png")
        //print(paths)
        let imageData = image.pngData() //UIImageJPEGRepresentation(image, 1)
        fileManager.createFile(atPath: paths as String, contents: imageData, attributes: nil)
        
        UserDefaults.standard.setValue("file://" + paths, forKey: fileName)
        UserDefaults.standard.synchronize()
        
        if(fileName == "userAvatar")
        {
            self.profileAvtarTemp = UIImage(data: imageData!)
        }
        
        
        
        
    }
    
    
    func saveImageToLocalWithNameReturnPath(_ image: UIImage, fileName: String) -> String{
        let fileManager = FileManager.default
        
        let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent(fileName + ".png")
        //print(paths)
        if(fileManager.fileExists(atPath: paths))
        {
            print(paths)
            
        }
        else
        {
            let imageData = image.jpegData(compressionQuality: 1)
            
            fileManager.createFile(atPath: paths as String, contents: imageData, attributes: nil)
        }
        
        return "file://" + paths
    }
    
    func updateBadgeCount(_ toUser: String, type: String, count: Int64)
    {
        if(count == 0)
        {
            //delete row
            let array = db.query(sql: "select * from badgecount WHERE toUserJID = '\(toUser)'")
            if(array.count != 0){
                let result3 = self.db.execute(sql:"DELETE FROM badgecount WHERE toUserJID = '\(toUser)'")
            }
            // end
        } else {
            // insert or update row
            let array = db.query(sql: "select * from badgecount WHERE toUserJID = '\(toUser)'")
            if(array.count == 0){
                let badgecount = BadgeCount()
                badgecount.toUserJID = toUser
                badgecount.type = type
                badgecount.save()
            }
            // end
        }
        
        let notificationName = Notification.Name("RefreshBadgeCount")
        NotificationCenter.default.post(name: notificationName, object: nil)
        let RefreshSubTabBadgeCount = Notification.Name("RefreshSubTabBadgeCount")
               NotificationCenter.default.post(name: RefreshSubTabBadgeCount, object: nil)
    }
    
    func badgeCount(_ type: String) -> Int
    {
        var count = 0
        if(type == "chat")
        {
            let array = db.query(sql: "select * from badgecount WHERE type = 'group' OR type = 'chat'")
            count = array.count
        }
        else if(type == "all"){
            let array = db.query(sql: "select * from badgecount")
            count = array.count
        }
        else
        {
            let array = db.query(sql: "select * from badgecount WHERE type = 'banter' OR type = 'teambr'")
            count = array.count
        }
        return count
    }
    //Ravi Media
    func mediaLikecount(fanuid: Int64,likecount:Int64,commentcount:Int64,viewcount:Int64,islike:Bool){
        
           // let notificationName = Notification.Name("_fanupdatecount")
                                                                                                                                                                               //NotificationCenter.default.post(name: notificationName, object: nil)
    if(arrMedia.count>0){
                                                 for i in 0...self.arrMedia.count-1 {
                                                     let dict: NSDictionary? = self.arrMedia[i] as? NSDictionary
                                                            if(dict != nil)
                                                            {
                                                             let GroupID = dict?.value(forKey: "id") as! Int64
                                                             if(fanuid == GroupID){
                                                                 var dict1: [String: AnyObject] = self.arrMedia[i] as! [String: AnyObject]
                                                               dict1["likecount"] = likecount as AnyObject
                                                                       dict1["commentcount"] = commentcount as AnyObject
                                                               dict1["viewcount"] = viewcount as AnyObject
                                                               dict1["liked"] = islike as AnyObject //print("comment\(fanupdateid)\(appDelegate().arrFanUpdateComments.count)")
                                                               self.arrMedia[i] = dict1 as AnyObject
                                                                 let notificationName = Notification.Name("resetMedia")
                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                 
                                                                 break
                                                                            
                                                             }
                                                     }
                                                 }
                                             }
           if(self.arrMedia.count>0) {
               for i in 0...self.arrMedia.count-1 {
                let dict: NSDictionary? = self.arrMedia[i] as? NSDictionary
                          if(dict != nil)
                          {
                           let GroupID = dict?.value(forKey: "id") as! Int64
                           if(fanuid == GroupID){
                               var dict1: [String: AnyObject] = self.arrMedia[i] as! [String: AnyObject]
                                dict1["likecount"] = likecount as AnyObject
                               dict1["commentcount"] = commentcount as AnyObject
                               dict1["viewcount"] = viewcount as AnyObject
                            dict1["liked"] = islike as AnyObject
                               self.arrMedia[i] = dict1 as AnyObject
                               let notificationName = Notification.Name("resetmyStory")
                                                                                                                                     NotificationCenter.default.post(name: notificationName, object: nil)
                               
                               break
                                          
                           }
                   }
               }
           }
           if(self.arrhomemedia.count>0) {
                      for i in 0...self.arrhomemedia.count-1 {
                          let dict: NSDictionary? = self.arrhomemedia[i] as? NSDictionary
                                 if(dict != nil)
                                 {
                                  let GroupID = dict?.value(forKey: "id") as! Int64
                                  if(fanuid == GroupID){
                                      var dict1: [String: AnyObject] = self.arrhomemedia[i] as! [String: AnyObject]
                                   dict1["likecount"] = likecount as AnyObject
                                   dict1["commentcount"] = commentcount as AnyObject
                                   dict1["viewcount"] = viewcount as AnyObject
                                         dict1["liked"] = islike as AnyObject
                                      self.arrhomemedia[i] = dict1 as AnyObject
                                      let notificationName = Notification.Name("resetStoryslider")
                                                                                                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                      
                                      break
                                                 
                                  }
                          }
                      }
                  }
        
    }
    
    func mediacviewOnArrays(fanuid: Int64,likecount:Int64,commentcount:Int64,viewcount:Int64){
       // if(isOnFanDetail){
            let tabIndex:[String: Any] = ["commentcount": commentcount,"viewcount":viewcount,"likecount":likecount]
            let notificationName = Notification.Name("_fanupdatecount")
            NotificationCenter.default.post(name: notificationName, object: nil,userInfo: tabIndex)
       // }
            
    if(arrMedia.count>0){
                                                 for i in 0...self.arrMedia.count-1 {
                                                     let dict: NSDictionary? = self.arrMedia[i] as? NSDictionary
                                                            if(dict != nil)
                                                            {
                                                             let GroupID = dict?.value(forKey: "id") as! Int64
                                                             if(fanuid == GroupID){
                                                                 var dict1: [String: AnyObject] = self.arrMedia[i] as! [String: AnyObject]
                                                               dict1["likecount"] = likecount as AnyObject
                                                                       dict1["commentcount"] = commentcount as AnyObject
                                                               dict1["viewcount"] = viewcount as AnyObject
                                                               //dict1["liked"] = islike as AnyObject //print("comment\(fanupdateid)\(appDelegate().arrFanUpdateComments.count)")
                                                               self.arrMedia[i] = dict1 as AnyObject
                                                                 let notificationName = Notification.Name("resetMedia")
                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                 
                                                                 break
                                                                            
                                                             }
                                                     }
                                                 }
                                             }
           if(self.arrMedia.count>0) {
               for i in 0...self.arrMedia.count-1 {
                let dict: NSDictionary? = self.arrMedia[i] as? NSDictionary
                          if(dict != nil)
                          {
                           let GroupID = dict?.value(forKey: "id") as! Int64
                           if(fanuid == GroupID){
                               var dict1: [String: AnyObject] = self.arrMedia[i] as! [String: AnyObject]
                                dict1["likecount"] = likecount as AnyObject
                               dict1["commentcount"] = commentcount as AnyObject
                               dict1["viewcount"] = viewcount as AnyObject
                            //dict1["liked"] = islike as AnyObject
                               self.arrMedia[i] = dict1 as AnyObject
                               let notificationName = Notification.Name("resetmyStory")
                                                                                                                                     NotificationCenter.default.post(name: notificationName, object: nil)
                               
                               break
                                          
                           }
                   }
               }
           }
           if(self.arrhomemedia.count>0) {
                      for i in 0...self.arrhomemedia.count-1 {
                          let dict: NSDictionary? = self.arrhomemedia[i] as? NSDictionary
                                 if(dict != nil)
                                 {
                                  let GroupID = dict?.value(forKey: "id") as! Int64
                                  if(fanuid == GroupID){
                                      var dict1: [String: AnyObject] = self.arrhomemedia[i] as! [String: AnyObject]
                                   dict1["likecount"] = likecount as AnyObject
                                   dict1["commentcount"] = commentcount as AnyObject
                                   dict1["viewcount"] = viewcount as AnyObject
                                         //dict1["liked"] = islike as AnyObject
                                      self.arrhomemedia[i] = dict1 as AnyObject
                                      let notificationName = Notification.Name("resetStoryslider")
                                                                                                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                      
                                      break
                                                 
                                  }
                          }
                      }
                  }
        
    }
    //Ravi Media
    //Ravi Media
      func mediaViewCount(_ type: String, id: Int64)
      {
          if ClassReachability.isConnectedToNetwork() {
              var dictRequest = [String: AnyObject]()
                                       dictRequest["cmd"] = "updateviewcount" as AnyObject
                                       dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                                       dictRequest["device"] = "ios" as AnyObject
                                       do {
                                           
                                           /*let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
                                            let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
                                            print(strInvited)*/
                                           //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                           //let arrReadUserJid = login?.components(separatedBy: "@")
                                           //let userReadUserJid = arrReadUserJid?[0]
                                           
                                           //Creating Request Data
                                           var dictRequestData = [String: AnyObject]()
                                           let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                           let arrdUserJid = myjid?.components(separatedBy: "@")
                                           let userUserJid = arrdUserJid?[0]
                                          
                                           let myjidtrim: String? = userUserJid
                                           dictRequestData["id"] = id as AnyObject
                                           dictRequestData["type"] = type as AnyObject
                                           dictRequestData["username"] = myjidtrim as AnyObject
                                           dictRequest["requestData"] = dictRequestData as AnyObject
                                           //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                           //print(dictRequest)
                                          /* let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                         let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                         //print(strByPlace)
                                                                         let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                         
                                                                         let url = MediaAPIjava + "request=" + escapedString!*/
                                                                        AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                        headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                          // 2
                                                                                                          .responseJSON { response in
                                                                               switch response.result {
                                                                                                                         case .success(let value):
                                                                                                                             if let json = value as? [String: Any] {
                                                                                                                                 // print(" JSON:", json)
                                                                                                                                 let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                 // self.finishSyncContacts()
                                                                                                                                 //print(" status:", status1)
                                                                                                                              if(status1){DispatchQueue.main.async {
                                                                                                                                  let response: NSArray = json["responseData"] as! NSArray
                                                                                                                                  
                                                                                                                                  let dic = response[0] as! NSDictionary
                                                                                                                                if(type == "fanupdate"){
                                                                                                                                 self.mediacviewOnArrays(fanuid: dic.value(forKey: "id") as! Int64,likecount: dic.value(forKey: "likecount") as! Int64,commentcount: dic.value(forKey: "commentcount") as! Int64, viewcount: dic.value(forKey: "viewcount") as! Int64)
                                                                                                                                 
                                                                                                                                 }
                                                                                                                                  }
                                                                                                                                     
                                                                                                                                 }
                                                                                                                                 else{
                                                                                                                                     DispatchQueue.main.async
                                                                                                                                         {
                                                                                                                                             
                                                                                                                                     }
                                                                                                                                     //Show Error
                                                                                                                                 }
                                                                                                                             }
                                                                                                                         case .failure(let error):
                                                                                                                            debugPrint(error as Any)
                                                                                
                                                                                break
                                                                                                                             // error handling
                                                                                                              
                                                                                                                         }
                                                                                                            
                                                                                            }
                                          /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                           let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                                           //print(strFanUpdates)
                                           self.appDelegate().sendRequestToAPI(strRequestDict: strFanUpdates)*/
                                       } catch {
                                           print(error.localizedDescription)
                                       }
            /*  let boundary = generateBoundaryString()
              var request = URLRequest(url: URL(string: MediaAPI)!)
              request.httpMethod = "POST"
              request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
              var reqParams = [String: AnyObject]()
              reqParams["cmd"] = "updateviewcount" as AnyObject
              //reqParams["catid"] =   lastindex as AnyObject//String(describing:  lastindex)
              reqParams["type"] = type as AnyObject
              //dictRequestData["username"] = myjidtrim as AnyObject
              reqParams["id"] = id as AnyObject
              let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
              if(myjid != nil){
                  let arrdUserJid = myjid?.components(separatedBy: "@")
                  let userUserJid = arrdUserJid?[0]
                  reqParams["username"] = userUserJid as AnyObject?
              }
              else{
                  reqParams["username"] = "" as AnyObject
              }
              
              
              // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
              request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
              let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                  if let data = data {
                      if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                          //print(stringData) //JSONSerialization
                          
                          
                          
                          //print(time)
                          do {
                              let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                              
                              let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                              
                              if(isSuccess)
                              {
                                  
                              }
                              else
                              {
                                  
                              }
                          } catch let error as NSError {
                              print(error)
                              //Show Error
                          }
                          
                      }
                  }
                  else
                  {
                      //Show Error
                  }
              })
              task.resume()
              
              */
              /* var dictRequest = [String: AnyObject]()
               dictRequest["cmd"] = "updateviewcount" as AnyObject
               
               do {
               //Creating Request Data
               var dictRequestData = [String: AnyObject]()
               let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
               let arrdUserJid = myjid?.components(separatedBy: "@")
               let userUserJid = arrdUserJid?[0]
               
               let myjidtrim: String? = userUserJid
               dictRequestData["type"] = type as AnyObject
               dictRequestData["username"] = myjidtrim as AnyObject
               dictRequestData["id"] = id as AnyObject
               dictRequest["requestData"] = dictRequestData as AnyObject
               //dictRequest.setValue(dictMobiles, forKey: "requestData")
               //print(dictRequest)
               
               let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
               let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
               //print(strFanUpdates)
               sendRequestToAPI(strRequestDict: strFanUpdates)
               } catch {
               print(error.localizedDescription)
               }*/
          }
      }
      //Ravi Media
    
    func updateViewCount(_ type: String, id: Int64)
    {
        if ClassReachability.isConnectedToNetwork() {
            var dictRequest = [String: AnyObject]()
                                     dictRequest["cmd"] = "updateviewcount" as AnyObject
                                     dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                                     dictRequest["device"] = "ios" as AnyObject
                                     do {
                                         
                                         /*let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
                                          let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
                                          print(strInvited)*/
                                         //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                         //let arrReadUserJid = login?.components(separatedBy: "@")
                                         //let userReadUserJid = arrReadUserJid?[0]
                                         
                                         //Creating Request Data
                                         var dictRequestData = [String: AnyObject]()
                                         let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                         let arrdUserJid = myjid?.components(separatedBy: "@")
                                         let userUserJid = arrdUserJid?[0]
                                        
                                         let myjidtrim: String? = userUserJid
                                         dictRequestData["id"] = id as AnyObject
                                         dictRequestData["type"] = type as AnyObject
                                         dictRequestData["username"] = myjidtrim as AnyObject
                                         dictRequest["requestData"] = dictRequestData as AnyObject
                                         //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                         //print(dictRequest)
                                        /* let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                       let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                       //print(strByPlace)
                                                                       let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                       
                                                                       let url = MediaAPIjava + "request=" + escapedString!*/
                                                                      AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                      headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                        // 2
                                                                                                        .responseJSON { response in
                                                                                                            
                                                                                                            switch response.result {
                                                                                                                                                     case .success(let value):
                                                                                                                                                         if let json = value as? [String: Any] {
                                                                                                                                                             // print(" JSON:", json)
                                                                                                                                                             let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                             // self.finishSyncContacts()
                                                                                                                                                             //print(" status:", status1)
                                                                                                                                                          if(status1){DispatchQueue.main.async {
                                                                                                                                                              let response: NSArray = json["responseData"] as! NSArray
                                                                                                                                                              
                                                                                                                                                              let dic = response[0] as! NSDictionary
                                                                                                                                                            if(type == "fanupdate"){
                                                                                                                                                             self.updatecviewOnArrays(fanuid: dic.value(forKey: "id") as! Int64,likecount: dic.value(forKey: "likecount") as! Int64,commentcount: dic.value(forKey: "commentcount") as! Int64, viewcount: dic.value(forKey: "viewcount") as! Int64)
                                                                                                                                                             
                                                                                                                                                             }
                                                                                                                                                              }
                                                                                                                                                                 
                                                                                                                                                             }
                                                                                                                                                             else{
                                                                                                                                                                 DispatchQueue.main.async
                                                                                                                                                                     {
                                                                                                                                                                         
                                                                                                                                                                 }
                                                                                                                                                                 //Show Error
                                                                                                                                                             }
                                                                                                                                                         }
                                                                                                                                                     case .failure(let error):
                                                                                                                debugPrint(error as Any)
                                                                                                                break
                                                                                                                                                         // error handling
                                                                                                                                          
                                                                                                                                                     }
                                                                             
                                                                                                    }
                                        /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                         let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                                         //print(strFanUpdates)
                                         self.appDelegate().sendRequestToAPI(strRequestDict: strFanUpdates)*/
                                     } catch {
                                         print(error.localizedDescription)
                                     }
          /*  let boundary = generateBoundaryString()
            var request = URLRequest(url: URL(string: MediaAPI)!)
            request.httpMethod = "POST"
            request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
            var reqParams = [String: AnyObject]()
            reqParams["cmd"] = "updateviewcount" as AnyObject
            //reqParams["catid"] =   lastindex as AnyObject//String(describing:  lastindex)
            reqParams["type"] = type as AnyObject
            //dictRequestData["username"] = myjidtrim as AnyObject
            reqParams["id"] = id as AnyObject
            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
            if(myjid != nil){
                let arrdUserJid = myjid?.components(separatedBy: "@")
                let userUserJid = arrdUserJid?[0]
                reqParams["username"] = userUserJid as AnyObject?
            }
            else{
                reqParams["username"] = "" as AnyObject
            }
            
            
            // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
            request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
            let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                if let data = data {
                    if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                        //print(stringData) //JSONSerialization
                        
                        
                        
                        //print(time)
                        do {
                            let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                            
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            
                            if(isSuccess)
                            {
                                
                            }
                            else
                            {
                                
                            }
                        } catch let error as NSError {
                            print(error)
                            //Show Error
                        }
                        
                    }
                }
                else
                {
                    //Show Error
                }
            })
            task.resume()
            
            */
            /* var dictRequest = [String: AnyObject]()
             dictRequest["cmd"] = "updateviewcount" as AnyObject
             
             do {
             //Creating Request Data
             var dictRequestData = [String: AnyObject]()
             let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
             let arrdUserJid = myjid?.components(separatedBy: "@")
             let userUserJid = arrdUserJid?[0]
             
             let myjidtrim: String? = userUserJid
             dictRequestData["type"] = type as AnyObject
             dictRequestData["username"] = myjidtrim as AnyObject
             dictRequestData["id"] = id as AnyObject
             dictRequest["requestData"] = dictRequestData as AnyObject
             //dictRequest.setValue(dictMobiles, forKey: "requestData")
             //print(dictRequest)
             
             let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
             let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
             //print(strFanUpdates)
             sendRequestToAPI(strRequestDict: strFanUpdates)
             } catch {
             print(error.localizedDescription)
             }*/
        }
    }
    
    
    //Functions for Chat
    
    func prepareMessageForServerIn(_ toUser: String, messageContent: String, messageType: String, messageTime: Int64, messageId: String = "", filePath: String = "", fileLocalId: String = "", caption: String = "", thumbLink: String = "", fromUser: String = "", isIncoming: String = "NO", chatType: String = "", recBanterNickName: String = "", banterRoomName: String = "", banterRoomLogo: String = "", isJoined: String = "", msgSentByUserToGroup: String = "", isAdmin: String = "", supportedTeam: Int64 = 0, opponentTeam: Int64 = 0, banterUsers: NSArray = NSArray(), banterStatus: String = "active", isFromClearChat: Bool = false, fanSupportTeam: Int64 = 0, mySupportTeam: Int64 = 0,fansCount: Int64 = 0,Cmd: String = "", messageSubType: String = "",roomavatar: String = "",isBadge:Bool = true)
    {
        var msgDict = [String: AnyObject]()
        var badgeCounts: Int = 0
        var isAdminMain: String = "no"
        var isJoinedMain: String = "no"
        
        var mySupportedTeamMain: Int = 0
        var lastmessageTime: Int64 = 0
        var lastmessage: String = ""
        var roomAvatar: String = ""
        var supTeam: Int = 0
        var fansCounts: Int64 = 0
        var oppTeam: Int = 0
        // print("in\(banterRoomName)")
        var checkimage: String = "uncheck"
        var gethistory:Bool = true
        var banterStatusMain: String = "active"
        var banterRoomNameMain: String = ""
        tempArrUserChat = []
        let messagesTable = Messages()
        let Messages_detailsTable = Messages_details()
        if(self.allContacts.count > 0)
        {
            self.allAppContacts = NSMutableArray()
            //New code to manage crash on hier phones
            let arrTempAppContacts = self.allContacts[0] as! NSArray
            for record in arrTempAppContacts {
                self.allAppContacts[self.allAppContacts.count] = record as! [String : String]
            }
            //End
        }
        //UserDefaults.standard.setValue(false, forKey: "banterSequence")
        //UserDefaults.standard.synchronize()
        //print(self.allAppContacts)
        //let login: String? = UserDefaults.standard.string(forKey: "userJID")
        //msgDict["toUserMobile"] = "+919826615203"
        msgDict["toUserJID"] = toUser as AnyObject
        msgDict["fromUserJID"] = fromUser as AnyObject//"+919826615203@amazomcdn.com"
        msgDict["messageId"] = messageId as AnyObject
        msgDict["messageContent"] = messageContent as AnyObject
        msgDict["messageType"] = messageType as AnyObject
        msgDict["supportteam"] = fanSupportTeam as AnyObject
        msgDict["userName"] = "" as AnyObject
        msgDict["checkimage"] = "uncheck" as AnyObject
        msgDict["sub_type"] =  messageSubType as AnyObject
        if(!msgSentByUserToGroup.isEmpty)
        {
            
            if(self.allAppContacts.count > 0)
            {
                //allAppContacts = allContacts[0] as! NSMutableArray
                
                let resultContacts = self.allAppContacts.filter({ (text) -> Bool in
                    let tmp: NSDictionary = text as! NSDictionary
                    let val: String = tmp.value(forKey: "jid") as! String
                    //print(val)
                    if(val.contains(msgSentByUserToGroup))
                    {
                        let name: String = tmp.value(forKey: "name") as! String
                        msgDict["userName"] = name as AnyObject
                        let varMobile = msgSentByUserToGroup.split{$0 == "@"}.map(String.init)
                        
                        msgDict["msgSentByUser"] = varMobile[0] as AnyObject
                        return true
                    }
                    return false
                })
                
                if(resultContacts.count == 0)
                {
                    /*if(chatType == "banter")
                     {
                     msgDict["userName"] = recBanterNickName as AnyObject
                     
                     }
                     else
                     {*/
                    let varMobile = msgSentByUserToGroup.split{$0 == "@"}.map(String.init)
                    msgDict["userName"] = varMobile[0] as AnyObject
                    
                    //}
                }
                
            }
            else
            {
                /*if(chatType == "banter")
                 {
                 msgDict["userName"] = recBanterNickName as AnyObject
                 
                 }
                 else
                 {*/
                let varMobile = msgSentByUserToGroup.split{$0 == "@"}.map(String.init)
                msgDict["userName"] = varMobile[0] as AnyObject
                
                //}
                
                
            }
        }
        
        msgDict["status"] = "failed" as AnyObject
        msgDict["time"] = messageTime as AnyObject
        msgDict["isIncoming"] = isIncoming as AnyObject
        if(filePath.isEmpty)
        {
            msgDict["filePath"] = "" as AnyObject //"file://" + filePath as AnyObject
        }
        else
        {
            msgDict["filePath"] = filePath as AnyObject //"file://" + filePath as AnyObject
        }
        msgDict["thumb"] = thumbLink as AnyObject
        msgDict["fileLocalId"] = fileLocalId as AnyObject
        if(messageType == "image" || messageType == "video")
        {
            msgDict["isFile"] = "YES" as AnyObject
        }
        else
        {
            msgDict["isFile"] = "NO" as AnyObject
        }
        
        msgDict["fileType"] = "" as AnyObject
        msgDict["fileName"] = "" as AnyObject
        msgDict["caption"] = caption as AnyObject
        
        msgDict["deleverUsers"] = [AnyObject]() as AnyObject
        msgDict["receivedUsers"] = [AnyObject]() as AnyObject
        msgDict["deleverUsersCount"] = 0 as AnyObject // Remove this after check
        
        msgDict["chatType"] = chatType as AnyObject
        msgDict["banterNickName"] = recBanterNickName as AnyObject
        
        if(msgDict.count > 0)
        {
            /*let dataLocalMessage = try JSONSerialization.data(withJSONObject: msgDict, options: .prettyPrinted)
             let strLocalMessage = NSString(data: dataLocalMessage, encoding: String.Encoding.utf8.rawValue)! as String
             print(strLocalMessage)*/
            //Save data to local object
            //Get from local user defaults temp
            let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
            if localArrAllChats != nil
            {
                //Code to parse json data
                if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                    do {
                        arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                        
                    } catch let error as NSError {
                        print(error)
                    }
                }
            }
            if(isFromClearChat == false)
            {
                if let dt = self.arrAllChats[toUser]
                {
                    tempArrUserChat = dt["Chats"] as! [AnyObject]
                    
                    //New code to manage badge count
                    if(self.toUserJID != toUser)
                    {
                        
                        if let bgcnt = dt["badgeCounts"]
                        {
                            if(isBadge){
                            if(bgcnt != nil)
                            {
                                badgeCounts = Int(bgcnt as! Int)
                                badgeCounts = badgeCounts + 1
                                
                                updateBadgeCount(toUser, type: chatType, count: 1)
                            }
                            }
                        }
                        
                        /*let bgcnt = dt["badgeCounts"] as! Int
                         badgeCounts = Int(bgcnt)
                         badgeCounts = badgeCounts + 1*/
                        
                        //badgeCounts = Int(dt["badgeCounts"] as! [AnyObject]) as! Int
                        
                    }
                    
                    if let checked = dt["checkimage"]
                    {
                        if(checked != nil){
                            checkimage = checked as! String
                        }
                        
                    }
                    
                    // By Mayank for group chat
                    if(chatType == "banter" || chatType == "group" || chatType == "teambr")
                    {
                        if let isAdm = dt["isAdmin"]
                        {
                            if(isAdm != nil)
                            {
                                isAdminMain = isAdm as! String
                            }
                        }
                        
                        if let isJoi = dt["isJoined"]
                        {
                            if(isJoi != nil)
                            {
                                isJoinedMain = isJoi as! String
                            }
                        }
                        
                        
                        if let isSupTeam = dt["supportedTeam"]
                        {
                            if(isSupTeam != nil)
                            {
                                supTeam = isSupTeam as! Int
                            }
                        }
                        
                        if let isOppTeam = dt["opponentTeam"]
                        {
                            if(isOppTeam != nil)
                            {
                                oppTeam = isOppTeam as! Int
                            }
                        }
                        //Banter Status
                        
                        if let bStatus = dt["banterStatus"]
                        {
                            if(bStatus != nil)
                            {
                                banterStatusMain = bStatus as! String
                            }
                        }
                        
                        if let fcounts = dt["fansCount"]
                        {
                            if(fcounts != nil)
                            {
                                fansCounts = fcounts as! Int64
                            }
                        }
                        if let islastDate = dt["lastDate"]
                        {
                            if(islastDate != nil)
                            {
                                lastmessageTime = islastDate as! Int64
                                //tmpArrChatDetails["lastDate"] = islastDate as AnyObject
                            }
                        }
                        if let tMain = dt["mySupportedTeam"]
                        {
                            if(tMain != nil)
                            {
                                mySupportedTeamMain = tMain as! Int
                            }
                        }
                        if let userAvatar = dt["userAvatar"]
                        {
                            if(userAvatar != nil)
                            {
                                roomAvatar = userAvatar as! String
                            }
                        }
                        if let bNameMain = dt["userName"]
                        {
                            if(bNameMain != nil)
                            {
                                banterRoomNameMain = bNameMain as! String
                            }
                        }
                        
                        if let islastMessage = dt["lastMessage"]
                        {
                            if(islastMessage != nil)
                            {
                                lastmessage = islastMessage as! String
                                
                                //tmpArrChatDetails["lastDate"] = islastDate as AnyObject
                            }
                        }
                        if let isHistory = dt["isHistory"]
                        {
                            if(isHistory != nil)
                            {
                                gethistory = isHistory as! Bool
                                
                                //tmpArrChatDetails["lastDate"] = islastDate as AnyObject
                            }
                        }
                        
                        
                        
                    }
                    
                    
                    //End
                    
                }
                else
                {
                    tempArrUserChat = []
                    if(isBadge){
                    badgeCounts = 1
                    updateBadgeCount(toUser, type: chatType, count: 1)
                    }
                }
                
            }
            
            
            //End
            //print(arrUserChat.count)
            //arrUserChat[arrUserChat.count] = msgDict as AnyObject
            tempArrUserChat.append(msgDict as AnyObject)
            //print(arrUserChat)
            
            var tmpArrChatDetails = [String : AnyObject]()
            
            // tmpArrChatDetails["Chats"] = arrUserChat as AnyObject
            
            tmpArrChatDetails["userName"] = "" as AnyObject
            tmpArrChatDetails["userAvatar"] = "" as AnyObject
            tmpArrChatDetails["checkimage"] = checkimage as AnyObject
            
            
            // By Mayank for group chat
            if(chatType == "banter" || chatType == "group" || chatType == "teambr")
            {
                
                if(!banterRoomName.isEmpty)
                {
                    tmpArrChatDetails["userName"] = banterRoomName as AnyObject
                    //tmpArrChatDetails["userAvatar"] = "" as AnyObject
                }
                else
                {
                    tmpArrChatDetails["userName"] = banterRoomNameMain as AnyObject
                }
            }
            else
            {
                
                if(self.allAppContacts.count > 0)
                {
                    /*self.allAppContacts = NSMutableArray()
                     //New code to manage crash on hier phones
                     let arrTempAppContacts = self.allContacts[0] as! NSArray
                     for record in arrTempAppContacts {
                     self.allAppContacts[self.allAppContacts.count] = record as! [String : String]
                     }*/
                    //End
                    
                    //allAppContacts = allContacts[0] as! NSMutableArray
                    //print(self.allAppContacts)
                    /* _ = self.allAppContacts.filter({ (text) -> Bool in
                     let tmp: NSDictionary = text as! NSDictionary
                     let val: String = tmp.value(forKey: "jid") as! String
                     // print(val)
                     if(val.contains(toUser))
                     {
                     let name: String = tmp.value(forKey: "name") as! String
                     tmpArrChatDetails["userName"] = name as AnyObject
                     if(tmp.value(forKey: "avatar") != nil)
                     {
                     let avatar: String = tmp.value(forKey: "avatar") as! String
                     
                     tmpArrChatDetails["userAvatar"] = avatar as AnyObject
                     }
                     else
                     {
                     tmpArrChatDetails["userAvatar"] = "" as AnyObject
                     }
                     //let avatar: String = tmp.value(forKey: "avatar") as! String
                     
                     
                     return true
                     }
                     return false
                     })*/
                    //code by nitesh
                    let resultContacts = self.allAppContacts.filter({ (text) -> Bool in
                        let tmp: NSDictionary = text as! NSDictionary
                        let val: String = tmp.value(forKey: "jid") as! String
                        //print(val)
                        if(val.contains(toUser))
                        {
                            let name: String = tmp.value(forKey: "name") as! String
                            tmpArrChatDetails["userName"] = name as AnyObject
                            if(tmp.value(forKey: "avatar") != nil)
                            {
                                let avatar: String = tmp.value(forKey: "avatar") as! String
                                
                                tmpArrChatDetails["userAvatar"] = avatar as AnyObject
                            }
                            else
                            {
                                tmpArrChatDetails["userAvatar"] = "" as AnyObject
                            }
                            return true
                        }
                        return false
                    })
                    
                    if(resultContacts.count == 0)
                    {
                        if(chatType == "group")
                        {
                            
                            // By Mayank for group chat
                            let varMobile = toUser.split{$0 == "@"}.map(String.init)
                            tmpArrChatDetails["userName"] = varMobile[0] as AnyObject
                            
                            
                        }
                        else
                        {
                            let varMobile = toUser.split{$0 == "@"}.map(String.init)
                            tmpArrChatDetails["userName"] = varMobile[0] as AnyObject
                        }
                    }
                    
                }
                else
                {
                    
                    let varMobile = toUser.split{$0 == "@"}.map(String.init)
                    tmpArrChatDetails["userName"] = varMobile[0] as AnyObject
                    
                    //tmpArrChatDetails["userName"] = toUser as AnyObject
                    tmpArrChatDetails["userAvatar"] = "" as AnyObject
                }
                
                
            }
            
            
            //print("Badgecount")
            //print(badgeCounts)
            //tmpArrChatDetails["badgeCounts"] = badgeCounts as AnyObject
            
            /*  if(messageType == "image")
             {
             tmpArrChatDetails["lastMessage"] = "Image" as AnyObject
             }
             else if(messageType == "video")
             {
             tmpArrChatDetails["lastMessage"] = "Video" as AnyObject
             }
             else
             {
             tmpArrChatDetails["lastMessage"] = messageContent as AnyObject
             }*/
            if(Cmd.isEmpty){
                //tmpArrChatDetails["lastDate"] = messageTime as AnyObject
                tmpArrChatDetails["badgeCounts"] = badgeCounts as AnyObject
                
                if(messageType == "image")
                {
                    tmpArrChatDetails["lastMessage"] = "Image" as AnyObject
                }
                else if(messageType == "video")
                {
                    tmpArrChatDetails["lastMessage"] = "Video" as AnyObject
                }
                else
                {
                    tmpArrChatDetails["lastMessage"] = messageContent as AnyObject
                }
                
            }
            else{
                tmpArrChatDetails["lastMessage"] = lastmessage as AnyObject
                tmpArrChatDetails["badgeCounts"] =  0 as AnyObject
            }
            
            //print(recMessageTime)
            //let strmili: Int64 = Int64(messageTime)
            if let mili = msgDict["time"]
            {
                let mili: Double = Double(truncating: (mili as AnyObject) as! NSNumber)
                let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                
                tmpArrChatDetails["lastTime"] = String(myMilliseconds.toHour) as AnyObject
                if(Cmd.isEmpty){
                    tmpArrChatDetails["lastDate"] = msgDict["time"]
                    
                }
                else{
                    tmpArrChatDetails["lastDate"] = lastmessageTime as AnyObject//msgDict["time"]
                }
                
                
            }
            
            tmpArrChatDetails["chatType"] = chatType as AnyObject
            tmpArrChatDetails["banterNickName"] = recBanterNickName as AnyObject
            
            if(!isJoined.isEmpty)
            {
                tmpArrChatDetails["isJoined"] = isJoined as AnyObject
            }
            else
            {
                tmpArrChatDetails["isJoined"] = isJoinedMain as AnyObject
                
            }
            
            tmpArrChatDetails["isHistory"] = gethistory as AnyObject
            if(!isAdmin.isEmpty)
            {
                tmpArrChatDetails["isAdmin"] = isAdmin as AnyObject
            }
            else
            {
                tmpArrChatDetails["isAdmin"] = isAdminMain as AnyObject
            }
            if(!roomavatar.isEmpty)
            {
                tmpArrChatDetails["userAvatar"] = roomavatar as AnyObject
            }
            else
            {
                tmpArrChatDetails["userAvatar"] = roomAvatar as AnyObject
            }
            if(!banterStatus.isEmpty)
            {
                tmpArrChatDetails["banterStatus"] = banterStatus as AnyObject
            }
            else
            {
                tmpArrChatDetails["banterStatus"] = banterStatusMain as AnyObject
            }
            
            if(supTeam > 0)
            {
                tmpArrChatDetails["supportedTeam"] = supTeam as AnyObject
            }
            else if(supportedTeam > 0)
            {
                tmpArrChatDetails["supportedTeam"] = supportedTeam as AnyObject
            }
            
            if(oppTeam > 0)
            {
                tmpArrChatDetails["opponentTeam"] = oppTeam as AnyObject
            }
            else if(opponentTeam > 0)
            {
                tmpArrChatDetails["opponentTeam"] = opponentTeam as AnyObject
            }
            
            if(banterUsers.count > 0)
            {
                tmpArrChatDetails["banterUsers"] = banterUsers as AnyObject
            }
            if(fansCount > 0)
            {
                tmpArrChatDetails["fansCount"] = fansCount as AnyObject
            }
            else{
                //fansCounts
                tmpArrChatDetails["fansCount"] = fansCounts as AnyObject
            }
            tmpArrChatDetails["roomJID"] = toUser as AnyObject
            
            
            if(mySupportTeam > 0)
            {
                tmpArrChatDetails["mySupportedTeam"] = mySupportTeam as AnyObject
            }
            else
            {
                if(mySupportedTeamMain > 0)
                {
                    tmpArrChatDetails["mySupportedTeam"] = mySupportedTeamMain as AnyObject
                }
                else
                {
                    tmpArrChatDetails["mySupportedTeam"] = 0 as AnyObject
                }
            }
            // By Mayank for group chat
            if (tmpArrChatDetails["supportedTeam"] != nil || tmpArrChatDetails["chatType"] as! String == "chat" || tmpArrChatDetails["chatType"] as! String == "group" || tmpArrChatDetails["chatType"] as! String == "trivia"){
                //sqlite cod by nitesh
                var addvalue: Bool = true
                if(tmpArrChatDetails["chatType"] as! String == "chat"){
                    let array = Blockeduser.rows(filter:"roomId = '\(toUser)'") as! [Blockeduser]
                    if(array.count != 0){
                        let disnarysound = array[0]
                        
                        let status = disnarysound.value(forKey: "status") as! String
                        if(status == "Blocked"){
                            addvalue = false
                            
                        }
                        else{
                            let mili: Double = Double(truncating: (disnarysound.value(forKey: "unblocked_time") as AnyObject) as! NSNumber)
                            let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                            let unblocked_time = myMilliseconds.dateFull
                            let mili1: Double = Double(truncating: (tmpArrChatDetails["lastDate"] as AnyObject) as! NSNumber)
                            let myMilliseconds1: UnixTime = UnixTime(mili1/1000.0)
                            let recevitime = myMilliseconds1.dateFull
                            
                            let mili2: Double = Double(truncating: (disnarysound.value(forKey: "blocked_time") as AnyObject) as! NSNumber)
                            let myMilliseconds2: UnixTime = UnixTime(mili2/1000.0)
                            let blocked_time = myMilliseconds2.dateFull
                            
                            /* if(((messageTime as! NSDate).isLessThanDate(dateToCompare: disnarysound.value(forKey: "unblocked_time") as! NSDate))  && ((messageTime as! NSDate).isGreaterThanDate(dateToCompare: disnarysound.value(forKey: "blocked_time") as! NSDate) )){
                             addvalue = false
                             }*/
                            if(recevitime < blocked_time)
                            {
                                // print("drdr")
                            }
                            if((recevitime > unblocked_time) && (recevitime > blocked_time)){
                                addvalue = true
                            }
                            else{
                                addvalue = false
                            }
                            
                            
                        }
                    }
                    else{
                        addvalue = true
                        
                        
                    }
                }
                if(addvalue){
                    
                    let array = Messages.rows(filter:"roomJID = '\(toUser)'") as! [Messages]
                    if(array.count == 0){
                        messagesTable.userName = tmpArrChatDetails["userName"] as! String
                        messagesTable.userAvatar = tmpArrChatDetails["userAvatar"] as! String
                        messagesTable.badgeCounts = tmpArrChatDetails["badgeCounts"] as! Int
                        messagesTable.lastMessage =  tmpArrChatDetails["lastMessage"] as! String
                        messagesTable.lastTime =     tmpArrChatDetails["lastDate"] as! Int64
                        messagesTable.lastDate = tmpArrChatDetails["lastDate"] as! Int64
                        messagesTable.chatType = tmpArrChatDetails["chatType"] as! String
                        messagesTable.banterNickName =  tmpArrChatDetails["banterNickName"] as! String
                        messagesTable.isJoined =   tmpArrChatDetails["isJoined"] as! String
                        messagesTable.isAdmin =          tmpArrChatDetails["isAdmin"] as! String
                        messagesTable.banterStatus =  tmpArrChatDetails["banterStatus"] as! String
                        // By Mayank for group chat
                        if(tmpArrChatDetails["chatType"] as! String == "chat"  || tmpArrChatDetails["chatType"] as! String == "group" || tmpArrChatDetails["chatType"] as! String == "trivia"){
                            messagesTable.supportedTeam =   0
                            messagesTable.opponentTeam =  0
                        }
                        else if(tmpArrChatDetails["chatType"] as! String == "teambr"){
                            messagesTable.supportedTeam =   tmpArrChatDetails["supportedTeam"] as! Int
                                                       messagesTable.opponentTeam =  0
                        }
                        else{
                            messagesTable.supportedTeam =   tmpArrChatDetails["supportedTeam"] as! Int
                            messagesTable.opponentTeam =  tmpArrChatDetails["opponentTeam"] as! Int
                        }
                        
                        messagesTable.banterUsers =   "" //tmpArrChatDetails["banterUsers"] as! String
                        messagesTable.roomJID =  tmpArrChatDetails["roomJID"] as! String
                        messagesTable.mySupportedTeam =   tmpArrChatDetails["mySupportedTeam"] as! Int
                        if messagesTable.save() != 0 {
                            // print("messagesTable save")
                        }
                        else{
                            if messagesTable.save() != 0 {
                                //print("messagesTable  save")
                            }
                            else{
                                // print("messagesTable not save")
                            }
                            
                        }
                        let array1 = Bantersound.rows(filter:"toUserJID = '\(tmpArrChatDetails["roomJID"] as! String)'") as! [Bantersound]
                        if(array1.count != 0){
                            _ = db.query(sql:"UPDATE bantersound SET soundValue = 1, toUsername = '\(tmpArrChatDetails["userName"] as! String)' WHERE toUserJID = '\(tmpArrChatDetails["roomJID"] as! String)'")
                            
                        }
                        else{
                            let bantersoundTable = Bantersound()
                            bantersoundTable.soundValue = 1
                            bantersoundTable.toUsername = tmpArrChatDetails["userName"] as! String
                            bantersoundTable.toUserJID = tmpArrChatDetails["roomJID"] as! String
                            if bantersoundTable.save() != 0 {
                                //print("bantersoundTable save")
                                BantersoundUpdateForNotification()
                            }
                            else{
                                if bantersoundTable.save() != 0 {
                                    //print("bantersoundTable  save")
                                    BantersoundUpdateForNotification()
                                }
                                else{
                                    //print("bantersoundTable not save")
                                }
                                
                            }
                        }
                        
                    }
                    else{
                        
                        //   let result = db.execute(sql:" UPDATE messages SET isAdmin = '\(tmpArrChatDetails["isAdmin"] as! String)', banterNickName = '\(tmpArrChatDetails["banterNickName"] as! String)', opponentTeam = \(tmpArrChatDetails["opponentTeam"] as! Int), lastDate = \(tmpArrChatDetails["lastDate"] as! Int), supportedTeam = \(tmpArrChatDetails["supportedTeam"] as! Int), roomJID = '\(tmpArrChatDetails["roomJID"] as! String)', userName = '\(tmpArrChatDetails["userName"] as! String)', userAvatar = '\(tmpArrChatDetails["userAvatar"] as! String)', mySupportedTeam = \(tmpArrChatDetails["mySupportedTeam"] as! Int), badgeCounts = \(tmpArrChatDetails["badgeCounts"] as! Int), lastTime = \(tmpArrChatDetails["lastDate"] as! Int64), chatType = '\(tmpArrChatDetails["chatType"] as! String)', lastMessage = '\(tmpArrChatDetails["lastMessage"] as! String)', isJoined = '\(tmpArrChatDetails["isJoined"] as! String)' WHERE roomJID = '\(tmpArrChatDetails["roomJID"] as! String)'")
                        //print("messages serverIn update",result)
                    }
                    Messages_detailsTable.toUserJID    = msgDict["toUserJID"] as! String
                    Messages_detailsTable.fromUserJID =    msgDict["fromUserJID"] as! String
                    Messages_detailsTable.messageId =    msgDict["messageId"] as! String
                    Messages_detailsTable.messageContent =     msgDict["messageContent"] as! String
                    Messages_detailsTable.messageType =     msgDict["messageType"] as! String
                    Messages_detailsTable.supportteam =    msgDict["supportteam"] as! Int
                    Messages_detailsTable.userName =     msgDict["userName"] as! String
                    Messages_detailsTable.status =  msgDict["status"] as! String
                    Messages_detailsTable.time =   msgDict["time"] as! Int64
                    Messages_detailsTable.isIncoming =   msgDict["isIncoming"] as! String
                    Messages_detailsTable.filePath =              msgDict["filePath"] as! String
                    Messages_detailsTable.thumb =          msgDict["thumb"] as! String
                    Messages_detailsTable.fileLocalId =  msgDict["fileLocalId"] as! String
                    Messages_detailsTable.isFile =     msgDict["isFile"] as! String
                    Messages_detailsTable.fileType =  msgDict["fileType"] as! String
                    Messages_detailsTable.fileName =  msgDict["fileName"] as! String
                    Messages_detailsTable.caption =  msgDict["caption"] as! String
                    Messages_detailsTable.deleverUsers = "" //msgDict["deleverUsers"] as! String
                    Messages_detailsTable.receivedUsers = ""//  msgDict["receivedUsers"] as! String
                    Messages_detailsTable.deleverUsersCount =  msgDict["deleverUsersCount"] as! Int
                    Messages_detailsTable.chatType =    msgDict["chatType"] as! String
                    Messages_detailsTable.banterNickName =    msgDict["banterNickName"] as! String
                    
                    
                    if Messages_detailsTable.save() != 0 {
                        // print("Messages_detailsTable save")
                    }
                    else{
                        if Messages_detailsTable.save() != 0 {
                            // print("Messages_detailsTable save")
                        }
                        else{
                            // print("Messages_detailsTable not save")
                        }
                    }
                    /* let arrRoom = db.BanterAvablity(FROM: "messages", WHERE: toUser)
                     if(arrRoom.count<1){
                     var msgDict3 = [String: AnyObject]()
                     msgDict3["toUserJID"] = toUser as AnyObject
                     msgDict3["soundValue"] = 1 as AnyObject
                     
                     
                     if(chatType == "banter")
                     {
                     
                     if(!banterRoomName.isEmpty)
                     {
                     msgDict3["toUsername"] = banterRoomName as AnyObject
                     //tmpArrChatDetails["userAvatar"] = "" as AnyObject
                     }
                     else
                     {
                     msgDict3["toUsername"] = banterRoomNameMain as AnyObject
                     }
                     }
                     
                     
                     
                     db.insert("messages", ColumnsAndValues: tmpArrChatDetails as NSDictionary)
                     db.insert("bantersound", ColumnsAndValues: msgDict3 as NSDictionary)
                     }
                     else{
                     db.BanterUpdate("messages", ColumnsAndValues: tmpArrChatDetails as NSDictionary, WHERE: toUser)
                     }
                     db.insert("messages_details", ColumnsAndValues: msgDict as NSDictionary)*/
                    //end sqlite
                    tmpArrChatDetails["Chats"] = tempArrUserChat as AnyObject
                    
                    
                    self.arrAllChats[toUser] = tmpArrChatDetails as AnyObject
                    //print(toUser)
                   // print(toUserJID)
                    if(isOnChatView == true && toUser == toUserJID)
                    {
                        if let dt = self.arrAllChats[toUser]
                        {
                            arrUserChat = dt["Chats"] as! [AnyObject]
                        }
                    }
                    else if(isOntriviaChatsView == true && toUser == toUserJID){
                        if let dt = self.arrAllChats[toUser]
                                              {
                                                  arrUserChat = dt["Chats"] as! [AnyObject]
                                              }
                    }else {
                        arrUserChat = []
                    }
                    
                    
                    //Save array to local temp
                    do {
                        if(arrAllChats.count > 0)
                        {
                            let dataArrAllChats = try JSONSerialization.data(withJSONObject: arrAllChats, options: .prettyPrinted)
                            let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                            UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                            UserDefaults.standard.synchronize()
                        }
                    } catch {
                        //print(error.localizedDescription)
                    }
                    //End
                }
            }
            
        }
        
    }
    
    
    func prepareMessageForServerOut(_ toUser: String, messageContent: String, chatType: String, messageType: String, messageTime: Int64, messageId: String = "", filePath: String = "", fileLocalId: String = "", caption: String = "", thumbLink: String = "", fromUser: String = "", isIncoming: String = "NO", userName: String = "", userAvatar: String = "", chatStatus: String = "sending", newBanterNickName: String = "", isJoined: String = "", mySupportedTeam: Int64 = 0,Cmd: String = "", messageSubType: String = "")
    {
        var msgDict = [String: AnyObject]()
        var isAdminMain: String = "no"
        var isJoinedMain: String = "no"
        tempArrUserChat = []
        var mySupportedTeamMain: Int64 = 0
        var supTeam: Int64 = 0
        var oppTeam: Int64 = 0
        var fansCounts: Int64 = 0
        var lastmessageTime: Int64 = 0
        var lastmessage: String = ""
        var gethistory:Bool = true
        var banterStatusMain: String = "active"
        let messagesTable = Messages()
        let Messages_detailsTable = Messages_details()
        //UserDefaults.standard.setValue(false, forKey: "banterSequence")
        //UserDefaults.standard.synchronize()
        //let login: String? = UserDefaults.standard.string(forKey: "userJID")
        //msgDict["toUserMobile"] = "+919826615203"
        msgDict["toUserJID"] = toUser as AnyObject
        msgDict["fromUserJID"] = fromUser as AnyObject//"+919826615203@amazomcdn.com"
        msgDict["messageId"] = messageId as AnyObject
        msgDict["messageContent"] = messageContent as AnyObject
        msgDict["messageType"] = messageType as AnyObject
        msgDict["userName"] = "" as AnyObject
        msgDict["status"] = chatStatus as AnyObject
        msgDict["time"] = messageTime as AnyObject
        msgDict["isIncoming"] = isIncoming as AnyObject
        msgDict["supportteam"] = mySupportedTeam as AnyObject
        msgDict["checkimage"] = "uncheck" as AnyObject
        msgDict["sub_type"] =  messageSubType as AnyObject
        if(filePath.isEmpty)
        {
            msgDict["filePath"] = "" as AnyObject //"file://" + filePath as AnyObject
        }
        else
        {
            msgDict["filePath"] = filePath as AnyObject//("file://" + filePath) as AnyObject //"file://" + filePath as AnyObject
        }
        msgDict["thumb"] = thumbLink as AnyObject
        msgDict["fileLocalId"] = fileLocalId as AnyObject
        if(messageType == "image" || messageType == "video")
        {
            msgDict["isFile"] = "YES" as AnyObject
        }
        else
        {
            msgDict["isFile"] = "NO" as AnyObject
        }
        
        msgDict["fileType"] = "" as AnyObject
        msgDict["fileName"] = "" as AnyObject
        msgDict["caption"] = caption as AnyObject
        
        msgDict["deleverUsers"] = [AnyObject]() as AnyObject
        msgDict["receivedUsers"] = [AnyObject]() as AnyObject
        msgDict["deleverUsersCount"] = 0 as AnyObject
        
        msgDict["chatType"] = chatType as AnyObject
        msgDict["banterNickName"] = newBanterNickName as AnyObject
        
        if(msgDict.count > 0)
        {
            /*let dataLocalMessage = try JSONSerialization.data(withJSONObject: msgDict, options: .prettyPrinted)
             let strLocalMessage = NSString(data: dataLocalMessage, encoding: String.Encoding.utf8.rawValue)! as String
             print(strLocalMessage)*/
            //Save data to local object
            //Get from local user defaults temp
            let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
            if localArrAllChats != nil
            {
                //Code to parse json data
                if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                    do {
                        arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                        
                    } catch let error as NSError {
                        //print(error)
                    }
                }
            }
            
            //End
            //print(arrUserChat.count)
            //arrUserChat[arrUserChat.count] = msgDict as AnyObject
            if let dt = self.arrAllChats[toUser]
            {
                tempArrUserChat = dt["Chats"] as! [AnyObject]
                if(tempArrUserChat.count > 0)
                {
                    tempArrUserChat.append(msgDict as AnyObject)
                }
                
            } else {
                //tempArrUserChat = msgDict as! [AnyObject]
                tempArrUserChat.insert(msgDict as AnyObject, at: 0)
            }
            //print(arrUserChat)
            
            var tmpArrChatDetails = [String : AnyObject]()
            tmpArrChatDetails["checkimage"] = "uncheck" as AnyObject
            
            
            // tmpArrChatDetails["Chats"] = arrUserChat as AnyObject
            if(!userName.isEmpty)
            {
                tmpArrChatDetails["userName"] = userName as AnyObject
            }
            else
            {
                tmpArrChatDetails["userName"] = toName as AnyObject
            }
            
            if(!userAvatar.isEmpty)
            {
                tmpArrChatDetails["userAvatar"] = userAvatar as AnyObject
            }
            else
            {
                tmpArrChatDetails["userAvatar"] = toAvatarURL as AnyObject
            }
            
            
            
            
            
            //New code to manage Badge
            /*if let dt = arrAllChats[toUser]
             {
             //New code to manage badge count
             if let bgcnt = dt["badgeCounts"]
             {
             if(bgcnt != nil)
             {
             let badgeCounts: Int = Int(bgcnt as! Int)
             tmpArrChatDetails["badgeCounts"] = badgeCounts as AnyObject
             }
             
             }
             
             //End
             }*/
            tmpArrChatDetails["badgeCounts"] = 0 as AnyObject
            //End
            
            
            let mili = Double(messageTime)
            let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
            
            tmpArrChatDetails["lastTime"] = String(myMilliseconds.toHour) as AnyObject
            
            
            tmpArrChatDetails["chatType"] = chatType as AnyObject
            tmpArrChatDetails["banterNickName"] = newBanterNickName as AnyObject
            
            
            
            
            if let dt = self.arrAllChats[toUser]
            {
                if(chatType == "banter" || chatType == "teambr")
                {
                    if let isAdm = dt["isAdmin"]
                    {
                        if(isAdm != nil)
                        {
                            isAdminMain = isAdm as! String
                        }
                    }
                    
                    
                    if let isJoi = dt["isJoined"]
                    {
                        if(isJoi != nil)
                        {
                            isJoinedMain = isJoi as! String
                        }
                    }
                    
                    if let isSupTeam = dt["supportedTeam"]
                    {
                        if(isSupTeam != nil)
                        {
                            supTeam = isSupTeam as! Int64
                        }
                    }
                    
                    if let isOppTeam = dt["opponentTeam"]
                    {
                        if(isOppTeam != nil)
                        {
                            oppTeam = isOppTeam as! Int64
                        }
                    }
                    
                    if let tMain = dt["mySupportedTeam"]
                    {
                        if(tMain != nil)
                        {
                            mySupportedTeamMain = tMain as! Int64
                        }
                    }
                    
                    if let isfansCount = dt["fansCount"]
                    {
                        if(isfansCount != nil)
                        {
                            tmpArrChatDetails["fansCount"] = isfansCount as AnyObject
                        }
                    }
                    if let islastDate = dt["lastDate"]
                    {
                        if(islastDate != nil)
                        {
                            lastmessageTime = islastDate as! Int64
                            
                            //tmpArrChatDetails["lastDate"] = islastDate as AnyObject
                        }
                    }
                    if let islastMessage = dt["lastMessage"]
                    {
                        if(islastMessage != nil)
                        {
                            lastmessage = islastMessage as! String
                            
                            //tmpArrChatDetails["lastDate"] = islastDate as AnyObject
                        }
                    }
                    if let bStatus = dt["banterStatus"]
                    {
                        if(bStatus != nil)
                        {
                            banterStatusMain = bStatus as! String
                        }
                    }
                    tmpArrChatDetails["banterStatus"] = banterStatusMain as AnyObject
                }
                else  if(chatType == "group")
                {
                    if let isAdm = dt["isAdmin"]
                    {
                        if(isAdm != nil)
                        {
                            isAdminMain = isAdm as! String
                        }
                    }
                    
                    
                    if let isJoi = dt["isJoined"]
                    {
                        if(isJoi != nil)
                        {
                            isJoinedMain = isJoi as! String
                        }
                    }
                    
                    if let isSupTeam = dt["supportedTeam"]
                    {
                        if(isSupTeam != nil)
                        {
                            supTeam = isSupTeam as! Int64
                        }
                    }
                    
                    if let isOppTeam = dt["opponentTeam"]
                    {
                        if(isOppTeam != nil)
                        {
                            oppTeam = isOppTeam as! Int64
                        }
                    }
                    
                    if let tMain = dt["mySupportedTeam"]
                    {
                        if(tMain != nil)
                        {
                            mySupportedTeamMain = tMain as! Int64
                        }
                    }
                    if let isfansCount = dt["fansCount"]
                    {
                        if(isfansCount != nil)
                        {
                            tmpArrChatDetails["fansCount"] = isfansCount as AnyObject
                        }
                    }
                    if let islastDate = dt["lastDate"]
                    {
                        if(islastDate != nil)
                        {
                            lastmessageTime = islastDate as! Int64
                            
                            //tmpArrChatDetails["lastDate"] = islastDate as AnyObject
                        }
                    }
                    if let islastMessage = dt["lastMessage"]
                    {
                        if(islastMessage != nil)
                        {
                            lastmessage = islastMessage as! String
                            
                            //tmpArrChatDetails["lastDate"] = islastDate as AnyObject
                        }
                    }
                    if let bStatus = dt["banterStatus"]
                    {
                        if(bStatus != nil)
                        {
                            banterStatusMain = bStatus as! String
                        }
                    }
                    tmpArrChatDetails["banterStatus"] = banterStatusMain as AnyObject
                }
                if let isHistory = dt["isHistory"]
                {
                    if(isHistory != nil)
                    {
                        gethistory = isHistory as! Bool
                        
                        //tmpArrChatDetails["lastDate"] = islastDate as AnyObject
                    }
                }
            }
            tmpArrChatDetails["isHistory"] = gethistory as AnyObject
            if(Cmd.isEmpty){
                tmpArrChatDetails["lastDate"] = messageTime as AnyObject
                
            }
            else{
                tmpArrChatDetails["lastDate"] = lastmessageTime as AnyObject
            }
            if(Cmd.isEmpty){
                //tmpArrChatDetails["lastDate"] = messageTime as AnyObject
                if(messageType == "image")
                {
                    tmpArrChatDetails["lastMessage"] = "Image" as AnyObject
                }
                else if(messageType == "video")
                {
                    tmpArrChatDetails["lastMessage"] = "Video" as AnyObject
                }
                else
                {
                    tmpArrChatDetails["lastMessage"] = messageContent as AnyObject
                }
                
            }
            else{
                tmpArrChatDetails["lastMessage"] = lastmessage as AnyObject
            }
            if(!isJoined.isEmpty)
            {
                tmpArrChatDetails["isJoined"] = isJoined as AnyObject
            }
            else
            {
                tmpArrChatDetails["isJoined"] = isJoinedMain as AnyObject
            }
            
            tmpArrChatDetails["isAdmin"] = isAdminMain as AnyObject
            
            tmpArrChatDetails["supportedTeam"] = supTeam as AnyObject
            
            tmpArrChatDetails["opponentTeam"] = oppTeam as AnyObject
            
            
            tmpArrChatDetails["roomJID"] = toUser as AnyObject
            
            if(mySupportedTeamMain > 0)
            {
                tmpArrChatDetails["mySupportedTeam"] = mySupportedTeamMain as AnyObject
            }
            else
            {
                tmpArrChatDetails["mySupportedTeam"] = 0 as AnyObject
            }
            // Sqlite code by nitesh
            
            //sqlite cod by nitesh
            let array = Messages.rows(filter:"roomJID = '\(toUser)'") as! [Messages]
            if(array.count == 0){
                messagesTable.userName = tmpArrChatDetails["userName"] as! String
                messagesTable.userAvatar = tmpArrChatDetails["userAvatar"] as! String
                messagesTable.badgeCounts = tmpArrChatDetails["badgeCounts"] as! Int
                messagesTable.lastMessage =  tmpArrChatDetails["lastMessage"] as! String
                messagesTable.lastTime =     tmpArrChatDetails["lastDate"] as! Int64
                messagesTable.lastDate = tmpArrChatDetails["lastDate"] as! Int64
                messagesTable.chatType = tmpArrChatDetails["chatType"] as! String
                messagesTable.banterNickName =  tmpArrChatDetails["banterNickName"] as! String
                messagesTable.isJoined =   tmpArrChatDetails["isJoined"] as! String
                messagesTable.isAdmin =          tmpArrChatDetails["isAdmin"] as! String
                // messagesTable.banterStatus =  tmpArrChatDetails["banterStatus"] as! String
                messagesTable.supportedTeam =        tmpArrChatDetails["supportedTeam"] as! Int
                messagesTable.opponentTeam =  tmpArrChatDetails["opponentTeam"] as! Int
                messagesTable.banterUsers =   "" //tmpArrChatDetails["banterUsers"] as! String
                messagesTable.roomJID =  tmpArrChatDetails["roomJID"] as! String
                messagesTable.mySupportedTeam =   tmpArrChatDetails["mySupportedTeam"] as! Int
                if messagesTable.save() != 0 {
                    //  print("messagesTable save")
                }
                else{
                    if messagesTable.save() != 0 {
                        //  print("messagesTable  save")
                    }
                    else{
                        // print("messagesTable not save")
                    }
                    
                }
                let bantersoundTable = Bantersound()
                bantersoundTable.soundValue = 1
                bantersoundTable.toUsername = tmpArrChatDetails["userName"] as! String
                bantersoundTable.toUserJID = tmpArrChatDetails["roomJID"] as! String
                if bantersoundTable.save() != 0 {
                    // print("bantersoundTable save")
                    BantersoundUpdateForNotification()
                }
                else{
                    if bantersoundTable.save() != 0 {
                        // print("bantersoundTable  save")
                        BantersoundUpdateForNotification()
                    }
                    else{
                        //print("bantersoundTable not save")
                    }
                    
                }
                
                
            }
            else{
                
                // let result = db.execute(sql:" UPDATE messages SET isAdmin = '\(tmpArrChatDetails["isAdmin"] as! String)', banterNickName = '\(tmpArrChatDetails["banterNickName"] as! String)', opponentTeam = \(tmpArrChatDetails["opponentTeam"] as! Int), lastDate = \(tmpArrChatDetails["lastDate"] as! Int), supportedTeam = \(tmpArrChatDetails["supportedTeam"] as! Int), roomJID = '\(tmpArrChatDetails["roomJID"] as! String)', userName = '\(tmpArrChatDetails["userName"] as! String)', userAvatar = '\(tmpArrChatDetails["userAvatar"] as! String)', mySupportedTeam = \(tmpArrChatDetails["mySupportedTeam"] as! Int), badgeCounts = \(tmpArrChatDetails["badgeCounts"] as! Int), lastTime = \(tmpArrChatDetails["lastDate"] as! Int64), chatType = '\(tmpArrChatDetails["chatType"] as! String)', lastMessage = '\(tmpArrChatDetails["lastMessage"] as! String)', isJoined = '\(tmpArrChatDetails["isJoined"] as! String)' WHERE roomJID = '\(tmpArrChatDetails["roomJID"] as! String)'")
                //print("messages serverOut update",result)
            }
            Messages_detailsTable.toUserJID    = msgDict["toUserJID"] as! String
            Messages_detailsTable.fromUserJID =    msgDict["fromUserJID"] as! String
            Messages_detailsTable.messageId =    msgDict["messageId"] as! String
            Messages_detailsTable.messageContent =     msgDict["messageContent"] as! String
            Messages_detailsTable.messageType =     msgDict["messageType"] as! String
            Messages_detailsTable.supportteam =    msgDict["supportteam"] as! Int
            Messages_detailsTable.userName =     msgDict["userName"] as! String
            Messages_detailsTable.status =  msgDict["status"] as! String
            Messages_detailsTable.time =   msgDict["time"] as! Int64
            Messages_detailsTable.isIncoming =   msgDict["isIncoming"] as! String
            Messages_detailsTable.filePath =              msgDict["filePath"] as! String
            Messages_detailsTable.thumb =          msgDict["thumb"] as! String
            Messages_detailsTable.fileLocalId =  msgDict["fileLocalId"] as! String
            Messages_detailsTable.isFile =     msgDict["isFile"] as! String
            Messages_detailsTable.fileType =  msgDict["fileType"] as! String
            Messages_detailsTable.fileName =  msgDict["fileName"] as! String
            Messages_detailsTable.caption =  msgDict["caption"] as! String
            Messages_detailsTable.deleverUsers = "" //msgDict["deleverUsers"] as! String
            Messages_detailsTable.receivedUsers = ""//  msgDict["receivedUsers"] as! String
            Messages_detailsTable.deleverUsersCount =  msgDict["deleverUsersCount"] as! Int
            Messages_detailsTable.chatType =    msgDict["chatType"] as! String
            Messages_detailsTable.banterNickName =    msgDict["banterNickName"] as! String
            
            
            if Messages_detailsTable.save() != 0 {
                // print("Messages_detailsTable save")
            }
            else{
                if Messages_detailsTable.save() != 0 {
                    // print("Messages_detailsTable save")
                }
                else{
                    // print("Messages_detailsTable not save")
                }
            }
            
            //end sqlite
            //db.FetchAllLocalData()
            tmpArrChatDetails["Chats"] = tempArrUserChat as AnyObject
            arrAllChats[toUser] = tmpArrChatDetails as AnyObject
            //print(toUser)
            // print(toUserJID)
            if(isOnChatView == true && toUser == toUserJID)
            {
                if let dt = self.arrAllChats[toUser]
                {
                    let sortedArray = (dt["Chats"] as! [[String:Any]]).sorted(by: { (dictOne, dictTwo) -> Bool in
                        let date1 =  dictOne
                        let date2 =  dictTwo
                        var dt1: Date = Date()
                        var dt2: Date = Date()
                        
                        if date1["time"] != nil
                        {
                            // print(date1["lastDate"] as AnyObject)
                            let mili1: Double = Double(truncating: (date1["time"] as AnyObject) as! NSNumber) //(date1["lastTime"] as! NSString).doubleValue //Double((val1 as AnyObject) as! NSNumber)
                            let myMilliseconds1: UnixTime = UnixTime(mili1/1000.0)
                            dt1 = myMilliseconds1.dateFull
                            //print("Date1: " + dt1.description)
                        }
                        
                        if date2["time"] != nil
                        {
                            let mili2: Double = Double(truncating: (date2["time"] as AnyObject) as! NSNumber) //(date2["lastTime"] as! NSString).doubleValue
                            let myMilliseconds2: UnixTime = UnixTime(mili2/1000.0)
                            dt2 = myMilliseconds2.dateFull
                            //print("Date2: " + dt2.description)
                        }
                        
                        
                        
                        return dt1.compare(dt2) == ComparisonResult.orderedAscending
                    })
                    arrUserChat = sortedArray as [AnyObject]
                    //arrUserChat = dt["Chats"] as! [AnyObject]
                }
            }
            else if(isOntriviaChatsView == true && toUser == toUserJID)
            {
                if let dt = self.arrAllChats[toUser]
                {
                    let sortedArray = (dt["Chats"] as! [[String:Any]]).sorted(by: { (dictOne, dictTwo) -> Bool in
                        let date1 =  dictOne
                        let date2 =  dictTwo
                        var dt1: Date = Date()
                        var dt2: Date = Date()
                        
                        if date1["time"] != nil
                        {
                            // print(date1["lastDate"] as AnyObject)
                            let mili1: Double = Double(truncating: (date1["time"] as AnyObject) as! NSNumber) //(date1["lastTime"] as! NSString).doubleValue //Double((val1 as AnyObject) as! NSNumber)
                            let myMilliseconds1: UnixTime = UnixTime(mili1/1000.0)
                            dt1 = myMilliseconds1.dateFull
                            //print("Date1: " + dt1.description)
                        }
                        
                        if date2["time"] != nil
                        {
                            let mili2: Double = Double(truncating: (date2["time"] as AnyObject) as! NSNumber) //(date2["lastTime"] as! NSString).doubleValue
                            let myMilliseconds2: UnixTime = UnixTime(mili2/1000.0)
                            dt2 = myMilliseconds2.dateFull
                            //print("Date2: " + dt2.description)
                        }
                        
                        
                        
                        return dt1.compare(dt2) == ComparisonResult.orderedAscending
                    })
                    arrUserChat = sortedArray as [AnyObject]
                    //arrUserChat = dt["Chats"] as! [AnyObject]
                }
            }else {
                arrUserChat = []
            }
            //Save array to local temp
            do {
                if(arrAllChats.count > 0)
                {
                    let dataArrAllChats = try JSONSerialization.data(withJSONObject: arrAllChats, options: .prettyPrinted)
                    let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                    UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                    UserDefaults.standard.synchronize()
                }
            } catch {
                //print(error.localizedDescription)
            }
            //End
            
        }
        
    }
    func roomValueupdate(_ toUser: String, bantername: String){
          
          //Get from local user defaults temp
          let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
          if localArrAllChats != nil
          {
              //Code to parse json data
              if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                  do {
                      self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                      
                  } catch let error as NSError {
                      print(error)
                  }
              }
          }
          
          //var tmpArrChatDetails = [String : AnyObject]()
          
          //tmpArrChatDetails["Chats"] = appDelegate().arrUserChat as AnyObject
          
          for tmpAllUserChats in arrAllChats
          {
              let tmpSingleUserChat: String = tmpAllUserChats.key
              // print(tmpSingleUserChat)
              // print(toUserJID)
              if(tmpSingleUserChat == toUser)
              {
                  var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                  tmpArrChatDetails["userName"] = bantername as AnyObject
                  
                  arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                  
                  
              }
              
          }
          
          //self.appDelegate().arrAllChats[appDelegate().toUserJID] = tmpArrChatDetails as AnyObject
          //self.arrAllChats.removeValue(forKey: toUserJID)
          //Save array to local temp
          do {
              if(arrAllChats.count > 0)
              {
                  let dataArrAllChats = try JSONSerialization.data(withJSONObject:self.arrAllChats, options: .prettyPrinted)
                  let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                  UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                  UserDefaults.standard.synchronize()
              }
          } catch {
              print(error.localizedDescription)
          }
          
          //End
          if(self.isOnBantersView == true)
                                                                                                      {
                                                                                                          //Post notification if user is on chats window and received any message
                                                                                                          let notificationName = Notification.Name("RefreshBantersView")
                                                                                                          NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                      }
                                                                                                      else if (self.isOnChatsView == true)
                                                                                                      {
                                                                                                          let notificationName = Notification.Name("RefreshChatsView")
                                                                                                          NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                      }
          
          
      }
    func fancountupdate(_ toUser: String, fancount: Int64){
        
        //Get from local user defaults temp
        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
        if localArrAllChats != nil
        {
            //Code to parse json data
            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                do {
                    self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                    
                } catch let error as NSError {
                    print(error)
                }
            }
        }
        
        //var tmpArrChatDetails = [String : AnyObject]()
        
        //tmpArrChatDetails["Chats"] = appDelegate().arrUserChat as AnyObject
        
        for tmpAllUserChats in arrAllChats
        {
            let tmpSingleUserChat: String = tmpAllUserChats.key
            // print(tmpSingleUserChat)
            // print(toUserJID)
            if(tmpSingleUserChat == toUser)
            {
                var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                tmpArrChatDetails["fansCount"] = fancount as AnyObject
                
                arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                
                
            }
            
        }
        
        //self.appDelegate().arrAllChats[appDelegate().toUserJID] = tmpArrChatDetails as AnyObject
        //self.arrAllChats.removeValue(forKey: toUserJID)
        //Save array to local temp
        do {
            if(arrAllChats.count > 0)
            {
                let dataArrAllChats = try JSONSerialization.data(withJSONObject:self.arrAllChats, options: .prettyPrinted)
                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                UserDefaults.standard.synchronize()
            }
        } catch {
            print(error.localizedDescription)
        }
        
        //End
        if(self.isOnBantersView == true)
                                                                                                    {
                                                                                                        //Post notification if user is on chats window and received any message
                                                                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                    }
                                                                                                    else if (self.isOnChatsView == true)
                                                                                                    {
                                                                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                    }
        
        
    }
    func prepareMessageForFanUpdates(_ toUser: String, messageContent: String, messageType: String, messageTime: Int64, messageId: String = "", filePath: String = "", fileLocalId: String = "", caption: String = "", thumbLink: String = "", fromUser: String = "", isIncoming: String = "YES", userName: String = "", userAvatar: String = "", chatStatus: String = "read", newBanterNickName: String = "", isJoined: Bool = true, chatType: String = "", teamId: Int64 = 0, isPost: Bool = false)
    {
        var msgDict = [String: AnyObject]()
        
        //let login: String? = UserDefaults.standard.string(forKey: "userJID")
        //msgDict["toUserMobile"] = "+919826615203"
        msgDict["toUserJID"] = toUser as AnyObject
        msgDict["fromUserJID"] = fromUser as AnyObject//"+919826615203@amazomcdn.com"
        msgDict["messageId"] = messageId as AnyObject
        msgDict["messageContent"] = messageContent as AnyObject
        msgDict["messageType"] = messageType as AnyObject
        msgDict["userName"] = userName as AnyObject
        msgDict["status"] = chatStatus as AnyObject
        msgDict["time"] = messageTime as AnyObject
        msgDict["isIncoming"] = isIncoming as AnyObject
        if(filePath.isEmpty)
        {
            msgDict["filePath"] = "" as AnyObject //"file://" + filePath as AnyObject
        }
        else
        {
            msgDict["filePath"] = filePath as AnyObject//("file://" + filePath) as AnyObject //"file://" + filePath as AnyObject
        }
        msgDict["thumb"] = thumbLink as AnyObject
        msgDict["fileLocalId"] = fileLocalId as AnyObject
        if(messageType == "image" || messageType == "video")
        {
            msgDict["isFile"] = "YES" as AnyObject
        }
        else
        {
            msgDict["isFile"] = "NO" as AnyObject
        }
        
        msgDict["fileType"] = "" as AnyObject
        msgDict["fileName"] = "" as AnyObject
        msgDict["caption"] = caption as AnyObject
        
        msgDict["chatType"] = chatType as AnyObject
        msgDict["banterNickName"] = newBanterNickName as AnyObject
        
        if(msgDict.count > 0)
        {
            if(isPost)
            {
                var tmpArrUserChat = fanUpdates as [AnyObject]
                
                tmpArrUserChat.insert(msgDict as AnyObject, at: 0)
                
                fanUpdates = tmpArrUserChat
            }
            else
            {
                //fanUpdates[fanUpdates.count] = msgDict as AnyObject
                fanUpdates.append(msgDict as AnyObject)
            }
            
        }
        
    }
    
    func sendMessageToFanUpdates(_ userMobile: String, messageContent: String, messageType: String, messageTime: Int64, messageId: String = "", caption: String = "", thumbLink: String = "", roomType: String = "fanupdate", messageTitle: String,smillink: String = "",mp4link: String = "",subtype: String)
    {
        
        let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
        
        do {
            
            //Code to send message to XMPP Server
            var messageDict = [String: AnyObject]()
             //type //value //time //caption //banternickname //ip
             messageDict["type"] = messageType as AnyObject
             messageDict["value"] = messageContent as AnyObject
             messageDict["time"] = messageTime as AnyObject
             messageDict["caption"] = caption as AnyObject
             messageDict["banternickname"] = newBanterNick as AnyObject
             messageDict["ip"] = "" as AnyObject
             messageDict["thumblink"] = thumbLink as AnyObject
             messageDict["roomtype"] = "fanupdate" as AnyObject
             messageDict["relatedteam"] = self.fanUpdatesTeamId as AnyObject
             messageDict["messageid"] = messageId as AnyObject
              messageDict["title"] = messageTitle as AnyObject
             messageDict["smillink"] = smillink as AnyObject
             messageDict["mp4link"] = mp4link as AnyObject
             
             messageDict["subtype"] = subtype as AnyObject
                         messageDict["username"] = userMobile as AnyObject
                         
             let dataMessage = try JSONSerialization.data(withJSONObject: messageDict, options: .prettyPrinted)
             let strMessage = NSString(data: dataMessage, encoding: String.Encoding.utf8.rawValue)! as String
             print(strMessage)
            //,\"type\":\"" + messageType + "\"
            //let strMessage = "{\"type\":\"" + messageType + "\",\"value\":\"" + messageContent + "\",\"time\":\"" + messageTime + "\",\"caption\":\"" + caption + "\",\"banternickname\":\"" + newBanterNick + "\",\"ip\":\"\",\"thumblink\":\"" + thumbLink + "\",\"roomtype\":\"fanupdates\",\"relatedteam\":\"" + self.fanUpdatesTeamId + "\",\"messageid\":\"" + messageId + "\"}"
            
            /*let d1 = "{\"type\":\"" + messageType + "\","
            let d2 = "\"value\":\"" + messageContent + "\","
            let d3 = "\"time\":" + messageTime.description + ","
            let d4 = "\"caption\":\"" + caption + "\","
            let d5 = "\"banternickname\":\"" + newBanterNick + "\","
            let d6 = "\"ip\":\"\","
            let d7 = "\"thumblink\":\"" + thumbLink + "\","
            let d8 = "\"roomtype\":\"fanupdates\","
            let d9 = "\"subtype\":\"post\","
            let d10 = "\"relatedteam\":" + self.nearbyTeamId.description + ","
            let d11 = "\"title\":\"" + messageTitle + "\","
            let d12 = "\"smillink\":\"" + smillink + "\","
            let d13 = "\"mp4link\":\"" + mp4link + "\","
            let d14 = "\"messageid\":\"" + messageId + "\"}"
            
            let strMessage = d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9 + d10 + d11 + d12 + d13 + d14
            */
            //Now send post to API
            //Now send this message to API
            var dictRequest = [String: AnyObject]()
            dictRequest["cmd"] = "savefanupdates" as AnyObject
            dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
            dictRequest["device"] = "ios" as AnyObject
            
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            dictRequestData["relatedteam"] = self.fanUpdatesTeamId as AnyObject
            dictRequestData["message"] = messageDict as AnyObject
            dictRequestData["time"] = messageTime as AnyObject
            dictRequestData["username"] = userMobile as AnyObject
            dictRequestData["banternickname"] = newBanterNick as AnyObject
            dictRequestData["coins"] =  GetvalueFromInsentiveConfigTable(Key: fcfanstory)
             dictRequestData["activity"] = "fanstory" as AnyObject
            let lavel = GetvalueFromInsentiveConfigTable(Key: fccurrentlevel)
            dictRequestData["level"] = lavel.trimmingCharacters(in: .illegalCharacters) as AnyObject
             dictRequestData["ip"] = "" as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
            
            /*let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
            let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
            // print(strFanUpdates)
            self.sendRequestToAPI(strRequestDict: strFanUpdates)*/
           /* let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                            let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                            //print(strByPlace)
                                                                            let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                            
                                                                            let url = MediaAPIjava + "request=" + escapedString!*/
            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                           headers: ["Content-Type": "application/json","cache-control": "no-cache"])
                                                                                                             // 2
                                                                                                             .responseJSON { response in
                                                                               switch response.result {
                                                                                                                        case .success(let value):
                                                                                                                            if let json = value as? [String: Any] {
                                                                                                                                // print(" JSON:", json)
                                                                                                                                let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                // self.finishSyncContacts()
                                                                                                                                //print(" status:", status1)
                                                                                                                               Clslogging.loginfo(State: "savefanupdates", userinfo: json as [String : AnyObject])
                                                                                                                               if(status1){
                                                                                                                                   
                                                                                                                                       let response: NSArray = json["responseData"] as! NSArray
                                                                                                                                       let notificationName = Notification.Name("_SaveFanUpdates")
                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                       let dict = response[0] as! NSDictionary
                                                                                                                                       let totalcoins = dict.value(forKey: "totalcoins") as! Int
                                                                                                                                       let availablecoins = dict.value(forKey: "availablecoins") as! Int
                                                                                                                                   self.AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins )
                                                                                                                                       DispatchQueue.main.async {
                                                                                                                                           AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText:"You won \(self.GetvalueFromInsentiveConfigTable(Key: fcfanstory)) FanCoins rewards for posting Fan Story.\(self.GetvalueRedeemMesg(avilablecoin: availablecoins))",fancoins: String(10))
                                                                                                                                                                          }
                                                                                                                                       
                                                                                                                                   
                                                                                                                               }
                                                                                                                               else{
                                                                                                                                   let notificationName = Notification.Name("_failSaveFanUpdates")
                                                                                                                                                                                      NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                               }
                                                                                                                            }
                                                                                                                        case .failure(let error):
                                                                                                                            debugPrint(error as Any)
                                                                                                                            let notificationName = Notification.Name("_failSaveFanUpdates")
                                                                                                                                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                
                                                                                break
                                                                                                                            // error handling
                                                                                                             
                                                                                                                        }
                                                                                                                
                                                                                                         }
             Clslogging.loginfo(State: "sendMessageToFanUpdates", userinfo: dictRequest as! [String : AnyObject])
            
        } catch {
            // print(error.localizedDescription)
        }
        //End
        let array = Last_activity_date.rows(filter:"activityType = 'createfanstory'") as! [Last_activity_date]
        
        if(array.count != 0){
            _ = self.db.execute(sql:" UPDATE last_activity_date SET activity_date = \(messageTime) WHERE activityType = 'createfanstory'")
            
            // alarmModel.alarms[0].enabled = false
            // alarmScheduler.reSchedule()
        }
        else{
            let activity = Last_activity_date()
            activity.activityType = "createfanstory"
            
            activity.activity_date = messageTime
            activity.save()
        }
    }
    
    func sendMessageToEditFanUpdates(_ userMobile: String, messageContent: String, messageType: String, messageTime: Int64, messageId: String = "", caption: String = "", thumbLink: String = "", roomType: String = "fanupdate", messageTitle: String, fanupdateid: Int64, subtype: String,smillink: String = "",mp4link: String = "")
    {
        
        let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
        
        do {
           /* let d1 = "{\"type\":\"" + messageType + "\","
            let d2 = "\"value\":\"" + messageContent + "\","
            let d3 = "\"time\":" + messageTime.description + ","
            let d4 = "\"caption\":\"" + caption + "\","
            let d5 = "\"banternickname\":\"" + newBanterNick + "\","
            let d6 = "\"ip\":\"\","
            let d7 = "\"thumblink\":\"" + thumbLink + "\","
            let d8 = "\"roomtype\":\"fanupdates\","
            let d9 = "\"subtype\":\""+subtype+"\","
            let d10 = "\"relatedteam\":" + self.fanUpdatesTeamId.description + ","
            let d11 = "\"title\":\"" + messageTitle + "\","
            let d12 = "\"messageid\":\"" + messageId + "\"}"
            
            let strMessage = d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9 + d10 + d11 + d12*/
            //Code to send message to XMPP Server
                     var messageDict = [String: AnyObject]()
                      //type //value //time //caption //banternickname //ip
                      messageDict["type"] = messageType as AnyObject
                      messageDict["value"] = messageContent as AnyObject
                      messageDict["time"] = messageTime as AnyObject
                      messageDict["caption"] = caption as AnyObject
                      messageDict["banternickname"] = newBanterNick as AnyObject
                      messageDict["ip"] = "" as AnyObject
                      messageDict["thumblink"] = thumbLink as AnyObject
                      messageDict["roomtype"] = "fanupdate" as AnyObject
                      messageDict["relatedteam"] = self.fanUpdatesTeamId as AnyObject
                      messageDict["messageid"] = messageId as AnyObject
                       messageDict["title"] = messageTitle as AnyObject
                      messageDict["smillink"] = smillink as AnyObject
                      messageDict["mp4link"] = mp4link as AnyObject
                      
                      messageDict["subtype"] = subtype as AnyObject
                                  messageDict["username"] = userMobile as AnyObject
                                  
                      let dataMessage = try JSONSerialization.data(withJSONObject: messageDict, options: .prettyPrinted)
                      let strMessage = NSString(data: dataMessage, encoding: String.Encoding.utf8.rawValue)! as String
                      print(strMessage)
            //Now send post to API
            //Now send this message to API
            var dictRequest = [String: AnyObject]()
            dictRequest["cmd"] = "editfanupdate" as AnyObject
            dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
            dictRequest["device"] = "ios" as AnyObject
            
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            dictRequestData["fanupdateid"] = fanupdateid as AnyObject
            dictRequestData["relatedteam"] = self.fanUpdatesTeamId as AnyObject
            dictRequestData["message"] = strMessage as AnyObject
            dictRequestData["time"] = messageTime as AnyObject
            dictRequestData["username"] = userMobile as AnyObject
            dictRequestData["banternickname"] = newBanterNick as AnyObject
            dictRequestData["ip"] = "" as AnyObject
            
            dictRequest["requestData"] = dictRequestData as AnyObject
            
           /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
            let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
            print(strFanUpdates)
            self.sendRequestToAPI(strRequestDict: strFanUpdates)*/
          /*  let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                                       let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                       //print(strByPlace)
                                                                                       let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                                       
                                                                                       let url = MediaAPIjava + "request=" + escapedString!*/
                                                                                      AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                                      headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                                        // 2
                                                                                                                        .responseJSON { response in
                                                                               switch response.result {
                                                                                                                        case .success(let value):
                                                                                                                            if let json = value as? [String: Any] {
                                                                                                                                // print(" JSON:", json)
                                                                                                                                let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                // self.finishSyncContacts()
                                                                                                                                //print(" status:", status1)
                                                                                                                                Clslogging.loginfo(State: "editfanupdate", userinfo: json as [String : AnyObject])
                                                                                                                                if(status1){
                                                                                                                                   let notificationName = Notification.Name("_SaveFanUpdates")
                                                                                                                                                                                  NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                  
                                                                                                                               }
                                                                                                                               else{
                                                                                                                                   let notificationName = Notification.Name("_failSaveFanUpdates")
                                                                                                                                                                                      NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                               }
                                                                                                                            }
                                                                                                                        case .failure(let error):
                                                                                                                            debugPrint(error as Any)
                                                                                                                                 let notificationName = Notification.Name("_failSaveFanUpdates")
                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                            
                                                                                
                                                                                break
                                                                                                                            // error handling
                                                                                                             
                                                                                                                        }
                                                                                                                            
                                                                                                                    }
             Clslogging.loginfo(State: "sendMessageToEditFanUpdates request", userinfo: dictRequest as! [String : AnyObject])
            
        } catch {
            // print(error.localizedDescription)
        }
        //End
    }
    
    
    func sendMessageToServer(_ toUser: String, messageContent: String, messageType: String, messageTime: Int64, messageId: String = "", caption: String = "", thumbLink: String = "", roomType: String = "chat", messageSubType: String = "",  mySupportTeam: Int64 = 0, roomid: String = "", roomName: String = "",BlockUnblockUserName: String = "", JoindUserName: String = "" ,admintotalcoin: Int64 = 0,adminAvailablecoin: Int64 = 0, coinsreceived: Int = 0,roomavatar: String = "",SupportTeam: Int64 = 0,OpponentTeam: Int64 = 0)
    {
        let login: String? = UserDefaults.standard.string(forKey: "userJID")
       // let arrLogin = login?.components(separatedBy: "@")
        
        //Generate new unique banter name
        // let newBanterNick: String = arrLogin![0]
        //Be occupent first to join banter room before send message
        if(roomType == "banter")
        {
            //Send presence to room
            /*let presence = XMPPPresence()
             presence?.addAttribute(withName: "to", stringValue: toUser + "/" + login!)
             presence?.addAttribute(withName: "from", stringValue: login!)
             let x: XMLElement = XMLElement.element(withName: "x") as! XMLElement
             x.addAttribute(withName: "xmlns", stringValue: "http://jabber.org/protocol/muc")
             
             presence?.addChild(x)
             self.xmppStream!.send(presence)*/
            /*print("goOnline")
             let presence = XMPPPresence()
             //Room Id/Nick Name
             presence?.addAttribute(withName: "to", stringValue: toUser + "/" + newBanterNick)
             
             if login != nil
             {
             presence?.addAttribute(withName: "from", stringValue: login!)
             }
             
             let x: XMLElement = XMLElement.element(withName: "x") as! XMLElement
             
             x.addAttribute(withName: "xmlns", stringValue: "http://jabber.org/protocol/muc")
             
             //x.addChild(pwd)
             
             presence?.addChild(x)
             self.xmppStream!.send(presence)*/
            
            //toUser + "/" + newBanterNick
            
            //self.joinRoomOnly(with: toUser, delegate: self)
            let array = Last_activity_date.rows(filter:"activityType = 'banterpart'") as! [Last_activity_date]
            
            if(array.count != 0){
                _ = self.db.execute(sql:" UPDATE last_activity_date SET activity_date = \(messageTime) WHERE activityType = 'banterpart'")
                // alarmModel.alarms[1].enabled = false
                // alarmScheduler.reSchedule()
            }
            else{
                let activity = Last_activity_date()
                activity.activityType = "banterpart"
                
                activity.activity_date = messageTime
                activity.save()
            }
        }
        //End
        //Save array to local temp
        do {
            
            //Code to send message to XMPP Server
            var messageDict = [String: AnyObject]()
            //type //value //time //caption //banternickname //ip
            messageDict["type"] = messageType as AnyObject
            messageDict["value"] = messageContent as AnyObject
            messageDict["time"] = messageTime as AnyObject
            messageDict["caption"] = caption as AnyObject
            if(roomType == "banter")
            {
                messageDict["banternickname"] =  "" as AnyObject//newBanterNick as AnyObject
            }
            else
            {
                messageDict["banternickname"] = "" as AnyObject
            }
            
            messageDict["ip"] = "" as AnyObject
            messageDict["thumblink"] = thumbLink as AnyObject
            
            if(roomType == "banter")
            {
                messageDict["roomtype"] = "banter" as AnyObject
            }
            else if(roomType == "chat")
            {
                messageDict["roomtype"] = "chat" as AnyObject
            }
            else if(roomType == "group")
            {
                messageDict["roomtype"] = "group" as AnyObject
            }
            else if(roomType == "fanupdate")
            {
                messageDict["roomtype"] = "fanupdate" as AnyObject
            }
            else if(roomType == "trivia")
            {
                messageDict["roomtype"] = "trivia" as AnyObject
            }
            else if(roomType == "teambr")
                       {
                           messageDict["roomtype"] = "teambr" as AnyObject
                       }
            let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
            if(!istriviauser){
            messageDict["username"] = login! as AnyObject
            }
            else{
                 let login: String? = UserDefaults.standard.string(forKey: "triviauser")
                 messageDict["username"] = login! as AnyObject
            }
            messageDict["supportteam"] = mySupportTeam as AnyObject
            
            if(messageType == "text" || messageType == "image" || messageType == "video"){
                messageDict["sub_type"] = messageSubType as AnyObject
                
            }
            else{
                
                if(messageSubType != "")
                {
                    messageDict["subtype"] = messageSubType as AnyObject
                    //messageDict["username"] = login! as AnyObject
                    // messageDict["username"] = login! as AnyObject
                    if(messageSubType == "roomuseradd"){ //|| messageSubType == "roomuserleft"){
                        if let userStatus = UserDefaults.standard.string(forKey: "userStatus")
                        {
                            messageDict["status"]  = userStatus as AnyObject
                            if(roomType == "group"){
                                messageDict["username"] = JoindUserName as AnyObject
                            }
                            messageDict["roomid"] = roomid as AnyObject
                            
                        }
                        else
                        {
                            messageDict["status"] = "" as AnyObject
                            messageDict["username"] = JoindUserName as AnyObject
                            messageDict["roomid"] = roomid as AnyObject
                        }
                        messageDict["isAdmin"] = false as AnyObject
                        if UserDefaults.standard.string(forKey: "userAvatarURL") != nil
                        {
                            messageDict["avatar"] = UserDefaults.standard.string(forKey: "userAvatarURL") as AnyObject
                            
                        }
                        else{
                            messageDict["avatar"] = "" as AnyObject
                        }
                        if UserDefaults.standard.string(forKey: "useremail") != nil
                        {
                            messageDict["email"] = UserDefaults.standard.string(forKey: "useremail") as AnyObject
                            
                        }
                        else{
                            messageDict["email"] = "" as AnyObject
                        }
                        if UserDefaults.standard.string(forKey: "registerMobile") != nil
                        {
                            messageDict["mobile"] = UserDefaults.standard.string(forKey: "registerMobile") as AnyObject
                            
                        }
                        else{
                            messageDict["mobile"] = "" as AnyObject
                        }
                        
                        
                        messageDict["userstatus"] = "active" as AnyObject
                        
                        //messageDict["userAvatar"] = roomavatar as AnyObject
                    }
                    if(messageSubType == "roomavatarchange"){
                        messageDict["username"] = JoindUserName as AnyObject
                        messageDict["avatar"] = roomavatar as AnyObject
                        messageDict["nickname"] = "" as AnyObject
                    }
                    if (messageSubType == "roomuserblocked"){
                        messageDict["roomid"] = roomid as AnyObject
                        messageDict["blockedusername"] = BlockUnblockUserName as AnyObject
                        
                    }
                    if (messageSubType == "roomuserunblocked"){
                        messageDict["roomid"] = roomid as AnyObject
                        messageDict["unblockedusername"] = BlockUnblockUserName as AnyObject
                        
                    }
                    if (messageSubType == "grouproomuserunblocked"){
                        messageDict["roomid"] = roomid as AnyObject
                        messageDict["unblockedusername"] = BlockUnblockUserName as AnyObject
                        
                    }
                    if (messageSubType == "invite"){
                        messageDict["roomid"] = roomid as AnyObject
                        messageDict["roomname"] = roomName as AnyObject
                        messageDict["supportteam"] = SupportTeam as AnyObject
                        messageDict["opponentteam"] = OpponentTeam as AnyObject
                        
                    }
                    if (messageSubType == "banterinvite"){
                        messageDict["roomid"] = roomid as AnyObject
                        messageDict["roomname"] = roomName as AnyObject
                        messageDict["supportteam"] = SupportTeam as AnyObject
                        messageDict["opponentteam"] = OpponentTeam as AnyObject
                        
                    }
                    if (messageSubType == "coinsreceived"){
                        messageDict["roomid"] = roomid as AnyObject
                        messageDict["adminusername"] = JoindUserName as AnyObject
                        messageDict["admintotalcoins"] = admintotalcoin as AnyObject
                        messageDict["adminavailablecoins"] = adminAvailablecoin as AnyObject
                        messageDict["coinsreceived"] = coinsreceived as AnyObject
                    }
                    
                    
                    if (messageSubType == "referral"){
                        messageDict["roomid"] = roomid as AnyObject
                        messageDict["roomname"] = roomName as AnyObject
                        
                        
                    }
                    if (messageSubType == "trivialike"){
                        messageDict["roomid"] = roomid as AnyObject
                       
                         messageDict["username"] = JoindUserName as AnyObject
                        
                    }
                    /*if (messageSubType == "roomuserleft"){
                     messageDict["userstatus"] = "inactive" as AnyObject
                     
                     }*/
                    
                }
            }
            /*    if(roomType == "group"){
             messageDict["username"] = JoindUserName as AnyObject
             }
             else{
             messageDict["username"] = login! as AnyObject
             
             }*/
            
            
            
            let dataMessage = try JSONSerialization.data(withJSONObject: messageDict, options: .prettyPrinted)
            let strMessage = NSString(data: dataMessage, encoding: String.Encoding.utf8.rawValue)! as String
            //print(strMessage)
            
            let body: XMLElement = XMLElement.element(withName: "body") as! XMLElement
            body.stringValue = strMessage
            
            let message: XMLElement = XMLElement.element(withName: "message") as! XMLElement
            if (messageSubType == "invite"){
                message.addAttribute(withName: "type", stringValue: "chat")
                if(login != nil)
                {
                    message.addAttribute(withName: "from", stringValue: login!)
                }
            }
            else{
                
                
                if(roomType == "banter" || roomType == "group" || roomType == "fanupdate" || roomType == "trivia" || roomType == "teambr")
                {
                    message.addAttribute(withName: "type", stringValue: "groupchat")
                    
                    if(login != nil)
                    {
                        message.addAttribute(withName: "from", stringValue: login!)
                    }
                }
                else
                {
                    message.addAttribute(withName: "type", stringValue: "chat")
                }
            }
            message.addAttribute(withName: "id", stringValue: messageId)
            message.addAttribute(withName: "to", stringValue: toUser)
            message.addChild(body)
            
            print(message)
            
            xmppStream?.send(message)
            
            //End Code to send message to XMPP Server
            
        } catch {
            print("fail message iq")
            // print(error.localizedDescription)
        }
        //End
    }
    
    func getUTCFormateDate() -> Int64
    {
        //NSLog(@"Time: %lli", [@(floor([localDate timeIntervalSince1970] * 1000)) longLongValue]);
        
        //return [NSString stringWithFormat:@"%lli",[@(floor([localDate timeIntervalSince1970] * 1000)) longLongValue]];
        
        
        
        let someDate = Date()
        
        // convert Date to TimeInterval (typealias for Double)
        let timeInterval = someDate.timeIntervalSince1970 * 1000
        
        // convert to Integer
        return Int64(timeInterval.rounded())
        
    }
    //End functions for Chat
    func formatNumber(_ n: Int) -> String {
        
        let num = abs(Double(n))
        let sign = (n < 0) ? "-" : ""
        
        switch num {
            
        case 1_000_000_000...:
            var formatted = num / 1_000_000_000
            formatted = formatted.truncate(places: 1)
            return "\(sign)\(formatted)B"
            
        case 1_000_000...:
            var formatted = num / 1_000_000
            formatted = formatted.truncate(places: 1)
            return "\(sign)\(formatted)M"
            
        case 1_000...:
            var formatted = num / 1_000
            formatted = formatted.truncate(places: 1)
            return "\(sign)\(formatted)K"
            
        case 0...:
            return "\(n)"
            
        default:
            return "\(sign)\(n)"
            
        }
        
    }
    func getUserGroupsData()
    {
         var bantervar: Int64 = 0
        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                                     if localArrAllChats == nil
                                                                                     {
                                       bantervar = 0
                                                        UserDefaults.standard.setValue(0, forKey: "bantervar")
                                                        UserDefaults.standard.synchronize()
                                                    }
                                                    else{
                                                        bantervar  = Int64(UserDefaults.standard.integer(forKey: "bantervar"))
                                                    }
        Clslogging.logdebug(State: "getuserrooms start")
        //Code to call all rooms API
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "getuserrooms" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        /*if(isBanterLoaderOn == false){
         //by amit sir on 0000089 mantisbt
         DispatchQueue.main.async {
         if var topController = UIApplication.shared.keyWindow?.rootViewController {
         while let presentedViewController = topController.presentedViewController {
         topController = presentedViewController
         }
         let className : String = String(describing: topController.self)
         print(className)
         // topController should now be your topmost view controller
         //  LoadingIndicatorView.show((topController.view)!, loadingText: "Connecting...")
         }
         }
         
         }*/
        
        
        do {
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let userReadUserJid = arrReadUserJid?[0]
            
            let myMobile: String? = userReadUserJid//UserDefaults.standard.string(forKey: "myMobileNo")
            dictRequestData["username"] = myMobile as AnyObject
            // dictRequestData["primaryteam"] = primaryTeamId as AnyObject
            // dictRequestData["followedteam1"] = optionalTeam1Id as AnyObject
            //dictRequestData["followedteam2"] = optionalTeam2Id as AnyObject
            //dictRequestData["followedteam3"] = optionalTeam3Id as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
            //dictRequest.setValue(dictMobiles, forKey: "requestData")
            //print(dictRequest)
            
            /*  let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
             let strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
             print(strGetBanterDetails)
             self.sendRequestToAPI(strRequestDict: strGetBanterDetails)*/
            /* let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
             let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
             //print(strByPlace)
             let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
             
             let url = MediaAPIjava + "request=" + escapedString!*/
            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                // 2
                .responseJSON { response in
                    
                    switch response.result {
                               case .success(let value):
                                   if let json = value as? [String: Any] {
                                       // print(" JSON:", json)
                                       let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                       // self.finishSyncContacts()
                                       //print(" status:", status1)
                                       if(status1){
                                           /* DispatchQueue.background(background: {
                                            // do something in background
                                            }, completion:{
                                            // when background job finished, do something in main thread
                                            })*/
                                           
                                           //let presence = XMPPPresence(type: "available")
                                           //xmppStream!.send(presence)
                                           Clslogging.logdebug(State: "getuserrooms responce true")
                                           self.isUserOnline = true
                                           
                                           let response: NSArray = json["responseData"] as! NSArray //jsonData?.value(forKey: "responseData") as! NSArray
                                           //print("getuserrooms:")
                                           //print(response)
                                           //let roomDetails: NSDictionary = response[0] as! NSDictionary
                                           var banterupdate: Bool = false
                                          if(bantervar < (json["version"] as? Int64)!)
                                                                        {
                                                                           banterupdate = true
                                                                           UserDefaults.standard.setValue(json["version"] as? Int64, forKey: "bantervar")
                                                                                                                                  UserDefaults.standard.synchronize()
                                           }
                                           if let offlineDate =  json["offlineDate"]
                                           {
                                               
                                               let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                               if(isRegistering != nil)
                                               {
                                                   self.joinRoombroadcastall(joindate: "")
                                                   self.joinRoombroadcastinactive(joindate: "")
                                                   for res in response
                                                   {
                                                       let roomDetailsDict: NSDictionary = res as! NSDictionary
                                                       self.lastOfflineDate = offlineDate as! String
                                                       let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                       let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                       let isAdmin = roomDetailsDict.value(forKey: "isAdmin") as! Bool
                                                       let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                       let roomType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                       let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                       
                                                       let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                       let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                       
                                                       //let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                       
                                                       let userCount = roomDetailsDict.value(forKey: "userCount") as! Int64
                                                       let isBadge =  roomDetailsDict.value(forKey: "isBadge") as! Bool
                                                       
                                                       let useravatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                       let lastactivitytime: Int64? = Int64(roomDetailsDict.value(forKey: "lastactivitytime") as! String)
                                                       var isAdminS: String = ""
                                                       
                                                       if(roomStatus == "active" && userStatus == "active")
                                                       {
                                                           let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                           
                                                           //Send presence to room
                                                           /*let presence = XMPPPresence()
                                                            presence?.addAttribute(withName: "to", stringValue: roomId + "/" + myJID!)
                                                            presence?.addAttribute(withName: "from", stringValue: myJID!)
                                                            let x: XMLElement = XMLElement.element(withName: "x") as! XMLElement
                                                            x.addAttribute(withName: "xmlns", stringValue: "http://jabber.org/protocol/muc")
                                                            
                                                            presence?.addChild(x)
                                                            self.xmppStream!.send(presence)
                                                            
                                                            xmppRoster.acceptPresenceSubscriptionRequest(from: xmppStream?.myJID, andAddToRoster: true)*/
                                                           
                                                           let roomJID = XMPPJID(string: roomId)
                                                           let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                           
                                                           let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                           
                                                           room.activate(self.xmppStream!)
                                                           
                                                           room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                           
                                                           
                                                           
                                                           /*let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                            
                                                            let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                            
                                                            
                                                            //let dt = NSDate().timeIntervalSince1970 * 1000
                                                            //print(dt.description)
                                                            print(myMilliseconds.dateFull.description)
                                                            let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                            history.addAttribute(withName: "since", stringValue: myMilliseconds.dateFull.description)*/
                                                           
                                                           let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                           history.addAttribute(withName: "maxchars", stringValue: "0")
                                                           
                                                           // room.join(usingNickname: myJID!, history: history)
                                                           if(!room.isJoined){
                                                               room.join(usingNickname: myJID!, history: history)
                                                               
                                                           }
                                                           
                                                           
                                                           
                                                           //History was clear so first send a message to user that you were joined this group
                                                           /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                            if(banterName == nil)
                                                            {
                                                            banterName = ""
                                                            }*/
                                                           let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                           if(isRegistering != nil)
                                                           {
                                                               if(roomType == "banter" || roomType == "group" || roomType == "teambr")
                                                               {
                                                                   //Now create message for this room
                                                                   //Code to prepare data before send to server // text is for temp
                                                                   var messageContent = ""
                                                                   if (isAdmin)
                                                                   {
                                                                       isAdminS = "yes"
                                                                       
                                                                       if(roomType == "banter" ){
                                                                           messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                       }
                                                                       else if(roomType == "teambr" ){
                                                                           messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                       }                                                                          else if(roomType == "group" ){
                                                                           messageContent = "You are now ready to post messages, pictures, videos in this group."
                                                                       }
                                                                       
                                                                   }
                                                                   else
                                                                   {
                                                                       isAdminS = "no"
                                                                       if(roomType == "banter" ){
                                                                           messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                       }
                                                                       else if(roomType == "teambr" ){
                                                                           messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                       }
                                                                       else if(roomType == "group" ){
                                                                           messageContent = "You are now ready to post messages, pictures, videos in this group."
                                                                       }
                                                                       
                                                                   }
                                                                   var isJoined: String = "no"
                                                                   if(userStatus == "active")
                                                                   {
                                                                       isJoined = "yes"
                                                                   }
                                                                   
                                                                   //let mili: Int64 = self.getUTCFormateDate()
                                                                   self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam,fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                               }
                                                           }
                                                           
                                                       }
                                                       else if(roomStatus == "active" && userStatus == "blocked")//if user blocked
                                                       {
                                                           let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                           //let mili: Int64 = self.getUTCFormateDate()
                                                           let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                           if localArrAllChats != nil
                                                           {
                                                               //Code to parse json data
                                                               if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                   do {
                                                                       self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                       
                                                                   } catch let error as NSError {
                                                                       //print(error)
                                                                   }
                                                               }
                                                           }
                                                           
                                                           if let dt = self.arrAllChats[roomId]
                                                           {
                                                               let isjoined: String = dt.value(forKey: "isJoined") as! String
                                                               if(isjoined != "blocked"){
                                                                   self.prepareMessageForServerIn(roomId, messageContent: "Manager Room has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "blocked", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                               }
                                                           }
                                                           else{
                                                               self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "blocked", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                           }
                                                           
                                                           
                                                       }
                                                   }
                                                   
                                                   //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                   //UserDefaults.standard.synchronize()
                                                   
                                               }
                                               else
                                               {
                                                   self.lastOfflineDate = offlineDate as! String
                                                   //print(offlineDate)
                                                   let mili: Double = (offlineDate as! NSString).doubleValue
                                                   //print(mili)
                                                   
                                                   let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                   
                                                   //print(myMilliseconds.dateFull)
                                                   let array = Last_activity_date.rows(filter:"activityType = 'lastoflinedate'") as! [Last_activity_date]
                                                   if(array.count != 0){
                                                       let time: Int64 = myMilliseconds
                                                       _ = self.db.execute(sql:" UPDATE last_activity_date SET activity_date = \(time) WHERE activityType = 'lastoflinedate'")
                                                   }
                                                   else{
                                                       let activity = Last_activity_date()
                                                       activity.activityType = "lastoflinedate"
                                                       let time: Int64 = myMilliseconds
                                                       activity.activity_date = time
                                                       activity.save()
                                                   }
                                                   let calendar = NSCalendar.autoupdatingCurrent
                                                   let timeStampTmp = calendar.date(byAdding: .minute, value: -2, to: myMilliseconds.dateFull)
                                                   // let timeStampTmp = calendar.date(byAdding: .minute, value: -1, to: myMilliseconds.dateFull)
                                                   //print(timeStampTmp)
                                                   let formatter = DateFormatter()
                                                   formatter.dateFormat = "yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"
                                                   //formatter.dateStyle = DateFormatter.Style.full
                                                   //formatter.timeStyle = DateFormatter.Style.long
                                                   
                                                   formatter.timeZone = NSTimeZone(name: "UTC") as TimeZone?//TimeZone.current
                                                   let timeStamp = formatter.string(from: timeStampTmp as! Date)
                                                   self.joinRoombroadcastinactive(joindate: offlineDate as! String)
                                                   self.joinRoombroadcastall(joindate: offlineDate as! String)
                                                   
                                                   
                                                   let presence = XMPPPresence(type: "available")
                                                   self.xmppStream!.send(presence)
                                                   self.isUserOnline = true
                                                   self.runTimer()
                                                   
                                                   
                                                   // print(timeStamp)
                                                   for i in 0...response.count-1 {
                                                       // for res in response
                                                       //{
                                                       //let roomDetailsDict: NSDictionary = res as! NSDictionary
                                                       let roomDetailsDict: NSDictionary = response[i] as! NSDictionary
                                                       self.lastOfflineDate = offlineDate as! String
                                                       let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                       let useravatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                       let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                       
                                                       let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                       let userCount = roomDetailsDict.value(forKey: "userCount") as! Int64
                                                       //let lastactivitytime = roomDetailsDict.value(forKey: "lastactivitytime") as! Int64
                                                       //let lastactivitytime: Double= Double(truncating: (roomDetailsDict.value(forKey: "lastactivitytime") as AnyObject) as! NSNumber)
                                                       let lastactivitytime: Int64? = Int64(roomDetailsDict.value(forKey: "lastactivitytime") as! String)
                                                       let isBadge =  roomDetailsDict.value(forKey: "isBadge") as! Bool
                                                       if(roomStatus == "active" && userStatus == "active")
                                                       {
                                                           let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                           
                                                           
                                                           let roomJID = XMPPJID(string: roomId)
                                                           let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                           
                                                           let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                           
                                                           room.activate(self.xmppStream!)
                                                           
                                                           room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                           
                                                           
                                                           /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                            history.addAttribute(withName: "maxchars", stringValue: "0")*/
                                                           
                                                           let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                           history.addAttribute(withName: "since", stringValue: timeStamp)
                                                           // history.addAttribute(withName: "maxchars", stringValue: "0")
                                                           // room.join(usingNickname: myJID!, history: history)
                                                           if(!room.isJoined){
                                                               //   DispatchQueue.main.asyncAfter(deadline: .now() +  1.0) {
                                                               room.join(usingNickname: myJID!, history: history)
                                                               // }
                                                               
                                                           }
                                                           if(banterupdate){
                                                           self.roomValueupdate(roomId,bantername: roomDetailsDict.value(forKey: "roomname") as! String )
                                                           }
                                                           let isfancountupdated: String? = UserDefaults.standard.string(forKey: "isfancountupdated")
                                                           if(isfancountupdated == nil){
                                                               self.fancountupdate(roomId, fancount: userCount)
                                                           }
                                                       }
                                                       else if(roomStatus == "active" && userStatus == "blocked")//if user blocked
                                                       {
                                                           let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                           //let mili: Int64 = self.getUTCFormateDate()
                                                           let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                           if localArrAllChats != nil
                                                           {
                                                               //Code to parse json data
                                                               if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                   do {
                                                                       self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                       
                                                                   } catch let error as NSError {
                                                                       // print(error)
                                                                   }
                                                               }
                                                           }
                                                           
                                                           if let dt = self.arrAllChats[roomId]
                                                           {
                                                               let isjoined: String = dt.value(forKey: "isJoined") as! String
                                                               
                                                               if(userStatus == "blocked" && isjoined == "yes"){
                                                                   var tmpArrChatDetails = [String : AnyObject]()
                                                                   
                                                                   tmpArrChatDetails = dt as! [String : AnyObject]
                                                                   let chatType = dt.value(forKey: "chatType") as! String
                                                                   
                                                                   if(chatType == "group"){
                                                                       self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: dt.value(forKey: "chatType") as! String , banterRoomName: dt.value(forKey: "userName") as! String , isJoined: "blocked", isAdmin: dt.value(forKey: "isAdmin") as! String,fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                                   }
                                                                   else{
                                                                       self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: dt.value(forKey: "chatType") as! String , banterRoomName: dt.value(forKey: "userName") as! String , isJoined: "blocked", isAdmin: dt.value(forKey: "isAdmin") as! String, supportedTeam: dt.value(forKey: "supportedTeam") as! Int64, opponentTeam: dt.value(forKey: "opponentTeam") as! Int64, mySupportTeam: dt.value(forKey: "mySupportedTeam") as! Int64,fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                                   }
                                                                   
                                                               }
                                                           }
                                                           else{
                                                               if(banterupdate){
                                                               self.roomValueupdate(roomId,bantername: roomDetailsDict.value(forKey: "roomname") as! String )
                                                               }
                                                           }
                                                           
                                                       }
                                                       if(i == response.count - 1){
                                                           let presence = XMPPPresence(type: "available")
                                                           self.xmppStream!.send(presence)
                                                           self.isUserOnline = true
                                                           self.runTimer()
                                                       }
                                                       if(roomStatus == "active" && userStatus == "inactive")
                                                       {
                                                           let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                           if localArrAllChats != nil
                                                           {
                                                               //Code to parse json data
                                                               if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                   do {
                                                                       self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                       
                                                                   } catch let error as NSError {
                                                                       // print(error)
                                                                   }
                                                               }
                                                           }
                                                           
                                                           if let dt = self.arrAllChats[roomId]
                                                           {
                                                               if(banterupdate){
                                                               self.roomValueupdate(roomId,bantername: roomDetailsDict.value(forKey: "roomname") as! String )
                                                               }
                                                               }
                                                           else{
                                                               
                                                               
                                                               let roomJID = XMPPJID(string: roomId)
                                                               let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                               
                                                               let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                               
                                                               room.activate(self.xmppStream!)
                                                               
                                                               room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                               let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                               
                                                               
                                                               //let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                               
                                                               //let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                               
                                                               
                                                               //let dt = NSDate().timeIntervalSince1970 * 1000
                                                               
                                                               //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                               //history.addAttribute(withName: "since", stringValue: lastOfflineDate)
                                                               
                                                               let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                               history.addAttribute(withName: "maxchars", stringValue: "0")
                                                               /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                history.addAttribute(withName: "since", stringValue: lastOfflineDate)*/
                                                               
                                                               //room.join(usingNickname: myJID, history: history)
                                                               
                                                               /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                                if(banterName == nil)
                                                                {
                                                                banterName = ""
                                                                }*/
                                                               let roomDetailsDict: NSDictionary = response[i] as! NSDictionary
                                                               
                                                               //  let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                               let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                               let isAdmin = roomDetailsDict.value(forKey: "isAdmin") as! Bool
                                                               // let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                               let roomType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                               let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                               let useravatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                               //print(banterName)
                                                               let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                               let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                               
                                                               //let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                               var isAdminS: String = ""
                                                               
                                                               
                                                               let userCount = roomDetailsDict.value(forKey: "userCount") as! Int64
                                                               if(roomType == "banter")
                                                               {
                                                                   var messageContent = ""
                                                                   if (isAdmin)
                                                                   {
                                                                       isAdminS = "yes"
                                                                       messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                   }
                                                                   else
                                                                   {
                                                                       isAdminS = "no"
                                                                       messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                   }
                                                                   
                                                                   // let mili: Int64 = self.getUTCFormateDate()
                                                                   self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isAdminS, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                               }
                                                               else if(roomType == "teambr"){
                                                                   var messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                   if (isAdmin)
                                                                   {
                                                                       isAdminS = "yes"
                                                                   }
                                                                   else{
                                                                       isAdminS = "no"
                                                                       messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                   }
                                                                   let roomJID = XMPPJID(string: roomId)
                                                                   let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                   
                                                                   let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                                   
                                                                   room.activate(self.xmppStream!)
                                                                   
                                                                   room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                   
                                                                   
                                                                   /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                    history.addAttribute(withName: "maxchars", stringValue: "0")*/
                                                                   
                                                                   let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                   history.addAttribute(withName: "since", stringValue: timeStamp)
                                                                   // history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                   // room.join(usingNickname: myJID!, history: history)
                                                                   if(!room.isJoined){
                                                                       //   DispatchQueue.main.asyncAfter(deadline: .now() +  1.0) {
                                                                       //room.join(usingNickname: myJID!, history: history)
                                                                       // }
                                                                       
                                                                   }
                                                                   //self.savebanterroom(supportteam: supportTeam, roomtype: "teambr", roomid: roomId)
                                                                   self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "no", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                               }
                                                           }
                                                       }
                                                   }
                                                   //New code to get all joined users
                                                   /*for tmpAllUserChats in arrAllChats
                                                    {
                                                    let tmpSingleUserChat: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                    let isUserJoined = tmpSingleUserChat["isJoined"] as! Bool
                                                    if(isUserJoined)
                                                    {
                                                    print(tmpAllUserChats.key)
                                                    self.joinRoomOnly(with: tmpAllUserChats.key, delegate: self)
                                                    }
                                                    
                                                    }
                                                    */
                                               }
                                           }
                                           else
                                           {
                                               // UserDefaults.standard.setValue(true, forKey: "banterSequence")
                                               // UserDefaults.standard.synchronize()
                                               let Loginjid: String? = UserDefaults.standard.string(forKey: "userJID")!
                                               self.joinRoombroadcastall(joindate: "")
                                               self.joinRoombroadcastinactive(joindate: "")
                                               let presence = XMPPPresence(type: "available")
                                               self.xmppStream!.send(presence)
                                               self.isUserOnline = true
                                               self.runTimer()
                                               for res in response
                                               {
                                                   let roomDetailsDict: NSDictionary = res as! NSDictionary
                                                   
                                                   let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                   let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                   let isAdmin = roomDetailsDict.value(forKey: "isAdmin") as! Bool
                                                   let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                   let roomType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                   let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                   let useravatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                   //print(banterName)
                                                   let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                   let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                   let isBadge =  roomDetailsDict.value(forKey: "isBadge") as! Bool
                                                   //let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                   var isAdminS: String = ""
                                                   
                                                   
                                                   let userCount = roomDetailsDict.value(forKey: "userCount") as! Int64
                                                   let lastactivitytime: Int64? = Int64(roomDetailsDict.value(forKey: "lastactivitytime") as! String)
                                                   let strMyTeam: Int64 = Int64(roomDetailsDict.value(forKey: "userteam") as! String)!
                                                   
                                                   if(roomStatus == "active" && userStatus == "active")
                                                   {
                                                       let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                       //Send presence to room
                                                       /*let presence = XMPPPresence()
                                                        presence?.addAttribute(withName: "to", stringValue: roomId + "/" + myJID!)
                                                        //presence?.addAttribute(withName: "from", stringValue: "+919826615203@amazomcdn.com")
                                                        let x: XMLElement = XMLElement.element(withName: "x") as! XMLElement
                                                        x.addAttribute(withName: "xmlns", stringValue: "http://jabber.org/protocol/muc")
                                                        
                                                        presence?.addChild(x)
                                                        self.xmppStream!.send(presence)*/
                                                       
                                                       let roomJID = XMPPJID(string: roomId)
                                                       let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                       let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                       room.activate(self.xmppStream!)
                                                       room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                       //let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                       //let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                       //let dt = NSDate().timeIntervalSince1970 * 1000
                                                       
                                                       let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                       history.addAttribute(withName: "maxchars", stringValue: "0")
                                                       
                                                       //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                       //history.addAttribute(withName: "maxchars", stringValue: "0")
                                                       
                                                       //room.join(usingNickname: myJID!, history: history)
                                                       // print(2222222222)
                                                       if(!room.isJoined){
                                                           room.join(usingNickname: myJID!, history: history)
                                                           
                                                       }
                                                       
                                                       //History was clear so first send a message to user that you were joined this group
                                                       /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                        if(banterName == nil)
                                                        {
                                                        banterName = ""
                                                        }*/
                                                       
                                                       let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                       if(isRegistering != nil)
                                                       {
                                                           if(roomType == "banter" || roomType == "group" || roomType == "teambr")
                                                           {
                                                               //Now create message for this room
                                                               //Code to prepare data before send to server // text is for temp
                                                               var messageContent = ""
                                                               if (isAdmin)
                                                               {
                                                                   isAdminS = "yes"
                                                                   if(roomType == "banter" ){
                                                                       messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                   }
                                                                   else if(roomType == "teambr" ){
                                                                       messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                   }
                                                                   else if(roomType == "group" ){
                                                                       messageContent = "You are now ready to post messages, pictures, videos in this group."
                                                                   }
                                                               }
                                                               else
                                                               {
                                                                   isAdminS = "no"
                                                                   if(roomType == "banter" ){
                                                                       messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                   }
                                                                   else if(roomType == "group" ){
                                                                       messageContent = "You are now ready to post messages, pictures, videos in this group."
                                                                   }
                                                                   else if(roomType == "teambr" ){
                                                                       messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                   }
                                                               }
                                                               
                                                               var isJoined: String = "no"
                                                               if(userStatus == "active")
                                                               {
                                                                   isJoined = "yes"
                                                               }
                                                               //let mili: Int64 = self.getUTCFormateDate()
                                                               self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, mySupportTeam: strMyTeam,fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                           }
                                                           //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                           //UserDefaults.standard.synchronize()
                                                       }
                                                       else{
                                                           if(banterupdate){
                                                           self.roomValueupdate(roomId,bantername: roomDetailsDict.value(forKey: "roomname") as! String )
                                                           }
                                                       }
                                                       
                                                       
                                                   }
                                                   else if(roomStatus == "active" && userStatus == "blocked")//if user blocked
                                                   {
                                                       let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                       // let mili: Int64 = self.getUTCFormateDate()
                                                       let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                       if localArrAllChats != nil
                                                       {
                                                           //Code to parse json data
                                                           if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                               do {
                                                                   self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                   
                                                               } catch let error as NSError {
                                                                   //print(error)
                                                               }
                                                           }
                                                       }
                                                       if let dt = self.arrAllChats[roomId]
                                                       {
                                                           let isjoined: String = dt.value(forKey: "isJoined") as! String
                                                           if(isjoined != "blocked"){
                                                               self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "blocked", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, mySupportTeam: strMyTeam,fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                           }
                                                       }
                                                       else{
                                                           self.prepareMessageForServerIn(roomId, messageContent: "Manager has blocked you.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "blocked", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, mySupportTeam: strMyTeam,fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                       }
                                                   }
                                                   else if(roomStatus == "active" && userStatus == "inactive")
                                                   {
                                                       let roomJID = XMPPJID(string: roomId)
                                                       let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                       let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                       room.activate(self.xmppStream!)
                                                       
                                                       room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                       let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                       //let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                       //let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                       //let dt = NSDate().timeIntervalSince1970 * 1000
                                                       //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                       //history.addAttribute(withName: "since", stringValue: lastOfflineDate)
                                                       let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                       history.addAttribute(withName: "maxchars", stringValue: "0")
                                                       /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                        history.addAttribute(withName: "since", stringValue: lastOfflineDate)*/
                                                       //room.join(usingNickname: myJID, history: history)
                                                       /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                        if(banterName == nil)
                                                        {
                                                        banterName = ""
                                                        }*/
                                                       let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                       if(isRegistering != nil)
                                                       {
                                                           if(roomType == "banter")
                                                           {
                                                               var messageContent = ""
                                                               if (isAdmin)
                                                               {
                                                                   isAdminS = "yes"
                                                                   messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                               }
                                                               else
                                                               {
                                                                   isAdminS = "no"
                                                                   messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                               }
                                                               // let mili: Int64 = self.getUTCFormateDate()
                                                               self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isAdminS, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam,fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                           }
                                                           else if(roomType == "teambr"){
                                                               var messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                               if (isAdmin)
                                                               {
                                                                   isAdminS = "yes"
                                                               }
                                                               else{
                                                                   messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                   isAdminS = "no"
                                                               }
                                                               let roomJID = XMPPJID(string: roomId)
                                                               let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                               
                                                               let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!)
                                                               
                                                               room.activate(self.xmppStream!)
                                                               room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                               /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                history.addAttribute(withName: "maxchars", stringValue: "0")*/
                                                               let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                               //history.addAttribute(withName: "since", stringValue: timeStamp)
                                                               history.addAttribute(withName: "maxchars", stringValue: "0")
                                                               // room.join(usingNickname: myJID!, history: history)
                                                               if(!room.isJoined){
                                                                   //   DispatchQueue.main.asyncAfter(deadline: .now() +  1.0) {
                                                                   //room.join(usingNickname: myJID!, history: history)
                                                                   // }
                                                               }
                                                               //self.savebanterroom(supportteam: supportTeam, roomtype: "teambr", roomid: roomId)
                                                               self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: "no", isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                           }
                                                           
                                                           //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                           //UserDefaults.standard.synchronize()
                                                       }
                                                       else{
                                                           let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                           if localArrAllChats != nil
                                                           {
                                                               //Code to parse json data
                                                               if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                   do {
                                                                       self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                       
                                                                   } catch let error as NSError {
                                                                       print(error)
                                                                   }
                                                               }
                                                           }
                                                           //print(self.arrAllChats)
                                                           if self.arrAllChats[roomId] != nil
                                                           {
                                                           }
                                                           else{                                                                                                                                                                   if(roomType == "banter" || roomType == "group" || roomType == "teambr")
                                                           {
                                                               //Now create message for this room
                                                               //Code to prepare data before send to server // text is for temp
                                                               var messageContent = ""
                                                               if (isAdmin)
                                                               {
                                                                   isAdminS = "yes"
                                                                   if(roomType == "banter" ){
                                                                       messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                   }
                                                                   else if(roomType == "teambr" ){
                                                                       messageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                   }                                                                                                                                                                     else if(roomType == "group" ){
                                                                       messageContent = "You are now ready to post messages, pictures, videos in this group."
                                                                   }
                                                               }
                                                               else
                                                               {
                                                                   isAdminS = "no"
                                                                   if(roomType == "banter" ){
                                                                       messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                   }
                                                                   else if(roomType == "teambr" ){
                                                                       messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                   }
                                                                   else if(roomType == "group" ){
                                                                       messageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                   }
                                                                   
                                                                   
                                                               }
                                                               
                                                               var isJoined: String = "no"
                                                               if(userStatus == "active")
                                                               {
                                                                   isJoined = "yes"
                                                               }
                                                               //let mili: Int64 = self.getUTCFormateDate()
                                                               self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, mySupportTeam: strMyTeam,fansCount:userCount,roomavatar:useravatar,isBadge: isBadge)
                                                               }
                                                               //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                               //UserDefaults.standard.synchronize()
                                                           }
                                                           
                                                       }}
                                               }
                                               /* for res in response
                                                {
                                                let roomDetailsDict: NSDictionary = res as! NSDictionary
                                                let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                let isAdmin = roomDetailsDict.value(forKey: "isAdmin") as! Bool
                                                let roomStatus = roomDetailsDict.value(forKey: "roomstatus") as! String
                                                let roomType = roomDetailsDict.value(forKey: "roomtype")as! String
                                                let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                let userStatus = roomDetailsDict.value(forKey: "userStatus") as! String
                                                var isAdminS: String = ""
                                                if(roomStatus == "active" && userStatus == "inactive")
                                                {
                                                let roomJID = XMPPJID(string: roomId)
                                                let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                room.activate(xmppStream!)
                                                room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                //let mili: Double = (lastOfflineDate as NSString).doubleValue
                                                //let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                                //let dt = NSDate().timeIntervalSince1970 * 1000
                                                //let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                //history.addAttribute(withName: "since", stringValue: lastOfflineDate)
                                                let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                history.addAttribute(withName: "maxchars", stringValue: "0")
                                                /*let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                history.addAttribute(withName: "since", stringValue: lastOfflineDate)*/
                                                //room.join(usingNickname: myJID, history: history)
                                                /*var banterName = room.roomSubject//self.banterRoomName//room.roomSubject
                                                if(banterName == nil)
                                                {
                                                banterName = ""
                                                }*/
                                                let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                if(isRegistering != nil)
                                                {
                                                if(roomType == "banter")
                                                {
                                                var messageContent = ""
                                                if (isAdmin)
                                                {
                                                isAdminS = "yes"
                                                messageContent = "You are now ready to post the funniest banters in football."
                                                }
                                                else
                                                {
                                                isAdminS = "no"
                                                messageContent = "You are invited to this Banter Room. You can join this Banter Room by tap on join button."
                                                }
                                                let mili: Int64 = self.getUTCFormateDate()
                                                self.prepareMessageForServerIn(roomId, messageContent: messageContent, messageType: "header", messageTime: mili, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: myJID!, isIncoming: "YES", chatType: roomType , banterRoomName: banterName, isJoined: isAdminS, isAdmin: isAdminS, supportedTeam: supportTeam, opponentTeam: opponentTeam, banterUsers: banterUsers)
                                                }
                                                //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                                //UserDefaults.standard.synchronize()
                                                }
                                                }
                                                }*/
                                           }
                                           /*else
                                            {
                                            let presence = XMPPPresence(type: "available")
                                            xmppStream!.send(presence)
                                            }*/
                                           //print("Last Offline Date: " + lastOfflineDate)
                                           //let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                           //if(isRegistering != nil)
                                           //{
                                           UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                                           UserDefaults.standard.synchronize()
                                           //}
                                           //New code to refresh Banters view
                                           if(self.isOnBantersView == true)
                                           {
                                               //Post notification if user is on chats window and received any message
                                               let notificationName = Notification.Name("RefreshBantersView")
                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                           }
                                           let notificationName2 = Notification.Name("_isUserOnline")
                                           NotificationCenter.default.post(name: notificationName2, object: nil)
                                           let notificationName3 = Notification.Name("_isUserOnlineContacts")
                                           NotificationCenter.default.post(name: notificationName3, object: nil)
                                           let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
                                           let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
                                           let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
                                           let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
                                           let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
                                           NotificationCenter.default.post(name: notificationNametrivia, object: nil)
                                           let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
                                           if(self.isBanterLoaderOn == false){
                                               // DispatchQueue.main.asyncAfter(deadline: .now() +  3.0) {
                                               // DispatchQueue.main.async { //code }
                                               // LoadingIndicatorView.hide()
                                               //}
                                               //}
                                           }
                                           UserDefaults.standard.setValue("updated", forKey: "isfancountupdated")
                                           UserDefaults.standard.synchronize()
                                           if(!self.iscontactsyafterterminate)    {
                                               let notifycontact: String? = UserDefaults.standard.string(forKey: "notifiedcontact")
                                               if notifycontact != nil
                                               {
                                                   let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                   if(login != nil){
                                                       DispatchQueue.background(background: {
                                                           self.iscontactsyafterterminate = true
                                                           self.AddContacts()
                                                       }, completion:{
                                                           //self.refreshTable.endRefreshing()
                                                           //self.storyTableView?.isScrollEnabled = true
                                                       })
                                                       //self.AddContacts()
                                                   }
                                               }}
                                           Clslogging.logdebug(State: "getuserrooms end")
                                       }
                                       else{
                                           Clslogging.loginfo(State: "getuserrooms", userinfo: json as [String : AnyObject])
                                           Clslogging.logdebug(State: "getuserrooms responce false")
                                           let presence = XMPPPresence(type: "available")
                                           self.xmppStream!.send(presence)
                                           self.isUserOnline = true
                                           self.runTimer()
                                           if(self.isOnBantersView == true && self.curRoomType == "banter")
                                           {
                                               //Post notification if user is on chats window and received any message
                                               let notificationName = Notification.Name("RefreshBantersView")
                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                           }
                                           let notificationName2 = Notification.Name("_isUserOnline")
                                           NotificationCenter.default.post(name: notificationName2, object: nil)
                                           let _isUserOnlineNotifyUpdate = Notification.Name("_isUserOnlineNotifyUpdate")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyUpdate, object: nil)
                                           let _isUserOnlineNotifyNearby = Notification.Name("_isUserOnlineNotifyNearby")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyNearby, object: nil)
                                           let _isUserOnlineNotifyNews = Notification.Name("_isUserOnlineNotifyNews")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyNews, object: nil)
                                           let _isUserOnlineNotifyMore = Notification.Name("_isUserOnlineNotifyMore")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyMore, object: nil)
                                           let notificationNametrivia = Notification.Name("_isUserOnlinetrivia")
                                           NotificationCenter.default.post(name: notificationNametrivia, object: nil)
                                           let _isUserOnlineNotifyhome = Notification.Name("_isUserOnlineNotifyhome")
                                           NotificationCenter.default.post(name: _isUserOnlineNotifyhome, object: nil)
                                           Clslogging.logdebug(State: "getuserrooms end")
                                       }
                                   }
                               case .failure(let error):
                                debugPrint(error as Any)
                        break
                                   // error handling
                    
                               }
                    
            }
            
            /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
             let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
             //print(strFanUpdates)
             self.appDelegate().sendRequestToAPI(strRequestDict: strFanUpdates)*/
            
        } catch {
            print(error.localizedDescription)
        }
    }
    func runTimer() {
        timer = Timer.scheduledTimer(timeInterval: 20, target: self, selector: #selector(AppDelegate.updateTimer(_:)) , userInfo: nil, repeats: true)
        
    }
    @objc func updateTimer(_ notification: NSNotification) {
        let presence = XMPPPresence(type: "available")
        self.xmppStream!.send(presence)
        // print("presence")
    }
    
    func goOnline(_ sender: XMPPStream) {
        // print("Going Online First")
        let isMaintanece: Bool = UserDefaults.standard.bool(forKey: "maintance")
        if(!isMaintanece){
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            if(login != nil)
            {
                // print(isSendingPresence)
                if((isSendingPresence == false ||  isDidAuthenticate == true) && (xmppStream?.isAuthenticated)!)
                {
                    // print("Going Online")
                    isSendingPresence = true
                    isDidAuthenticate = false
                    
                    let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                    if(isRegistering != nil)
                    {
                        let presence = XMPPPresence(type: "available")
                        xmppStream!.send(presence)
                        self.runTimer()
                        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                            // do stuff 3 seconds later
                            self.getUserGroupsData()
                            self.isUserOnline = true
                        }
                        
                    }
                    else
                    {
                        // if(isUserOnline == false){
                        self.getUserGroupsData()
                        // }
                        
                        /*  DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                         // do stuff 3 seconds later
                         
                         let presence = XMPPPresence(type: "available")
                         self.xmppStream!.send(presence)
                         self.isUserOnline = true
                         self.runTimer()
                         }*/
                        
                        /* This code shifted to getuserrooms
                         print("goOnline")
                         let presence = XMPPPresence(type: "available")
                         xmppStream!.send(presence)
                         
                         //New code to get all joined users
                         for tmpAllUserChats in arrAllChats
                         {
                         let tmpSingleUserChat: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                         let isUserJoined = tmpSingleUserChat["isJoined"] as! Bool
                         if(isUserJoined)
                         {
                         print(tmpAllUserChats.key)
                         self.joinRoomOnly(with: tmpAllUserChats.key, delegate: self)
                         }
                         
                         }*/
                        //End
                    }
                    
                    //End
                    
                    /*print("goOnline")
                     let presence = XMPPPresence(type: "available")
                     xmppStream!.send(presence)*/
                }
            }
            /*if(arrDataTeams.count == 0)
             {
             var dictRequest = [String: AnyObject]()
             dictRequest["cmd"] = "teamsync" as AnyObject
             
             do {
             let dataTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
             let strTeams = NSString(data: dataTeams, encoding: String.Encoding.utf8.rawValue)! as String
             print(strTeams)
             sendRequestToAPI(strRequestDict: strTeams)
             } catch {
             print(error.localizedDescription)
             }
             }*/
            let isvcardupdated = UserDefaults.standard.bool(forKey: "isvcardupdated")
            if(!isvcardupdated){
             /* xmppvCardStorage = XMPPvCardCoreDataStorage.init()
                //XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
                if(xmppvCardStorage != nil){
                    Clslogging.logdebug(State: "profileDone xmppvCardStorage != nil")
                   xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: xmppvCardStorage!)
                    
                    xmppvCardTempModule?.activate(xmppStream!)
                    
                    let vCardXML = XMLElement(name: "vCard", xmlns:"vcard-temp")
                    
                    let newvCardTemp: XMPPvCardTemp  = XMPPvCardTemp.vCardTemp(from: vCardXML)
                    //newvCardTemp.addAttribute(withName: "id", stringValue: "profileUpdated")
                    // print(UserDefaults.standard.string(forKey: "userAvatarURL") ?? 0)
                    
                    if UserDefaults.standard.string(forKey: "userAvatarURL") != nil
                    {
                        let avatarField: XMLElement = XMLElement.element(withName: "avatar") as! XMLElement
                        avatarField.stringValue = UserDefaults.standard.string(forKey: "userAvatarURL")
                        newvCardTemp.addChild(avatarField)
                        
                    }
                    //New code for custom field
                    
                    let statusField: XMLElement = XMLElement.element(withName: "status") as! XMLElement
                    statusField.stringValue = UserDefaults.standard.string(forKey: "userStatus")
                    newvCardTemp.addChild(statusField)
                    //End
                    
                    //newvCardTemp.photo = imageData
                    //newvCardTemp.nickname = appDelegate().NameTemp
                    let nameField: XMLElement = XMLElement.element(withName: "name") as! XMLElement
                    nameField.stringValue = UserDefaults.standard.string(forKey: "userName")
                    newvCardTemp.addChild(nameField)
                    let MobilesettingField: XMLElement = XMLElement.element(withName: "profilemobile") as! XMLElement
                    MobilesettingField.stringValue = UserDefaults.standard.string(forKey: "Mobilesetting")
                    newvCardTemp.addChild(MobilesettingField)
                    
                    let EmailsettingField: XMLElement = XMLElement.element(withName: "profileemail") as! XMLElement
                    EmailsettingField.stringValue = UserDefaults.standard.string(forKey: "Emailsetting")
                    newvCardTemp.addChild(EmailsettingField)
                    //newvCardTemp.status = "Hey there! I am using Football Fan"
                    xmppvCardTempModule?.updateMyvCardTemp(newvCardTemp)
                    
                }
                else{
                    Clslogging.logdebug(State: "profileDone xmppvCardStorage init")
                   xmppvCardStorage2 = XMPPvCardCoreDataStorage.init()
                    if(xmppvCardStorage2 != nil){
                       xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: xmppvCardStorage2!)
                        
                      xmppvCardTempModule?.activate(xmppStream!)
                        
                        let vCardXML = XMLElement(name: "vCard", xmlns:"vcard-temp")
                        
                        let newvCardTemp: XMPPvCardTemp  = XMPPvCardTemp.vCardTemp(from: vCardXML)
                        //newvCardTemp.addAttribute(withName: "id", stringValue: "profileUpdated")
                        // print(UserDefaults.standard.string(forKey: "userAvatarURL") ?? 0)
                        if UserDefaults.standard.string(forKey: "userAvatarURL") != nil
                        {
                            let avatarField: XMLElement = XMLElement.element(withName: "avatar") as! XMLElement
                            avatarField.stringValue = UserDefaults.standard.string(forKey: "userAvatarURL")
                            newvCardTemp.addChild(avatarField)
                            
                        }
                        //New code for custom field
                       
                        let statusField: XMLElement = XMLElement.element(withName: "status") as! XMLElement
                        statusField.stringValue = UserDefaults.standard.string(forKey: "userStatus")
                        newvCardTemp.addChild(statusField)
                        //End
                        
                        //newvCardTemp.photo = imageData
                        //newvCardTemp.nickname = appDelegate().NameTemp
                        let nameField: XMLElement = XMLElement.element(withName: "name") as! XMLElement
                        nameField.stringValue = UserDefaults.standard.string(forKey: "userName")
                        newvCardTemp.addChild(nameField)
                        let MobilesettingField: XMLElement = XMLElement.element(withName: "profilemobile") as! XMLElement
                        MobilesettingField.stringValue = UserDefaults.standard.string(forKey: "Mobilesetting")
                        newvCardTemp.addChild(MobilesettingField)
                        
                        let EmailsettingField: XMLElement = XMLElement.element(withName: "profileemail") as! XMLElement
                        EmailsettingField.stringValue = UserDefaults.standard.string(forKey: "Emailsetting")
                        newvCardTemp.addChild(EmailsettingField)
                        //newvCardTemp.status = "Hey there! I am using Football Fan"
                        xmppvCardTempModule?.updateMyvCardTemp(newvCardTemp)
                        
                    }
                }*/
                UserDefaults.standard.setValue(true, forKey: "isvcardupdated")
                UserDefaults.standard.synchronize()
            }
        }
        
    }
    func callingFFConfig()  {
        
        if ClassReachability.isConnectedToNetwork() {
            var teamver: Int64 = 0
            var tokenver: Int64 = 0
            let  data = TeamCategories_detail.rows(order:"c_Id ASC") as! [TeamCategories_detail]
            let  data1 = Teams_details.rows(order:"team_Id ASC") as! [Teams_details]
            if(data.count == 0 || data1.count == 0){
                teamver = 0
                UserDefaults.standard.setValue(0, forKey: "teamver")
                UserDefaults.standard.synchronize()
            }
            else{
                teamver  = Int64(UserDefaults.standard.integer(forKey: "teamver"))
            }
            tokenver  = Int64(UserDefaults.standard.integer(forKey: "tokenver"))
            //let teamver: Int64 = Int64(UserDefaults.standard.integer(forKey: "teamver"))
            let boundary = generateBoundaryString()
            var request = URLRequest(url: URL(string: MediaAPI)!)
            request.httpMethod = "POST"
            request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
            var reqParams = [String: String]()
            reqParams["cmd"] = "ffconfig"
            reqParams["device"] = "iphone"
            reqParams["version"] = String(Realeseversion)
            reqParams["teamver"] = String(teamver)
            reqParams["key"] = "kXfqS9wUug6gVKDB"
            reqParams["device"] = "ios" as String
            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
            let mytriviajid: String? = UserDefaults.standard.string(forKey: "triviauser")

            if(myjid != nil){
                let arrdUserJid = myjid?.components(separatedBy: "@")
                let userUserJid = arrdUserJid?[0]
                reqParams["username"] = userUserJid
            }
            else if(mytriviajid != nil){
                let arrdUserJid = mytriviajid?.components(separatedBy: "@")
                let userUserJid = arrdUserJid?[0]
                reqParams["username"] = userUserJid
            }
            else{
                reqParams["username"] = ""
            }
            
            // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
            request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
            let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                if let data = data {
                    if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                        //print(stringData) //JSONSerialization
                        
                        //print(time)
                        do {
                            let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                            
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            
                            if(isSuccess)
                            {
                               
                                let isdailycoin = jsonData!.value(forKey: "isdailycoin") as! Bool
                                
                                if(isdailycoin){
                                    let dailycoin = jsonData!.value(forKey: "dailycoin") as! Int
                                    // print(jsonData!.value(forKey: "dailycoin"))
                                    let fcavailablecoin = jsonData?.value(forKey: "availablecoins") as! Int
                                    DispatchQueue.main.async {
                                        AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText:"You won \(String(dailycoin)) FanCoins rewards for todayâs usage.\(self.GetvalueRedeemMesg(avilablecoin: fcavailablecoin))",fancoins: String(dailycoin))
                                    }
                                    let result2 = self.db.execute(sql:"DELETE FROM activitydetailTable")
                                    if(result2 > 0){
                                        //  print("messageses delted")
                                    }
                                    else{
                                        _ = self.db.execute(sql:"DELETE FROM activitydetailTable")
                                    }
                                }
                                self.UpdateInsentiveConfigTable(jsonData: jsonData!)
                            }
                            else
                            {
                                //Show Error
                            }
                        } catch let error as NSError {
                            print(error)
                            //Show Error
                        }
                        
                    }
                }
                else
                {
                    //Show Error
                }
            })
            task.resume()
            
            
            
            
            
            
        }
    }
    func UpdateInsentiveConfigTable(jsonData: NSDictionary)  {
        // let fcactivity = jsonData.value(forKey: "fcactivity") as! String
        let login: String? = UserDefaults.standard.string(forKey: "userJID")
               if(login == nil){
                let triviauser: String? = UserDefaults.standard.string(forKey: "triviauser")
                               if(triviauser == nil){
                               let user = jsonData.value(forKey: "anonymoususername") as! String + JIDPostfix
                                let password = jsonData.value(forKey: "anonymouspassword") as! String
                               UserDefaults.standard.setValue(user, forKey: "triviauser")
                               UserDefaults.standard.synchronize()
                               UserDefaults.standard.setValue(true, forKey: "istriviauser")
                               UserDefaults.standard.synchronize()
                               UserDefaults.standard.setValue(password, forKey: "tuserpassword")
                               UserDefaults.standard.synchronize()
                                 let deviceToken: String? = UserDefaults.standard.string(forKey: "DeviceToken")
                                 if(deviceToken != nil){
                                     updatetoken(token: deviceToken!)
                                 }
                               }
                if connect()
                                                 {
                                                  }
        }
        let isfcsignup = jsonData.value(forKey: "isfcsignup") as! Bool
        let fcsignup = jsonData.value(forKey: "fcsignup") as! Int
        let isfcjoinbanter = jsonData.value(forKey: "isfcjoinbanter") as! Bool
        let fcjoinbanter = jsonData.value(forKey: "fcjoinbanter") as! Int
        let fcbanterth = jsonData.value(forKey: "fcbanterth") as! Int
        let isfcactivity = jsonData.value(forKey: "isfcactivity") as! Bool
        let fcactivity = jsonData.value(forKey: "fcactivity") as! Int
        let fcactivityth = jsonData.value(forKey: "fcactivityth") as! Int
        let isgroupchat = jsonData.value(forKey: "isgroupchat") as! Bool
        let isbanterchat = jsonData.value(forKey: "isbanterchat") as! Bool
        let isnewfu = jsonData.value(forKey: "isnewfu") as! Bool
        let isfulike = jsonData.value(forKey: "isfulike") as! Bool
        let isfucomment = jsonData.value(forKey: "isfucomment") as! Bool
        let isnewslike = jsonData.value(forKey: "isnewslike") as! Bool
        let isnewscomment = jsonData.value(forKey: "isnewscomment") as! Bool
        let fcbronze = jsonData.value(forKey: "fcbronzeth") as! Int
        let fcsilver = jsonData.value(forKey: "fcsilverth") as! Int
        let fcgold = jsonData.value(forKey: "fcgoldth") as! Int
        let fcplatinum = jsonData.value(forKey: "fcplatinumth") as! Int
        let fcdiamond = jsonData.value(forKey: "fcdiamondth") as! Int
        let fcbonusthb = jsonData.value(forKey: "fcbonusthb") as! Int
        let fcbonusths = jsonData.value(forKey: "fcbonusths") as! Int
        let fcbonusthg = jsonData.value(forKey: "fcbonusthg") as! Int
        let fcbonusthp = jsonData.value(forKey: "fcbonusthp") as! Int
        let fcbonusthd = jsonData.value(forKey: "fcbonusthd") as! Int
        let fcbronzeimage = jsonData.value(forKey: "fcbronzeimage") as! String
        let fcsilverimage = jsonData.value(forKey: "fcsilverimage") as! String
        let fcgoldimage = jsonData.value(forKey: "fcgoldimage") as! String
        let fcplatinumimage = jsonData.value(forKey: "fcplatinumimage") as! String
        let fcdiamondimage = jsonData.value(forKey: "fcdiamondimage") as! String
        let fcbronzeimageh = jsonData.value(forKey: "fcbronzeimageh") as! String
        let fcsilverimageh = jsonData.value(forKey: "fcsilverimageh") as! String
        let fcgoldimageh = jsonData.value(forKey: "fcgoldimageh") as! String
        let fcplatinumimageh = jsonData.value(forKey: "fcplatinumimageh") as! String
        let fcdiamondimageh = jsonData.value(forKey: "fcdiamondimageh") as! String
        let fcredeemth = jsonData.value(forKey: "fcredeemth") as! Int
        let fcredeemamt = jsonData.value(forKey: "fcredeemamt") as! Int
        let fcredeemcurrency = jsonData.value(forKey: "fcredeemcurrency") as! String
        let fctotalcoin = jsonData.value(forKey: "totalcoins") as! Int
        let fcavailablecoin = jsonData.value(forKey: "availablecoins") as! Int
        let fccurrentlevel = jsonData.value(forKey: "level") as! String//"No Level"
        let paypalemail = jsonData.value(forKey: "paypalemail") as! String
        let isstream = jsonData.value(forKey: "isstream") as! Bool
         let islogging = jsonData.value(forKey: "logging") as! String
        let isteambrchat = jsonData.value(forKey: "isteambrchat") as! Bool
        if(islogging == "active"){
            isOnloggin = true
        }
        else{
             isOnloggin = false
        }
        if (!paypalemail.isEmpty)//"No Level"
        {
            //let email = paypalemail as! String
            
            UserDefaults.standard.setValue(paypalemail, forKey: "paypalemail")
            UserDefaults.standard.synchronize()
            
        }
        else{
            UserDefaults.standard.setValue("", forKey: "paypalemail")
            UserDefaults.standard.synchronize()
            
        }
        // let fccurrentlevel = jsonData.value(forKey: "fccurrentlevel") as! String
        // let fcactivitycount = jsonData.value(forKey: "fcactivitycount") as! Int
        let isfcreferral = jsonData.value(forKey: "isfcreferral") as! Bool
        let fcreferral = jsonData.value(forKey: "fcreferral") as! Int
        let isfcfanstory = jsonData.value(forKey: "isfcfanstory") as! Bool
        let fcfanstory = jsonData.value(forKey: "fcfanstory") as! Int
        let fcfanstoryth = jsonData.value(forKey: "fcfanstoryth") as! Int
        let data = InsentiveConfig.rows(order:"ID ASC")
        if(data.count == 0){
            let Config = InsentiveConfig()
            Config.isfcsignup = isfcsignup
            Config.fcsignup = fcsignup
            Config.isfcjoinbanter = isfcjoinbanter
            Config.fcjoinbanter = fcjoinbanter
            Config.fcbanterth = fcbanterth
            Config.isfcactivity = isfcactivity
            Config.fcactivity = fcactivity
            Config.fcactivityth = fcactivityth
            Config.isgroupchat = isgroupchat
            Config.isbanterchat = isbanterchat
            Config.isnewfu = isnewfu
            Config.isfulike = isfulike
            Config.isfucomment = isfucomment
            Config.isnewslike = isnewslike
            Config.isnewscomment = isnewscomment
            Config.fcbronzeth = fcbronze
            Config.fcsilverth = fcsilver
            Config.fcgoldth = fcgold
            Config.fcplatinumth = fcplatinum
            Config.fcdiamondth = fcdiamond
            Config.fcbonusthb = fcbonusthb
            Config.fcbonusths = fcbonusths
            Config.fcbonusthg = fcbonusthg
            Config.fcbonusthp = fcbonusthp
            Config.fcbonusthd = fcbonusthd
            Config.fcbronzeimage = fcbronzeimage
            Config.fcsilverimage = fcsilverimage
            Config.fcgoldimage = fcgoldimage
            Config.fcplatinumimage = fcplatinumimage
            Config.fcdiamondimage = fcdiamondimage
            Config.fcbronzeimageh = fcbronzeimageh
            Config.fcsilverimageh = fcsilverimageh
            Config.fcgoldimageh = fcgoldimageh
            Config.fcplatinumimageh = fcplatinumimageh
            Config.fcdiamondimageh = fcdiamondimageh
            Config.fcredeemth = fcredeemth
            Config.fcredeemamt = fcredeemamt
            Config.fcredeemcurrency = fcredeemcurrency
            Config.fctotalcoin = fctotalcoin
            Config.fcavailablecoin = fcavailablecoin
            
            Config.fccurrentlevel = fccurrentlevel
            Config.isfcreferral = isfcreferral
            Config.fcreferral = fcreferral
            Config.isstream = isstream
            Config.isfcfanstory = isfcfanstory
            Config.fcfanstory = fcfanstory
             Config.fcfanstoryth = fcfanstoryth
            Config.islogging = islogging
            Config.isteambrchat = isteambrchat
            Config.save()
            
            
        }
        else{
            
            _ = db.execute(sql:" UPDATE insentiveconfig SET isfcsignup = \(isfcsignup),fcsignup = \(fcsignup),isfcjoinbanter = \(isfcjoinbanter),fcjoinbanter = \(fcjoinbanter),fcbanterth = \(fcbanterth), isfcactivity = \(isfcactivity), fcactivity = \(fcactivity), fcactivityth = \(fcactivityth), isgroupchat = \(isgroupchat), isbanterchat = \(isbanterchat),isnewfu = \(isnewfu),isfulike = \(isfulike),isfucomment = \(isfucomment),isnewslike = \(isnewslike),isnewscomment = \(isnewscomment),fcbronzeth = \(fcbronze),fcsilverth = \(fcsilver),fcgoldth = \(fcgold),fcplatinumth = \(fcplatinum),fcdiamondth = \(fcdiamond),fcbonusthb = \(fcbonusthb),fcbonusths = \(fcbonusths),fcbonusthg = \(fcbonusthg),fcbonusthp = \(fcbonusthp),fcbonusthd = \(fcbonusthd),fcbronzeimage = '\(fcbronzeimage)',fcsilverimage = '\(fcsilverimage)',fcgoldimage = '\(fcgoldimage)',fcplatinumimage = '\(fcplatinumimage)',fcdiamondimage = '\(fcdiamondimage)',fcbronzeimageh = '\(fcbronzeimageh)',fcsilverimageh = '\(fcsilverimageh)',fcgoldimageh = '\(fcgoldimageh)',fcplatinumimageh = '\(fcplatinumimageh)',fcdiamondimageh = '\(fcdiamondimageh)',fcredeemth = \(fcredeemth),fcredeemamt = \(fcredeemamt),fcredeemcurrency = '\(fcredeemcurrency)',fctotalcoin = \(fctotalcoin),fcavailablecoin = \(fcavailablecoin),fccurrentlevel = '\(fccurrentlevel)',isfcreferral = \(isfcreferral),fcreferral = \(fcreferral),isstream = \(isstream),isfcfanstory = \(isfcfanstory),fcfanstory = '\(fcfanstory)',fcfanstoryth = '\(fcfanstoryth)',islogging ='\(islogging)',isteambrchat = \(isteambrchat) WHERE ID = 0")
            
        }
        if(!fcbronzeimage.isEmpty)
        {
            let arrReadselVideoPath = fcbronzeimage.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcbronzeimage), fileName: arrReadimageId![0] as String)
        }
        if(!fcsilverimage.isEmpty)
        {
            let arrReadselVideoPath = fcsilverimage.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcsilverimage), fileName: arrReadimageId![0] as String)
        }
        if(!fcgoldimage.isEmpty)
        {
            let arrReadselVideoPath = fcgoldimage.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcgoldimage), fileName: arrReadimageId![0] as String)
        }
        if(!fcplatinumimage.isEmpty)
        {
            let arrReadselVideoPath = fcplatinumimage.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcplatinumimage), fileName: arrReadimageId![0] as String)
        }
        if(!fcdiamondimage.isEmpty)
        {
            let arrReadselVideoPath = fcdiamondimage.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcdiamondimage), fileName: arrReadimageId![0] as String)
        }
        
        if(!fcbronzeimageh.isEmpty)
        {
            let arrReadselVideoPath = fcbronzeimageh.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcbronzeimageh), fileName: arrReadimageId![0] as String)
        }
        if(!fcsilverimageh.isEmpty)
        {
            let arrReadselVideoPath = fcsilverimageh.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcsilverimageh), fileName: arrReadimageId![0] as String)
        }
        if(!fcgoldimageh.isEmpty)
        {
            let arrReadselVideoPath = fcgoldimageh.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcgoldimageh), fileName: arrReadimageId![0] as String)
        }
        if(!fcplatinumimageh.isEmpty)
        {
            let arrReadselVideoPath = fcplatinumimageh.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcplatinumimageh), fileName: arrReadimageId![0] as String)
        }
        if(!fcdiamondimageh.isEmpty)
        {
            let arrReadselVideoPath = fcdiamondimageh.components(separatedBy: "/")
            let imageId = arrReadselVideoPath.last
            let arrReadimageId = imageId?.components(separatedBy: ".")
            //let teamImageName = "Team" + t_id.description
            //print(teamImageName)
            self.loadImageFromUrl(url: (fcdiamondimageh), fileName: arrReadimageId![0] as String)
        }
        
        
        var popupver:Int = 0
        popupver  = UserDefaults.standard.integer(forKey: "modalpopupversion")
        // let newver = jsonData.value(forKey: "modalpopupversion")
        if(popupver < (jsonData.value(forKey: "modalpopupversion") as? Int64)!)
        {
            let result6 = db.execute(sql:"DELETE FROM last_activity_date")
            if(result6 > 0){
                // print("blockeduser delted")
            }
            else{
                _ = db.execute(sql:"DELETE FROM last_activity_date")
            }
            UserDefaults.standard.setValue(jsonData.value(forKey: "modalpopupversion") as? Int64, forKey: "modalpopupversion")
            UserDefaults.standard.synchronize()
            if let contactsync = jsonData.value(forKey: "synccontacts")
            {
                let contact = jsonData.value(forKey: "synccontacts") as! NSDictionary
                
                
                let status = contact.value(forKey: "status") as! String
                //if(status == "active"){
                /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                 let alarmModel: Alarms = Alarms()
                 var segueInfo: SegueInfo!
                 let snoozeEnabled: Bool = false
                 var _: Bool!*/
                let mediaurl = contact.value(forKey: "mediaurl") as! String
                let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                let imageId = arrReadselVideoPath.last
                //let arrReadimageId = imageId?.components(separatedBy: ".")
                
                //try fileManager.removeItem(atPath: imageId)
                // Check if file exists
                
                do {
                    let fileManager = FileManager.default
                    let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                    // Check if file exists
                    if fileManager.fileExists(atPath: paths) {
                        // Delete file
                        try fileManager.removeItem(atPath: paths)
                    } else {
                        print("File does not exist")
                    }
                    
                }
                catch let error as NSError {
                    print("An error took place: \(error)")
                }
                
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                AF.download(mediaurl, to: destination)
                    .downloadProgress { progress in
                        //print("Download Progress: \(progress.fractionCompleted)")
                        
                    }
                    .responseData { response in
                        switch response.result {
                        case .success(let data): break
                            
                        case .failure: break
                            
                            
                        }
                        
                }
                
                //  }
                
            }
            if let invite = jsonData.value(forKey: "invite")
            {
                let contact = jsonData.value(forKey: "invite") as! NSDictionary
                
                
                let status = contact.value(forKey: "status") as! String
                if(status == "active"){
                    /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                     let alarmModel: Alarms = Alarms()
                     var segueInfo: SegueInfo!
                     let snoozeEnabled: Bool = false
                     var _: Bool!*/
                    
                    let mediaurl = contact.value(forKey: "mediaurl") as! String
                    
                    let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                    let imageId = arrReadselVideoPath.last
                    //let arrReadimageId = imageId?.components(separatedBy: ".")
                    
                    //try fileManager.removeItem(atPath: imageId)
                    // Check if file exists
                    
                    do {
                        let fileManager = FileManager.default
                        let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                        // Check if file exists
                        if fileManager.fileExists(atPath: paths) {
                            // Delete file
                            try fileManager.removeItem(atPath: paths)
                        } else {
                            print("File does not exist")
                        }
                        
                    }
                    catch let error as NSError {
                        print("An error took place: \(error)")
                    }
                    let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                    AF.download(mediaurl, to: destination)
                        .downloadProgress { progress in
                            //print("Download Progress: \(progress.fractionCompleted)")
                            
                        }
                        .responseData { response in
                            switch response.result {
                            case .success(let data): break
                                
                            case .failure: break
                                
                                
                            }
                            
                    }
                    
                }
                
            }
            if let banterpart = jsonData.value(forKey: "banterpart")
            {
                let contact = jsonData.value(forKey: "banterpart") as! NSDictionary
                
                
                let status = contact.value(forKey: "status") as! String
                if(status == "active"){
                    /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                     let alarmModel: Alarms = Alarms()
                     var segueInfo: SegueInfo!
                     let snoozeEnabled: Bool = false
                     var _: Bool!*/
                    
                    let mediaurl = contact.value(forKey: "mediaurl") as! String
                    let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                    let imageId = arrReadselVideoPath.last
                    //let arrReadimageId = imageId?.components(separatedBy: ".")
                    
                    //try fileManager.removeItem(atPath: imageId)
                    // Check if file exists
                    
                    do {
                        let fileManager = FileManager.default
                        let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                        // Check if file exists
                        if fileManager.fileExists(atPath: paths) {
                            // Delete file
                            try fileManager.removeItem(atPath: paths)
                        } else {
                            print("File does not exist")
                        }
                        
                    }
                    catch let error as NSError {
                        print("An error took place: \(error)")
                    }
                    let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                    AF.download(mediaurl, to: destination)
                        .downloadProgress { progress in
                            //print("Download Progress: \(progress.fractionCompleted)")
                            
                        }
                        .responseData { response in
                            switch response.result {
                            case .success(let data): break
                                
                            case .failure: break
                                
                                
                            }
                            
                    }
                    
                }
                
            }
            if jsonData.value(forKey: "createfanstory") != nil
            {
                let contact = jsonData.value(forKey: "createfanstory") as! NSDictionary
                
                
                let status = contact.value(forKey: "status") as! String
                if(status == "active"){
                    /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                     let alarmModel: Alarms = Alarms()
                     var segueInfo: SegueInfo!
                     let snoozeEnabled: Bool = false
                     var _: Bool!*/
                    
                    let mediaurl = contact.value(forKey: "mediaurl") as! String
                    let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                    let imageId = arrReadselVideoPath.last
                    //let arrReadimageId = imageId?.components(separatedBy: ".")
                    
                    //try fileManager.removeItem(atPath: imageId)
                    // Check if file exists
                    
                    do {
                        let fileManager = FileManager.default
                        let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                        // Check if file exists
                        if fileManager.fileExists(atPath: paths) {
                            // Delete file
                            try fileManager.removeItem(atPath: paths)
                        } else {
                            print("File does not exist")
                        }
                        
                    }
                    catch let error as NSError {
                        print("An error took place: \(error)")
                    }
                    let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                    AF.download(mediaurl, to: destination)
                        .downloadProgress { progress in
                            //print("Download Progress: \(progress.fractionCompleted)")
                            
                        }
                        .responseData { response in
                            switch response.result {
                            case .success(let _): break
                                
                            case .failure: break
                                
                                
                            }
                            
                    }
                    
                }
                
            }
            if jsonData.value(forKey: "browser") != nil
            {
                let contact = jsonData.value(forKey: "browser") as! NSDictionary
                
                
                let status = contact.value(forKey: "status") as! String
                //  if(status == "active"){
                /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                 let alarmModel: Alarms = Alarms()
                 var segueInfo: SegueInfo!
                 let snoozeEnabled: Bool = false
                 var _: Bool!*/
                let mediaurl = contact.value(forKey: "mediaurl") as! String
                let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                let imageId = arrReadselVideoPath.last
                //let arrReadimageId = imageId?.components(separatedBy: ".")
                
                //try fileManager.removeItem(atPath: imageId)
                // Check if file exists
                
                do {
                    let fileManager = FileManager.default
                    let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                    // Check if file exists
                    if fileManager.fileExists(atPath: paths) {
                        // Delete file
                        try fileManager.removeItem(atPath: paths)
                    } else {
                        print("File does not exist")
                    }
                    
                }
                catch let error as NSError {
                    print("An error took place: \(error)")
                }
                // let mediaurl = contact.value(forKey: "mediaurl") as! String
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                AF.download(mediaurl, to: destination)
                    .downloadProgress { progress in
                        //print("Download Progress: \(progress.fractionCompleted)")
                        
                    }
                    .responseData { response in
                        switch response.result {
                        case .success(let data): break
                            
                        case .failure: break
                            
                            
                        }
                        
                }
                
                // }
                
            }
            if jsonData.value(forKey: "inappbrowser") != nil
            {
                let contact = jsonData.value(forKey: "inappbrowser") as! NSDictionary
                
                
                let status = contact.value(forKey: "status") as! String
                if(status == "active"){
                    /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                     let alarmModel: Alarms = Alarms()
                     var segueInfo: SegueInfo!
                     let snoozeEnabled: Bool = false
                     var _: Bool!*/
                    
                    let mediaurl = contact.value(forKey: "mediaurl") as! String
                    let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                    let imageId = arrReadselVideoPath.last
                    //let arrReadimageId = imageId?.components(separatedBy: ".")
                    
                    //try fileManager.removeItem(atPath: imageId)
                    // Check if file exists
                    
                    do {
                        let fileManager = FileManager.default
                        let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                        // Check if file exists
                        if fileManager.fileExists(atPath: paths) {
                            // Delete file
                            try fileManager.removeItem(atPath: paths)
                        } else {
                            print("File does not exist")
                        }
                        
                    }
                    catch let error as NSError {
                        print("An error took place: \(error)")
                    }
                    let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                    AF.download(mediaurl, to: destination)
                        .downloadProgress { progress in
                            //print("Download Progress: \(progress.fractionCompleted)")
                            
                        }
                        .responseData { response in
                            switch response.result {
                            case .success(let data): break
                                
                            case .failure: break
                                
                                
                            }
                            
                    }
                    
                }
                
            }
            if jsonData.value(forKey: "information") != nil
            {
                let contact = jsonData.value(forKey: "information") as! NSDictionary
                
                
                let status = contact.value(forKey: "status") as! String
                if(status == "active"){
                    /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                     let alarmModel: Alarms = Alarms()
                     var segueInfo: SegueInfo!
                     let snoozeEnabled: Bool = false
                     var _: Bool!*/
                    
                    let mediaurl = contact.value(forKey: "mediaurl") as! String
                    let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                    let imageId = arrReadselVideoPath.last
                    //let arrReadimageId = imageId?.components(separatedBy: ".")
                    
                    //try fileManager.removeItem(atPath: imageId)
                    // Check if file exists
                    
                    do {
                        let fileManager = FileManager.default
                        let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                        // Check if file exists
                        if fileManager.fileExists(atPath: paths) {
                            // Delete file
                            try fileManager.removeItem(atPath: paths)
                        } else {
                            print("File does not exist")
                        }
                        
                    }
                    catch let error as NSError {
                        print("An error took place: \(error)")
                    }
                    let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                    AF.download(mediaurl, to: destination)
                        .downloadProgress { progress in
                            //print("Download Progress: \(progress.fractionCompleted)")
                            
                        }
                        .responseData { response in
                            switch response.result {
                            case .success(let data): break
                                
                            case .failure: break
                                
                                
                            }
                            
                    }
                    
                }
                
            }
            if jsonData.value(forKey: "information1") != nil
            {
                let contact = jsonData.value(forKey: "information1") as! NSDictionary
                
                
                let status = contact.value(forKey: "status") as! String
                if(status == "active"){
                    /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                     let alarmModel: Alarms = Alarms()
                     var segueInfo: SegueInfo!
                     let snoozeEnabled: Bool = false
                     var _: Bool!*/
                    
                    let mediaurl = contact.value(forKey: "mediaurl") as! String
                    let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                    let imageId = arrReadselVideoPath.last
                    //let arrReadimageId = imageId?.components(separatedBy: ".")
                    
                    //try fileManager.removeItem(atPath: imageId)
                    // Check if file exists
                    
                    do {
                        let fileManager = FileManager.default
                        let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                        // Check if file exists
                        if fileManager.fileExists(atPath: paths) {
                            // Delete file
                            try fileManager.removeItem(atPath: paths)
                        } else {
                            print("File does not exist")
                        }
                        
                    }
                    catch let error as NSError {
                        print("An error took place: \(error)")
                    }
                    let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                    AF.download(mediaurl, to: destination)
                        .downloadProgress { progress in
                            //print("Download Progress: \(progress.fractionCompleted)")
                            
                        }
                        .responseData { response in
                            switch response.result {
                            case .success( _): break
                                
                            case .failure: break
                                
                                
                            }
                            
                    }
                    
                }
                
            }
            if jsonData.value(forKey: "broadcastall") != nil
            {
                let roomid = jsonData.value(forKey: "broadcastall") as! String
                UserDefaults.standard.setValue(roomid, forKey: "broadcastall")
                UserDefaults.standard.synchronize()
            }
            if jsonData.value(forKey: "broadcastinactive") != nil
            {
                let roomid = jsonData.value(forKey: "broadcastinactive") as! String
                UserDefaults.standard.setValue(roomid, forKey: "broadcastinactive")
                UserDefaults.standard.synchronize()
            }
            if jsonData.value(forKey: "broadcastduration") != nil
            {
                let roomid = jsonData.value(forKey: "broadcastduration") as! Int64
                UserDefaults.standard.setValue(roomid, forKey: "broadcastduration")
                UserDefaults.standard.synchronize()
            }
            if jsonData.value(forKey: "banterlogin") != nil
            {
                let contact = jsonData.value(forKey: "banterlogin") as! NSDictionary
                
                
                //let status = contact.value(forKey: "status") as! String
                //if(status == "active"){
                /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                 let alarmModel: Alarms = Alarms()
                 var segueInfo: SegueInfo!
                 let snoozeEnabled: Bool = false
                 var _: Bool!*/
                let mediaurl = contact.value(forKey: "mediaurl") as! String
                let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                let imageId = arrReadselVideoPath.last
                let mediatype = contact.value(forKey: "mediatype") as! String
                let message = contact.value(forKey: "message") as! String
                let actionbtn = contact.value(forKey: "actionbtn") as! String
                // let link = contact.value(forKey: "link") as! String
                let action = contact.value(forKey: "action") as! String
                //let arrReadimageId = imageId?.components(separatedBy: ".")
                UserDefaults.standard.setValue(message, forKey: "banterloginmsg")
                UserDefaults.standard.setValue(mediatype, forKey: "banterloginmtype")
                UserDefaults.standard.setValue(mediaurl, forKey: "banterloginmurl")
                UserDefaults.standard.setValue(actionbtn, forKey: "banterloginmbut")
                UserDefaults.standard.setValue(action, forKey: "banterloginaction")
                UserDefaults.standard.synchronize()
                //try fileManager.removeItem(atPath: imageId)
                // Check if file exists
                
                do {
                    let fileManager = FileManager.default
                    let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                    // Check if file exists
                    if fileManager.fileExists(atPath: paths) {
                        // Delete file
                        try fileManager.removeItem(atPath: paths)
                    } else {
                        print("File does not exist")
                    }
                    
                }
                catch let error as NSError {
                    print("An error took place: \(error)")
                }
                
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                AF.download(mediaurl, to: destination)
                    .downloadProgress { progress in
                        //print("Download Progress: \(progress.fractionCompleted)")
                        
                    }
                    .responseData { response in
                        switch response.result {
                        case .success(let _): break
                            
                        case .failure: break
                            
                            
                        }
                        
                }
                
                //  }
                
            }
            if let chatlogin = jsonData.value(forKey: "chatlogin")
            {
                let contact = jsonData.value(forKey: "chatlogin") as! NSDictionary
                
                
                //let status = contact.value(forKey: "status") as! String
                //if(status == "active"){
                /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                 let alarmModel: Alarms = Alarms()
                 var segueInfo: SegueInfo!
                 let snoozeEnabled: Bool = false
                 var _: Bool!*/
                let mediaurl = contact.value(forKey: "mediaurl") as! String
                let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                let imageId = arrReadselVideoPath.last
                let mediatype = contact.value(forKey: "mediatype") as! String
                let message = contact.value(forKey: "message") as! String
                let actionbtn = contact.value(forKey: "actionbtn") as! String
                // let link = contact.value(forKey: "link") as! String
                let action = contact.value(forKey: "action") as! String
                //let arrReadimageId = imageId?.components(separatedBy: ".")
                UserDefaults.standard.setValue(message, forKey: "chatloginmsg")
                UserDefaults.standard.setValue(mediatype, forKey: "chatloginmtype")
                UserDefaults.standard.setValue(mediaurl, forKey: "chatloginmurl")
                UserDefaults.standard.setValue(actionbtn, forKey: "chatloginmbut")
                UserDefaults.standard.setValue(action, forKey: "chatloginaction")
                UserDefaults.standard.synchronize()
                //try fileManager.removeItem(atPath: imageId)
                // Check if file exists
                
                do {
                    let fileManager = FileManager.default
                    let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                    // Check if file exists
                    if fileManager.fileExists(atPath: paths) {
                        // Delete file
                        try fileManager.removeItem(atPath: paths)
                    } else {
                        print("File does not exist")
                    }
                    
                }
                catch let error as NSError {
                    print("An error took place: \(error)")
                }
                
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                AF.download(mediaurl, to: destination)
                    .downloadProgress { progress in
                        //print("Download Progress: \(progress.fractionCompleted)")
                        
                    }
                    .responseData { response in
                        switch response.result {
                        case .success(let data): break
                            
                        case .failure: break
                            
                            
                        }
                        
                }
                
                //  }
                
            }
            if let contactlogin = jsonData.value(forKey: "contactlogin")
            {
                let contact = jsonData.value(forKey: "contactlogin") as! NSDictionary
                
                
                //let status = contact.value(forKey: "status") as! String
                //if(status == "active"){
                /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                 let alarmModel: Alarms = Alarms()
                 var segueInfo: SegueInfo!
                 let snoozeEnabled: Bool = false
                 var _: Bool!*/
                let mediaurl = contact.value(forKey: "mediaurl") as! String
                let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                let imageId = arrReadselVideoPath.last
                let mediatype = contact.value(forKey: "mediatype") as! String
                let message = contact.value(forKey: "message") as! String
                let actionbtn = contact.value(forKey: "actionbtn") as! String
                // let link = contact.value(forKey: "link") as! String
                let action = contact.value(forKey: "action") as! String
                //let arrReadimageId = imageId?.components(separatedBy: ".")
                UserDefaults.standard.setValue(message, forKey: "contactloginmsg")
                UserDefaults.standard.setValue(mediatype, forKey: "contactloginmtype")
                UserDefaults.standard.setValue(mediaurl, forKey: "contactloginmurl")
                UserDefaults.standard.setValue(actionbtn, forKey: "contactloginmbut")
                UserDefaults.standard.setValue(action, forKey: "contactloginaction")
                UserDefaults.standard.synchronize()
                //try fileManager.removeItem(atPath: imageId)
                // Check if file exists
                
                do {
                    let fileManager = FileManager.default
                    let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                    // Check if file exists
                    if fileManager.fileExists(atPath: paths) {
                        // Delete file
                        try fileManager.removeItem(atPath: paths)
                    } else {
                        print("File does not exist")
                    }
                    
                }
                catch let error as NSError {
                    print("An error took place: \(error)")
                }
                
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                AF.download(mediaurl, to: destination)
                    .downloadProgress { progress in
                        //print("Download Progress: \(progress.fractionCompleted)")
                        
                    }
                    .responseData { response in
                        switch response.result {
                        case .success(let data): break
                            
                        case .failure: break
                            
                            
                        }
                        
                }
                
                //  }
                
            }
            if let profilelogin = jsonData.value(forKey: "profilelogin")
            {
                let contact = jsonData.value(forKey: "profilelogin") as! NSDictionary
                
                
                //let status = contact.value(forKey: "status") as! String
                //if(status == "active"){
                /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                 let alarmModel: Alarms = Alarms()
                 var segueInfo: SegueInfo!
                 let snoozeEnabled: Bool = false
                 var _: Bool!*/
                let mediaurl = contact.value(forKey: "mediaurl") as! String
                let arrReadselVideoPath = mediaurl.components(separatedBy: "/")
                let imageId = arrReadselVideoPath.last
                let mediatype = contact.value(forKey: "mediatype") as! String
                let message = contact.value(forKey: "message") as! String
                let actionbtn = contact.value(forKey: "actionbtn") as! String
                // let link = contact.value(forKey: "link") as! String
                let action = contact.value(forKey: "action") as! String
                //let arrReadimageId = imageId?.components(separatedBy: ".")
                UserDefaults.standard.setValue(message, forKey: "profileloginmsg")
                UserDefaults.standard.setValue(mediatype, forKey: "profileloginmtype")
                UserDefaults.standard.setValue(mediaurl, forKey: "profileloginmurl")
                UserDefaults.standard.setValue(actionbtn, forKey: "profileloginmbut")
                UserDefaults.standard.setValue(action, forKey: "profileloginaction")
                UserDefaults.standard.synchronize()
                //try fileManager.removeItem(atPath: imageId)
                // Check if file exists
                
                do {
                    let fileManager = FileManager.default
                    let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                    // Check if file exists
                    if fileManager.fileExists(atPath: paths) {
                        // Delete file
                        try fileManager.removeItem(atPath: paths)
                    } else {
                        print("File does not exist")
                    }
                    
                }
                catch let error as NSError {
                    print("An error took place: \(error)")
                }
                
                let destination = DownloadRequest.suggestedDownloadDestination(for: .documentDirectory)
                AF.download(mediaurl, to: destination)
                    .downloadProgress { progress in
                        //print("Download Progress: \(progress.fractionCompleted)")
                        
                    }
                    .responseData { response in
                        switch response.result {
                        case .success(let data): break
                            
                        case .failure: break
                            
                            
                        }
                        
                }
                
                //  }
                
            }
        }
        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
        if(myjid != nil){
            DispatchQueue.main.asyncAfter(deadline: .now() + 35.0) {
                if(!self.ismodalshow){
                    
                    if jsonData.value(forKey: "synccontacts") != nil
                    {
                        let contact = jsonData.value(forKey: "synccontacts") as! NSDictionary
                        let strNonSplitContactsLocal: String? = UserDefaults.standard.string(forKey: "allNonSplitContacts")
                        if strNonSplitContactsLocal == nil
                        {
                            let status = contact.value(forKey: "status") as! String
                            if(status == "active"){
                                /* let alarmScheduler: AlarmSchedulerDelegate = Scheduler()
                                 let alarmModel: Alarms = Alarms()
                                 var segueInfo: SegueInfo!
                                 let snoozeEnabled: Bool = false
                                 var _: Bool!*/
                                
                                let array = Last_activity_date.rows(filter:"activityType = 'contactsync'") as! [Last_activity_date]
                                
                                if(array.count != 0){
                                    let disnarysound = array[0]
                                    let soundValue = disnarysound.value(forKey: "activity_date") as! Int
                                    
                                    let mili: Double = Double(soundValue)
                                    let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                                    let dateFormatter = DateFormatter()
                                    //dateFormatter.dateFormat = "dd MMMM yyyy hh:mm a"
                                    //dateFormatter.dateStyle = .short
                                    dateFormatter.dateFormat = "dd MMM yy"
                                    let now = Date()
                                    let birthday: Date = myMilliseconds.dateFull as Date
                                    let calendar = Calendar.current
                                    
                                    let ageComponents = calendar.dateComponents([.day], from: birthday, to: now)
                                    let timebefore = Int64(ageComponents.day!)
                                    print(timebefore)
                                    let day = contact.value(forKey: "day") as! Int64
                                    
                                    if(timebefore > day){
                                        self.ismodalshow = true
                                        let time: Int64 = self.getUTCFormateDate()
                                        _ = self.db.execute(sql:" UPDATE last_activity_date SET activity_date = \(time) WHERE activityType = 'contactsync'")
                                        let mediatype = contact.value(forKey: "mediatype") as! String
                                        let message = contact.value(forKey: "message") as! String
                                        let actionbtn = contact.value(forKey: "actionbtn") as! String
                                        let link = contact.value(forKey: "link") as! String
                                        let action = contact.value(forKey: "action") as! String
                                        let mediaurl = contact.value(forKey: "mediaurl") as! String
                                        
                                        let linktitle = contact.value(forKey: "linktitle") as! String
                                        //  let type = contact.value(forKey: "type") as! String
                                        //let notititle = contact.value(forKey: "notititle") as! String
                                        //let notidesc = contact.value(forKey: "notidesc") as! String
                                        self.customAlertVC = CustomAlertViewController.instantiate()
                                        guard let customAlertVC = self.customAlertVC else { return }
                                        
                                        customAlertVC.titleString = "contactsync"
                                        customAlertVC.messageString = message
                                        customAlertVC.mediatype = mediatype
                                        customAlertVC.mediaurl = mediaurl
                                        customAlertVC.ActionTitle = actionbtn
                                        customAlertVC.actioncommand = action
                                        customAlertVC.actionlink = link
                                        customAlertVC.LinkTitle = linktitle
                                        let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                        // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                        popupVC.cornerRadius = 20
                                        self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                    }
                                }
                                else{
                                    self.ismodalshow = true
                                    let activity = Last_activity_date()
                                    activity.activityType = "contactsync"
                                    let time: Int64 = self.getUTCFormateDate()
                                    activity.activity_date = time
                                    activity.save()
                                    let mediatype = contact.value(forKey: "mediatype") as! String
                                    let message = contact.value(forKey: "message") as! String
                                    let actionbtn = contact.value(forKey: "actionbtn") as! String
                                    let link = contact.value(forKey: "link") as! String
                                    let action = contact.value(forKey: "action") as! String
                                    let mediaurl = contact.value(forKey: "mediaurl") as! String
                                    
                                    let linktitle = contact.value(forKey: "linktitle") as! String
                                    // let type = contact.value(forKey: "type") as! String
                                    // let notititle = contact.value(forKey: "notititle") as! String
                                    //let notidesc = contact.value(forKey: "notidesc") as! String
                                    self.customAlertVC = CustomAlertViewController.instantiate()
                                    guard let customAlertVC = self.customAlertVC else { return }
                                    
                                    customAlertVC.titleString = "contactsync"
                                    customAlertVC.messageString = message
                                    customAlertVC.mediatype = mediatype
                                    customAlertVC.mediaurl = mediaurl
                                    customAlertVC.ActionTitle = actionbtn
                                    customAlertVC.actioncommand = action
                                    customAlertVC.actionlink = link
                                    customAlertVC.LinkTitle = linktitle
                                    let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                    // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                    popupVC.cornerRadius = 20
                                    self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                }
                                
                                
                                
                            }
                        }
                    }
                }
                
            }
            let array = Last_activity_date.rows(filter:"activityType = 'lasthistory'") as! [Last_activity_date]
            
            if(array.count != 0){
                if jsonData.value(forKey: "historycheck") != nil
                {
                    let checkdays = jsonData.value(forKey: "historycheck") as! Int64
                    let disnarysound = array[0]
                    let soundValue = disnarysound.value(forKey: "activity_date") as! Int64
                    
                    let mili: Double = Double(soundValue)
                    let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                    let dateFormatter = DateFormatter()
                    //dateFormatter.dateFormat = "dd MMMM yyyy hh:mm a"
                    //dateFormatter.dateStyle = .short
                    dateFormatter.dateFormat = "dd MMM yy"
                    let now = Date()
                    let birthday: Date = myMilliseconds.dateFull as Date
                    let calendar = Calendar.current
                    
                    let ageComponents = calendar.dateComponents([.day], from: birthday, to: now)
                    let timebefore = Int64(ageComponents.day!)
                    print(timebefore)
                    
                    
                    if(timebefore > checkdays){
                        if jsonData.value(forKey: "historydays") != nil
                        {
                            let days = jsonData.value(forKey: "historydays") as! Int64
                            cleanhistory(historydays: days)
                        }
                    }
                }
            }
            else{
                if jsonData.value(forKey: "historydays") != nil
                {
                    let days = jsonData.value(forKey: "historydays") as! Int64
                    cleanhistory(historydays: days)
                }
            }
        }else{
            let array = Last_activity_date.rows(filter:"activityType = 'lasthistory'") as! [Last_activity_date]
            
            if(array.count == 0){
                let activity = Last_activity_date()
                activity.activityType = "lasthistory"
                let time: Int64 = self.getUTCFormateDate()
                activity.activity_date = time
                activity.save()
            }
        }
        var merchantversion: Int64 = 0
       merchantversion = Int64(UserDefaults.standard.integer(forKey: "merchantversion"))
        if(merchantversion < (jsonData.value(forKey: "merchantversion") as? Int64)!)
                                          {
                                             
                                              let result3 = self.db.execute(sql:"DELETE FROM merchant_categories")
                                              if(result3 > 0){
                                                  // print("blockeduser delted")
                                              }
                                              else{
                                                  _ = self.db.execute(sql:"DELETE FROM merchant_categories")
                                              }
                                              
                                              let catarr = jsonData.value(forKey: "categories") as! NSArray
                                              for cat in catarr
                                              {
                                                  let c_id =  (cat as! NSDictionary).value(forKey: "CategoryName") as! String
                                                  let iscat = Merchant_categories.rows(filter:"CategoryID = \(c_id)") as! [Merchant_categories]
                                                  if(iscat.count == 0){
                                                      let merchant_categories = Merchant_categories()
                                                    merchant_categories.CategoryID = (cat as! NSDictionary).value(forKey: "CategoryID") as! Int64
                                                     merchant_categories.ParentID = (cat as! NSDictionary).value(forKey: "ParentID") as! Int64
                                                      merchant_categories.CategoryName = (cat as! NSDictionary).value(forKey: "CategoryName") as! String
                                                      merchant_categories.CategoryImage = (cat as! NSDictionary).value(forKey: "CategoryImage") as! String
                                                     merchant_categories.Description = (cat as! NSDictionary).value(forKey: "Description") as! String
                                                      merchant_categories.save()
                                                  }
                                                  else{
                                                      
                                                  }
                                                  let teamImageName =  c_id
                                                  //print(teamImageName)
                                                  self.loadImageFromUrl(url: ((cat as! NSDictionary).value(forKey: "CategoryImage") as! String), fileName: teamImageName as String)
                                              }
                                              
                                              
                                             
                                            UserDefaults.standard.setValue(jsonData.value(forKey: "merchantversion") as? Int64, forKey: "merchantversion")
                                              UserDefaults.standard.synchronize()
                                          }
        
         let videolike = jsonData.value(forKey: "videolike") as! String

        UserDefaults.standard.setValue(videolike, forKey: "videolike")
          UserDefaults.standard.synchronize()
    }
    
    func GetvalueFromInsentiveConfigTable(Key: String) -> AnyObject {
        
        let array = InsentiveConfig.rows(filter:"ID = 0") as! [InsentiveConfig]
        var returnvalue: AnyObject = 0 as AnyObject
        if(array.count != 0){
            let disnarysound = array[0]
            returnvalue = disnarysound.value(forKey: Key)   as AnyObject
            
        }
        else{
            if(Key == "islogging"){
                returnvalue = "active" as AnyObject
            }
        }
        return returnvalue
    }
    func cleanhistory(historydays: Int64)  {
        DispatchQueue.main.async {
            LoadingIndicatorView.show((self.window?.rootViewController!.view)!, loadingText: "Please wait while we optimise the app for you")
        }
        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
        if localArrAllChats != nil
        {
            //Code to parse json data
            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                do {
                    arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                    
                } catch let error as NSError {
                    print(error)
                }
            }
        }
        
        //New code for Banter rooms, Group Chats and user updates
        var tmpArrAllChats = [String: AnyObject]()
        for tmpAllUserChats in arrAllChats
        {
            if let dt = arrAllChats[tmpAllUserChats.key]
            {
                var Historyflag = dt["isHistory"]! as AnyObject as! Bool
                var chatarr = dt["Chats"] as! [AnyObject]
                for i in (0 ..< chatarr.count).reversed(){
                    let message: NSDictionary = chatarr[i] as! NSDictionary
                    let soundValue = message.value(forKey: "time") as! Int64
                    
                    let mili: Double = Double(soundValue)
                    let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                    let dateFormatter = DateFormatter()
                    //dateFormatter.dateFormat = "dd MMMM yyyy hh:mm a"
                    //dateFormatter.dateStyle = .short
                    dateFormatter.dateFormat = "dd MMM yy"
                    let now = Date()
                    let birthday: Date = myMilliseconds.dateFull as Date
                    let calendar = Calendar.current
                    
                    let ageComponents = calendar.dateComponents([.day], from: birthday, to: now)
                    let timebefore = Int64(ageComponents.day!)
                    print(timebefore)
                    
                    
                    if(timebefore > historydays){
                        let messageType = message.value(forKey: "messageType") as! String
                        
                        if(messageType == "image" || messageType == "video")
                        {
                            let filePath = message.value(forKey: "filePath") as! String
                            if(!filePath.isEmpty){
                                let imageId =  getFileNameFromPath(path: message.value(forKey: "filePath") as! String)//self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)
                                //let fileManager = FileManager.default
                                //imageId = imageId.replace(target: "file://", withString: "")
                                do {
                                    let fileManager = FileManager.default
                                    //try fileManager.removeItem(atPath: imageId)
                                    // Check if file exists
                                    if fileManager.fileExists(atPath: imageId!) {
                                        // Delete file
                                        // print("File  exist")
                                        mediaArr.add(message.value(forKey: "messageContent") as! String)
                                        
                                        //try fileManager.removeItem(atPath: imageId!)
                                    } else {
                                        //print("File does not exist")
                                    }
                                    
                                }
                                catch let _ as NSError {
                                    //print("An error took place: \(error)")
                                }
                            }
                            
                        }
                        Historyflag = true
                        chatarr.remove(at: i)
                    }
                    
                    
                }
                var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                tmpArrChatDetails["Chats"] = chatarr as AnyObject//appDelegate().arrUserChat as AnyObject
                tmpArrChatDetails["isHistory"] = Historyflag as AnyObject
                arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                do {
                    if(arrAllChats.count > 0)
                    {
                        let dataArrAllChats = try JSONSerialization.data(withJSONObject:arrAllChats, options: .prettyPrinted)
                        let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                        UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                        UserDefaults.standard.synchronize()
                    }
                } catch {
                    print(error.localizedDescription)
                }
                
            }
            
        }
        DispatchQueue.main.async {
        
        LoadingIndicatorView.hide()
        }
        //update image arr
        if(mediaArr.count>0){
            
            //var tmpArrAllChats1 = [String: AnyObject]()
            for tmpAllUserChats1 in arrAllChats
            {
                if let dt = arrAllChats[tmpAllUserChats1.key]
                {
                    let chatarr = dt["Chats"] as! [AnyObject]
                    for i in (0 ..< chatarr.count).reversed(){
                        let message: NSDictionary = chatarr[i] as! NSDictionary
                        let messageType = message.value(forKey: "messageType") as! String
                        
                        if(messageType == "image" || messageType == "video")
                        {
                            let filePath = message.value(forKey: "filePath") as! String
                            if(!filePath.isEmpty){
                                let imageId =  getFileNameFromPath(path: message.value(forKey: "filePath") as! String)//self.appDelegate().getFileNameFromPathWithFile(path: message.value(forKey: "filePath") as! String)
                                //let fileManager = FileManager.default
                                //imageId = imageId.replace(target: "file://", withString: "")
                                
                                do {
                                    let fileManager = FileManager.default
                                    //try fileManager.removeItem(atPath: imageId)
                                    // Check if file exists
                                    if fileManager.fileExists(atPath: imageId!) {
                                        // Delete file
                                        // print("File  exist")
                                        
                                        
                                        let contenturl = message.value(forKey: "messageContent") as! String
                                        var strName1: String = ""
                                        _ = mediaArr.filter({ (text) -> Bool in
                                            // let tmp: NSDictionary = text as! NSDictionary
                                            let val: String = text as! String
                                            let val2: String = contenturl
                                            //let arrReadUserJid = val.components(separatedBy: "@")
                                            //let userjidTrim: String = arrReadUserJid[0]
                                            
                                            
                                            if(val.contains(val2))
                                            {
                                                strName1 = val2
                                                
                                                //return true
                                            }
                                            
                                            // }
                                            
                                            
                                            return false
                                        })
                                        
                                        
                                        if(!strName1.isEmpty)
                                        {
                                            mediaArr.remove(strName1)
                                        }
                                        // }
                                        //try fileManager.removeItem(atPath: imageId!)
                                    } else {
                                        //print("File does not exist")
                                    }
                                    
                                }
                                catch let error as NSError {
                                    print("An error took place: \(error)")
                                }
                            }
                            
                        }
                    }
                }
            }
            for i in (0 ..< mediaArr.count).reversed(){
                let contenturl = mediaArr[i] as! String
                let arrReadselVideoPath = contenturl.components(separatedBy: "/")
                let imageId = arrReadselVideoPath.last
                // let arrReadimageId = imageId?.components(separatedBy: ".")
                let fileManager = FileManager.default
                let paths = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent( imageId!)
                do {
                    let fileManager = FileManager.default
                    //try fileManager.removeItem(atPath: imageId)
                    // Check if file exists
                    if fileManager.fileExists(atPath: paths) {
                        try fileManager.removeItem(atPath: paths)
                    } else {
                        //print("File does not exist")
                    }
                    
                }
                catch let _ as NSError {
                    //print("An error took place: \(error)")
                }
            }
        }
        let array = Last_activity_date.rows(filter:"activityType = 'lasthistory'") as! [Last_activity_date]
        
        if(array.count != 0){
            
            let time: Int64 = self.getUTCFormateDate()
            _ = self.db.execute(sql:" UPDATE last_activity_date SET activity_date = \(time) WHERE activityType = 'lasthistory'")
        }
        else{
            let activity = Last_activity_date()
            activity.activityType = "lasthistory"
            let time: Int64 = self.getUTCFormateDate()
            activity.activity_date = time
            activity.save()
        }
        
    }
    func AddCoin(fctotalcoin: Int,fcavailablecoin: Int)  {
        _ = db.execute(sql:" UPDATE insentiveconfig SET fctotalcoin = \(fctotalcoin),fcavailablecoin = \(fcavailablecoin) WHERE ID = 0")
        checkCoinLevel(fctotalcoin: fctotalcoin)
    }
    func GetvalueRedeemMesg(avilablecoin: Int) -> AnyObject {
        var returnvalue: AnyObject = "\n\nLearn more" as AnyObject
        /*  let redeemTh = GetvalueFromInsentiveConfigTable(Key: fcredeemth) as! Int
         if(redeemTh > avilablecoin){
         let total = redeemTh - avilablecoin
         returnvalue = "\n\n\(total) FanCoins away from redeeming them.\n\nLearn more" as AnyObject
         }
         else if(redeemTh < avilablecoin){
         let r = avilablecoin % redeemTh
         // let Q =
         let total = (avilablecoin - r)
         returnvalue = "\n\n\(total) FanCoins available to redeem out of \(avilablecoin).\n\nLearn more" as AnyObject
         }
         else{
         returnvalue = "\n\n\(avilablecoin) FanCoins available to redeem.\n\nLearn more" as AnyObject
         }*/
        return returnvalue
    }
    func GetvalueRemainingcoinForNextLevel(totelcoin: Int) -> AnyObject {
        var returnvalue: AnyObject = 0 as AnyObject
        let CurentLevel = GetvalueFromInsentiveConfigTable(Key: fccurrentlevel) as! String
        if(CurentLevel.isEqual("No Level")){
            let nextlevlTH =   GetvalueFromInsentiveConfigTable(Key: fcbronzeth) as! Int
            returnvalue = nextlevlTH - totelcoin as AnyObject
        }
        else if(CurentLevel.isEqual("Bronze")){
            let nextlevlTH =   GetvalueFromInsentiveConfigTable(Key: fcsilverth) as! Int
            returnvalue = nextlevlTH - totelcoin as AnyObject
        }
        else if(CurentLevel.isEqual("Silver")){
            let nextlevlTH =   GetvalueFromInsentiveConfigTable(Key: fcgoldth) as! Int
            returnvalue = nextlevlTH - totelcoin as AnyObject
        }
        else if(CurentLevel.isEqual("Gold")){
            let nextlevlTH =   GetvalueFromInsentiveConfigTable(Key: fcplatinumth) as! Int
            returnvalue = nextlevlTH - totelcoin as AnyObject
        }
        else if(CurentLevel.isEqual("Platinum")){
            let nextlevlTH =   GetvalueFromInsentiveConfigTable(Key: fcdiamondth) as! Int
            returnvalue = nextlevlTH - totelcoin as AnyObject
        }
        
        return returnvalue
    }
    func checkCoinLevel(fctotalcoin: Int)  {
        if ClassReachability.isConnectedToNetwork() {
            let CurentLevel = GetvalueFromInsentiveConfigTable(Key: fccurrentlevel) as! String
            if(CurentLevel.isEqual("No Level")){
                if(fctotalcoin >= GetvalueFromInsentiveConfigTable(Key: fcbronzeth) as! Int){
                    callupdatecoins(coins: GetvalueFromInsentiveConfigTable(Key: fcbonusthd) , level: "Bronze" as AnyObject, activity: "bonus" as AnyObject)
                    /*var dictRequest = [String: AnyObject]()
                    dictRequest["cmd"] = "updatecoins" as AnyObject
                    
                    do {
                        
                        //Creating Request Data
                        var dictRequestData = [String: AnyObject]()
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        let arrdUserJid = myjid?.components(separatedBy: "@")
                        let userUserJid = arrdUserJid?[0]
                        // let time: Int64 = self.appDelegate().getUTCFormateDate()
                        
                        
                        let myjidtrim: String? = userUserJid
                        dictRequestData["coins"] = GetvalueFromInsentiveConfigTable(Key: fcbonusthb) as AnyObject
                        dictRequestData["level"] = "Bronze" as AnyObject
                        dictRequestData["activity"] = "bonus" as AnyObject
                        dictRequestData["username"] = myjidtrim as AnyObject
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)
                        
                        let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                        //print(strFanUpdates)
                        sendRequestToAPI(strRequestDict: strFanUpdates)
                    } catch {
                        print(error.localizedDescription)
                    }*/
                }
            }
            else if(CurentLevel.isEqual("Bronze")){
                if(fctotalcoin >= GetvalueFromInsentiveConfigTable(Key: fcsilverth) as! Int){
                    callupdatecoins(coins: GetvalueFromInsentiveConfigTable(Key: fcbonusthd) , level: "Silver" as AnyObject, activity: "bonus" as AnyObject)
                   /* var dictRequest = [String: AnyObject]()
                    dictRequest["cmd"] = "updatecoins" as AnyObject
                    
                    do {
                        
                        //Creating Request Data
                        var dictRequestData = [String: AnyObject]()
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        let arrdUserJid = myjid?.components(separatedBy: "@")
                        let userUserJid = arrdUserJid?[0]
                        // let time: Int64 = self.appDelegate().getUTCFormateDate()
                        
                        
                        let myjidtrim: String? = userUserJid
                        dictRequestData["coins"] = GetvalueFromInsentiveConfigTable(Key: fcbonusths) as AnyObject
                        dictRequestData["level"] = "Silver" as AnyObject
                        dictRequestData["activity"] = "bonus" as AnyObject
                        dictRequestData["username"] = myjidtrim as AnyObject
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)
                        
                        let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                        //print(strFanUpdates)
                        sendRequestToAPI(strRequestDict: strFanUpdates)
                    } catch {
                        print(error.localizedDescription)
                    }*/
                }
            }
            else if(CurentLevel.isEqual("Silver")){
                if(fctotalcoin >= GetvalueFromInsentiveConfigTable(Key: fcgoldth) as! Int){
                    callupdatecoins(coins: GetvalueFromInsentiveConfigTable(Key: fcbonusthd) , level: "Gold" as AnyObject, activity: "bonus" as AnyObject)
                   /* var dictRequest = [String: AnyObject]()
                    dictRequest["cmd"] = "updatecoins" as AnyObject
                    
                    do {
                        
                        //Creating Request Data
                        var dictRequestData = [String: AnyObject]()
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        let arrdUserJid = myjid?.components(separatedBy: "@")
                        let userUserJid = arrdUserJid?[0]
                        // let time: Int64 = self.appDelegate().getUTCFormateDate()
                        
                        
                        let myjidtrim: String? = userUserJid
                        dictRequestData["coins"] = GetvalueFromInsentiveConfigTable(Key: fcbonusthg) as AnyObject
                        dictRequestData["level"] = "Gold" as AnyObject
                        dictRequestData["activity"] = "bonus" as AnyObject
                        dictRequestData["username"] = myjidtrim as AnyObject
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)
                        
                        let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                        //print(strFanUpdates)
                        sendRequestToAPI(strRequestDict: strFanUpdates)
                    } catch {
                        print(error.localizedDescription)
                    }*/
                }
                
            }
            else if(CurentLevel.isEqual("Gold")){
                if(fctotalcoin >= GetvalueFromInsentiveConfigTable(Key: fcplatinumth) as! Int){
                    callupdatecoins(coins: GetvalueFromInsentiveConfigTable(Key: fcbonusthd) , level: "Platinum" as AnyObject, activity: "bonus" as AnyObject)
                   /* var dictRequest = [String: AnyObject]()
                    dictRequest["cmd"] = "updatecoins" as AnyObject
                    
                    do {
                        
                        //Creating Request Data
                        var dictRequestData = [String: AnyObject]()
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        let arrdUserJid = myjid?.components(separatedBy: "@")
                        let userUserJid = arrdUserJid?[0]
                        // let time: Int64 = self.appDelegate().getUTCFormateDate()
                        
                        
                        let myjidtrim: String? = userUserJid
                        dictRequestData["coins"] = GetvalueFromInsentiveConfigTable(Key: fcbonusthp) as AnyObject
                        dictRequestData["level"] = "Platinum" as AnyObject
                        dictRequestData["activity"] = "bonus" as AnyObject
                        dictRequestData["username"] = myjidtrim as AnyObject
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)
                        
                        let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                        //print(strFanUpdates)
                        sendRequestToAPI(strRequestDict: strFanUpdates)
                    } catch {
                        print(error.localizedDescription)
                    }*/
                }
            }
            else if(CurentLevel.isEqual("Platinum")){
                if(fctotalcoin >= GetvalueFromInsentiveConfigTable(Key: fcdiamondth) as! Int){
                     callupdatecoins(coins: GetvalueFromInsentiveConfigTable(Key: fcbonusthd) , level: "Diamond" as AnyObject, activity: "bonus" as AnyObject)
                    /*var dictRequest = [String: AnyObject]()
                    dictRequest["cmd"] = "updatecoins" as AnyObject
                    
                    do {
                        
                        //Creating Request Data
                        var dictRequestData = [String: AnyObject]()
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        let arrdUserJid = myjid?.components(separatedBy: "@")
                        let userUserJid = arrdUserJid?[0]
                        // let time: Int64 = self.appDelegate().getUTCFormateDate()
                        
                        
                        let myjidtrim: String? = userUserJid
                        dictRequestData["coins"] = GetvalueFromInsentiveConfigTable(Key: fcbonusthd) as AnyObject
                        dictRequestData["level"] = "Diamond" as AnyObject
                        dictRequestData["activity"] = "bonus" as AnyObject
                        dictRequestData["username"] = myjidtrim as AnyObject
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)
                        
                        let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                        //print(strFanUpdates)
                        sendRequestToAPI(strRequestDict: strFanUpdates)
                    } catch {
                        print(error.localizedDescription)
                    }*/
                }
            }
            else if(CurentLevel.isEqual("Diamond")){
                /*if(fctotalcoin >= GetvalueFromInsentiveConfigTable(Key: fcbronze) as! Int){
                 
                 }*/
            }
        }
    }
    func ActivityPermissionCheck(massegeId: Int,Type: String) -> Bool {
        var resulte: Bool = false
        if(GetvalueFromInsentiveConfigTable(Key: isfcactivity)).boolValue{
            if(GetvalueFromInsentiveConfigTable(Key: Type)).boolValue{
                if(Type == "isnewscomment"){
                    let array = ActivityDetailTable.rows(filter:"activityeid = \(massegeId) And activitytype= '\(Type)'") as! [ActivityDetailTable]
                    
                    if(array.count == 0){
                        let Config = ActivityDetailTable()
                        Config.activityeid = massegeId
                        Config.activitytype = Type
                        Config.save()
                        resulte = true
                    }
                }
                else  if(Type == "isnewslike"){
                    let array = ActivityDetailTable.rows(filter:"activityeid = \(massegeId) And activitytype= '\(Type)'") as! [ActivityDetailTable]
                    
                    if(array.count == 0){
                        let Config = ActivityDetailTable()
                        Config.activityeid = massegeId
                        Config.activitytype = Type
                        Config.save()
                        resulte = true
                    }
                    
                }
                else if(Type == "isfulike"){
                    let array = ActivityDetailTable.rows(filter:"activityeid = \(massegeId) And activitytype= '\(Type)'") as! [ActivityDetailTable]
                    
                    if(array.count == 0){
                        let Config = ActivityDetailTable()
                        Config.activityeid = massegeId
                        Config.activitytype = Type
                        Config.save()
                        resulte = true
                    }
                }
                else  if(Type == "isfucomment"){
                    let array = ActivityDetailTable.rows(filter:"activityeid = \(massegeId) And activitytype= '\(Type)'") as! [ActivityDetailTable]
                    
                    if(array.count == 0){
                        let Config = ActivityDetailTable()
                        Config.activityeid = massegeId
                        Config.activitytype = Type
                        Config.save()
                        resulte = true
                    }
                }
                else{
                    resulte = false
                }
                
            }
            
            
        }
        
        return resulte
    }
    func ActivityCountManage()  {
        let activitycount = GetvalueFromInsentiveConfigTable(Key: fcactivitycount) as! Int
        let activityth = GetvalueFromInsentiveConfigTable(Key: fcactivityth) as! Int
        let Updateactivitycount = activitycount + 1
        
        _ = db.execute(sql:" UPDATE insentiveconfig SET fcactivitycount = \(Updateactivitycount) WHERE ID = 0")
        
        if(Updateactivitycount >= activityth){
            // let q = (Updateactivitycount / activityth).rounded(.toNearestOrEven)
            // q == 12.0
            //let r = Updateactivitycount.remainder(dividingBy: activityth)
            // r == -0.375
            let activitycoin = GetvalueFromInsentiveConfigTable(Key: fcactivity) as! Int
            let r = Updateactivitycount % activityth
            let Q = (Updateactivitycount - r) / activityth
            print(Q)
            let totelactivitycoin = activitycoin * Q
            if ClassReachability.isConnectedToNetwork() {
                if(!canICallUpdatecoin){
                    canICallUpdatecoin = true
                    callupdatecoins(coins: totelactivitycoin as AnyObject, level: GetvalueFromInsentiveConfigTable(Key: fccurrentlevel), activity: "activities" as AnyObject)
                   /* var dictRequest = [String: AnyObject]()
                    dictRequest["cmd"] = "updatecoins" as AnyObject
                    
                    do {
                        
                        //Creating Request Data
                        var dictRequestData = [String: AnyObject]()
                        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                        let arrdUserJid = myjid?.components(separatedBy: "@")
                        let userUserJid = arrdUserJid?[0]
                        // let time: Int64 = self.appDelegate().getUTCFormateDate()
                        
                        
                        let myjidtrim: String? = userUserJid
                        dictRequestData["coins"] = totelactivitycoin as AnyObject
                        dictRequestData["level"] = GetvalueFromInsentiveConfigTable(Key: fccurrentlevel)
                        dictRequestData["activity"] = "activities" as AnyObject
                        dictRequestData["username"] = myjidtrim as AnyObject
                        dictRequest["requestData"] = dictRequestData as AnyObject
                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                        //print(dictRequest)
                        
                        let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                        let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                        // print("updatecoins \(strFanUpdates)")
                        sendRequestToAPI(strRequestDict: strFanUpdates)
                    } catch {
                        print(error.localizedDescription)
                    }*/
                    
                }
            }
        }
    }
    func goOffline(_ sender: XMPPStream) {
        let login: String? = UserDefaults.standard.string(forKey: "userJID")
        if(login != nil)
        {
            isSendingPresence = false
            //print("goOffline")
            /*timer.invalidate()
             //  DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
             let presence = XMPPPresence(type: "unavailable")
             self.xmppStream!.send(presence)*/
            //}
        }
    }
    
    func hasCellularCoverage() -> Bool? {
        
        let netinfo = CTTelephonyNetworkInfo()
        
        let carrier: CTCarrier = netinfo.subscriberCellularProvider!
        
        if ((carrier.isoCountryCode == nil))
        {
            return false
        }
        return true
    }
    func updatetoken(token : String) {
        // DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
        var dictRequest1 = [String: AnyObject]()
        dictRequest1["cmd"] = "updatedevicetocken" as AnyObject
        dictRequest1["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest1["device"] = "ios" as AnyObject
        //Creating Request Dataregisterusername
        var dictRequestData1 = [String: AnyObject]()
        
        
        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
        if(myjid != nil){
            let arrdUserJid = myjid?.components(separatedBy: "@")
            let userUserJid = arrdUserJid?[0]
            dictRequestData1["username"] = userUserJid as AnyObject?
            dictRequestData1["user"] = userUserJid as AnyObject?
        }
        else{
            let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
                   if(!istriviauser){
                    let triviauser: String? = UserDefaults.standard.string(forKey: "triviauser")
                    let arrdUserJid = triviauser?.components(separatedBy: "@")
                             let userUserJid = arrdUserJid?[0]
                             dictRequestData1["user"] = userUserJid as AnyObject?
                   }else{
                     dictRequestData1["user"] = "" as AnyObject
            }
           dictRequestData1["username"] = "" as AnyObject
        }
        dictRequestData1["devicetocken"] = token as AnyObject
        dictRequest1["requestData"] = dictRequestData1 as AnyObject
        //dictRequest.setValue(dictMobiles, forKey: "requestData")
        //print(dictRequest)
        do {
           /* let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest1, options: .prettyPrinted)
            let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
            //print(strMyTeams)
            // let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
            //let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
            let escapedString = strMyTeams.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
            //  print(escapedString!)
            // print(strFanUpdates)
            
            let url = MediaAPIjava + "request=" + escapedString!*/
            //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest1], encoding: JSONEncoding.default,
                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                // 2
                .responseJSON { response in
                    switch response.result {
                               case .success(let value):
                                   if let json = value as? [String: Any] {
                                       // print(" JSON:", json)
                                       let status1: Bool = json["success"] as! Bool
                                       if(status1){
                                           
                                       }
                                       else{
                                           DispatchQueue.main.async
                                               {
                                                   
                                           }
                                           //Show Error
                                       }
                                   }
                               case .failure(let error):
                                debugPrint(error as Any)
                        break
                                   // error handling
                    
                               }
                   
            }
            
            // self.sendRequestToAPI(strRequestDict: strMyTeams)
        } catch {
            // print(error.localizedDescription)
        }
        // }
        
    }
    func callingTinyURL(url: String,Titel: String) {
        
        let boundary = generateBoundaryString()
        var request = URLRequest(url: URL(string: "http://tinyurl.com/api-create.php?url=\(url)")!)
        request.httpMethod = "GET"
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        let reqParams = [String: String]()
        
        request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
            if let data = data {
                if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                    print(stringData)
                    
                    let myWebsite = NSURL(string:stringData)
                    let shareAll = [Titel, myWebsite as Any] as [Any]
                    
                    let activityViewController = UIActivityViewController(activityItems: shareAll, applicationActivities: nil)
                    DispatchQueue.main.async {
                        if var topController = UIApplication.shared.keyWindow?.rootViewController {
                            while let presentedViewController = topController.presentedViewController {
                                topController = presentedViewController
                            }
                            activityViewController.popoverPresentationController?.sourceView = topController.view
                            topController.present(activityViewController, animated: true, completion: nil)
                            // topController should now be your topmost view controller
                            //  LoadingIndicatorView.show((topController.view)!, loadingText: "Connecting...")
                        }
                    }
                    
                }
            }
        })
        task.resume()
        
    }
    
    
    
    /*func removeSpecialCharsFromString(str: String) -> String {
     let chars = Set("0123456789".characters)
     return String(str.characters.filter { chars.contains($0) })
     }*/
    
    func getMediaURL(ofPhotoWith mPhasset: PHAsset, completionHandler : @escaping ((_ responseURL : URL?) -> Void)) {
        
        if mPhasset.mediaType == .image {
            let options: PHContentEditingInputRequestOptions = PHContentEditingInputRequestOptions()
            options.canHandleAdjustmentData = {(adjustmeta: PHAdjustmentData) -> Bool in
                return true
            }
            mPhasset.requestContentEditingInput(with: options, completionHandler: { (contentEditingInput, info) in
                completionHandler(contentEditingInput!.fullSizeImageURL)
            })
        } else if mPhasset.mediaType == .video {
            let options: PHVideoRequestOptions = PHVideoRequestOptions()
            options.version = .original
            PHImageManager.default().requestAVAsset(forVideo: mPhasset, options: options, resultHandler: { (asset, audioMix, info) in
                if let urlAsset = asset as? AVURLAsset {
                    let localVideoUrl = urlAsset.url
                    completionHandler(localVideoUrl)
                } else {
                    completionHandler(nil)
                }
            })
        }
        
    }
    // Changes by Mayank for File Path 25 May 2018
    func getFileNameFromPath(path : String) -> String? {
        let arrReadselVideoPath = path.components(separatedBy: "/")
        return (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent(arrReadselVideoPath.last!)
    }
    
    func getFileNameFromPathWithFile(path : String) -> String? {
        let arrReadselVideoPath = path.components(separatedBy: "/")
        return "file://" + (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent(arrReadselVideoPath.last!)
    }
    
    func CreateFanUpdateFolder() {
        let fileManager = FileManager.default
        if let tDocumentDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first {
            let filePath =  tDocumentDirectory.appendingPathComponent("\("fanupdates")")
            if !fileManager.fileExists(atPath: filePath.path) {
                do {
                    try fileManager.createDirectory(atPath: filePath.path, withIntermediateDirectories: true, attributes: nil)
                } catch {
                    NSLog("Couldn't create document directory")
                }
            }
            NSLog("Document directory is \(filePath)")
        }
    }
    
    
    func CreateProfileFolder() {
        let fileManager = FileManager.default
        if let tDocumentDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first {
            let filePath =  tDocumentDirectory.appendingPathComponent("\("fanupdateprofile")")
            if !fileManager.fileExists(atPath: filePath.path) {
                do {
                    try fileManager.createDirectory(atPath: filePath.path, withIntermediateDirectories: true, attributes: nil)
                } catch {
                    NSLog("Couldn't create document directory")
                }
            }
            NSLog("Document directory is \(filePath)")
        }
    }
    
    // Changes by Mayank for File Path 25 May 2018
    
    func getImageThumbnail(asset: PHAsset) -> UIImage {
        
        let width: Int = asset.pixelWidth/3
        let height: Int = asset.pixelHeight/3
        
        let manager = PHImageManager.default()
        let option = PHImageRequestOptions()
        var thumbnail = UIImage()
        option.isSynchronous = true
        manager.requestImage(for: asset, targetSize: CGSize(width: width, height: height), contentMode: .aspectFit, options: option, resultHandler: {(result, info)->Void in
            thumbnail = result!
        })
        return thumbnail
    }
    
    func createRequestBodyWith(parameters:[String:String], filePathKey:String, boundary:String, image: UIImage) -> NSData{
        
        let body = NSMutableData()
        
        for (key, value) in parameters {
            body.appendString(string: "--\(boundary)\r\n")
            body.appendString(string: "Content-Disposition: form-data; name=\"\(key)\"\r\n\r\n")
            body.appendString(string: "\(value)\r\n")
        }
        
        body.appendString(string: "--\(boundary)\r\n")
        
        let mimetype = "image/jpg"
        
        let defFileName = "temp.jpg"
        
        let imageData = image.jpegData(compressionQuality: 1)
        
        body.appendString(string: "Content-Disposition: form-data; name=\"\(filePathKey)\"; filename=\"\(defFileName)\"\r\n")
        body.appendString(string: "Content-Type: \(mimetype)\r\n\r\n")
        body.append(imageData!)
        body.appendString(string: "\r\n")
        
        body.appendString(string: "--\(boundary)--\r\n")
        
        return body
    }
    
    func createRequestBody(parameters:[String:AnyObject], filePathKey:String, boundary:String) -> NSData{
        
        let body = NSMutableData()
        
        //let imageData = UIImageJPEGRepresentation(image, 1)
        
        for (key, value) in parameters {
            body.appendString(string: "--\(boundary)\r\n")
            body.appendString(string: "Content-Disposition: form-data; name=\"\(key)\"\r\n\r\n")
            body.appendString(string: "\(value)\r\n")
        }
        
        
        
        
        
        return body
    }
    
    func createRequestBodyWithVideo(parameters:[String:String], filePathKey:String, boundary:String, videoURL: URL) -> NSData{
        
        let body = NSMutableData()
        
        //let imageData = UIImageJPEGRepresentation(image, 1)
        do
        {
            for (key, value) in parameters {
                body.appendString(string: "--\(boundary)\r\n")
                body.appendString(string: "Content-Disposition: form-data; name=\"\(key)\"\r\n\r\n")
                body.appendString(string: "\(value)\r\n")
            }
            
            body.appendString(string: "--\(boundary)\r\n")
            
            let mimetype = "video/mp4"
            
            let defFileName = "temp.mp4"
            let videoData = try Data(contentsOf: videoURL)
            
            body.appendString(string: "Content-Disposition: form-data; name=\"\(filePathKey)\"; filename=\"\(defFileName)\"\r\n")
            body.appendString(string: "Content-Type: \(mimetype)\r\n\r\n")
            body.append(videoData)
            body.appendString(string: "\r\n")
            
            body.appendString(string: "--\(boundary)--\r\n")
            
        } catch let error as NSError {
            //print(error)
        }
        
        return body
    }
    
    
    func generateBoundaryString() -> String {
        return "Boundary-\(NSUUID().uuidString)"
    }
    
    func getVideoThumbnailImage(forUrl url: URL) -> UIImage? {
        let asset: AVAsset = AVAsset(url: url)
        let imageGenerator = AVAssetImageGenerator(asset: asset)
        imageGenerator.maximumSize = CGSize(width: 160, height: 90) //.maximumSize = CGSize
        imageGenerator.appliesPreferredTrackTransform = true
        do {
            let thumbnailImage = try imageGenerator.copyCGImage(at: CMTimeMake(value: 1, timescale: 60) , actualTime: nil)
            let img: UIImage = UIImage(cgImage: thumbnailImage)
            return img
        } catch let error {
            //print(error)
            let img: UIImage = UIImage(named: "splash_bg")!
            return img
        }
    }
    
    func sendComposingChatToUser(messageTo: String)
    {
        
        //let readElement: XMLElement = XMLElement.element(withName: "x") as! XMLElement
        //readElement.addAttribute(withName: "xmlns", stringValue: "jabber:x:event")
        
        let message: XMLElement = XMLElement.element(withName: "message") as! XMLElement
        
        let composing: XMLElement = XMLElement.element(withName: "composing") as! XMLElement
        
        message.addAttribute(withName: "type", stringValue: "chat")
        //message.addAttribute(withName: "id", stringValue: messageId)
        message.addAttribute(withName: "to", stringValue: messageTo)
        //message.addAttribute(withName: "from", stringValue: messageFrom)
        message.addChild(composing)
        
        //print(message)
        
        xmppStream?.send(message)
        
        //End Code to send message to XMPP Server
        
    }
    
    func sendActiveChatToUser(jid: XMPPJID)
    {
        
    }
    
    func sendPausedChatToUser(jid: XMPPJID)
    {
        
    }
    
    func sendExitChatToUser(jid: XMPPJID)
    {
        
    }
    
    
   /* func joinAndSaveRooms(roomID: String)
    {
        let roomJID = XMPPJID(string: roomID)
        let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
        
        let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
        
        room.activate(self.xmppStream!)
        
        room.addDelegate(self, delegateQueue: DispatchQueue.main)
        let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
        
        let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
        history.addAttribute(withName: "maxchars", stringValue: "0")
        
        room.join(usingNickname: myJID!, history: history)
        self.isJoiningBanterRoom = true
        savebanterroom(supportteam: myTeamId, roomtype: String, roomid: roomID)
        //Send join status to server // Call savebanterroom API
        //Code to savebanterroom.
       /* var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "savebanterroom" as AnyObject
        self.isJoiningBanterRoom = true
        do {
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            
            dictRequestData["roomid"] = roomID as AnyObject
            dictRequestData["supportteam"] = myTeamId as AnyObject
            dictRequestData["username"] = myMobile as AnyObject
            dictRequestData["status"] = "active" as AnyObject
            
            dictRequest["requestData"] = dictRequestData as AnyObject
            //dictRequest.setValue(dictMobiles, forKey: "requestData")
            //print(dictRequest)
            
            let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
            let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
            //print(strSaveBanter)
            self.sendRequestToAPI(strRequestDict: strSaveBanter)
        } catch {
            //  print(error.localizedDescription)
        }*/
        //End Code to savebanterroom.
        
        
        
    }*/
    
    //Multiuser chat room related stuff
    func joinRoom(with jidString: String, delegate: XMPPRoomDelegate) -> XMPPRoom {
        
        let roomJID = XMPPJID(string: jidString)
        let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
        
        let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
        
        room.activate(xmppStream!)
        
        room.addDelegate(delegate, delegateQueue: DispatchQueue.main)
        
        // If the room is not existing, server will create one.
        //room.join(usingNickname: xmppStream?.myJID.user, history: nil)
        //let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
        let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
        
        let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
        history.addAttribute(withName: "maxchars", stringValue: "0")
        
        room.join(usingNickname: myJID!, history: history)
        room.changeSubject(self.banterRoomName)
        
        return room
    }
    func joinRoombroadcastall(joindate: String)  {
        let jidString = UserDefaults.standard.string(forKey: "broadcastall")!
        if(jidString != nil){
            let roomJID = XMPPJID(string: jidString)
            let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
            
            let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
            
            room.activate(xmppStream!)
            
            room.addDelegate(self, delegateQueue: DispatchQueue.main)
            
            // If the room is not existing, server will create one.
            //room.join(usingNickname: xmppStream?.myJID.user, history: nil)
            //let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
            //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
            // let mili: Double = joindate//(joindate as NSString).doubleValue
            var myJID: String? = ""
            let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
            if(!istriviauser){
                myJID = UserDefaults.standard.string(forKey: "userJID")
                Clslogging.logdebug(State: "joinRoombroadcastall by userjid=\(String(describing: myJID)) datetime\(joindate)")
            }
            else{
                myJID = UserDefaults.standard.string(forKey: "triviauser")
                Clslogging.logdebug(State: "joinRoombroadcastall by anonymous=\(String(describing: myJID)) datetime\(joindate)")
            }

            //let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
            
            let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
            if(joindate == ""){
                history.addAttribute(withName: "maxchars", stringValue: "0")
                
            }
            else{
                let mili: Double = (joindate as NSString).doubleValue
                //print(mili)
                
                let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                
                //print(myMilliseconds.dateFull)
                
                let calendar = NSCalendar.autoupdatingCurrent
                let timeStampTmp = calendar.date(byAdding: .minute, value: -0, to: myMilliseconds.dateFull)
                // let timeStampTmp = calendar.date(byAdding: .minute, value: -1, to: myMilliseconds.dateFull)
                //print(timeStampTmp)
                let formatter = DateFormatter()
                formatter.dateFormat = "yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"
                //formatter.dateStyle = DateFormatter.Style.full
                //formatter.timeStyle = DateFormatter.Style.long
                
                formatter.timeZone = NSTimeZone(name: "UTC") as TimeZone?//TimeZone.current
                let timeStamp = formatter.string(from: timeStampTmp as! Date)
                history.addAttribute(withName: "maxstanzas", stringValue: "1")
                
                history.addAttribute(withName: "since", stringValue: timeStamp)
            }
            
            
            room.join(usingNickname: myJID!, history: history)
            
        }
    }
    func joinRoombroadcastinactive(joindate:String)  {
        let jidString: String = UserDefaults.standard.string(forKey: "broadcastinactive")!
        if(jidString != nil){
            let roomJID = XMPPJID(string: jidString)
            let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
            
            let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
            
            room.activate(xmppStream!)
            
            room.addDelegate(self, delegateQueue: DispatchQueue.main)
            
            // If the room is not existing, server will create one.
            //room.join(usingNickname: xmppStream?.myJID.user, history: nil)
            //let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
            let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
            
            let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
            // history.addAttribute(withName: "maxstanzas", stringValue: "1")
            if(joindate == ""){
                isSetInactiveTime = false
                history.addAttribute(withName: "maxchars", stringValue: "0")
                
            }
            else{
                let mili: Double = (joindate as NSString).doubleValue
                //print(mili)
                
                let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
                
                //print(myMilliseconds.dateFull)
                
                let calendar = NSCalendar.autoupdatingCurrent
                let timeStampTmp = calendar.date(byAdding: .minute, value: -0, to: myMilliseconds.dateFull)
                // let timeStampTmp = calendar.date(byAdding: .minute, value: -1, to: myMilliseconds.dateFull)
                //print(timeStampTmp)
                let formatter = DateFormatter()
                formatter.dateFormat = "yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"
                //formatter.dateStyle = DateFormatter.Style.full
                //formatter.timeStyle = DateFormatter.Style.long
                
                formatter.timeZone = NSTimeZone(name: "UTC") as TimeZone?//TimeZone.current
                let timeStamp = formatter.string(from: timeStampTmp as! Date)
                let now = Date()
                let birthday: Date = myMilliseconds.dateFull as Date
                let calendar1 = Calendar.current
                
                let ageComponents = calendar1.dateComponents([.day], from: birthday, to: now)
                let timebefore = Int64(ageComponents.day!)
                print(timebefore)
                let day = UserDefaults.standard.integer(forKey: "broadcastduration")
                
                if(timebefore > day){
                    isSetInactiveTime = true
                    history.addAttribute(withName: "maxstanzas", stringValue: "1")
                    
                    history.addAttribute(withName: "since", stringValue: timeStamp)
                }
                else{
                    isSetInactiveTime = false
                    history.addAttribute(withName: "maxchars", stringValue: "0")
                }
                
            }
            room.join(usingNickname: myJID!, history: history)
            
        }
    }
    func joinRoomOnly(with jidString: String, delegate: XMPPRoomDelegate) -> XMPPRoom {
        
        let roomJID = XMPPJID(string: jidString)
        let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
        
        let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
        
        room.activate(xmppStream!)
        
        room.addDelegate(delegate, delegateQueue: DispatchQueue.main)
        
        // If the room is not existing, server will create one.
        //room.join(usingNickname: xmppStream?.myJID.user, history: nil)
        //let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
        let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
        
        let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
        history.addAttribute(withName: "maxchars", stringValue: "0")
        
        /*let mili: Double = (lastOfflineDate as NSString).doubleValue
         
         let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
         
         
         //let dt = NSDate().timeIntervalSince1970 * 1000
         //print(dt.description)
         print(myMilliseconds.dateFull.description)
         let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
         history.addAttribute(withName: "since", stringValue: myMilliseconds.dateFull.description)*/
        
        
        room.join(usingNickname: myJID!, history: history)
        
        
        return room
    }
    func joinRoomTrivia(with jidString: String)  {
        
        let roomJID = XMPPJID(string: jidString)
        let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
        
        let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
        
        room.activate(xmppStream!)
        
        room.addDelegate(self, delegateQueue: DispatchQueue.main)
        
        // If the room is not existing, server will create one.
        //room.join(usingNickname: xmppStream?.myJID.user, history: nil)
        //let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
        var myJID: String? = ""
        let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
        if(!istriviauser){
            myJID = UserDefaults.standard.string(forKey: "userJID")
        }
        else{
            myJID = UserDefaults.standard.string(forKey: "triviauser")
        }
        let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
        let array = Last_activity_date.rows(filter:"activityType = 'lastoflinedate'") as! [Last_activity_date]
        if(array.count != 0){
            let disnarysound = array[0]
            let offlineValue = disnarysound.value(forKey: "activity_date") as! Int
            let mili: Double = Double(offlineValue)
            
            let calendar = NSCalendar.autoupdatingCurrent
            let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
            let timeStampTmp = calendar.date(byAdding: .minute, value: -1, to: myMilliseconds.dateFull)
            // let timeStampTmp = calendar.date(byAdding: .minute, value: -1, to: myMilliseconds.dateFull)
            //print(timeStampTmp)
            let formatter = DateFormatter()
            formatter.dateFormat = "yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'"
            //formatter.dateStyle = DateFormatter.Style.full
            //formatter.timeStyle = DateFormatter.Style.long
            
            formatter.timeZone = NSTimeZone(name: "UTC") as TimeZone?//TimeZone.current
            let timeStamp = formatter.string(from: timeStampTmp as! Date)
            history.addAttribute(withName: "since", stringValue: timeStamp)
        }
        else{
              history.addAttribute(withName: "maxchars", stringValue: "0")
        }
      
        
        /*let mili: Double = (lastOfflineDate as NSString).doubleValue
         
         let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
         
         
         //let dt = NSDate().timeIntervalSince1970 * 1000
         //print(dt.description)
         print(myMilliseconds.dateFull.description)
         let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
         history.addAttribute(withName: "since", stringValue: myMilliseconds.dateFull.description)*/
        
        if(myJID != nil){
        room.join(usingNickname: myJID!, history: history)
        }
        
       // return room
    }
    func joinRoomOnlyforGroup(with jidString: String, delegate: XMPPRoomDelegate, joindate: Double) -> XMPPRoom {
        
        let roomJID = XMPPJID(string: jidString)
        let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
        
        let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
        
        room.activate(xmppStream!)
        
        room.addDelegate(delegate, delegateQueue: DispatchQueue.main)
        
        // If the room is not existing, server will create one.
        //room.join(usingNickname: xmppStream?.myJID.user, history: nil)
        //let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
        let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
        
        /*  let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
         history.addAttribute(withName: "maxchars", stringValue: "0")*/
        
        let mili: Double = joindate//(joindate as NSString).doubleValue
        
        let myMilliseconds: UnixTime = UnixTime(mili/1000.0)
        
        
        //let dt = NSDate().timeIntervalSince1970 * 1000
        //print(dt.description)
        //print(myMilliseconds.dateFull.description)
        let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
        history.addAttribute(withName: "since", stringValue: myMilliseconds.dateFull.description)
        
        
        room.join(usingNickname: myJID!, history: history)
        
        
        return room
    }
    // MUCRoomDelegate
    public func xmppRoomDidCreate(_ sender: XMPPRoom) {
        // print("xmppRoomDidCreate")
        
        // I prefer configure right after created
        sender.fetchConfigurationForm()
    }
    
    public func xmppRoomDidJoin(_ sender: XMPPRoom) {
        //print("xmppRoomDidJoin")
        //print(sender.roomSubject)
    }
    
    public func xmppRoom(_ sender: XMPPRoom, didFetchConfigurationForm configForm: DDXMLElement) {
        // print("didFetchConfigurationForm")
        
        let newForm = configForm.copy() as! DDXMLElement
        
        for field in newForm.elements(forName: "field") {
            
            if let _var = field.attributeStringValue(forName: "var") {
                
                switch _var {
                case "muc#roomconfig_persistentroom":
                    field.remove(forName: "value")
                    field.addChild(DDXMLElement(name: "value", numberValue: 1))
                    
                case "muc#roomconfig_roomname":
                    field.remove(forName: "value")
                    field.addChild(DDXMLElement(name: "value", stringValue: banterRoomName))
                    
                case "muc#roomconfig_roomdesc":
                    field.remove(forName: "value")
                    field.addChild(DDXMLElement(name: "value", stringValue: banterRoomName))
                    
                case "muc#roomconfig_publicroom":
                    field.remove(forName: "value")
                    field.addChild(DDXMLElement(name: "value", numberValue: 1))
                    
                case "muc#roomconfig_membersonly":
                    field.remove(forName: "value")
                    field.addChild(DDXMLElement(name: "value", numberValue: 0))
                    
                // other configures
                default:
                    break
                }
                
            }
            
        }
        
        sender.configureRoom(usingOptions: newForm)
    }
    
    public func xmppRoom(_ sender: XMPPRoom, didConfigure iqResult: XMPPIQ) {
        //print("didConfigure")
        // print(self.curRoomType)
        if(self.curRoomType == "banter")
        {
            
            //print(sender.roomSubject)
            //print(sender.description)
            //Now we will invite fans to the room
            /*
             Moved to savebanterroom response
             let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
             for invite in banterJIDs
             {
             let inviteArrUser = invite.components(separatedBy: "/")
             let inviteUser = inviteArrUser[0]
             let userJid = XMPPJID(string: inviteUser)
             if(myJID != inviteUser)
             {
             sender.inviteUser(userJid, withMessage: self.banterRoomName)
             }
             }
             */
            //sender.inviteUsers(banterJIDs, withMessage: self.banterRoomName)
            objXmppRoom = sender
            lastcreateroom = banterRoomId
           Saveroom(avatar: groupAvtar, invited: strBanterJIDs,opponentteam: self.aponentTeamId,supportteam: self.myTeamId,roomtype: "banter",roomid: self.banterRoomId)
            //Code to saveroom.
          /*  var dictRequest = [String: AnyObject]()
            dictRequest["cmd"] = "saveroom" as AnyObject
            
            // print(strBanterJIDs)
            
            
            
            do {
                
                //let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
                // let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
                //print(strInvited)
                
                //Creating Request Data
                let userJid: String? = UserDefaults.standard.string(forKey: "userJID")
                let arrdUserJid = userJid?.components(separatedBy: "@")
                let userUserJid = arrdUserJid?[0]
                var dictRequestData = [String: AnyObject]()
                lastcreateroom = banterRoomId
                dictRequestData["roomid"] = self.banterRoomId as AnyObject
                dictRequestData["roomtype"] = "banter" as AnyObject
                dictRequestData["supportteam"] = self.myTeamId as AnyObject
                dictRequestData["opponentteam"] = self.aponentTeamId as AnyObject
                dictRequestData["invited"] = strBanterJIDs as AnyObject
                dictRequestData["username"] = userUserJid as AnyObject
                dictRequestData["avatar"] = groupAvtar as AnyObject
                let myNSData = self.banterRoomName.data(using: String.Encoding.utf8)! as NSData
                // print("saveroom\(self.banterRoomName)")
                //Encode to base64
                let myBase64Data = myNSData.base64EncodedData(options: NSData.Base64EncodingOptions.endLineWithLineFeed)
                
                let resultNSString = NSString(data: myBase64Data as Data, encoding: String.Encoding.utf8.rawValue)!
                
                dictRequestData["roomname"] = resultNSString as AnyObject
                dictRequest["requestData"] = dictRequestData as AnyObject
                //dictRequest.setValue(dictMobiles, forKey: "requestData")
                //print(dictRequest)
                
                let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
                // print(strSaveBanter)
                self.sendRequestToAPI(strRequestDict: strSaveBanter)
            } catch {
                // print(error.localizedDescription)
            }
            //End Code to saveroom.*/
            
        }
        else if(self.curRoomType == "group")
        {
            
            //print(sender.roomSubject)
            //print(sender.description)
            //Now we will invite fans to the room
            let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
            var dictRequest1 = [String: AnyObject]()
            var strGetBanterDetails = ""
            do {
                let time: Int64 = self.getUTCFormateDate()
                
                dictRequest1["time"] = time as AnyObject
                
                dictRequest1["roomname"] = self.banterRoomName as AnyObject
                dictRequest1["roomtype"] = "group" as AnyObject
                //dictRequest.setValue(dictMobiles, forKey: "requestData")
                //print(dictRequest)
                
                let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest1, options: .prettyPrinted)
                strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
            } catch {
                //print(error.localizedDescription)
            }
            let userJid: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrdUserJid = userJid?.components(separatedBy: "@")
            let userUserJid = arrdUserJid?[0]
            for invite in groupJIDs
            {
                let inviteArrUser = invite.components(separatedBy: "/")
                let inviteUser = inviteArrUser[0]
                let userJid = XMPPJID(string: inviteUser)
                if(myJID != inviteUser)
                {
                    sender.inviteUser(userJid!, withMessage: strGetBanterDetails)
                    let uuid = UUID().uuidString
                    let time: Int64 = getUTCFormateDate()
                    sendMessageToServer(inviteUser as AnyObject as! String, messageContent: userUserJid! + " has added you in Group: " + self.banterRoomName, messageType: "header", messageTime: time, messageId: uuid, roomType: "group", messageSubType: "invite", roomid: self.groupId, roomName: self.banterRoomName )
                    
                }
            }
            
            
            //DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            
            
            //}
            
            //sender.inviteUsers(banterJIDs, withMessage: self.banterRoomName)
            
            /*let userJid = XMPPJID(string: "+919144555556@amazomcdn.com")
             sender.inviteUser(userJid, withMessage: "You are invited to this banter room. You can join this banter room by tap on join button.")
             
             let userJid2 = XMPPJID(string: "+919977564444@amazomcdn.com")
             sender.inviteUser(userJid2, withMessage: "You are invited to this banter room. You can join this banter room by tap on join button.")*/
            
            //Now we call API to save room into database
            //Code to saveroom.
            Saveroom(avatar: Groupimagelink, invited: strGroupJIDs,opponentteam: 0,supportteam: 0,roomtype: "group",roomid: self.groupId)
            /*var dictRequest = [String: AnyObject]()
            dictRequest["cmd"] = "saveroom" as AnyObject
            
            //print(strGroupJIDs)
            
            
            
            do {
                
                /*let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
                 let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
                 print(strInvited)*/
                
                //Creating Request Data
                var dictRequestData = [String: AnyObject]()
                lastcreateroom = groupId
                dictRequestData["roomid"] = self.groupId as AnyObject
                dictRequestData["roomtype"] = "group" as AnyObject
                dictRequestData["supportteam"] = 0 as AnyObject
                dictRequestData["opponentteam"] = 0 as AnyObject
                dictRequestData["invited"] = strGroupJIDs as AnyObject
                dictRequestData["username"] = userUserJid as AnyObject
                dictRequestData["avatar"] = Groupimagelink as AnyObject
               // print(self.banterRoomName)
                let myNSData = self.banterRoomName.data(using: String.Encoding.utf8)! as NSData
                
                //Encode to base64
                let myBase64Data = myNSData.base64EncodedData(options: NSData.Base64EncodingOptions.endLineWithLineFeed)
                
                let resultNSString = NSString(data: myBase64Data as Data, encoding: String.Encoding.utf8.rawValue)!
                
                dictRequestData["roomname"] = resultNSString as AnyObject
                dictRequest["requestData"] = dictRequestData as AnyObject
                //dictRequest.setValue(dictMobiles, forKey: "requestData")
                //print(dictRequest)
                
                let dataSaveGroup = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                let strSaveGroup = NSString(data: dataSaveGroup, encoding: String.Encoding.utf8.rawValue)! as String
                //print(strSaveGroup)
                self.sendRequestToAPI(strRequestDict: strSaveGroup)
            } catch {
                //print(error.localizedDescription)
            }
            //End Code to saveroom.*/
            
        }
        
    }
    
    func xmppMUC(_ sender: XMPPMUC, roomJID: XMPPJID,didReceiveInvitation message: XMPPMessage){
        
        // print("didReceiveInvitation")
        // print(sender.description)
        //print(message)
        // this code convert into single chat when subtype = invite
        /*  let x = message?.forName("x")
         if (x != nil)
         {
         let eleInvite = x?.forName("invite")
         if (eleInvite != nil)
         {
         let reason = eleInvite?.forName("reason")
         if (reason != nil)
         {
         let messageFrom = message?.attributeStringValue(forName: "from")
         let arrMessageFrom = messageFrom?.components(separatedBy: "/")
         let messageFromTrim = arrMessageFrom?[0]
         let reasonStr = reason?.stringValue
         if let data = reasonStr?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
         do {
         let code:String = "in"
         let json = try JSONSerialization.jsonObject(with: data, options: [])
         let dictCountry:NSDictionary = (json as? NSDictionary)!;
         
         self.banterRoomName = (dictCountry.value(forKey: "roomname") as? String)!
         //UIImage(named:(dict2?.value(forKey: "flag") as? String)!)
         //countryImage?.image = UIImage(named:(dictCountry.value(forKey: "flag") as? String)!)
         UserDefaults.standard.setValue((dictCountry.value(forKey: "time") as Any), forKey: messageFromTrim!)
         UserDefaults.standard.synchronize()
         
         } catch let error as NSError {
         print(error)
         }
         //(reason?.value(forKey: "groupname"))! as! String
         //Join Banter Room
         //let messageTo = message?.attributeStringValue(forName: "to")
         
         //let recBanterNickName = arrMessageFrom?[1]
         //let time: Int64 = self.getUTCFormateDate()
         
         /*print(messageFromTrim ?? "") // This is Room JID
         let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
         let roomJID = XMPPJID(string: messageFromTrim)
         let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
         room.activate(xmppStream)
         room.addDelegate(self, delegateQueue: DispatchQueue.main)
         // If the room is not existing, server will create one.
         let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
         
         room.join(usingNickname: newBanterNick, history: nil)*/
         
         //Will join this group when user will click on join button
         
         }
         
         //Call room details
         //Code to saveroom.
         var dictRequest = [String: AnyObject]()
         dictRequest["cmd"] = "getroomdetails" as AnyObject
         
         
         
         do {
         //Creating Request Data
         var dictRequestData = [String: AnyObject]()
         
         dictRequestData["roomid"] = messageFromTrim as AnyObject
         
         dictRequest["requestData"] = dictRequestData as AnyObject
         //dictRequest.setValue(dictMobiles, forKey: "requestData")
         //print(dictRequest)
         
         let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
         let strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
         // print(strGetBanterDetails)
         self.sendRequestToAPI(strRequestDict: strGetBanterDetails)
         } catch {
         print(error.localizedDescription)
         }
         //End Code to saveroom.
         //These line will be shift in IQ
         /*let messageType = message?.attributeStringValue(forName: "type")
         
         let recMessageContent: String = reason!.stringValue!
         //let recMessageTime = jsonDataMessage?.value(forKey: "time")
         
         //let messageId = message?.attributeStringValue(forName: "id")
         
         let messageTo = message?.attributeStringValue(forName: "to")
         let messageFrom = message?.attributeStringValue(forName: "from")
         let arrMessageFrom = messageFrom?.components(separatedBy: "/")
         let messageFromTrim = arrMessageFrom?[0]
         let recBanterNickName = arrMessageFrom?[1]
         let time: Int64 = self.getUTCFormateDate()
         
         print(messageFromTrim ?? "") // This is Room JID
         let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
         let roomJID = XMPPJID(string: messageFromTrim)
         let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
         room.activate(xmppStream)
         room.addDelegate(self, delegateQueue: DispatchQueue.main)
         
         // If the room is not existing, server will create one.
         let newBanterNick: String = UserDefaults.standard.string(forKey: "banterNickName")!
         
         room.join(usingNickname: newBanterNick, history: nil)
         
         //Now create message for this room
         //Code to prepare data before send to server // text is for temp
         self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "text", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: messageType!, recBanterNickName: recBanterNickName!)
         
         let notificationName = Notification.Name("MessageReceivedFromServer")
         NotificationCenter.default.post(name: notificationName, object: nil)*/
         
         
         }
         }
         }*/
        
    }
    //Banter
    func xmppRoom(_ sender: XMPPRoom, didReceive message: XMPPMessage, fromOccupant occupantJID: XMPPJID)
    {
        // print("didReceive Message")
        // print(sender.roomSubject)
        // print(sender.isJoined)
        
        let messageIQ: String = ""
        let iqMessageId: String = ""
       
        /*let eleCompose = message?.forName("composing")
         if (eleCompose != nil)
         {
         messageIQ = "composing"
         }
         
         if(messageIQ == "composing")
         {
         print("composing")
         }
         else
         {*/
        
        /*let eleRec = message?.forName("received")
         if (eleRec != nil)
         {
         iqMessageId = (eleRec?.attributeStringValue(forName: "id"))!
         if (!iqMessageId.isEmpty)
         {
         messageIQ = "received"
         }
         
         }
         
         let eleRead = message?.forName("read")
         if (eleRead != nil)
         {
         iqMessageId = (eleRead?.attributeStringValue(forName: "id"))!
         if (!iqMessageId.isEmpty)
         {
         messageIQ = "read"
         }
         
         }*/
         let messageinfo:[String: AnyObject] = ["message": message as AnyObject]
        Clslogging.logverbose(State: "muc message", userinfo: messageinfo)
               
        let eleBody = message.element(forName: "body")//forName("body")
        if (eleBody != nil)
        {
            let messageContent: String = (eleBody?.stringValue)!
            if(!messageContent.isEmpty)
            {
                
                
                //let msgTo = message?.attributeStringValue(forName: "to")
                
                //print(occupantJID.full())
                //print(msgTo ?? " No to id")
                //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                //let arrMsgTo = msgTo?.components(separatedBy: "/")
                //let msgToTrim = arrMsgTo?[0]
                let dupMessageId = message.attributeStringValue(forName: "id")
                /*var duplicateMsgId: String = ""
                 if(dupMessageId != nil)
                 {
                 duplicateMsgId = dupMessageId!
                 }
                 else
                 {
                 duplicateMsgId = ""
                 }*/
                if(dupMessageId != nil){
                    let messageFromTemp = message.attributeStringValue(forName: "from")
                    let arrMessageFromTemp = messageFromTemp?.components(separatedBy: "/")
                    let messageFromTrimTemp = arrMessageFromTemp?[0]
                    /*
                     var msgSentByUserToGroup: String = ""
                     print(arrMessageFromTemp?.count ?? "")
                     if((arrMessageFromTemp?.count)! > 1)
                     {
                     msgSentByUserToGroup = (arrMessageFromTemp?[1])!
                     }*/
                    
                    
                    //New code to set status of message
                    if(messageIQ == "received")
                    {
                        if(self.curRoomType != "chat") //Temp
                        {
                            if messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) != nil
                            {
                                //do {
                                
                                //let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                
                                //let recDelUserJid: String = (jsonDataMessage?.value(forKey: "userJid") as? String)!
                                //let recDelTime: Int64 = jsonDataMessage?.value(forKey: "time") as! Int64
                                
                                //let arrDelUserJid = recDelUserJid.components(separatedBy: "/")
                                //let userDelUserJid = arrDelUserJid[0]
                                
                                //self.funGetSetLocalChats(messageId: iqMessageId, chatStatus: "delivered", deleverUsers: userDelUserJid, deleverTime: recDelTime, recReadUserJid: messageFromTrimTemp!)
                                
                                //} catch let error as NSError {
                                // print(error)
                                //}
                            }
                        }
                        
                    }
                    else if(messageIQ == "read")
                    {
                        if(self.curRoomType != "chat") //Temp
                        {
                            if messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) != nil
                            {
                                //do {
                                
                                //let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                
                                //let recReadUserJid: String = (jsonDataMessage?.value(forKey: "userJid") as? String)!
                                //let recReadTime: Int64 = jsonDataMessage?.value(forKey: "time") as! Int64
                                
                                //let arrReadUserJid = recReadUserJid.components(separatedBy: "/")
                                //let userReadUserJid = arrReadUserJid[0]
                                
                                //self.funGetSetLocalChats(messageId: iqMessageId, chatStatus: "received", receivedUsers: userReadUserJid, receivedTime: recReadTime, recReadUserJid: messageFromTrimTemp!)
                                
                                //} catch let error as NSError {
                                // print(error)
                                //}
                            }
                        }
                        
                        
                    }
                    else
                    {
                        if let dt = arrAllChats[messageFromTrimTemp!]
                        {
                            //print("dupMessageId:",dupMessageId )
                            let tempArrUserChat2 = dt["Chats"] as! [AnyObject]
                            var isDuplicateMessage: Bool = false
                            let _: [AnyObject] = tempArrUserChat2.filter({ (text) -> Bool in
                                let tmp: NSDictionary = text as! NSDictionary
                                
                                let msgId: String = tmp.value(forKey: "messageId") as! String
                                // print("dupMessageId:")
                                //print("messageId:",msgId)
                                
                                if(msgId == dupMessageId)
                                {
                                    
                                    isDuplicateMessage = true
                                    // print("isDuplicateMessage:",isDuplicateMessage)
                                    return true
                                }
                                else
                                {
                                    
                                    //isDuplicateMessage = false
                                    //print("isDuplicateMessage:",isDuplicateMessage)
                                    return false
                                }
                                //We have to check if duplicateMsgId is empty
                                
                                
                            })
                            //print("isDuplicateMessage Ravi:",isDuplicateMessage)
                            if(isDuplicateMessage == false)
                            {
                                //if(msgToTrim != login)
                                //{
                                let messageType = message.attributeStringValue(forName: "type")
                                if(messageType == "groupchat") //|| messageType == "error") //Error is tempor
                                {
                                    
                                    if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                    {
                                        do {
                                            let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                            
                                            if let recMessageType = jsonDataMessage?.value(forKey: "type")
                                            {
                                                //Manupulate this to show name in contacts
                                                let recBanterNickName: String = ""
                                                let receivedMessageType = recMessageType as! String
                                                
                                                
                                                //Else of this we have to manage image/video/files etc.
                                                if(receivedMessageType == "text")
                                                {
                                                    let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    var messageSubType :String = ""
                                                    if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                    {
                                                        messageSubType = sub_type as! String
                                                    }                                                     //let mysupportteam: Int = (jsonDataMessage?.value(forKey: "supportteam") as? Int)!
                                                    var mysupportteam: Int64 = 0
                                                    //let isJoined: Bool = sender.isJoined
                                                    if(recRoomType == "banter" || recRoomType == "teambr" ){
                                                        mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                    }
                                                    let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    
                                                    
                                                    /*if(!msgSentByUserToGroup.isEmpty)
                                                     {
                                                     messageTo = msgSentByUserToGroup
                                                     }*/
                                                    
                                                    
                                                    var roomSubject: String = ""
                                                    if let roomSub = sender.roomSubject
                                                    {
                                                        roomSubject = roomSub
                                                    }
                                                    //let isJoined: Bool = sender.isJoined
                                                    
                                                    
                                                    
                                                    /*if #available(iOS 10.0, *) {
                                                     let content = UNMutableNotificationContent()
                                                     content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                     content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                     arguments: nil)
                                                     content.sound = UNNotificationSound.default()
                                                     let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                     }*/
                                                    
                                                    
                                                    //Code to prepare data before send to server
                                                    self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, banterRoomName: roomSubject, isJoined: "yes", msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam, messageSubType:  messageSubType)
                                                    
                                                    //We have recevied message from user so he will always To for me
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    
                                                    if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                    {
                                                        self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                        //self.funGetSetLocalChats(messageId: messageId!, chatStatus: "read", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                    }
                                                    if (self.isOntriviaChatsView && (messageFromTrim! == self.toUserJID))
                                                    {
                                                        self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                        let notificationName = Notification.Name("triviaMessageReceivedFromServer")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                        //self.funGetSetLocalChats(messageId: messageId!, chatStatus: "read", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                    }
                                                    else{
                                                    let notificationName = Notification.Name("messageInReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if (self.isOnChatsView == true)
                                                    {
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    //End
                                                    
                                                    
                                                    
                                                }
                                                else if(receivedMessageType == "header")
                                                {
                                                    let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    let objUserName: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    let arrUserName = objUserName.components(separatedBy: "@")
                                                    let objUserNameTrim = arrUserName[0]
                                                    /*if(!msgSentByUserToGroup.isEmpty)
                                                     {
                                                     messageTo = msgSentByUserToGroup
                                                     }*/
                                                    let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                    let recSubType: String = (jsonDataMessage?.value(forKey: "subtype") as? String)!
                                                    
                                                    let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    
                                                    var roomSubject: String = ""
                                                    if let roomSub = sender.roomSubject
                                                    {
                                                        print(roomSub)
                                                        roomSubject = roomSub
                                                    }
                                                    //let isJoined: Bool = sender.isJoined
                                                    
                                                    if(recRoomType == "banter")
                                                    {
                                                        if(recSubType == "roomuserleft")
                                                        {
                                                            if(login == objUserName){
                                                                let roomJID = XMPPJID(string: messageFromTrim!)
                                                                let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                
                                                                let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                
                                                                room.activate(self.xmppStream!)
                                                                
                                                                room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                if(room.isJoined){
                                                                    
                                                                    room.leave()
                                                                }
                                                                else{
                                                                    let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                    history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                    let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                    
                                                                    
                                                                    room.join(usingNickname: myJID!, history: history)
                                                                    
                                                                    room.leave()
                                                                }
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Sorry to see you quit this Banter Room.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject, isJoined: "no")
                                                                
                                                            }
                                                            else
                                                            {
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: objUserNameTrim + " quit.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                            }
                                                            
                                                            
                                                            getbanterroomusers(roomid: messageFromTrim!)
                                                                                                                     
                                                            
                                                            //Code to prepare data before send to server
                                                            //Refresh banter users details
                                                            // if(isOnUserDetailView == true)
                                                            //{
                                                            //Post notification if user is on chats window and received any message
                                                            //let notificationName = Notification.Name("UserdetailRefresh")
                                                            // NotificationCenter.default.post(name: notificationName, object: nil)
                                                           
                                                         
                                                            //  }
                                                            
                                                        }
                                                        else if(recSubType == "banterinvite")
                                                        {
                                                            self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                            
                                                        }
                                                        else if(recSubType == "roomuseradd")
                                                        {
                                                            var buser = ""
                                                            if(allPhoneContacts.count>0){
                                                                
                                                                
                                                                var strName1: String = ""
                                                                _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                    let tmp: NSDictionary = text as! NSDictionary
                                                                    let val: String = tmp.value(forKey: "jid") as! String
                                                                    let val2: String = objUserName
                                                                    //let arrReadUserJid = val.components(separatedBy: "@")
                                                                    //let userjidTrim: String = arrReadUserJid[0]
                                                                    
                                                                    
                                                                    if(val.contains(val2))
                                                                    {
                                                                        let ind = tmp.value(forKey: "name") as! String
                                                                        //print(ind)
                                                                        //tempPoneContacts.removeObject(at: Int(ind))
                                                                        if(ind == " " || ind == nil)
                                                                        {
                                                                            strName1 = val2
                                                                        }
                                                                        else{
                                                                            strName1 = tmp.value(forKey: "name") as! String
                                                                        }
                                                                        
                                                                        //return true
                                                                    }
                                                                    
                                                                    // }
                                                                    
                                                                    
                                                                    return false
                                                                })
                                                                
                                                                
                                                                if(!strName1.isEmpty)
                                                                {
                                                                    buser = strName1
                                                                }
                                                                else{
                                                                    let arrUserName = objUserName.components(separatedBy: "@")
                                                                    let objUserNameTrim = arrUserName[0]
                                                                    buser = objUserNameTrim
                                                                }}
                                                            else{
                                                                let arrUserName = objUserName.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                buser = objUserNameTrim
                                                            }
                                                            if(login == objUserName){
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                            }
                                                            else
                                                            {
                                                                //Code to prepare data before send to server
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: buser + " has joined", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                            }
                                                            getbanterroomusers(roomid: messageFromTrim!)
                                                            //Refresh banter users details
                                                            //  if(isOnUserDetailView == true)
                                                            // {
                                                            //Post notification if user is on chats window and received any message
                                                            //let notificationName = Notification.Name("UserdetailRefresh")
                                                            // NotificationCenter.default.post(name: notificationName, object: nil)
                                                            
                                                            /*var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                            
                                                            //Creating Request Datap
                                                            var dictRequestData = [String: AnyObject]()
                                                            
                                                            dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                            dictRequest["requestData"] = dictRequestData as AnyObject
                                                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                            //print(dictRequest)
                                                            do {
                                                                let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                //print(strMyTeams)
                                                                self.sendRequestToAPI(strRequestDict: strMyTeams)
                                                            } catch {
                                                                //  print(error.localizedDescription)
                                                            }*/
                                                            //  }
                                                        }
                                                        else if(recSubType == "deletegroup")
                                                        {
                                                            
                                                            
                                                            
                                                            if(login == objUserName){
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: "You have closed this Banter Room.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject, banterStatus: "closed")
                                                            }
                                                            else
                                                            {
                                                                //Code to prepare data before send to server
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: objUserNameTrim + " closed this Banter Room.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject, banterStatus: "closed")
                                                            }
                                                            let roomJID = XMPPJID(string: messageFromTrim!)
                                                            let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                            
                                                            let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                            
                                                            room.activate(self.xmppStream!)
                                                            
                                                            room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                            //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                            if(room.isJoined){
                                                                
                                                                room.leave()
                                                            }
                                                            else{
                                                                let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                
                                                                
                                                                room.join(usingNickname: myJID!, history: history)
                                                                
                                                                room.leave()
                                                            }
                                                            
                                                            if(messageFromTrim == toUserJID){
                                                                if(self.isOnChatView == true )
                                                                {
                                                                    //Post notification if user is on chats window and received any message
                                                                    let notificationName = Notification.Name("closeBanterFromServer")
                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                }
                                                            }
                                                            
                                                        }
                                                        else  if(recSubType == "roomuserblocked")
                                                        {
                                                            let blockedusername: String = (jsonDataMessage?.value(forKey: "blockedusername") as? String)!
                                                            var buser = ""
                                                            let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                            //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                            var allPhoneContacts = NSArray()
                                                            
                                                            let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                            if localAllcontacts != nil
                                                            {
                                                                //Code to parse json data
                                                                if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                    do {
                                                                        allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                        
                                                                    } catch let error as NSError {
                                                                        print(error)
                                                                    }
                                                                }
                                                            }
                                                            if(allPhoneContacts.count>0){
                                                                
                                                                
                                                                var strName1: String = ""
                                                                _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                    let tmp: NSDictionary = text as! NSDictionary
                                                                    let val: String = tmp.value(forKey: "jid") as! String
                                                                    let val2: String = blockedusername
                                                                    //let arrReadUserJid = val.components(separatedBy: "@")
                                                                    //let userjidTrim: String = arrReadUserJid[0]
                                                                    
                                                                    
                                                                    if(val.contains(val2))
                                                                    {
                                                                        let ind = tmp.value(forKey: "name") as! String
                                                                        //print(ind)
                                                                        //tempPoneContacts.removeObject(at: Int(ind))
                                                                        if(ind == " " || ind == nil)
                                                                        {
                                                                            strName1 = val2
                                                                        }
                                                                        else{
                                                                            strName1 = tmp.value(forKey: "name") as! String
                                                                        }
                                                                        
                                                                        //return true
                                                                    }
                                                                    
                                                                    // }
                                                                    
                                                                    
                                                                    return false
                                                                })
                                                                
                                                                
                                                                if(!strName1.isEmpty)
                                                                {
                                                                    buser = strName1
                                                                }
                                                                else{
                                                                    buser = blockedusername
                                                                }}
                                                            else{
                                                                buser = blockedusername
                                                            }
                                                            if(login?.contains(blockedusername))!{
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Manager  has blocked you.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", isJoined: "blocked")
                                                                let roomJID = XMPPJID(string: messageFromTrim!)
                                                                let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                
                                                                let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                
                                                                room.activate(self.xmppStream!)
                                                                
                                                                room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                if(room.isJoined){
                                                                    
                                                                    room.leave()
                                                                }
                                                                else{
                                                                    let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                    history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                    let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                    
                                                                    
                                                                    room.join(usingNickname: myJID!, history: history)
                                                                    
                                                                    room.leave()
                                                                }
                                                                
                                                                let pickedAllAssets:[String: String] = ["banterstatus": "blocked"]
                                                                //print(pickedAllAssets)
                                                                
                                                                if(self.isOnChatView)
                                                                {
                                                                    let notificationName = Notification.Name("blockunblocknotify")
                                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                                }
                                                                
                                                            }
                                                            else if(login?.contains(objUserNameTrim) )!{
                                                                let arrUserName = buser.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent:  "You have successfully blocked "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                            }
                                                            else
                                                            {
                                                                let arrUserName = buser.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Manager has blocked "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                            }
                                                            
                                                            
                                                            getbanterroomusers(roomid: messageFromTrim!)
                                                            
                                                            //Code to prepare data before send to server
                                                            //Refresh banter users details
                                                            // if(isOnUserDetailView == true)
                                                            //{
                                                            //Post notification if user is on chats window and received any message
                                                            //let notificationName = Notification.Name("UserdetailRefresh")
                                                            // NotificationCenter.default.post(name: notificationName, object: nil)
                                                           
                                                           /* var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                            
                                                            //Creating Request Datap
                                                            var dictRequestData = [String: AnyObject]()
                                                            
                                                            dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                            dictRequest["requestData"] = dictRequestData as AnyObject
                                                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                            //print(dictRequest)
                                                            do {
                                                                let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                // print(strMyTeams)
                                                                self.sendRequestToAPI(strRequestDict: strMyTeams)
                                                            } catch {
                                                                // print(error.localizedDescription)
                                                            }*/
                                                            //  }
                                                            
                                                        }
                                                        else  if(recSubType == "roomuserunblocked")
                                                        {
                                                            let blockedusername: String = (jsonDataMessage?.value(forKey: "unblockedusername") as? String)!
                                                            /* if(login?.contains(blockedusername))!{
                                                             let roomJID = XMPPJID(string: messageFromTrim!)
                                                             let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                             
                                                             let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                             
                                                             room.activate(self.xmppStream)
                                                             
                                                             room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                             //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                             let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                             history.addAttribute(withName: "maxchars", stringValue: "0")
                                                             let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                             
                                                             
                                                             room.join(usingNickname: myJID, history: history)
                                                             
                                                             
                                                             self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Admin unblocked you", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", isJoined: "yes")
                                                             
                                                             }
                                                             else*/
                                                            var buser = ""
                                                            let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                            //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                            var allPhoneContacts = NSArray()
                                                            
                                                            let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                            if localAllcontacts != nil
                                                            {
                                                                //Code to parse json data
                                                                if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                    do {
                                                                        allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                        
                                                                    } catch let error as NSError {
                                                                        print(error)
                                                                    }
                                                                }
                                                            }
                                                            if(allPhoneContacts.count>0){
                                                                
                                                                
                                                                var strName1: String = ""
                                                                _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                    let tmp: NSDictionary = text as! NSDictionary
                                                                    let val: String = tmp.value(forKey: "jid") as! String
                                                                    let val2: String = blockedusername
                                                                    //let arrReadUserJid = val.components(separatedBy: "@")
                                                                    //let userjidTrim: String = arrReadUserJid[0]
                                                                    
                                                                    
                                                                    if(val.contains(val2))
                                                                    {
                                                                        let ind = tmp.value(forKey: "name") as! String
                                                                        //print(ind)
                                                                        //tempPoneContacts.removeObject(at: Int(ind))
                                                                        if(ind == " " || ind == nil)
                                                                        {
                                                                            strName1 = val2
                                                                        }
                                                                        else{
                                                                            strName1 = tmp.value(forKey: "name") as! String
                                                                        }
                                                                        
                                                                        //return true
                                                                    }
                                                                    
                                                                    // }
                                                                    
                                                                    
                                                                    return false
                                                                })
                                                                
                                                                
                                                                if(!strName1.isEmpty)
                                                                {
                                                                    buser = strName1
                                                                }
                                                                else{
                                                                    buser = blockedusername
                                                                }}
                                                            else{
                                                                buser = blockedusername
                                                            }
                                                            if(login?.contains(objUserNameTrim) )!{
                                                                let arrUserName = buser.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent:  "You have successfully unblocked  "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                let uuid = UUID().uuidString
                                                                let time: Int64 = getUTCFormateDate()
                                                                let unblockedUserJid: String = blockedusername //+ JIDPostfix
                                                                if(recRoomType == "banter")
                                                                {
                                                                    sendMessageToServer(unblockedUserJid as AnyObject as! String, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "chat", messageSubType: "roomuserunblocked", roomid: messageFromTrim! )
                                                                }
                                                                else if(recRoomType == "group"){
                                                                    sendMessageToServer(unblockedUserJid as AnyObject as! String, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "chat", messageSubType: "grouproomuserunblocked", roomid: messageFromTrim! )
                                                                }
                                                                
                                                                // sendMessageToServer(messageFromTrim as AnyObject as! String, messageContent: "Admin unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "banter", messageSubType: "roomuserunblocked", roomid: messageFromTrim! )
                                                                
                                                            }
                                                            else if(!(login?.contains(blockedusername))! )
                                                            {
                                                                let arrUserName = buser.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Manager has unblocked  "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                            }
                                                            
                                                            getbanterroomusers(roomid: messageFromTrim!)
                                                            
                                                            
                                                            //Code to prepare data before send to server
                                                            //Refresh banter users details
                                                            // if(isOnUserDetailView == true)
                                                            //{
                                                            //Post notification if user is on chats window and received any message
                                                            //let notificationName = Notification.Name("UserdetailRefresh")
                                                            // NotificationCenter.default.post(name: notificationName, object: nil)
                                                            
                                                            /*var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                            
                                                            //Creating Request Datap
                                                            var dictRequestData = [String: AnyObject]()
                                                            
                                                            dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                            dictRequest["requestData"] = dictRequestData as AnyObject
                                                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                            //print(dictRequest)
                                                            do {
                                                                let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                // print(strMyTeams)
                                                                self.sendRequestToAPI(strRequestDict: strMyTeams)
                                                            } catch {
                                                                // print(error.localizedDescription)
                                                            }*/
                                                            //  }
                                                            
                                                        }
                                                        else  if(recSubType == "coinsreceived")
                                                        {
                                                            let adminname: String = (jsonDataMessage?.value(forKey: "adminusername") as? String)!
                                                            
                                                            if(login == adminname){
                                                                //let aString = "This is my string"
                                                                let admintotalcoins: Int = (jsonDataMessage?.value(forKey: "admintotalcoins") as? Int)!
                                                                
                                                                let adminavailablecoins: Int = (jsonDataMessage?.value(forKey: "adminavailablecoins") as? Int)!
                                                                let coinsreceived: Int = (jsonDataMessage?.value(forKey: "coinsreceived") as! Int)
                                                                let messageContent = recMessageContent.replacingOccurrences(of:                                                               "Your Banter Room manage", with: "You")
                                                                
                                                                DispatchQueue.main.async {
                                                                    AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(String(coinsreceived))  FanCoins rewards for joining Banter room.\(self.GetvalueRedeemMesg(avilablecoin: adminavailablecoins))", fancoins: String(coinsreceived) )
                                                                }
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: messageContent, messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                AddCoin(fctotalcoin: admintotalcoins, fcavailablecoin: adminavailablecoins)
                                                            }
                                                            else{
                                                                // let coinsreceived: Int = (jsonDataMessage?.value(forKey: "coinsreceived") as! Int)
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                /*  DispatchQueue.main.async {
                                                                 HurrayAnimationIndicator.show((self.window?.rootViewController?.view)!, loadingText: "Your Banter room manager won \(String(coinsreceived)) FanCoins.\n\nLearn more", fancoins: String(coinsreceived) )
                                                                 }*/
                                                            }
                                                            
                                                        }
                                                    }
                                                        else  if(recRoomType == "teambr")
                                                                                                           {
                                                                                                               if(recSubType == "roomuserleft")
                                                                                                               {
                                                                                                                   if(login == objUserName){
                                                                                                                       let roomJID = XMPPJID(string: messageFromTrim!)
                                                                                                                       let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                                                                       
                                                                                                                       let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                                                                       
                                                                                                                       room.activate(self.xmppStream!)
                                                                                                                       
                                                                                                                       room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                                                                       //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                       if(room.isJoined){
                                                                                                                           
                                                                                                                           room.leave()
                                                                                                                       }
                                                                                                                       else{
                                                                                                                           let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                                                                           history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                                                                           let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                           
                                                                                                                           
                                                                                                                           room.join(usingNickname: myJID!, history: history)
                                                                                                                           
                                                                                                                           room.leave()
                                                                                                                       }
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Sorry to see you quit this Banter Room.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject, isJoined: "no")
                                                                                                                       
                                                                                                                   }
                                                                                                                   else
                                                                                                                   {
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: objUserNameTrim + " quit.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                                                                                   }
                                                                                                                   
                                                                                                                getbanterroomusers(roomid: messageFromTrim!)
                                                                                                                   
                                                                                                                   
                                                                                                                   //Code to prepare data before send to server
                                                                                                                   //Refresh banter users details
                                                                                                                   // if(isOnUserDetailView == true)
                                                                                                                   //{
                                                                                                                   //Post notification if user is on chats window and received any message
                                                                                                                   //let notificationName = Notification.Name("UserdetailRefresh")
                                                                                                                   // NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                         
                                                                                                                
                                                                                                                   //  }
                                                                                                                   
                                                                                                               }
                                                                                                               else if(recSubType == "banterinvite")
                                                                                                               {
                                                                                                                   self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                                                                                   
                                                                                                               }
                                                                                                               else if(recSubType == "roomuseradd")
                                                                                                               {
                                                                                                                   var buser = ""
                                                                                                                   if(allPhoneContacts.count>0){
                                                                                                                       
                                                                                                                       
                                                                                                                       var strName1: String = ""
                                                                                                                       _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                                                                           let tmp: NSDictionary = text as! NSDictionary
                                                                                                                           let val: String = tmp.value(forKey: "jid") as! String
                                                                                                                           let val2: String = objUserName
                                                                                                                           //let arrReadUserJid = val.components(separatedBy: "@")
                                                                                                                           //let userjidTrim: String = arrReadUserJid[0]
                                                                                                                           
                                                                                                                           
                                                                                                                           if(val.contains(val2))
                                                                                                                           {
                                                                                                                               let ind = tmp.value(forKey: "name") as! String
                                                                                                                               //print(ind)
                                                                                                                               //tempPoneContacts.removeObject(at: Int(ind))
                                                                                                                               if(ind == " " || ind == nil)
                                                                                                                               {
                                                                                                                                   strName1 = val2
                                                                                                                               }
                                                                                                                               else{
                                                                                                                                   strName1 = tmp.value(forKey: "name") as! String
                                                                                                                               }
                                                                                                                               
                                                                                                                               //return true
                                                                                                                           }
                                                                                                                           
                                                                                                                           // }
                                                                                                                           
                                                                                                                           
                                                                                                                           return false
                                                                                                                       })
                                                                                                                       
                                                                                                                       
                                                                                                                       if(!strName1.isEmpty)
                                                                                                                       {
                                                                                                                           buser = strName1
                                                                                                                       }
                                                                                                                       else{
                                                                                                                           let arrUserName = objUserName.components(separatedBy: "@")
                                                                                                                           let objUserNameTrim = arrUserName[0]
                                                                                                                           buser = objUserNameTrim
                                                                                                                       }}
                                                                                                                   else{
                                                                                                                       let arrUserName = objUserName.components(separatedBy: "@")
                                                                                                                       let objUserNameTrim = arrUserName[0]
                                                                                                                       buser = objUserNameTrim
                                                                                                                   }
                                                                                                                   if(login == objUserName){
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                                                                                   }
                                                                                                                   else
                                                                                                                   {
                                                                                                                       //Code to prepare data before send to server
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: buser + " has joined", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                                                                                   }
                                                                                                                getbanterroomusers(roomid: messageFromTrim!)
                                                                                                                   //Refresh banter users details
                                                                                                                   //  if(isOnUserDetailView == true)
                                                                                                                   // {
                                                                                                                   //Post notification if user is on chats window and received any message
                                                                                                                   //let notificationName = Notification.Name("UserdetailRefresh")
                                                                                                                   // NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                   //getbanterroomusers()
                                                                                                                   /*var dictRequest = [String: AnyObject]()
                                                                                                                   dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                                                                                   
                                                                                                                   //Creating Request Datap
                                                                                                                   var dictRequestData = [String: AnyObject]()
                                                                                                                   
                                                                                                                   dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                                                                                   dictRequest["requestData"] = dictRequestData as AnyObject
                                                                                                                   //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                                                                   //print(dictRequest)
                                                                                                                   do {
                                                                                                                       let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                                                                       let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                                       //print(strMyTeams)
                                                                                                                       self.sendRequestToAPI(strRequestDict: strMyTeams)
                                                                                                                   } catch {
                                                                                                                       //  print(error.localizedDescription)
                                                                                                                   }*/
                                                                                                                   //  }
                                                                                                               }
                                                                                                               else if(recSubType == "deletegroup")
                                                                                                               {
                                                                                                                   
                                                                                                                   
                                                                                                                   
                                                                                                                   if(login == objUserName){
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: "You have closed this Banter Room.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject, banterStatus: "closed")
                                                                                                                   }
                                                                                                                   else
                                                                                                                   {
                                                                                                                       //Code to prepare data before send to server
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: objUserNameTrim + " closed this Banter Room.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject, banterStatus: "closed")
                                                                                                                   }
                                                                                                                   let roomJID = XMPPJID(string: messageFromTrim!)
                                                                                                                   let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                                                                   
                                                                                                                   let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                                                                   
                                                                                                                   room.activate(self.xmppStream!)
                                                                                                                   
                                                                                                                   room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                                                                   //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                   if(room.isJoined){
                                                                                                                       
                                                                                                                       room.leave()
                                                                                                                   }
                                                                                                                   else{
                                                                                                                       let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                                                                       history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                                                                       let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                       
                                                                                                                       
                                                                                                                       room.join(usingNickname: myJID!, history: history)
                                                                                                                       
                                                                                                                       room.leave()
                                                                                                                   }
                                                                                                                   
                                                                                                                   if(messageFromTrim == toUserJID){
                                                                                                                       if(self.isOnChatView == true )
                                                                                                                       {
                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                           let notificationName = Notification.Name("closeBanterFromServer")
                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                       }
                                                                                                                   }
                                                                                                                   
                                                                                                               }
                                                                                                               else  if(recSubType == "roomuserblocked")
                                                                                                               {
                                                                                                                   let blockedusername: String = (jsonDataMessage?.value(forKey: "blockedusername") as? String)!
                                                                                                                   var buser = ""
                                                                                                                   let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                                                                                   //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                                                                                   var allPhoneContacts = NSArray()
                                                                                                                   
                                                                                                                   let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                                                                                   if localAllcontacts != nil
                                                                                                                   {
                                                                                                                       //Code to parse json data
                                                                                                                       if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                                                                           do {
                                                                                                                               allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                                                                               
                                                                                                                           } catch let error as NSError {
                                                                                                                               print(error)
                                                                                                                           }
                                                                                                                       }
                                                                                                                   }
                                                                                                                   if(allPhoneContacts.count>0){
                                                                                                                       
                                                                                                                       
                                                                                                                       var strName1: String = ""
                                                                                                                       _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                                                                           let tmp: NSDictionary = text as! NSDictionary
                                                                                                                           let val: String = tmp.value(forKey: "jid") as! String
                                                                                                                           let val2: String = blockedusername
                                                                                                                           //let arrReadUserJid = val.components(separatedBy: "@")
                                                                                                                           //let userjidTrim: String = arrReadUserJid[0]
                                                                                                                           
                                                                                                                           
                                                                                                                           if(val.contains(val2))
                                                                                                                           {
                                                                                                                               let ind = tmp.value(forKey: "name") as! String
                                                                                                                               //print(ind)
                                                                                                                               //tempPoneContacts.removeObject(at: Int(ind))
                                                                                                                               if(ind == " " || ind == nil)
                                                                                                                               {
                                                                                                                                   strName1 = val2
                                                                                                                               }
                                                                                                                               else{
                                                                                                                                   strName1 = tmp.value(forKey: "name") as! String
                                                                                                                               }
                                                                                                                               
                                                                                                                               //return true
                                                                                                                           }
                                                                                                                           
                                                                                                                           // }
                                                                                                                           
                                                                                                                           
                                                                                                                           return false
                                                                                                                       })
                                                                                                                       
                                                                                                                       
                                                                                                                       if(!strName1.isEmpty)
                                                                                                                       {
                                                                                                                           buser = strName1
                                                                                                                       }
                                                                                                                       else{
                                                                                                                           buser = blockedusername
                                                                                                                       }}
                                                                                                                   else{
                                                                                                                       buser = blockedusername
                                                                                                                   }
                                                                                                                   if(login?.contains(blockedusername))!{
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Manager has blocked you.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", isJoined: "blocked")
                                                                                                                       let roomJID = XMPPJID(string: messageFromTrim!)
                                                                                                                       let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                                                                       
                                                                                                                       let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                                                                       
                                                                                                                       room.activate(self.xmppStream!)
                                                                                                                       
                                                                                                                       room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                                                                       //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                       if(room.isJoined){
                                                                                                                           
                                                                                                                           room.leave()
                                                                                                                       }
                                                                                                                       else{
                                                                                                                           let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                                                                           history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                                                                           let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                           
                                                                                                                           
                                                                                                                           room.join(usingNickname: myJID!, history: history)
                                                                                                                           
                                                                                                                           room.leave()
                                                                                                                       }
                                                                                                                       
                                                                                                                       let pickedAllAssets:[String: String] = ["banterstatus": "blocked"]
                                                                                                                       //print(pickedAllAssets)
                                                                                                                       
                                                                                                                       if(self.isOnChatView)
                                                                                                                       {
                                                                                                                           let notificationName = Notification.Name("blockunblocknotify")
                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                                                                                       }
                                                                                                                       
                                                                                                                   }
                                                                                                                   else if(login?.contains(objUserNameTrim) )!{
                                                                                                                       let arrUserName = buser.components(separatedBy: "@")
                                                                                                                       let objUserNameTrim = arrUserName[0]
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent:  "You have successfully blocked "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                                                                   }
                                                                                                                   else
                                                                                                                   {
                                                                                                                       let arrUserName = buser.components(separatedBy: "@")
                                                                                                                       let objUserNameTrim = arrUserName[0]
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Manager has blocked "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                                                                   }
                                                                                                                   
                                                                                                                   
                                                                                                                getbanterroomusers(roomid: messageFromTrim!)
                                                                                                                   
                                                                                                                   //Code to prepare data before send to server
                                                                                                                   //Refresh banter users details
                                                                                                                   // if(isOnUserDetailView == true)
                                                                                                                   //{
                                                                                                                   //Post notification if user is on chats window and received any message
                                                                                                                   //let notificationName = Notification.Name("UserdetailRefresh")
                                                                                                                   // NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                   
                                                                                                                  /* var dictRequest = [String: AnyObject]()
                                                                                                                   dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                                                                                   
                                                                                                                   //Creating Request Datap
                                                                                                                   var dictRequestData = [String: AnyObject]()
                                                                                                                   
                                                                                                                   dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                                                                                   dictRequest["requestData"] = dictRequestData as AnyObject
                                                                                                                   //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                                                                   //print(dictRequest)
                                                                                                                   do {
                                                                                                                       let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                                                                       let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                                       // print(strMyTeams)
                                                                                                                       self.sendRequestToAPI(strRequestDict: strMyTeams)
                                                                                                                   } catch {
                                                                                                                       // print(error.localizedDescription)
                                                                                                                   }*/
                                                                                                                   //  }
                                                                                                                   
                                                                                                               }
                                                                                                               else  if(recSubType == "roomuserunblocked")
                                                                                                               {
                                                                                                                   let blockedusername: String = (jsonDataMessage?.value(forKey: "unblockedusername") as? String)!
                                                                                                                   /* if(login?.contains(blockedusername))!{
                                                                                                                    let roomJID = XMPPJID(string: messageFromTrim!)
                                                                                                                    let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                                                                    
                                                                                                                    let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                                                                                    
                                                                                                                    room.activate(self.xmppStream)
                                                                                                                    
                                                                                                                    room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                                                                    //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                    let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                                                                    history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                                                                    let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                    
                                                                                                                    
                                                                                                                    room.join(usingNickname: myJID, history: history)
                                                                                                                    
                                                                                                                    
                                                                                                                    self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Admin unblocked you", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", isJoined: "yes")
                                                                                                                    
                                                                                                                    }
                                                                                                                    else*/
                                                                                                                   var buser = ""
                                                                                                                   let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                                                                                   //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                                                                                   var allPhoneContacts = NSArray()
                                                                                                                   
                                                                                                                   let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                                                                                   if localAllcontacts != nil
                                                                                                                   {
                                                                                                                       //Code to parse json data
                                                                                                                       if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                                                                           do {
                                                                                                                               allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                                                                               
                                                                                                                           } catch let error as NSError {
                                                                                                                               print(error)
                                                                                                                           }
                                                                                                                       }
                                                                                                                   }
                                                                                                                   if(allPhoneContacts.count>0){
                                                                                                                       
                                                                                                                       
                                                                                                                       var strName1: String = ""
                                                                                                                       _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                                                                           let tmp: NSDictionary = text as! NSDictionary
                                                                                                                           let val: String = tmp.value(forKey: "jid") as! String
                                                                                                                           let val2: String = blockedusername
                                                                                                                           //let arrReadUserJid = val.components(separatedBy: "@")
                                                                                                                           //let userjidTrim: String = arrReadUserJid[0]
                                                                                                                           
                                                                                                                           
                                                                                                                           if(val.contains(val2))
                                                                                                                           {
                                                                                                                               let ind = tmp.value(forKey: "name") as! String
                                                                                                                               //print(ind)
                                                                                                                               //tempPoneContacts.removeObject(at: Int(ind))
                                                                                                                               if(ind == " " || ind == nil)
                                                                                                                               {
                                                                                                                                   strName1 = val2
                                                                                                                               }
                                                                                                                               else{
                                                                                                                                   strName1 = tmp.value(forKey: "name") as! String
                                                                                                                               }
                                                                                                                               
                                                                                                                               //return true
                                                                                                                           }
                                                                                                                           
                                                                                                                           // }
                                                                                                                           
                                                                                                                           
                                                                                                                           return false
                                                                                                                       })
                                                                                                                       
                                                                                                                       
                                                                                                                       if(!strName1.isEmpty)
                                                                                                                       {
                                                                                                                           buser = strName1
                                                                                                                       }
                                                                                                                       else{
                                                                                                                           buser = blockedusername
                                                                                                                       }}
                                                                                                                   else{
                                                                                                                       buser = blockedusername
                                                                                                                   }
                                                                                                                   if(login?.contains(objUserNameTrim) )!{
                                                                                                                       let arrUserName = buser.components(separatedBy: "@")
                                                                                                                       let objUserNameTrim = arrUserName[0]
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent:  "You have successfully unblocked  "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                                                                       let uuid = UUID().uuidString
                                                                                                                       let time: Int64 = getUTCFormateDate()
                                                                                                                       let unblockedUserJid: String = blockedusername //+ JIDPostfix
                                                                                                                       if(recRoomType == "banter" || recRoomType == "teambr")
                                                                                                                       {
                                                                                                                           sendMessageToServer(unblockedUserJid as AnyObject as! String, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "chat", messageSubType: "roomuserunblocked", roomid: messageFromTrim! )
                                                                                                                       }
                                                                                                                       else if(recRoomType == "group"){
                                                                                                                           sendMessageToServer(unblockedUserJid as AnyObject as! String, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "chat", messageSubType: "grouproomuserunblocked", roomid: messageFromTrim! )
                                                                                                                       }
                                                                                                                       
                                                                                                                       // sendMessageToServer(messageFromTrim as AnyObject as! String, messageContent: "Admin unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "banter", messageSubType: "roomuserunblocked", roomid: messageFromTrim! )
                                                                                                                       
                                                                                                                   }
                                                                                                                   else if(!(login?.contains(blockedusername))! )
                                                                                                                   {
                                                                                                                       let arrUserName = buser.components(separatedBy: "@")
                                                                                                                       let objUserNameTrim = arrUserName[0]
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Manager has unblocked  "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                                                                   }
                                                                                                                   
                                                                                                                getbanterroomusers(roomid: messageFromTrim!)
                                                                                                                   
                                                                                                                   
                                                                                                                   //Code to prepare data before send to server
                                                                                                                   //Refresh banter users details
                                                                                                                   // if(isOnUserDetailView == true)
                                                                                                                   //{
                                                                                                                   //Post notification if user is on chats window and received any message
                                                                                                                   //let notificationName = Notification.Name("UserdetailRefresh")
                                                                                                                   // NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                   //getbanterroomusers()
                                                                                                                   /*var dictRequest = [String: AnyObject]()
                                                                                                                   dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                                                                                   
                                                                                                                   //Creating Request Datap
                                                                                                                   var dictRequestData = [String: AnyObject]()
                                                                                                                   
                                                                                                                   dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                                                                                   dictRequest["requestData"] = dictRequestData as AnyObject
                                                                                                                   //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                                                                   //print(dictRequest)
                                                                                                                   do {
                                                                                                                       let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                                                                       let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                                       // print(strMyTeams)
                                                                                                                       self.sendRequestToAPI(strRequestDict: strMyTeams)
                                                                                                                   } catch {
                                                                                                                       // print(error.localizedDescription)
                                                                                                                   }*/
                                                                                                                   //  }
                                                                                                                   
                                                                                                               }
                                                                                                               else  if(recSubType == "coinsreceived")
                                                                                                               {
                                                                                                                   let adminname: String = (jsonDataMessage?.value(forKey: "adminusername") as? String)!
                                                                                                                   
                                                                                                                   if(login == adminname){
                                                                                                                       //let aString = "This is my string"
                                                                                                                       let admintotalcoins: Int = (jsonDataMessage?.value(forKey: "admintotalcoins") as? Int)!
                                                                                                                       
                                                                                                                       let adminavailablecoins: Int = (jsonDataMessage?.value(forKey: "adminavailablecoins") as? Int)!
                                                                                                                       let coinsreceived: Int = (jsonDataMessage?.value(forKey: "coinsreceived") as! Int)
                                                                                                                       let messageContent = recMessageContent.replacingOccurrences(of:                                                               "Your Banter Room manage", with: "You")
                                                                                                                       
                                                                                                                       DispatchQueue.main.async {
                                                                                                                           AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(String(coinsreceived))  FanCoins rewards for joining Banter room.\(self.GetvalueRedeemMesg(avilablecoin: adminavailablecoins))", fancoins: String(coinsreceived) )
                                                                                                                       }
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: messageContent, messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                                                                       AddCoin(fctotalcoin: admintotalcoins, fcavailablecoin: adminavailablecoins)
                                                                                                                   }
                                                                                                                   else{
                                                                                                                       // let coinsreceived: Int = (jsonDataMessage?.value(forKey: "coinsreceived") as! Int)
                                                                                                                       self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                                                                       /*  DispatchQueue.main.async {
                                                                                                                        HurrayAnimationIndicator.show((self.window?.rootViewController?.view)!, loadingText: "Your Banter room manager won \(String(coinsreceived)) FanCoins.\n\nLearn more", fancoins: String(coinsreceived) )
                                                                                                                        }*/
                                                                                                                   }
                                                                                                                   
                                                                                                               }
                                                                                                           }
                                                    else if(recRoomType == "group")
                                                    {
                                                        if(recSubType == "roomuserleft")
                                                        {
                                                            var buser = ""
                                                            let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                            //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                            var allPhoneContacts = NSArray()
                                                            let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                            if localAllcontacts != nil
                                                            {
                                                                //Code to parse json data
                                                                if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                    do {
                                                                        allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                        
                                                                    } catch let error as NSError {
                                                                        print(error)
                                                                    }
                                                                }
                                                            }
                                                            if(allPhoneContacts.count>0){
                                                                
                                                                
                                                                var strName1: String = ""
                                                                _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                    let tmp: NSDictionary = text as! NSDictionary
                                                                    let val: String = tmp.value(forKey: "jid") as! String
                                                                    let val2: String = objUserNameTrim
                                                                    //let arrReadUserJid = val.components(separatedBy: "@")
                                                                    //let userjidTrim: String = arrReadUserJid[0]
                                                                    
                                                                    
                                                                    if(val.contains(val2))
                                                                    {
                                                                        let ind = tmp.value(forKey: "name") as! String
                                                                        //print(ind)
                                                                        //tempPoneContacts.removeObject(at: Int(ind))
                                                                        if(ind == " " || ind == nil)
                                                                        {
                                                                            strName1 = val2
                                                                        }
                                                                        else{
                                                                            strName1 = tmp.value(forKey: "name") as! String
                                                                        }
                                                                        
                                                                        //return true
                                                                    }
                                                                    
                                                                    // }
                                                                    
                                                                    
                                                                    return false
                                                                })
                                                                
                                                                
                                                                if(!strName1.isEmpty)
                                                                {
                                                                    buser = strName1
                                                                }
                                                                else{
                                                                    buser = objUserNameTrim
                                                                }}
                                                            else{
                                                                buser = objUserNameTrim
                                                            }
                                                            if(login == objUserName){
                                                                let roomJID = XMPPJID(string: messageFromTrim!)
                                                                let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                
                                                                let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                
                                                                room.activate(self.xmppStream!)
                                                                
                                                                room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                if(room.isJoined){
                                                                    
                                                                    room.leave()
                                                                }
                                                                else{
                                                                    let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                    history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                    let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                    
                                                                    
                                                                    room.join(usingNickname: myJID!, history: history)
                                                                    
                                                                    room.leave()
                                                                }
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Sorry to see you quit this Group.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject, isJoined: "no")
                                                                
                                                            }
                                                            else
                                                            {
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: buser + " quit.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                            }
                                                            
                                                            
                                                            getbanterroomusers(roomid: messageFromTrim!)
                                                            
                                                            //Code to prepare data before send to server
                                                            //Refresh banter users details
                                                            // if(isOnUserDetailView == true)
                                                            //{
                                                            //Post notification if user is on chats window and received any message
                                                            //let notificationName = Notification.Name("UserdetailRefresh")
                                                            // NotificationCenter.default.post(name: notificationName, object: nil)
                                                            //getbanterroomusers()
                                                           /* var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                            
                                                            //Creating Request Datap
                                                            var dictRequestData = [String: AnyObject]()
                                                            
                                                            dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                            dictRequest["requestData"] = dictRequestData as AnyObject
                                                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                            //print(dictRequest)
                                                            do {
                                                                let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                // print(strMyTeams)
                                                                self.sendRequestToAPI(strRequestDict: strMyTeams)
                                                            } catch {
                                                                // print(error.localizedDescription)
                                                            }*/
                                                            //  }
                                                            
                                                        }
                                                        else if(recSubType == "roomuseradd")
                                                        {
                                                            var buser = ""
                                                            let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                            //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                            var allPhoneContacts = NSArray()
                                                            let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                            //let useravatar: String = (jsonDataMessage?.value(forKey: "userAvtar") as? String)!
                                                            if localAllcontacts != nil
                                                            {
                                                                //Code to parse json data
                                                                if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                    do {
                                                                        allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                        
                                                                    } catch let error as NSError {
                                                                        print(error)
                                                                    }
                                                                }
                                                            }
                                                            if(allPhoneContacts.count>0){
                                                                
                                                                
                                                                var strName1: String = ""
                                                                _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                    let tmp: NSDictionary = text as! NSDictionary
                                                                    let val: String = tmp.value(forKey: "jid") as! String
                                                                    let val2: String = objUserName
                                                                    //let arrReadUserJid = val.components(separatedBy: "@")
                                                                    //let userjidTrim: String = arrReadUserJid[0]
                                                                    
                                                                    
                                                                    if(val.contains(val2))
                                                                    {
                                                                        let ind = tmp.value(forKey: "name") as! String
                                                                        //print(ind)
                                                                        //tempPoneContacts.removeObject(at: Int(ind))
                                                                        if(ind == " " || ind == nil)
                                                                        {
                                                                            strName1 = val2
                                                                        }
                                                                        else{
                                                                            strName1 = tmp.value(forKey: "name") as! String
                                                                        }
                                                                        
                                                                        //return true
                                                                    }
                                                                    
                                                                    // }
                                                                    
                                                                    
                                                                    return false
                                                                })
                                                                
                                                                
                                                                if(!strName1.isEmpty)
                                                                {
                                                                    buser = strName1
                                                                }
                                                                else{
                                                                    // buser = objUserName
                                                                    let arrUserName = objUserName.components(separatedBy: "@")
                                                                    let objUserNameTrim = arrUserName[0]
                                                                    buser = objUserNameTrim
                                                                }}
                                                            else{
                                                                //buser = objUserName
                                                                let arrUserName = objUserName.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                buser = objUserNameTrim
                                                            }
                                                            if(login == objUserName){
                                                                // self.prepareMessageForServerIn(messageFromTrim!, messageContent: "n", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                            }
                                                            else
                                                            {
                                                                if(recMessageContent.contains("has joined via Invite Link")){
                                                                    prepareMessageForServerIn(messageFromTrim!, messageContent: buser + " has joined via Invite Link", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                                }
                                                                else{
                                                                    prepareMessageForServerIn(messageFromTrim!, messageContent: buser + " has joined", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                                }
                                                                //Code to prepare data before send to server
                                                                
                                                            }
                                                            getbanterroomusers(roomid: messageFromTrim!)
                                                            //Refresh banter users details
                                                            //  if(isOnUserDetailView == true)
                                                            // {
                                                            //Post notification if user is on chats window and received any message
                                                            //let notificationName = Notification.Name("UserdetailRefresh")
                                                            // NotificationCenter.default.post(name: notificationName, object: nil)
                                                            //getbanterroomusers()
                                                           /* var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                            
                                                            //Creating Request Datap
                                                            var dictRequestData = [String: AnyObject]()
                                                            
                                                            dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                            dictRequest["requestData"] = dictRequestData as AnyObject
                                                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                            //print(dictRequest)
                                                            do {
                                                                let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                //print(strMyTeams)
                                                                sendRequestToAPI(strRequestDict: strMyTeams)
                                                            } catch {
                                                                //print(error.localizedDescription)
                                                            }*/
                                                            //  }
                                                        }
                                                        else if(recSubType == "deletegroup")
                                                        {
                                                            
                                                            
                                                            
                                                            if(login == objUserName){
                                                                prepareMessageForServerIn(messageFromTrim!, messageContent: "You have closed this Group.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject, banterStatus: "closed")
                                                            }
                                                            else
                                                            {
                                                                //Code to prepare data before send to server
                                                                prepareMessageForServerIn(messageFromTrim!, messageContent: objUserNameTrim + " closed this Group.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject, banterStatus: "closed")
                                                            }
                                                            let roomJID = XMPPJID(string: messageFromTrim!)
                                                            let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                            
                                                            let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                            
                                                            room.activate(xmppStream!)
                                                            
                                                            room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                            //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                            if(room.isJoined){
                                                                
                                                                room.leave()
                                                            }
                                                            else{
                                                                let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                
                                                                
                                                                room.join(usingNickname: myJID!, history: history)
                                                                
                                                                room.leave()
                                                            }
                                                            
                                                            if(messageFromTrim == self.toUserJID){
                                                                if(isOnChatView == true && recRoomType == "banter")
                                                                {
                                                                    //Post notification if user is on chats window and received any message
                                                                    let notificationName = Notification.Name("closeBanterFromServer")
                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                }
                                                            }
                                                            
                                                        }
                                                        else  if(recSubType == "roomuserblocked")
                                                        {
                                                            let blockedusername: String = (jsonDataMessage?.value(forKey: "blockedusername") as? String)!
                                                            var buser = ""
                                                            let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                            //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                            var allPhoneContacts = NSArray()
                                                            
                                                            let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                            if localAllcontacts != nil
                                                            {
                                                                //Code to parse json data
                                                                if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                    do {
                                                                        allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                        
                                                                    } catch let error as NSError {
                                                                        print(error)
                                                                    }
                                                                }
                                                            }
                                                            if(allPhoneContacts.count>0){
                                                                
                                                                
                                                                var strName1: String = ""
                                                                _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                    let tmp: NSDictionary = text as! NSDictionary
                                                                    let val: String = tmp.value(forKey: "jid") as! String
                                                                    let val2: String = blockedusername
                                                                    //let arrReadUserJid = val.components(separatedBy: "@")
                                                                    //let userjidTrim: String = arrReadUserJid[0]
                                                                    
                                                                    
                                                                    if(val.contains(val2))
                                                                    {
                                                                        let ind = tmp.value(forKey: "name") as! String
                                                                        //print(ind)
                                                                        //tempPoneContacts.removeObject(at: Int(ind))
                                                                        if(ind == " " || ind == nil)
                                                                        {
                                                                            strName1 = val2
                                                                        }
                                                                        else{
                                                                            strName1 = tmp.value(forKey: "name") as! String
                                                                        }
                                                                        
                                                                        //return true
                                                                    }
                                                                    
                                                                    // }
                                                                    
                                                                    
                                                                    return false
                                                                })
                                                                
                                                                
                                                                if(!strName1.isEmpty)
                                                                {
                                                                    buser = strName1
                                                                }
                                                                else{
                                                                    buser = blockedusername
                                                                }}
                                                            else{
                                                                buser = blockedusername
                                                            }
                                                            if(login?.contains(blockedusername))!{
                                                                prepareMessageForServerIn(messageFromTrim!, messageContent: "Manager has blocked you.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", isJoined: "blocked")
                                                                let roomJID = XMPPJID(string: messageFromTrim!)
                                                                let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                
                                                                let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                
                                                                room.activate(xmppStream!)
                                                                
                                                                room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                if(room.isJoined){
                                                                    
                                                                    room.leave()
                                                                }
                                                                else{
                                                                    let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                    history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                    let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                    
                                                                    
                                                                    room.join(usingNickname: myJID!, history: history)
                                                                    
                                                                    room.leave()
                                                                }
                                                                
                                                                let pickedAllAssets:[String: String] = ["banterstatus": "blocked"]
                                                                //print(pickedAllAssets)
                                                                
                                                                if(isOnChatView)
                                                                {
                                                                    let notificationName = Notification.Name("blockunblocknotify")
                                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedAllAssets)
                                                                }
                                                                
                                                            }
                                                            else if(login?.contains(objUserNameTrim) )!{
                                                                let arrUserName = buser.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                prepareMessageForServerIn(messageFromTrim!, messageContent:  "You have successfully blocked "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                            }
                                                            else
                                                            {
                                                                let arrUserName = buser.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                prepareMessageForServerIn(messageFromTrim!, messageContent: "Manager has blocked "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                            }
                                                            
                                                            
                                                            getbanterroomusers(roomid: messageFromTrim!)
                                                            
                                                            //Code to prepare data before send to server
                                                            //Refresh banter users details
                                                            // if(isOnUserDetailView == true)
                                                            //{
                                                            //Post notification if user is on chats window and received any message
                                                            //let notificationName = Notification.Name("UserdetailRefresh")
                                                            // NotificationCenter.default.post(name: notificationName, object: nil)
                                                           // getbanterroomusers()
                                                           /* var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                            
                                                            //Creating Request Datap
                                                            var dictRequestData = [String: AnyObject]()
                                                            
                                                            dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                            dictRequest["requestData"] = dictRequestData as AnyObject
                                                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                            //print(dictRequest)
                                                            do {
                                                                let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                // print(strMyTeams)
                                                                self.sendRequestToAPI(strRequestDict: strMyTeams)
                                                            } catch {
                                                                // print(error.localizedDescription)
                                                            }*/
                                                            //  }
                                                            
                                                        }
                                                        else  if(recSubType == "roomuserunblocked")
                                                        {
                                                            let blockedusername: String = (jsonDataMessage?.value(forKey: "unblockedusername") as? String)!
                                                            /* if(login?.contains(blockedusername))!{
                                                             let roomJID = XMPPJID(string: messageFromTrim!)
                                                             let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                             
                                                             let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                             
                                                             room.activate(self.xmppStream)
                                                             
                                                             room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                             //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                             let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                             history.addAttribute(withName: "maxchars", stringValue: "0")
                                                             let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                             
                                                             
                                                             room.join(usingNickname: myJID, history: history)
                                                             
                                                             
                                                             self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Admin unblocked you", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", isJoined: "yes")
                                                             
                                                             }
                                                             else*/
                                                            var buser = ""
                                                            let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                            //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                            var allPhoneContacts = NSArray()
                                                            
                                                            let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                            if localAllcontacts != nil
                                                            {
                                                                //Code to parse json data
                                                                if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                    do {
                                                                        allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                        
                                                                    } catch let error as NSError {
                                                                        print(error)
                                                                    }
                                                                }
                                                            }
                                                            if(allPhoneContacts.count>0){
                                                                
                                                                
                                                                var strName1: String = ""
                                                                _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                    let tmp: NSDictionary = text as! NSDictionary
                                                                    let val: String = tmp.value(forKey: "jid") as! String
                                                                    let val2: String = blockedusername
                                                                    //let arrReadUserJid = val.components(separatedBy: "@")
                                                                    //let userjidTrim: String = arrReadUserJid[0]
                                                                    
                                                                    
                                                                    if(val.contains(val2))
                                                                    {
                                                                        let ind = tmp.value(forKey: "name") as! String
                                                                        //print(ind)
                                                                        //tempPoneContacts.removeObject(at: Int(ind))
                                                                        if(ind == " " || ind == nil)
                                                                        {
                                                                            strName1 = val2
                                                                        }
                                                                        else{
                                                                            strName1 = tmp.value(forKey: "name") as! String
                                                                        }
                                                                        
                                                                        //return true
                                                                    }
                                                                    
                                                                    // }
                                                                    
                                                                    
                                                                    return false
                                                                })
                                                                
                                                                
                                                                if(!strName1.isEmpty)
                                                                {
                                                                    buser = strName1
                                                                }
                                                                else{
                                                                    buser = blockedusername
                                                                }}
                                                            else{
                                                                buser = blockedusername
                                                            }
                                                            if(login?.contains(objUserNameTrim) )!{
                                                                let arrUserName = buser.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent:  "You have successfully unblocked  "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                                let uuid = UUID().uuidString
                                                                let time: Int64 = getUTCFormateDate()
                                                                let unblockedUserJid: String = blockedusername //+ JIDPostfix
                                                                //sendMessageToServer(unblockedUserJid as AnyObject as! String, messageContent: "Admin   has unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "chat", messageSubType: "roomuserunblocked", roomid: messageFromTrim! )
                                                                if(recRoomType == "banter")
                                                                {
                                                                    sendMessageToServer(unblockedUserJid as AnyObject as! String, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "chat", messageSubType: "roomuserunblocked", roomid: messageFromTrim! )
                                                                }
                                                                else if(recRoomType == "group"){
                                                                    sendMessageToServer(unblockedUserJid as AnyObject as! String, messageContent: "Manager has unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "chat", messageSubType: "grouproomuserunblocked", roomid: messageFromTrim! )
                                                                }
                                                                // sendMessageToServer(messageFromTrim as AnyObject as! String, messageContent: "Admin unblocked you.", messageType: "header", messageTime: time, messageId: uuid, roomType: "banter", messageSubType: "roomuserunblocked", roomid: messageFromTrim! )
                                                                
                                                            }
                                                            else if(!(login?.contains(blockedusername))! )
                                                            {
                                                                let arrUserName = buser.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: "Manager has unblocked  "+objUserNameTrim + ".", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "")
                                                            }
                                                            
                                                            
                                                            getbanterroomusers(roomid: messageFromTrim!)
                                                            
                                                            //Code to prepare data before send to server
                                                            //Refresh banter users details
                                                            // if(isOnUserDetailView == true)
                                                            //{
                                                            //Post notification if user is on chats window and received any message
                                                            //let notificationName = Notification.Name("UserdetailRefresh")
                                                            // NotificationCenter.default.post(name: notificationName, object: nil)
                                                            //getbanterroomusers()
                                                           /* var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "getbanterroomusers" as AnyObject
                                                            
                                                            //Creating Request Datap
                                                            var dictRequestData = [String: AnyObject]()
                                                            
                                                            dictRequestData["roomid"] = messageFromTrim! as AnyObject
                                                            dictRequest["requestData"] = dictRequestData as AnyObject
                                                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                            //print(dictRequest)
                                                            do {
                                                                let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
                                                                // print(strMyTeams)
                                                                self.sendRequestToAPI(strRequestDict: strMyTeams)
                                                            } catch {
                                                                // print(error.localizedDescription)
                                                            }*/
                                                            //  }
                                                            
                                                        }
                                                        else if(recSubType == "roomavatarchange")
                                                        {
                                                            let username: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                            let avatar: String = (jsonDataMessage?.value(forKey: "avatar") as? String)!
                                                            if(login == username){
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent:  "You have changed the group picture.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "",roomavatar:avatar)
                                                            }
                                                            else{
                                                                let arrReadUserJid = username.components(separatedBy: "@")
                                                                let userReadUserJid = arrReadUserJid[0]
                                                                let fanname = ExistingContact(username: userReadUserJid) as! String
                                                                self.prepareMessageForServerIn(messageFromTrim!, messageContent: fanname + " has changed the group picture.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "",roomavatar:avatar)
                                                            }
                                                        }
                                                    }
                                                    else if(recRoomType == "trivia"){
                                                        if(recSubType == "roomuseradd")
                                                        {
                                                            var buser = ""
                                                            let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                            //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                            var allPhoneContacts = NSArray()
                                                            let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                            //let useravatar: String = (jsonDataMessage?.value(forKey: "userAvtar") as? String)!
                                                            var login: String? = ""
                                                            let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
                                                            
                                                            if(!istriviauser){
                                                                
                                                                login = UserDefaults.standard.string(forKey: "userJID")
                                                            }else{
                                                                login = UserDefaults.standard.string(forKey: "triviauser")
                                                            }
                                                            if localAllcontacts != nil
                                                            {
                                                                //Code to parse json data
                                                                if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                    do {
                                                                        allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                        
                                                                    } catch let error as NSError {
                                                                        print(error)
                                                                    }
                                                                }
                                                            }
                                                            if(allPhoneContacts.count>0){
                                                                
                                                                
                                                                var strName1: String = ""
                                                                _ = allPhoneContacts.filter({ (text) -> Bool in
                                                                    let tmp: NSDictionary = text as! NSDictionary
                                                                    let val: String = tmp.value(forKey: "jid") as! String
                                                                    let val2: String = objUserName
                                                                    //let arrReadUserJid = val.components(separatedBy: "@")
                                                                    //let userjidTrim: String = arrReadUserJid[0]
                                                                    
                                                                    
                                                                    if(val.contains(val2))
                                                                    {
                                                                        let ind = tmp.value(forKey: "name") as! String
                                                                        //print(ind)
                                                                        //tempPoneContacts.removeObject(at: Int(ind))
                                                                        if(ind == " " || ind == nil)
                                                                        {
                                                                            strName1 = val2
                                                                        }
                                                                        else{
                                                                            strName1 = tmp.value(forKey: "name") as! String
                                                                        }
                                                                        
                                                                        //return true
                                                                    }
                                                                    
                                                                    // }
                                                                    
                                                                    
                                                                    return false
                                                                })
                                                                
                                                                
                                                                if(!strName1.isEmpty)
                                                                {
                                                                    buser = strName1
                                                                }
                                                                else{
                                                                    // buser = objUserName
                                                                    let arrUserName = objUserName.components(separatedBy: "@")
                                                                    let objUserNameTrim = arrUserName[0]
                                                                    buser = objUserNameTrim
                                                                }}
                                                            else{
                                                                //buser = objUserName
                                                                let arrUserName = objUserName.components(separatedBy: "@")
                                                                let objUserNameTrim = arrUserName[0]
                                                                buser = objUserNameTrim
                                                            }
                                                            if(login == objUserName){
                                                                // self.prepareMessageForServerIn(messageFromTrim!, messageContent: "n", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                            }
                                                            else
                                                            {
                                                                if(recMessageContent.contains("has joined via Invite Link")){
                                                                    prepareMessageForServerIn(messageFromTrim!, messageContent: buser + " has joined via Invite Link", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                                }
                                                                else{
                                                                    prepareMessageForServerIn(messageFromTrim!, messageContent: buser + " has joined", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                                }
                                                                //Code to prepare data before send to server
                                                                
                                                            }
                                                            let notificationName = Notification.Name("triviaMessageReceivedFromServer")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                           /* var dictRequest = [String: AnyObject]()
                                                            dictRequest["cmd"] = "gettriviacount" as AnyObject
                                                            dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                                                            dictRequest["device"] = "ios" as AnyObject
                                                            var reqParams = [String: AnyObject]()
                                                            //reqParams["cmd"] = "getfanupdates" as AnyObject
                                                            let arrdRoomJid = messageFromTrim?.components(separatedBy: "@")
                                                            let roomid = arrdRoomJid?[0]
                                                            reqParams["groupid"] = roomid as AnyObject
                                                           
                                                            reqParams["type"] = "viewcount" as AnyObject
                                                            let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                                            if(myjid != nil){
                                                                let arrdUserJid = myjid?.components(separatedBy: "@")
                                                                let userUserJid = arrdUserJid?[0]
                                                                reqParams["username"] = userUserJid as AnyObject?
                                                            }
                                                            else{
                                                                reqParams["username"] = "" as AnyObject
                                                            }
                                                            
                                                            dictRequest["requestData"] = reqParams as AnyObject
                                                            //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                            //print(dictRequest)
                                                            do {
                                                               /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                                                                let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                //  print(escapedString!)
                                                                // print(strFanUpdates)
                                                                var reqParams1 = [String: AnyObject]()
                                                                reqParams1["request"] = strFanUpdates as AnyObject
                                                                let url = MediaAPIjava + "request=" + escapedString!*/
                                                                //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                                                                Alamofire.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                  headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                    // 2
                                                                    .responseJSON { response in
                                                                        //print(response.result.value)
                                                                        if response.result.error == nil {
                                                                            if let json = response.result.value as? Dictionary<String, Any>{
                                                                                // print(" JSON:", json)
                                                                                let status1: Bool = json["success"] as! Bool
                                                                                if(status1){
                                                                                    let response: NSArray = json["responseData"]  as! NSArray
                                                                                    let roomDetailsDict = response[0] as! [String : AnyObject]
                                                                                    
                                                                                    let count = roomDetailsDict["viewcount"] as! AnyObject
                                                                                     let tabIndex:[String: Any] = ["index": count]
                                                                                    let notificationName = Notification.Name("triviauseronline")
                                                                                    NotificationCenter.default.post(name: notificationName, object: nil,userInfo: tabIndex)
                                                                                }
                                                                                else{
                                                                                    
                                                                                }
                                                                            }
                                                                        } else {
                                                                            debugPrint(response.result.error as Any)
                                                                        }
                                                                }
                                                            } catch {
                                                                print(error.localizedDescription)
                                                            }*/
                                                        }
                                                        if(recSubType == "trivialike")
                                                        {
                                                            let notificationName = Notification.Name("LikeMessageReceived")
                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                        }
                                                    }
                                                    
                                                    //We have recevied message from user so he will always To for me
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    
                                                    
                                                    
                                                    let notificationName = Notification.Name("messageInReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if (self.isOnChatsView == true)
                                                    {
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    //End
                                                    
                                                    
                                                    
                                                }
                                                else if(receivedMessageType == "image")
                                                {
                                                    let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    //var msgDict = [String: AnyObject]()
                                                    //var badgeCounts: Int = 0
                                                    let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                    let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    //let  messageSubType: String = (jsonDataMessage?.value(forKey: "sub_type") as? String)!
                                                    var messageSubType :String = ""
                                                    if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                    {
                                                        messageSubType = sub_type as! String
                                                    }
                                                    //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                    //print(messageTo ?? "")
                                                    //print(messageFromTrim ?? "")
                                                    //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                    //msgDict["toUserMobile"] = "+919826615203"
                                                    let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    
                                                    //Code to fetch media from live URL
                                                    let url = NSURL(string: recThumbLink)!
                                                    var roomSubject: String = ""
                                                    if let roomSub = sender.roomSubject
                                                    {
                                                        roomSubject = roomSub
                                                    }
                                                    //let isJoined: Bool = sender.isJoined
                                                    //let mysupportteam: Int = (jsonDataMessage?.value(forKey: "supportteam") as? Int)!
                                                    var mysupportteam: Int64 = 0
                                                    //let isJoined: Bool = sender.isJoined
                                                    if(recRoomType == "banter" || recRoomType == "teambr"){
                                                        mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                    }
                                                    //Code to prepare data before send to server
                                                    self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "image", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, banterRoomName: roomSubject, isJoined: "yes", msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam,  messageSubType:  messageSubType)
                                                    
                                                    //We have recevied message from user so he will always To for me
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    
                                                    if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                    {
                                                        self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                        self.funGetSetLocalChats(messageId: messageId!, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                    }
                                                    
                                                    let notificationName = Notification.Name("messageInReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if (self.isOnChatsView == true)
                                                    {
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    //End
                                                    
                                                    // Download task:
                                                    // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                    let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                        // if responseData is not null...
                                                        if let data = responseData{
                                                            
                                                            // execute in UI thread
                                                            DispatchQueue.main.async(execute: { () -> Void in
                                                                //let tmpImg = UIImage(data: data)
                                                                //Store image to local path
                                                                //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: "")
                                                                //let uuid = UUID().uuidString
                                                                let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                let imageId = arrReadselVideoPath.last
                                                                let arrReadimageId = imageId?.components(separatedBy: ".")
                                                                
                                                                _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                
                                                                self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: "", filePath: "", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                                
                                                                if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                                {
                                                                    //Post notification if user is on chats window and received any message
                                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                }
                                                                else if (self.isOnChatsView == true)
                                                                {
                                                                    let notificationName = Notification.Name("RefreshChatsView")
                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                }
                                                                /*ALAssetsLibrary().writeImage(toSavedPhotosAlbum: tmpImg?.cgImage!, orientation: ALAssetOrientation(rawValue: (tmpImg?.imageOrientation.rawValue)!)!) { (path, error) in
                                                                 print(path ?? "")
                                                                 let asset: PHAsset = PHAsset.fetchAssets(withALAssetURLs: [path!], options: nil).firstObject!
                                                                 
                                                                 //print(asset)
                                                                 //Write code to save asset local id to previously prepared dat
                                                                 //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier)
                                                                 
                                                                 self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: asset.localIdentifier, recReadUserJid: messageFromTrim!)
                                                                 
                                                                 if(self.isOnBantersView == true && recRoomType == "banter")
                                                                 {
                                                                 //Post notification if user is on chats window and received any message
                                                                 let notificationName = Notification.Name("RefreshBantersView")
                                                                 NotificationCenter.default.post(name: notificationName, object: nil)
                                                                 }
                                                                 else if (self.isOnChatsView == true)
                                                                 {
                                                                 let notificationName = Notification.Name("RefreshChatsView")
                                                                 NotificationCenter.default.post(name: notificationName, object: nil)
                                                                 }
                                                                 
                                                                 //End prepare chat data
                                                                 
                                                                 
                                                                 
                                                                 
                                                                 
                                                                 
                                                                 }*/
                                                                
                                                                
                                                            })
                                                        }
                                                        else
                                                        {
                                                            //Error
                                                            //  print(error ?? "Error")
                                                            self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                            
                                                        }
                                                    }
                                                    
                                                    // Run task
                                                    task.resume()
                                                    //End Code to fetch media from live URL
                                                    
                                                }
                                                else if(receivedMessageType == "video")
                                                {
                                                    let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    //var msgDict = [String: AnyObject]()
                                                    //var badgeCounts: Int = 0
                                                    let recCaption: String = (jsonDataMessage?.value(forKey: "caption") as? String)!
                                                    let recThumbLink: String = (jsonDataMessage?.value(forKey: "thumblink") as? String)!
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    // let  messageSubType: String = (jsonDataMessage?.value(forKey: "sub_type") as? String)!
                                                    let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    var messageSubType :String = ""
                                                    if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                    {
                                                        messageSubType = sub_type as! String
                                                    }
                                                    //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                    //print(messageTo ?? "")
                                                    //print(messageFromTrim ?? "")
                                                    //print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                                    //msgDict["toUserMobile"] = "+919826615203"
                                                    
                                                    
                                                    //Code to fetch media from live URL
                                                    let url = NSURL(string: recThumbLink)!
                                                    
                                                    var roomSubject: String = ""
                                                    if let roomSub = sender.roomSubject
                                                    {
                                                        roomSubject = roomSub
                                                    }
                                                    var mysupportteam: Int64 = 0
                                                    //let isJoined: Bool = sender.isJoined
                                                    if(recRoomType == "banter" || recRoomType == "teambr"){
                                                        mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                    }
                                                    
                                                    //Code to prepare data before send to server
                                                    self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "video", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", caption: recCaption, thumbLink: recThumbLink, fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, banterRoomName: roomSubject, isJoined: "yes", msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam,  messageSubType:  messageSubType)
                                                    
                                                    //We have recevied message from user so he will always To for me
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    
                                                    if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                    {
                                                        self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                        self.funGetSetLocalChats(messageId: messageId!, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                    }
                                                    
                                                    let notificationName = Notification.Name("messageInReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                    {
                                                        //Post notification if user is on chats window and received any message
                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    else if (self.isOnChatsView == true)
                                                    {
                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                    }
                                                    //End
                                                    
                                                    // Download task:
                                                    // - sharedSession = global NSURLCache, NSHTTPCookieStorage and NSURLCredentialStorage objects.
                                                    let task = URLSession.shared.dataTask(with: url as URL) { (responseData, responseUrl, error) -> Void in
                                                        // if responseData is not null...
                                                        if let data = responseData{
                                                            // print(responseUrl ?? "")
                                                            // print(data)
                                                            // execute in UI thread
                                                            DispatchQueue.main.async(execute: { () -> Void in
                                                                //let tmpImg = UIImage(data: data)
                                                                //Store image to local path
                                                                //self.saveImageToLocalWithName(UIImage(data: data)!,fileName: fileName)
                                                                // let uuid = UUID().uuidString
                                                                // let documentsPath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0];
                                                                //let filePath = "file://" + "\(documentsPath)/" + uuid + ".mp4";
                                                                let arrReadselVideoPath = recThumbLink.components(separatedBy: "/")
                                                                let imageId = arrReadselVideoPath.last
                                                                let arrReadimageId = imageId?.components(separatedBy: ".")
                                                                
                                                                _ = self.saveImageToLocalWithNameReturnPath(UIImage(data: data)!,fileName: arrReadimageId![0] as String)
                                                                
                                                                do
                                                                {
                                                                    
                                                                    //print(videoURL?.path ?? "")
                                                                    
                                                                    //Write code to save asset local id to previously prepared dat
                                                                    
                                                                    //self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "sent", fileLocalId: asset.localIdentifier, filePath: "file://" + (videoURL?.path)!)
                                                                    
                                                                    self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, fileLocalId: "", filePath: "", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                                    
                                                                    if(self.isOnBantersView == true && (recRoomType == "banter" || recRoomType == "teambr"))
                                                                    {
                                                                        //Post notification if user is on chats window and received any message
                                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                                    }
                                                                    else if (self.isOnChatsView == true)
                                                                    {
                                                                        let notificationName = Notification.Name("RefreshChatsView")
                                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                                    }
                                                                    
                                                                    
                                                                    
                                                                }
                                                                catch {
                                                                    //  print(error.localizedDescription)
                                                                }
                                                                
                                                                
                                                                
                                                                
                                                                
                                                            })
                                                        }
                                                        else
                                                        {
                                                            //Error
                                                            // print(error ?? "Error")
                                                            self.funGetSetLocalChats(messageId: messageId!, messageContent: recMessageContent, chatStatus: "failed", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                            
                                                        }
                                                    }
                                                    
                                                    // Run task
                                                    task.resume()
                                                    //End Code to fetch media from live URL
                                                    
                                                }
                                            }
                                            
                                            
                                            
                                            
                                        } catch let error as NSError {
                                            print(error)
                                        }
                                    }
                                    
                                }
                                else{
                                }
                                // Else of this we have to put here groupchat/banterroom and userupdates
                                
                                
                                //}
                            }
                        }
                        else{
                            let broadcastall = UserDefaults.standard.string(forKey: "broadcastall")
                            let broadcastinactive = UserDefaults.standard.string(forKey: "broadcastinactive")
                            
                            
                            if(messageFromTrimTemp == broadcastall){
                                
                                
                                
                                if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                {
                                    do {
                                        let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                         
                                        var subtype = ""
                                         if jsonDataMessage?.value(forKey: "subtype") != nil{
                                            subtype = jsonDataMessage?.value(forKey: "subtype") as! String
                                        }
                                        if(subtype == "invite"){
                                            /*  let username = jsonDataMessage?.value(forKey: "username") as! String
                                             let userJid: String? = UserDefaults.standard.string(forKey: "userJID")
                                             let arrdUserJid = userJid?.components(separatedBy: "@")
                                             let userUserJid = arrdUserJid?[0]
                                             if(username != userUserJid){
                                             var checkCount: Int64 = 0
                                             let supportedTeam = jsonDataMessage?.value(forKey: "supportteam") as! Int64
                                             let opponentTeam = jsonDataMessage?.value(forKey: "opponentteam") as! Int64
                                             //Check if user support both teams banter is based on
                                             if(supportedTeam == primaryTeamId)
                                             {
                                             
                                             checkCount = checkCount + 1
                                             }
                                             else if(supportedTeam == optionalTeam1Id)
                                             {
                                             
                                             checkCount = checkCount + 1
                                             }
                                             else if(supportedTeam == optionalTeam2Id)
                                             {
                                             
                                             checkCount = checkCount + 1
                                             }
                                             else if(supportedTeam == optionalTeam3Id)
                                             {
                                             
                                             checkCount = checkCount + 1
                                             }
                                             
                                             if(opponentTeam == primaryTeamId)
                                             {
                                             
                                             checkCount = checkCount + 1
                                             }
                                             else if(opponentTeam == optionalTeam1Id)
                                             {
                                             
                                             checkCount = checkCount + 1
                                             }
                                             else if(opponentTeam == optionalTeam2Id)
                                             {
                                             
                                             checkCount = checkCount + 1
                                             }
                                             else if(opponentTeam == optionalTeam3Id)
                                             {
                                             
                                             checkCount = checkCount + 1
                                             }
                                             
                                             
                                             else if(checkCount > 0)
                                             {
                                             
                                             let recRoomName: String = (jsonDataMessage?.value(forKey: "roomname") as? String)!
                                             self.banterRoomName = recRoomName
                                             let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                             
                                             
                                             //Call room details
                                             //Code to saveroom.
                                             var dictRequest = [String: AnyObject]()
                                             dictRequest["cmd"] = "getroomdetails" as AnyObject
                                             
                                             
                                             
                                             do {
                                             //Creating Request Data
                                             var dictRequestData = [String: AnyObject]()
                                             
                                             dictRequestData["roomid"] = recRoomId as AnyObject
                                             
                                             dictRequest["requestData"] = dictRequestData as AnyObject
                                             
                                             
                                             let dataGetBanterDetails = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                             let strGetBanterDetails = NSString(data: dataGetBanterDetails, encoding: String.Encoding.utf8.rawValue)! as String
                                             // print(strGetBanterDetails)
                                             self.sendRequestToAPI(strRequestDict: strGetBanterDetails)
                                             } catch {
                                             print(error.localizedDescription)
                                             }
                                             /*self.prepareMessageForServerIn(messageFromTrim!, messageContent: "You are invited to this banter room. You can join this banter room by tap on join button.", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, isJoined: false)*/
                                             
                                             
                                             }
                                             }*/
                                        }
                                        else if(subtype == "trivia"){
                                             let recRoomId: String = (jsonDataMessage?.value(forKey: "roomid") as? String)!
                                           // APIhometime = getUTCFormateDate()
                                           //APIgettriviatime = getUTCFormateDate()
                                            if(isOntriviaChatsView ){
                                                if(recRoomId == toUserJID){
                                                    let notificationName = Notification.Name("triviaclose")
                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                }
                                            }
                                            for i in 0...arrhometrivia.count-1 {
                                                       let dict: NSDictionary? = arrhometrivia[i] as? NSDictionary
                                                       if(dict != nil)
                                                       {
                                                        let GroupID = dict?.value(forKey: "GroupID") as! String
                                                        if(recRoomId == GroupID){
                                                            var dict1: [String: AnyObject] = arrhometrivia[i] as! [String: AnyObject]
                                                                       dict1["Status"] = "Finished" as AnyObject
                                                                       
                                                                       arrhometrivia[i] = dict1 as AnyObject
                                                            let notificationName = Notification.Name("resetslider")
                                                                                                                                                                  NotificationCenter.default.post(name: notificationName, object: nil)
                                                            
                                                            break
                                                                       
                                                        }
                                                }
                                            }
                                            for i in(0..<arrupcommingTrivia.count).reversed() {
                                                                                             let dict: NSDictionary? = arrupcommingTrivia[i] as? NSDictionary
                                                                                             if(dict != nil)
                                                                                             {
                                                                                              let GroupID = dict?.value(forKey: "GroupID") as! String
                                                                                              if(recRoomId == GroupID){
                                                                                                arrupcommingTrivia.remove(at: i)                            /*var dict1: [String: AnyObject] = arrupcommingTrivia[i] as! [String: AnyObject]
                                                                                                             dict1["Status"] = "Finished" as AnyObject
                                                                                                             
                                                                                                             arrupcommingTrivia[i] = dict1 as AnyObject*/
                                                                                                  let notificationName = Notification.Name("reloadtable")
                                                                                                                                                                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                  
                                                                                                  break
                                                                                                             
                                                                                              }
                                                                                      }
                                                                                  }
                                          /*  let messageId = message.attributeStringValue(forName: "id")
                                                                                               let messageTo = message.attributeStringValue(forName: "to")
                                                                                               let messageFrom = message.attributeStringValue(forName: "from")
                                                                                               let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                                                               let messageFromTrim = arrMessageFrom?[0]
                                                                                               
                                            self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)*/
                                        }
                                        else{
                                            let idString = UserDefaults.standard.string(forKey: "broadcastallid") as! String
                                            let jmessageId = jsonDataMessage?.value(forKey: "messageid") as! String
                                            
                                            DispatchQueue.main.asyncAfter(deadline: .now() + 15.0) {
                                                if(jmessageId != idString){
                                                    if(self.ismodalshow == false){
                                                        self.ismodalshow = true
                                                        let messageId = message.attributeStringValue(forName: "id")
                                                        let messageTo = message.attributeStringValue(forName: "to")
                                                        let messageFrom = message.attributeStringValue(forName: "from")
                                                        let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                        let messageFromTrim = arrMessageFrom?[0]
                                                        
                                                        self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                        if let recMessageType = jsonDataMessage?.value(forKey: "modaltype")
                                                        {
                                                            let receivedMessageType = recMessageType as! String
                                                            
                                                            if(receivedMessageType == "action"){
                                                                let mediatype = jsonDataMessage?.value(forKey: "mediatype") as! String
                                                                let mediaurl = jsonDataMessage?.value(forKey: "mediaurl") as! String
                                                                let actionbtn = jsonDataMessage?.value(forKey: "actionbtn") as! String
                                                                let action = jsonDataMessage?.value(forKey: "action") as! String
                                                                let link = jsonDataMessage?.value(forKey: "link") as! String
                                                                let linktitle = jsonDataMessage?.value(forKey: "linktitle") as! String
                                                                let message = jsonDataMessage?.value(forKey: "message") as! String
                                                                self.customAlertVC = CustomAlertViewController.instantiate()
                                                                guard let customAlertVC = self.customAlertVC else { return }
                                                                
                                                                customAlertVC.titleString = "contactsync"
                                                                customAlertVC.messageString = message
                                                                customAlertVC.mediatype = mediatype
                                                                customAlertVC.mediaurl = mediaurl
                                                                customAlertVC.ActionTitle = actionbtn
                                                                customAlertVC.actioncommand = action
                                                                customAlertVC.actionlink = link
                                                                customAlertVC.LinkTitle = linktitle
                                                                let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                                                // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                                                popupVC.cornerRadius = 20
                                                                self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                                                
                                                            }
                                                            else{
                                                                let mediatype = jsonDataMessage?.value(forKey: "mediatype") as! String
                                                                let mediaurl = jsonDataMessage?.value(forKey: "mediaurl") as! String
                                                                let actionbtn = jsonDataMessage?.value(forKey: "actionbtn") as! String
                                                                let action = jsonDataMessage?.value(forKey: "action") as! String
                                                                let link = jsonDataMessage?.value(forKey: "link") as! String
                                                                let linktitle = jsonDataMessage?.value(forKey: "linktitle") as! String
                                                                let message = jsonDataMessage?.value(forKey: "message") as! String
                                                                self.infoAlertVC = InfoAlertViewController.instantiate()
                                                                guard let customAlertVC = self.infoAlertVC else { return }
                                                                
                                                                customAlertVC.titleString = "contactsync"
                                                                customAlertVC.messageString = message
                                                                customAlertVC.mediatype = mediatype
                                                                customAlertVC.mediaurl = mediaurl
                                                                customAlertVC.ActionTitle = actionbtn
                                                                customAlertVC.actioncommand = action
                                                                customAlertVC.actionlink = link
                                                                customAlertVC.LinkTitle = linktitle
                                                                let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                                                // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                                                popupVC.cornerRadius = 20
                                                                self.window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                                                
                                                            }
                                                        }
                                                    }
                                                }
                                                else{
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                }
                                            }
                                            
                                        }
                                        
                                        
                                    } catch let error as NSError {
                                        print(error)
                                    }
                                }
                                // }
                                // }
                                
                                //}
                            }
                            else if(messageFromTrimTemp == broadcastinactive){
                                if(isSetInactiveTime){
                                    isSetInactiveTime = false
                                    
                                    let messageId = message.attributeStringValue(forName: "id")
                                    let messageTo = message.attributeStringValue(forName: "to")
                                    let messageFrom = message.attributeStringValue(forName: "from")
                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                    let messageFromTrim = arrMessageFrom?[0]
                                    
                                    if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                    {
                                        do {
                                            let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                            let idString = UserDefaults.standard.string(forKey: "broadcastinactiveid") as! String
                                            let jmessageId = jsonDataMessage?.value(forKey: "messageid") as! String
                                            if(jmessageId != idString){
                                                if(!ismodalshow){
                                                    ismodalshow = true
                                                    isSetInactiveTime = false
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    if let recMessageType = jsonDataMessage?.value(forKey: "modaltype")
                                                    {
                                                        let receivedMessageType = recMessageType as! String
                                                        
                                                        if(receivedMessageType == "action"){
                                                            let mediatype = jsonDataMessage?.value(forKey: "mediatype") as! String
                                                            let mediaurl = jsonDataMessage?.value(forKey: "mediaurl") as! String
                                                            let actionbtn = jsonDataMessage?.value(forKey: "actionbtn") as! String
                                                            let action = jsonDataMessage?.value(forKey: "action") as! String
                                                            let link = jsonDataMessage?.value(forKey: "link") as! String
                                                            let linktitle = jsonDataMessage?.value(forKey: "linktitle") as! String
                                                            let message = jsonDataMessage?.value(forKey: "message") as! String
                                                            customAlertVC = CustomAlertViewController.instantiate()
                                                            guard let customAlertVC = customAlertVC else { return }
                                                            
                                                            customAlertVC.titleString = "contactsync"
                                                            customAlertVC.messageString = message
                                                            customAlertVC.mediatype = mediatype
                                                            customAlertVC.mediaurl = mediaurl
                                                            customAlertVC.ActionTitle = actionbtn
                                                            customAlertVC.actioncommand = action
                                                            customAlertVC.actionlink = link
                                                            customAlertVC.LinkTitle = linktitle
                                                            let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                                            // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                                            popupVC.cornerRadius = 20
                                                            window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                                            
                                                        }
                                                        else{
                                                            let mediatype = jsonDataMessage?.value(forKey: "mediatype") as! String
                                                            let mediaurl = jsonDataMessage?.value(forKey: "mediaurl") as! String
                                                            let actionbtn = jsonDataMessage?.value(forKey: "actionbtn") as! String
                                                            let action = jsonDataMessage?.value(forKey: "action") as! String
                                                            let link = jsonDataMessage?.value(forKey: "link") as! String
                                                            let linktitle = jsonDataMessage?.value(forKey: "linktitle") as! String
                                                            let message = jsonDataMessage?.value(forKey: "message") as! String
                                                            infoAlertVC = InfoAlertViewController.instantiate()
                                                            guard let customAlertVC = infoAlertVC else { return }
                                                            
                                                            customAlertVC.titleString = "contactsync"
                                                            customAlertVC.messageString = message
                                                            customAlertVC.mediatype = mediatype
                                                            customAlertVC.mediaurl = mediaurl
                                                            customAlertVC.ActionTitle = actionbtn
                                                            customAlertVC.actioncommand = action
                                                            customAlertVC.actionlink = link
                                                            customAlertVC.LinkTitle = linktitle
                                                            let popupVC = PopupViewController(contentController: customAlertVC, position: .center(CGPoint(x: 0, y: 0)), popupWidth: 310, popupHeight: 420)
                                                            // let popupVC = PopupViewController(contentController: customAlertVC, popupWidth: 300, popuphi)
                                                            popupVC.cornerRadius = 20
                                                            window?.visibleViewController?.navigationController?.present(popupVC, animated: true, completion: nil)
                                                            
                                                        }
                                                    }
                                                }
                                            }
                                            else{
                                                isSetInactiveTime = false
                                                self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                            }
                                            
                                        } catch let error as NSError {
                                            print(error)
                                        }
                                    }
                                    // }
                                    
                                    // }
                                    
                                }
                                else{
                                    isSetInactiveTime = false
                                    
                                    let messageId = message.attributeStringValue(forName: "id")
                                    let messageTo = message.attributeStringValue(forName: "to")
                                    let messageFrom = message.attributeStringValue(forName: "from")
                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                    let messageFromTrim = arrMessageFrom?[0]
                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                }
                            }
                            else {
                                if let dataMessage = messageContent.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
                                {
                                    do {
                                        let jsonDataMessage = try JSONSerialization.jsonObject(with:dataMessage , options: []) as? NSDictionary
                                        print("nitesh\(jsonDataMessage?.value(forKey: "roomtype") as! String)")
                                        let recRoomType: String = jsonDataMessage?.value(forKey: "roomtype") as! String
                                        if(recRoomType == "trivia"){
                                            if let recMessageType = jsonDataMessage?.value(forKey: "type")
                                            {
                                                //Manupulate this to show name in contacts
                                                let recBanterNickName: String = ""
                                                let receivedMessageType = recMessageType as! String
                                                
                                                
                                                //Else of this we have to manage image/video/files etc.
                                                if(receivedMessageType == "text")
                                                {
                                                    let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    var messageSubType :String = ""
                                                    if let sub_type = jsonDataMessage?.value(forKey: "sub_type")
                                                    {
                                                        messageSubType = sub_type as! String
                                                    }                                                     //let mysupportteam: Int = (jsonDataMessage?.value(forKey: "supportteam") as? Int)!
                                                    var mysupportteam: Int64 = 0
                                                    //let isJoined: Bool = sender.isJoined
                                                    if(recRoomType == "banter"){
                                                        mysupportteam = (jsonDataMessage?.value(forKey: "supportteam") as? Int64)!
                                                    }
                                                    let msgSentByUserToGroup: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    
                                                    
                                                    /*if(!msgSentByUserToGroup.isEmpty)
                                                     {
                                                     messageTo = msgSentByUserToGroup
                                                     }*/
                                                    
                                                    
                                                    var roomSubject: String = ""
                                                    if let roomSub = sender.roomSubject
                                                    {
                                                        roomSubject = roomSub
                                                    }
                                                    //let isJoined: Bool = sender.isJoined
                                                    
                                                    
                                                    
                                                    /*if #available(iOS 10.0, *) {
                                                     let content = UNMutableNotificationContent()
                                                     content.title = NSString.localizedUserNotificationString(forKey: "Wake up!", arguments: nil)
                                                     content.body = NSString.localizedUserNotificationString(forKey: "Rise and shine! It's morning time!",
                                                     arguments: nil)
                                                     content.sound = UNNotificationSound.default()
                                                     let request = UNNotificationRequest(identifier: "MorningAlarm", content: content, trigger: nil)
                                                     }*/
                                                    
                                                    
                                                    //Code to prepare data before send to server
                                                    self.prepareMessageForServerIn(messageFromTrim!, messageContent: recMessageContent, messageType: "text", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: recBanterNickName, banterRoomName: roomSubject, isJoined: "yes", msgSentByUserToGroup: msgSentByUserToGroup, fanSupportTeam: mysupportteam, messageSubType:  messageSubType)
                                                    
                                                    //We have recevied message from user so he will always To for me
                                                    self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                    
                                                    if (self.isOnChatView && (messageFromTrim! == self.toUserJID))
                                                    {
                                                        self.funSendGroupMessageReceived(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                        //self.funGetSetLocalChats(messageId: messageId!, chatStatus: "read", recReadUserJid: messageFromTrim!, isScrollToBottom: false)
                                                    }
                                                    
                                                  
                                                    //End
                                                    
                                                    
                                                    
                                                }
                                                if(receivedMessageType == "header")
                                                {
                                                    let recSubType: String = (jsonDataMessage?.value(forKey: "subtype") as? String)!
                                                                                                      
                                                   if(recSubType == "roomuseradd")
                                                   {
                                                    
                                                    let recMessageContent: String = (jsonDataMessage?.value(forKey: "value") as? String)!
                                                    let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                    
                                                    let messageId = message.attributeStringValue(forName: "id")
                                                    let messageTo = message.attributeStringValue(forName: "to")
                                                    let messageFrom = message.attributeStringValue(forName: "from")
                                                    let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                                    let messageFromTrim = arrMessageFrom?[0]
                                                    let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
                                                    var login: String? = ""
                                                    if(!istriviauser){
                                                        
                                                         login = UserDefaults.standard.string(forKey: "userJID")
                                                    }else{
                                                         login = UserDefaults.standard.string(forKey: "triviauser")
                                                    }
                                                    let recRoomType: String = (jsonDataMessage?.value(forKey: "roomtype") as? String)!
                                                    var roomSubject: String = ""
                                                    if let roomSub = sender.roomSubject
                                                    {
                                                        roomSubject = roomSub
                                                    }
                                                     let objUserName: String = (jsonDataMessage?.value(forKey: "username") as? String)!
                                                    var buser = ""
                                                    let userD2: UserDefaults = UserDefaults(suiteName: "group.com.tridecimal.ltd.footballfan")!
                                                    //let login: String? = userD2.string(forKey: "arrBanterSound")
                                                    var allPhoneContacts = NSArray()
                                                    let localAllcontacts: String? = userD2.string(forKey: "allPhoneContacts")
                                                    //let useravatar: String = (jsonDataMessage?.value(forKey: "userAvtar") as? String)!
                                                    if localAllcontacts != nil
                                                    {
                                                        //Code to parse json data
                                                        if let data = localAllcontacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                            do {
                                                                allPhoneContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                
                                                            } catch let error as NSError {
                                                                print(error)
                                                            }
                                                        }
                                                    }
                                                    if(allPhoneContacts.count>0){
                                                        
                                                        
                                                        var strName1: String = ""
                                                        _ = allPhoneContacts.filter({ (text) -> Bool in
                                                            let tmp: NSDictionary = text as! NSDictionary
                                                            let val: String = tmp.value(forKey: "jid") as! String
                                                            let val2: String = objUserName
                                                            //let arrReadUserJid = val.components(separatedBy: "@")
                                                            //let userjidTrim: String = arrReadUserJid[0]
                                                            
                                                            
                                                            if(val.contains(val2))
                                                            {
                                                                let ind = tmp.value(forKey: "name") as! String
                                                                //print(ind)
                                                                //tempPoneContacts.removeObject(at: Int(ind))
                                                                if(ind == " " || ind == nil)
                                                                {
                                                                    strName1 = val2
                                                                }
                                                                else{
                                                                    strName1 = tmp.value(forKey: "name") as! String
                                                                }
                                                                
                                                                //return true
                                                            }
                                                            
                                                            // }
                                                            
                                                            
                                                            return false
                                                        })
                                                        
                                                        
                                                        if(!strName1.isEmpty)
                                                        {
                                                            buser = strName1
                                                        }
                                                        else{
                                                            // buser = objUserName
                                                            let arrUserName = objUserName.components(separatedBy: "@")
                                                            let objUserNameTrim = arrUserName[0]
                                                            buser = objUserNameTrim
                                                        }}
                                                    else{
                                                        //buser = objUserName
                                                        let arrUserName = objUserName.components(separatedBy: "@")
                                                        let objUserNameTrim = arrUserName[0]
                                                        buser = objUserNameTrim
                                                    }
                                                    if(login == objUserName){
                                                        // self.prepareMessageForServerIn(messageFromTrim!, messageContent: "n", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                    }
                                                    else
                                                    {
                                                        if(recMessageContent.contains("has joined via Invite Link")){
                                                            prepareMessageForServerIn(messageFromTrim!, messageContent: buser + " has joined via Invite Link", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                        }
                                                        else{
                                                            prepareMessageForServerIn(messageFromTrim!, messageContent: buser + " has joined", messageType: "header", messageTime: recMessageTime as! Int64, messageId: messageId!, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: recRoomType, recBanterNickName: "", banterRoomName: roomSubject)
                                                        }
                                                        //Code to prepare data before send to server
                                                        
                                                    }
                                                    let notificationName = Notification.Name("triviaMessageReceivedFromServer")
                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                    /*var dictRequest = [String: AnyObject]()
                                                    dictRequest["cmd"] = "gettriviacount" as AnyObject
                                                    dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
                                                    dictRequest["device"] = "ios" as AnyObject
                                                    var reqParams = [String: AnyObject]()
                                                    //reqParams["cmd"] = "getfanupdates" as AnyObject
                                                    let arrdRoomJid = messageFromTrim?.components(separatedBy: "@")
                                                    let roomid = arrdRoomJid?[0]
                                                    reqParams["groupid"] = roomid as AnyObject
                                                    
                                                    //reqParams["id"] = 1 as AnyObject
                                                    reqParams["type"] = "viewcount" as AnyObject
                                                    let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                                    if(myjid != nil){
                                                        let arrdUserJid = myjid?.components(separatedBy: "@")
                                                        let userUserJid = arrdUserJid?[0]
                                                        reqParams["username"] = userUserJid as AnyObject?
                                                    }
                                                    else{
                                                        reqParams["username"] = "" as AnyObject
                                                    }
                                                    
                                                    dictRequest["requestData"] = reqParams as AnyObject
                                                    //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                    //print(dictRequest)
                                                    do {
                                                       /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                        let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                                                        let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                        //  print(escapedString!)
                                                        // print(strFanUpdates)
                                                        var reqParams1 = [String: AnyObject]()
                                                        reqParams1["request"] = strFanUpdates as AnyObject
                                                        let url = MediaAPIjava + "request=" + escapedString!
                                                       */ //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                                                        Alamofire.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                          headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                            // 2
                                                            .responseJSON { response in
                                                                //print(response.result.value)
                                                                if response.result.error == nil {
                                                                    if let json = response.result.value as? Dictionary<String, Any>{
                                                                        // print(" JSON:", json)
                                                                        let status1: Bool = json["success"] as! Bool
                                                                        if(status1){
                                                                            let response: NSArray = json["responseData"]  as! NSArray
                                                                            let roomDetailsDict = response[0] as! [String : AnyObject]
                                                                            
                                                                            let count = roomDetailsDict["viewcount"] as! AnyObject
                                                                            let tabIndex:[String: Any] = ["index": count]
                                                                            let notificationName = Notification.Name("triviauseronline")
                                                                            NotificationCenter.default.post(name: notificationName, object: nil,userInfo: tabIndex)
                                                                        }
                                                                        else{
                                                                            
                                                                        }
                                                                    }
                                                                } else {
                                                                    debugPrint(response.result.error as Any)
                                                                }
                                                        }
                                                    } catch {
                                                        print(error.localizedDescription)
                                                    }*/
                                                }
                                            }
                                            }
                                            let notificationName = Notification.Name("triviaMessageReceivedFromServer")
                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                            
                                        }
                                        else{
                                            let messageId = message.attributeStringValue(forName: "id")
                                            let messageTo = message.attributeStringValue(forName: "to")
                                            let messageFrom = message.attributeStringValue(forName: "from")
                                            let arrMessageFrom = messageFrom?.components(separatedBy: "/")
                                            let messageFromTrim = arrMessageFrom?[0]
                                            self.funSendGroupMessageDelivery(messageTo: messageFromTrim!, messageFrom: messageTo!, messageId: messageId!)
                                                                                               
                                        }
                                    } catch let error as NSError {
                                        print(error)
                                    }
                                }
                            }
                        }
                        
                    }
                    //End
                    
                    
                }
                
            }
        }
        //}
        
        
        
        
        
    }
    //End
    
    func shortCodeGenerator(length: Int) -> String {
        
        let letters : NSString = "abcdefghijklmnopqrstuvwxyz0123456789"
        
        let randomString : NSMutableString = NSMutableString(capacity: length)
        
        for _ in (1...length) {
            let length = UInt32 (letters.length)
            let rand = arc4random_uniform(length)
            randomString.appendFormat("%C", letters.character(at: Int(rand)))
        }
        
        return randomString as String
        
    }
    
    /*func msgEncode(_ s: String) -> String {
     let data = s.data(using: .nonLossyASCII, allowLossyConversion: true)!
     return String(data: data, encoding: .utf8)!
     }
     
     func msgDecode(_ s: String) -> String? {
     let data = s.data(using: .utf8)!
     return String(data: data, encoding: .nonLossyASCII)
     }*/
    
    //New code to call PHP FFAPI
    func callPHPFFAPI(_ cmd: String, username: String = "", useremail: String = "", mobile: Int64 = 0, countryCode: String = "", gatewayId: Int64 = 0, requestURL: String = "", time: Int64 = 0, receivedOTP: String = "")
    {
        Clslogging.logdebug(State: "\(cmd) ffApi start")
        let boundary = self.generateBoundaryString()
        var request = URLRequest(url: URL(string: MediaAPI)!)
        request.httpMethod = "POST"
        //let postString = "cmd=image&jid=919826615203&byte="+base64String
        //request.httpBody = postString.data(using: .utf8)
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        var reqParams = [String: String]()
        reqParams["cmd"] = cmd
        // reqParams["mobile"] = String(mobile)
        
        if(cmd == "vmnlookup")
        {
            reqParams["countryCode"] = countryCode
        }
        if(cmd == "forgotpassword")
        {
            
            reqParams["email"] = useremail
        }
        if(cmd == "forgotusername")
        {
            reqParams["email"] = useremail
        }
        if(cmd == "sendotp")
        {
            reqParams["gatewayid"] = String(gatewayId)
            reqParams["requesturl"] = requestURL
            reqParams["timestamp"] = String(time)
            
        }
        
        if(cmd == "verifyotp")
        {
            reqParams["email"] = useremail
            //reqParams["timestamp"] = String(time)
            
        }
        
        if(cmd == "checkusername")
        {
            reqParams["username"] = username
            //reqParams["timestamp"] = String(time)
            
        }
        if(cmd == "checkemail")
        {
            reqParams["email"] = useremail
            //reqParams["timestamp"] = String(time)
            
        }
        reqParams["key"] = "kXfqS9wUug6gVKDB"
        reqParams["device"] = "ios" as String
        
        //print(reqParams)
        
        request.httpBody = self.createRequestBody(parameters:reqParams as [String : AnyObject], filePathKey:"uploaded", boundary:boundary) as Data
        
        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
            if let data = data {
                if String(data: data, encoding: String.Encoding.utf8) != nil {
                    //  print(stringData) //JSONSerialization
                    
                    
                    
                    //print(time)
                    do {
                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                         Clslogging.logdebug(State: "\(cmd) ffApi recponse:")
                        Clslogging.loginfo(State: "\(cmd) ffApi ", userinfo: jsonData as! [String : AnyObject])
                        if(cmd == "vmnlookup")
                        {
                            let lookupMobile: Int64 = (jsonData?.value(forKey: "phoneNumber") as? Int64)!
                            let phoneType: String = (jsonData?.value(forKey: "type") as? String)!
                            
                            
                            if(lookupMobile == mobile && phoneType == "mobile")
                            {
                                //Look up succeded
                                //Now show the SMS options do send notification
                                //recMobile shoulb be dynamic according to users country code
                                let mobile: String = "+447418310450"
                                let recMobile:[String: String] = ["recMobile": mobile]
                                let notificationName = Notification.Name("registerUserTemp")
                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recMobile)
                                
                            }
                        }
                        else if(cmd == "sendotp")
                        {
                            
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            //let error: String = (jsonData?.value(forKey: "error") as? String)!
                            if(isSuccess)
                            {
                                //Show OTP Screen
                                let notificationName = Notification.Name("showVerifyOTPScreen")
                                NotificationCenter.default.post(name: notificationName, object: nil)
                            }
                            else
                            {
                                
                            }
                            
                        }
                        else if(cmd == "forgotpassword")
                        {
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            //let error: String = (jsonData?.value(forKey: "error") as? String)!
                            if(isSuccess)
                            { let masseg:String=jsonData?.value(forKey: "msg") as! String
                                // let tempusername:String=jsonData?.value(forKey: "username") as! String
                                let tempuseremail:String=jsonData?.value(forKey: "email") as! String
                                let temppassword:NSNumber=jsonData?.value(forKey: "otp") as! NSNumber
                                let recStatus:[String: String] = ["OTPStatus":masseg ,"email":tempuseremail,"otp":"\(temppassword)"]
                                
                                let notificationName = Notification.Name("forgetpasswordrequstsucss")
                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                            }
                            else{
                                let masseg:String=jsonData?.value(forKey: "error") as! String
                                let recStatus:[String: String] = ["OTPStatus":masseg ]
                                let notificationName = Notification.Name("forgetrequstfail")
                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                            }
                        }
                        else if(cmd == "forgotusername")
                        {
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            //let error: String = (jsonData?.value(forKey: "error") as? String)!
                            if(isSuccess)
                            { let masseg:String=jsonData?.value(forKey: "msg") as! String
                                let recStatus:[String: String] = ["OTPStatus":masseg ]
                                
                                let notificationName = Notification.Name("forgetrequstsucss")
                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                            }
                            else{
                                let masseg:String=jsonData?.value(forKey: "error") as! String
                                let recStatus:[String: String] = ["OTPStatus":masseg ]
                                let notificationName = Notification.Name("forgetrequstfail")
                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                            }
                        }
                        else if(cmd == "checkusername")
                        {
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            //let error: String = (jsonData?.value(forKey: "error") as? String)!
                            
                            let recStatus:[String: Bool] = ["success":isSuccess]
                            
                            let notificationName = Notification.Name("usernameSuccess")
                            NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                        }
                        else if(cmd == "checkemail")
                        {
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            //let error: String = (jsonData?.value(forKey: "error") as? String)!
                            
                            let recStatus:[String: Bool] = ["success":isSuccess]
                            let notificationName = Notification.Name("useremailSuccess")
                            NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                            
                            
                        }
                        else if(cmd == "verifyotp")
                        {
                            
                            let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                            //let error: String = (jsonData?.value(forKey: "error") as? String)!
                            if(isSuccess)
                            {
                                let Userjid =  (jsonData?.value(forKey: "username") as? String)! + JIDPostfix
                                let Usename =  (jsonData?.value(forKey: "username") as? String)!
                                let userpassword = (jsonData?.value(forKey: "password") as? String)
                                UserDefaults.standard.setValue(Userjid, forKey: "userJID")
                                UserDefaults.standard.synchronize()
                                UserDefaults.standard.setValue(userpassword, forKey: "userpassword")
                                UserDefaults.standard.synchronize()
                                UserDefaults.standard.setValue(Usename, forKey: "registerusername")
                                UserDefaults.standard.synchronize()
                                UserDefaults.standard.setValue("yes", forKey: "bylogin")
                                UserDefaults.standard.synchronize()
                                //Trying to connect user
                                 UserDefaults.standard.setValue(false, forKey: "istriviauser")
                                UserDefaults.standard.setValue(nil, forKey: "tempotp")
                                UserDefaults.standard.synchronize()
                                //print("Trying to connect user")
                                //if(self.xmppStream?.isDisconnected())!
                                //{
                                 Clslogging.logdebug(State: "verifyotp go to Connect")
                                if(self.connect()){
                                    print("is conect")
                                }
                                else{
                                    let recStatus:[String: String] = ["OTPStatus": "invalid"]
                                                                               let notificationName = Notification.Name("verifyOTPfail")
                                                                               NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                                }
                                //self.connect()
                                //}
                                //show buddy list
                                
                            }
                            else
                            {
                                //print(error)
                                //Show Error in Alert
                                let recStatus:[String: String] = ["OTPStatus": "invalid"]
                                let notificationName = Notification.Name("verifyOTPStatus")
                                NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                            }
                            
                            
                        }
                        
                        
                        
                    } catch let error as NSError {
                        print(error)
                        if(cmd == "verifyotp")
                                           {
                                            let recStatus:[String: String] = ["OTPStatus": "invalid"]
                                            let notificationName = Notification.Name("verifyOTPfail")
                                            NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                                           }
                        else if(cmd == "forgotpassword")
                                                                  {
                                                                   let masseg:String = "We apologise for a technical issue on our server. Please try again later."
                                                                   let recStatus:[String: String] = ["OTPStatus":masseg ]
                                                                   let notificationName = Notification.Name("forgetrequstfail")
                                                                   NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                                           }
                        else if(cmd == "forgotusername")
                                               {
                                                let masseg:String = "We apologise for a technical issue on our server. Please try again later."
                                                                                                          let recStatus:[String: String] = ["OTPStatus":masseg ]
                                                                                                          let notificationName = Notification.Name("forgetrequstfail")
                                                                                                          NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                        }
                    }
                    
                    
                    
                    
                    
                }
                else{
                     if(cmd == "verifyotp")
                    {
                        let recStatus:[String: String] = ["OTPStatus": "invalid"]
                        let notificationName = Notification.Name("verifyOTPfail")
                        NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                        
                    }
                    else if(cmd == "forgotpassword")
                                           {
                                            let masseg:String = "We apologise for a technical issue on our server. Please try again later."
                                            let recStatus:[String: String] = ["OTPStatus":masseg ]
                                            let notificationName = Notification.Name("forgetrequstfail")
                                            NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                    }
                    else if(cmd == "forgotusername")
                                                         {
                                                          let masseg:String = "We apologise for a technical issue on our server. Please try again later."
                                                                                                                    let recStatus:[String: String] = ["OTPStatus":masseg ]
                                                                                                                    let notificationName = Notification.Name("forgetrequstfail")
                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                                  }
                }
            }
            else
            {
                // print("Error VMN Lookup")
                if(cmd == "verifyotp")
                                   {
                                    let recStatus:[String: String] = ["OTPStatus": "invalid"]
                                    let notificationName = Notification.Name("verifyOTPfail")
                                    NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                                   }
                else if(cmd == "forgotpassword")
                                                          {
                                                           let masseg:String = "We apologise for a technical issue on our server. Please try again later."
                                                           let recStatus:[String: String] = ["OTPStatus":masseg ]
                                                           let notificationName = Notification.Name("forgetrequstfail")
                                                           NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                                   }
                else if(cmd == "forgotusername")
                                       {
                                        let masseg:String = "We apologise for a technical issue on our server. Please try again later."
                                                                                                  let recStatus:[String: String] = ["OTPStatus":masseg ]
                                                                                                  let notificationName = Notification.Name("forgetrequstfail")
                                                                                                  NotificationCenter.default.post(name: notificationName, object: nil, userInfo: recStatus)
                }
            }
        })
        task.resume()
        /*let request = NSMutableURLRequest(url: NSURL(string: "http://football.cinefun.tv/ffapi/ffapi.php")! as URL)
         //let session = URLSession.shared
         request.httpMethod = "POST"
         
         let postString = "cmd=" + cmd + "&jid=" + mobile + "&countryCode=" + countryCode
         request.setValue("application/x-www-form-urlencoded; charset=utf-8", forHTTPHeaderField: "Content-Type")
         request.httpBody = postString.data(using: .utf8)
         */
        
        
        
        /*var request = URLRequest(url: URL(string: "http://football.cinefun.tv/ffapi/ffapi.php")!)
         request.httpMethod = "POST"
         let postString = "cmd=" + cmd + "&jid=" + mobile + "&countryCode=" + countryCode
         print(postString)
         request.setValue("application/x-www-form-urlencoded; charset=utf-8", forHTTPHeaderField: "Content-Type")
         request.httpBody = postString.data(using: .utf8)
         
         let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
         if let data = data {
         if let stringData = String(data: data, encoding: String.Encoding.utf8) {
         print(stringData) //JSONSerialization
         
         
         
         
         
         
         }
         }
         else
         {
         print("Error in vmn lookup")
         }
         })
         task.resume()*/
    }
    func BantersoundUpdateForNotification () {
        // var resultArry = [Bantersound]()
        // resultArry = Bantersound.rows() as! [Bantersound]
        let resultArry = db.query(sql:"SELECT * FROM Bantersound")
        do {
            if(resultArry.count > 0)
            {
                let dataArrAllChats = try JSONSerialization.data(withJSONObject: resultArry, options: .prettyPrinted)
                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                let userD: UserDefaults = UserDefaults.init(suiteName: "group.com.tridecimal.ltd.footballfan")!
                userD.set(strArrAllChats, forKey: "arrBanterSound")
                userD.synchronize()
            }
        } catch {
            //print(error.localizedDescription)
        }
    }
    func deleteAllChat(supportTeam: Int64,opponentTeam: Int64 ){
       
        //Get from local user defaults temp
        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
        if localArrAllChats != nil
        {
            //Code to parse json data
            if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                do {
                    arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                    
                } catch let error as NSError {
                    print(error)
                }
            }
        }
        if(arrAllChats.count > 0)
        {
            if let dt = arrAllChats[toUserJID]
            {
                arrUserChat = dt["Chats"] as! [AnyObject]
                for message in arrUserChat
                {
                    let messageType = message.value(forKey: "messageType") as! String
                    
                    if(messageType == "image" || messageType == "video")
                    {
                        var imageId = message.value(forKey: "filePath") as! String
                        
                        //let fileManager = FileManager.default
                        imageId = imageId.replace(target: "file://", withString: "")
                        /*  do {
                         let fileManager = FileManager.default
                         
                         // Check if file exists
                         if fileManager.fileExists(atPath: imageId) {
                         // Delete file
                         try fileManager.removeItem(atPath: imageId)
                         // print("File remove this")
                         } else {
                         // print("File does not exist")
                         }
                         
                         }
                         catch let error as NSError {
                         //print("An error took place: \(error)")
                         }*/
                    }
                    //let message: NSDictionary = self.appDelegate().arrUserChat[indexP.row] as! NSDictionary
                }
            }}
        var tmpArrChatDetails = [String : AnyObject]()
        tmpArrChatDetails["isHistory"] = false as AnyObject
        self.arrUserChat = []
        tmpArrChatDetails["Chats"] = arrUserChat as AnyObject
         isgetHistory = false
        self.arrAllChats[toUserJID] = tmpArrChatDetails as AnyObject
        //self.arrAllChats.removeValue(forKey: toUserJID)
        //Save array to local temp
        
        do {
            if(arrAllChats.count > 0)
            {
                let dataArrAllChats = try JSONSerialization.data(withJSONObject: arrAllChats, options: .prettyPrinted)
                let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                UserDefaults.standard.synchronize()
            }
        } catch {
            // print(error.localizedDescription)
        }
        
        //End
        
        let time: Int64 = self.getUTCFormateDate()
        let messageTo = UserDefaults.standard.string(forKey: "userJID")
        if(curRoomType == "chat"){
            self.prepareMessageForServerIn(toUserJID, messageContent: "Cleared all messages.", messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: self.curRoomType, recBanterNickName: "",  banterRoomName: toName,  isFromClearChat: true)
            
        }
        else{
            self.prepareMessageForServerIn(toUserJID, messageContent: "Cleared all messages.", messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: self.curRoomType, recBanterNickName: "",  banterRoomName: toName, isJoined: isJoined, isAdmin:isAdmin, supportedTeam: supportTeam, opponentTeam: opponentTeam, isFromClearChat: true, mySupportTeam: mySupportedTeam)
            
        }
        
        
        
        if(self.isOnChatView)
        {
            //Post notification if user is on chats window when chats cleared
            let notificationName = Notification.Name("MessageReceivedFromServer")
            NotificationCenter.default.post(name: notificationName, object: nil)
        }
        callclearchat()
    }
    func callclearchat()  {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "clearchat" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        do {
             let time: Int64 = self.getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            let arrReadChatJid = toUserJID.components(separatedBy: "@")
            let to: String? = arrReadChatJid[0]
            //appDelegate().mySupportedTeam = joinTeamId
            dictRequestData["to"] = to as AnyObject//appDelegate().toUserJID as AnyObject
            dictRequestData["time"] = time as AnyObject//joinTeamId as AnyObject//appDelegate().myTeamId as AnyObject
            dictRequestData["username"] = myMobile as AnyObject
            // dictRequestData["status"] = "active" as AnyObject
            //dictRequestData["isfcjoinbanter"] = appDelegate().GetvalueFromInsentiveConfigTable(Key: isfcjoinbanter)
            // dictRequestData["fcjoinbanter"] = appDelegate().GetvalueFromInsentiveConfigTable(Key: fcjoinbanter)
            dictRequestData["chattype"] = curRoomType as AnyObject//appDelegate().GetvalueFromInsentiveConfigTable(Key: fcbanterth)
            dictRequest["requestData"] = dictRequestData as AnyObject
            //dictRequest.setValue(dictMobiles, forKey: "requestData")
            //print(dictRequest)
            
           // let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
           // let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
            //print(strSaveBanter)
            //sendRequestToAPI(strRequestDict: strSaveBanter)
       
       /* let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                      let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                      //print(strByPlace)
                                                                      let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                      
                                                                      let url = MediaAPIjava + "request=" + escapedString!*/
                                                                     AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                     headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                       // 2
                                                                                                       .responseJSON { response in
                                                                                                        switch response.result {
                                                                                                                                                 case .success(let value):
                                                                                                                                                     if let json = value as? [String: Any] {
                                                                                                                                                         // print(" JSON:", json)
                                                                                                                                                         let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                         // self.finishSyncContacts()
                                                                                                                                                         //print(" status:", status1)
                                                                                                                                                      if(status1){
                                                                                                                                                             
                                                                                                                                                         }
                                                                                                                                                         else{
                                                                                                                                                                                                           
                                                                                                                                                             //Show Error
                                                                                                                                                         }
                                                                                                                                                     }
                                                                                                                                                 case .failure(let error):
                                                                                            debugPrint(error)
                                                                                                        break
                                                                                                                                                     // error handling
                                                                                                                                      
                                                                                                                                                 }
                                                                                                 
                                                                                                   }
            } catch {
                       print(error.localizedDescription)
                   }
    }
    
    func fillMyTeams()
    {
        //Code to show team images
        
        let pTeamId: Int64? = Int64(UserDefaults.standard.integer(forKey: "primaryTeamId"))
        let pTeamName: String? = UserDefaults.standard.string(forKey: "primaryTeamName") ?? " "
        let pTeamLogo: String? = UserDefaults.standard.string(forKey: "primaryTeamLogo") ?? " "
        
        if((pTeamId) != 0)
        {
            self.primaryTeamId = pTeamId!
            self.primaryTeamName = pTeamName!
            self.primaryTeamLogo = pTeamLogo!
            
        }
        
        let oTeam1Id: Int64? = Int64(UserDefaults.standard.integer(forKey: "optionalTeam1Id"))
        let oTeam1Name: String? = UserDefaults.standard.string(forKey: "optionalTeam1Name") ?? " "
        let oTeam1Logo: String? = UserDefaults.standard.string(forKey: "optionalTeam1Logo") ?? " "
        
        if((oTeam1Id) != 0)
        {
            self.optionalTeam1Id = oTeam1Id!
            self.optionalTeam1Name = oTeam1Name!
            self.optionalTeam1Logo = oTeam1Logo!
        }
        
        let oTeam2Id: Int64? = Int64(UserDefaults.standard.integer(forKey: "optionalTeam2Id"))
        let oTeam2Name: String? = UserDefaults.standard.string(forKey: "optionalTeam2Name") ?? " "
        let oTeam2Logo: String? = UserDefaults.standard.string(forKey: "optionalTeam2Logo") ?? " "
        
        if((oTeam2Id) != 0)
        {
            self.optionalTeam2Id = oTeam2Id!
            self.optionalTeam2Name = oTeam2Name!
            self.optionalTeam2Logo = oTeam2Logo!
        }
        
        let oTeam3Id: Int64? = Int64(UserDefaults.standard.integer(forKey: "optionalTeam3Id"))
        let oTeam3Name: String? = UserDefaults.standard.string(forKey: "optionalTeam3Name") ?? " "
        let oTeam3Logo: String? = UserDefaults.standard.string(forKey: "optionalTeam3Logo") ?? " "
        
        if((oTeam3Id) != 0)
        {
            self.optionalTeam3Id = oTeam3Id!
            self.optionalTeam3Name = oTeam3Name!
            self.optionalTeam3Logo = oTeam3Logo!
        }
        
        
    }
    func savenewslike(newsid: AnyObject)  {
        let time: Int64 = getUTCFormateDate()
        
        let boundary = generateBoundaryString()
        var request = URLRequest(url: URL(string: MediaAPI)!)
        request.httpMethod = "POST"
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        var reqParams = [String: AnyObject]()
        reqParams["cmd"] = "savenewslike" as AnyObject
        //reqParams["catid"] =   lastindex as AnyObject//String(describing:  lastindex)
        reqParams["newsid"] = newsid
        reqParams["time"] = time as AnyObject
        reqParams["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        reqParams["device"] = "ios" as AnyObject
        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
        if(myjid != nil){
            let arrdUserJid = myjid?.components(separatedBy: "@")
            let userUserJid = arrdUserJid?[0]
            reqParams["username"] = userUserJid as AnyObject?
        }
        else{
            reqParams["username"] = "" as AnyObject
        }
        
        
        // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
        request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
            if let data = data {
                if String(data: data, encoding: String.Encoding.utf8) != nil {
                    //print(stringData) //JSONSerialization
                    
                    
                    
                    //print(time)
                    do {
                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                        
                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                        
                        if(isSuccess)
                        {
                            // let response: NSArray = jsonData?.value(forKey: "responseData") as! NSArray
                            // let pickedCaption:[String: Any] = ["savelike": response[0]]
                            // let notificationName = Notification.Name("_NewsSaveLike")
                            //NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                            // let dict = response[0] as! NSDictionary
                            let liked = jsonData?.value(forKey: "liked") as! Bool
                            if(liked){
                                let newsid = jsonData?.value(forKey: "newsid") as! Int
                                if(self.ActivityPermissionCheck(massegeId: newsid, Type: ThisIsNewsLike)){
                                    self.ActivityCountManage()
                                }
                            }
                        }
                        else
                        {
                            //Show Error
                        }
                    } catch let error as NSError {
                        print(error)
                        //Show Error
                    }
                    
                }
            }
            else
            {
                //Show Error
            }
        })
        task.resume()
    }
    
    func LoginwithModelPopUp()  {
        UserDefaults.standard.setValue(nil, forKey: "forgate")
        
        UserDefaults.standard.setValue(true, forKey: "ConvertationTone")
        //UserDefaults.standard.synchronize()
        UserDefaults.standard.setValue("Everyone", forKey: "BanterNotification")
        UserDefaults.standard.synchronize()
        // let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        // let registerController : AnyObject! = storyBoard.instantiateViewController(withIdentifier: "firstview")
        let storyBoard = UIStoryboard(name: "Main", bundle: nil)
        let myTeamsController : Firstviewcontroller = storyBoard.instantiateViewController(withIdentifier: "firstview") as! Firstviewcontroller
        
        window?.rootViewController!.show(myTeamsController, sender: self)
        
        //self.window = UIWindow(frame: UIScreen.main.bounds)
        
        //self.window?.rootViewController = registerController as? UIViewController
        //self.window?.makeKeyAndVisible()
    }
    
    func merchantfilterupdate() {
        arrtempfilter = arrfilter
        for i in 0..<arrtempfilter.count {
            
            let dic: NSDictionary = self.arrtempfilter[i] as! NSDictionary
            var filter = dic.value(forKey: "data") as! [AnyObject]
            if(filter.count>0){
                for j in (1 ..< filter.count).reversed(){
                    let fdic = filter[j] as! NSDictionary
                    let check = fdic.value(forKey: "checked") as! Bool
                    if(!check){
                        filter.remove(at: j)
                    }
                    
                }
                var dict: [String : AnyObject] = arrtempfilter[i] as! [String : AnyObject]
                dict["data"] = filter as AnyObject
                arrtempfilter[i] = dict as AnyObject
            }
            
        }
    }
    
    func getsyncedcontact(jsonData: NSDictionary ){
        
        // print(" contact sync")
        if(isUpdateContacts == false){
            
            let tempPoneContacts: NSMutableArray = allPhoneContacts.mutableCopy() as! NSMutableArray
            //code to fetch phone contacts from local
            let strNonSplitContactsLocal: String? = UserDefaults.standard.string(forKey: "allNonSplitContacts")
            if strNonSplitContactsLocal != nil
            {
                //Code to parse json data
                if let data = strNonSplitContactsLocal?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                    do {
                        phoneNotSplitContactsDel = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                        
                        
                    } catch let error as NSError {
                        print(error)
                    }
                }
            }
            // Roster reject request
            let userD: UserDefaults = UserDefaults.init(suiteName: "group.com.tridecimal.ltd.footballfan")!
            let strAllContacts: String? = userD.string(forKey: "allPhoneContacts")
            if strAllContacts != nil
            {
                //Code to parse json data
                if let data = strAllContacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                    do {
                        let tmpAllContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                        
                        /*  self.allContacts = NSMutableArray()
                         for record in tmpAllContacts {
                         self.allContacts[self.allContacts.count] = record
                         }
                         
                         let tmpAllAppContacts = self.allContacts[0] as! NSArray
                         */
                        self.allAppContacts = NSMutableArray()
                        for record in tmpAllContacts {
                            self.allAppContacts[self.allAppContacts.count] = record
                        }
                        
                    }
                    catch let error as NSError {
                        print(error)
                    }
                }
                
            }
            
            if(allAppContacts.count != 0){
                let tmpArr = allAppContacts.sorted { (item1, item2) -> Bool in
                    let date1 =  item1 as! [String : AnyObject]
                    let date2 =  item2 as! [String : AnyObject]
                    
                    var dt1: String = ""
                    var dt2: String = ""
                    
                    if date1["name"] != nil
                    {
                        
                        dt1 = date1["name"] as! String
                        
                    }
                    
                    if date2["name"] != nil
                    {
                        
                        dt2 = date2["name"] as! String
                        
                    }
                    
                    
                    
                    return dt1.compare(dt2) == ComparisonResult.orderedAscending
                }
                allAppContacts = NSMutableArray()
                var encountered = Set<String>()
                for arr in tmpArr
                {
                    let tmpDict = arr as! [String : AnyObject]
                    let Jid = tmpDict["jid"] as! String
                    if encountered.contains(Jid) {
                        // Do not add a duplicate element.
                    }
                    else {
                        // Add value to the set.
                        encountered.insert(Jid)
                        // ... Append the value.
                        // result.append(value)
                        
                        //xmppRoster.unsubscribePresence(fromUser: XMPPJID(string:Jid)!)
                        
                    }
                    
                    
                    
                }
            }
            
            
            //Code to manupulate live data
            let response: NSArray = jsonData.value(forKey: "responseData") as! NSArray
            //print(phoneNotSplitContactsDel)
            //print(jsonData)
            for record in response {
                
                //Code to check if contact is available in local contacts
                /*let result = phoneNotSplitContactsDel.filter({ (text) -> Bool in
                 let tmp: NSDictionary = text as! NSDictionary
                 let val = tmp.value(forKey: "mobile")
                 let val2: String = (record as! NSDictionary).value(forKey: "mobile") as! String
                 let range = (val as AnyObject).range(of: val2, options: NSString.CompareOptions.caseInsensitive)
                 return range.location != NSNotFound
                 })*/
                var strName: String = ""
                _ = phoneNotSplitContactsDel.filter({ (text) -> Bool in
                    let tmp: NSDictionary = text as! NSDictionary
                    let val: String = tmp.value(forKey: "mobilewithcc") as! String
                    let val2: String = (record as! NSDictionary).value(forKey: "mobilewithcc") as! String
                    //let trimmed: String = removeSpecialCharsFromString(str: val2)
                    let trimmed: String = val2.components(separatedBy: CharacterSet.decimalDigits.inverted)
                        .joined()
                    
                    let reversed: String = String(trimmed.reversed())
                    //print(reversed)
                    //Check if number is above 10 digits
                    if(reversed.count >= 10)
                    {
                        let index10 = reversed.index(reversed.startIndex, offsetBy: 10)
                        let first10: String = reversed.substring(to: index10)
                        //print(first10)
                        let strMobileNo: String = String(first10.reversed())
                        
                        if(val.contains(strMobileNo))
                        {
                            //let ind = tempPoneContacts.index(of: text)
                            //print(ind)
                            //tempPoneContacts.removeObject(at: Int(ind))
                            let ind = tmp.value(forKey: "name") as! String
                            //print(ind)
                            //tempPoneContacts.removeObject(at: Int(ind))
                            if(ind == " " || ind == nil)
                            {
                                strName = (record as! NSDictionary).value(forKey: "username") as! String
                            }
                            else{
                                strName = tmp.value(forKey: "name") as! String
                            }
                            
                        }
                        
                    }
                    
                    
                    return false
                })
                /*
                 var strName1: String = ""
                 _ = phoneNotSplitContactsDel.filter({ (text) -> Bool in
                 let tmp: NSDictionary = text as! NSDictionary
                 let val: String = tmp.value(forKey: "email") as! String
                 let val2: String = (record as! NSDictionary).value(forKey: "email") as! String
                 //let trimmed: String = removeSpecialCharsFromString(str: val2)
                 // let trimmed: String = val2.components(separatedBy: CharacterSet.decimalDigits.inverted)
                 // .joined()
                 
                 // let reversed: String = String(trimmed.characters.reversed())
                 //print(reversed)
                 //Check if number is above 10 digits
                 // if(reversed.characters.count >= 10)
                 //{
                 // let index10 = reversed.index(reversed.startIndex, offsetBy: 10)
                 //let first10: String = reversed.substring(to: index10)
                 //print(first10)
                 //let strMobileNo: String = String(first10.characters.reversed())
                 
                 if(val.contains(val2))
                 {
                 let ind = tmp.value(forKey: "name") as! String
                 //print(ind)
                 //tempPoneContacts.removeObject(at: Int(ind))
                 if(ind == " " || ind == nil)
                 {
                 strName1 = (record as! NSDictionary).value(forKey: "username") as! String
                 }
                 else{
                 strName1 = tmp.value(forKey: "name") as! String
                 }
                 
                 //return true
                 }
                 
                 // }
                 return false
                 }) */
                //There is error here during fresh registration
                let myself: String? = UserDefaults.standard.string(forKey: "userJID")
                let mymobile: String? = (record as! NSDictionary).value(forKey: "jid") as? String
                if(myself?.contains(mymobile!))!
                {
                    
                }
                else
                {
                    if(!strName.isEmpty)
                    {
                        var tempDict = [String: String]()
                        
                        tempDict["jid"] = (record as! NSDictionary).value(forKey: "jid") as? String
                        tempDict["name"] = strName
                        tempDict["nickname"] = (record as! NSDictionary).value(forKey: "nickname") as? String
                        tempDict["mobile"] = (record as! NSDictionary).value(forKey: "mobile") as? String
                        tempDict["mobilewithcc"] = (record as! NSDictionary).value(forKey: "mobilewithcc") as? String
                        tempDict["avatar"] = (record as! NSDictionary).value(forKey: "avatar") as? String
                        let status: String? = (record as! NSDictionary).value(forKey: "status") as? String
                        if status != nil
                        {
                            tempDict["status"] = status
                        }
                        else
                        {
                            tempDict["status"] = "Hello! I am a Football Fan"
                        }
                        
                        tempDict["type"] = "app"
                        
                        allAppContacts[allAppContacts.count] = tempDict
                    }
                        /*else  if(!strName1.isEmpty)
                         {
                         var tempDict = [String: String]()
                         
                         tempDict["jid"] = (record as! NSDictionary).value(forKey: "jid") as? String
                         tempDict["name"] = strName1
                         tempDict["nickname"] = (record as! NSDictionary).value(forKey: "nickname") as? String
                         tempDict["mobile"] = (record as! NSDictionary).value(forKey: "mobile") as? String
                         tempDict["avatar"] = (record as! NSDictionary).value(forKey: "avatar") as? String
                         let status: String? = (record as! NSDictionary).value(forKey: "status") as? String
                         if status != nil
                         {
                         tempDict["status"] = status
                         }
                         else
                         {
                         tempDict["status"] = "Hello! I am a Football Fan"
                         }
                         
                         tempDict["type"] = "app"
                         
                         allAppContacts[allAppContacts.count] = tempDict
                         }*/
                    else
                    {
                        allAppContacts[allAppContacts.count] = record
                    }
                }
            }
            
            
            
            // nitesh code for delete app contacts form notsplit contacts
            for appcontact in allAppContacts {
                
                //Code to check if contact is available in local contacts
                /*let result = phoneNotSplitContactsDel.filter({ (text) -> Bool in
                 let tmp: NSDictionary = text as! NSDictionary
                 let val = tmp.value(forKey: "mobile")
                 let val2: String = (record as! NSDictionary).value(forKey: "mobile") as! String
                 let range = (val as AnyObject).range(of: val2, options: NSString.CompareOptions.caseInsensitive)
                 return range.location != NSNotFound
                 })*/
                //var strName: String = ""
                _ = tempPoneContacts.filter({ (text) -> Bool in
                    let tmp: NSDictionary = text as! NSDictionary
                    let val: String = tmp.value(forKey: "mobilewithcc") as! String
                    let val2: String = (appcontact as! NSDictionary).value(forKey: "mobilewithcc") as! String
                    //let trimmed: String = removeSpecialCharsFromString(str: val2)
                    let trimmed: String = val2.components(separatedBy: CharacterSet.decimalDigits.inverted)
                        .joined()
                    
                    let reversed: String = String(trimmed.reversed())
                    //print(reversed)
                    //Check if number is above 10 digits
                    if(reversed.count >= 10)
                    {
                        let index10 = reversed.index(reversed.startIndex, offsetBy: 10)
                        let first10: String = reversed.substring(to: index10)
                        //print(first10)
                        let strMobileNo: String = String(first10.reversed())
                        
                        if(val.contains(strMobileNo))
                        {
                            let ind = tempPoneContacts.index(of: text)
                            //print(ind)
                            tempPoneContacts.removeObject(at: Int(ind))
                            
                            
                        }
                        
                    }
                    
                    
                    return false
                })
            }
            // End
            allPhoneContacts = tempPoneContacts
            phoneNotSplitContacts = tempPoneContacts
            //Store contacts to local
            do {
                if(allAppContacts.count > 0)
                {
                    let userD: UserDefaults = UserDefaults.init(suiteName: "group.com.tridecimal.ltd.footballfan")!
                    let dataNonSplitContacts = try JSONSerialization.data(withJSONObject: allAppContacts, options: .prettyPrinted)
                    let strallPhoneContacts = NSString(data: dataNonSplitContacts, encoding: String.Encoding.utf8.rawValue)! as String
                    userD.set(strallPhoneContacts, forKey: "allPhoneContacts")
                    userD.synchronize()
                }
            } catch {
                // print(error.localizedDescription)
            }
            
            do {
                if(phoneNotSplitContacts.count > 0)
                {
                    let dataNonSplitContacts = try JSONSerialization.data(withJSONObject: phoneNotSplitContacts, options: .prettyPrinted)
                    let strNonSplitContacts = NSString(data: dataNonSplitContacts, encoding: String.Encoding.utf8.rawValue)! as String
                    UserDefaults.standard.setValue(strNonSplitContacts, forKey: "allNonSplitContacts")
                    UserDefaults.standard.synchronize()
                }
            } catch {
                //print(error.localizedDescription)
            }
            //print(allPhoneContacts)
            
            //print(allAppContacts)
            let notificationName = Notification.Name("FetchedContactsDetails")
            NotificationCenter.default.post(name: notificationName, object: nil)
            
            
        }
        else
        {
            
            let tempPoneContacts: NSMutableArray = tempallPhoneContacts.mutableCopy() as! NSMutableArray
            //code to fetch phone contacts from local
            /* let strNonSplitContactsLocal: String? = UserDefaults.standard.string(forKey: "allNonSplitContacts")
             if strNonSplitContactsLocal != nil
             {
             //Code to parse json data
             if let data = strNonSplitContactsLocal?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
             do {
             phoneNotSplitContactsDel = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
             
             
             } catch let error as NSError {
             //print(error)
             }
             }
             }*/
            phoneNotSplitContactsDel = tempphoneNotSplitContacts
            // Roster reject request
            let userD: UserDefaults = UserDefaults.init(suiteName: "group.com.tridecimal.ltd.footballfan")!
            let strAllContacts: String? = userD.string(forKey: "allPhoneContacts")
            if strAllContacts != nil
            {
                //Code to parse json data
                if let data = strAllContacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                    do {
                        let tmpAllContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                        
                        /*  self.allContacts = NSMutableArray()
                         for record in tmpAllContacts {
                         self.allContacts[self.allContacts.count] = record
                         }
                         
                         let tmpAllAppContacts = self.allContacts[0] as! NSArray
                         */
                        self.allAppContacts = NSMutableArray()
                        for record in tmpAllContacts {
                            self.allAppContacts[self.allAppContacts.count] = record
                        }
                        
                    }
                    catch {
                        // print(error.localizedDescription)
                    }
                    
                }
                
            }
            
            if(allAppContacts.count != 0){
                let tmpArr = allAppContacts.sorted { (item1, item2) -> Bool in
                    let date1 =  item1 as! [String : AnyObject]
                    let date2 =  item2 as! [String : AnyObject]
                    
                    var dt1: String = ""
                    var dt2: String = ""
                    
                    if date1["name"] != nil
                    {
                        
                        dt1 = date1["name"] as! String
                        
                    }
                    
                    if date2["name"] != nil
                    {
                        
                        dt2 = date2["name"] as! String
                        
                    }
                    
                    
                    
                    return dt1.compare(dt2) == ComparisonResult.orderedAscending
                }
                
                var encountered = Set<String>()
                for arr in tmpArr
                {
                    let tmpDict = arr as! [String : AnyObject]
                    let Jid = tmpDict["jid"] as! String
                    if encountered.contains(Jid) {
                        // Do not add a duplicate element.
                    }
                    else {
                        // Add value to the set.
                        if(Jid != ""){
                            encountered.insert(Jid)
                            // ... Append the value.
                            // result.append(value)
                            
                           // xmppRoster.unsubscribePresence(fromUser: XMPPJID(string:Jid)!)
                            
                        }
                        
                    }
                    
                    
                    
                }
            }
            
            let  tempallAppContacts = NSMutableArray()
            //Code to manupulate live data
            let response: NSArray = jsonData.value(forKey: "responseData") as! NSArray
            //print(phoneNotSplitContactsDel)
            //print(jsonData)
            for record in response {
                
                //Code to check if contact is available in local contacts
                /*let result = phoneNotSplitContactsDel.filter({ (text) -> Bool in
                 let tmp: NSDictionary = text as! NSDictionary
                 let val = tmp.value(forKey: "mobile")
                 let val2: String = (record as! NSDictionary).value(forKey: "mobile") as! String
                 let range = (val as AnyObject).range(of: val2, options: NSString.CompareOptions.caseInsensitive)
                 return range.location != NSNotFound
                 })*/
                var strName: String = ""
                _ = phoneNotSplitContactsDel.filter({ (text) -> Bool in
                    let tmp: NSDictionary = text as! NSDictionary
                    let val: String = tmp.value(forKey: "mobilewithcc") as! String
                    let val2: String = (record as! NSDictionary).value(forKey: "mobilewithcc") as! String
                    //let trimmed: String = removeSpecialCharsFromString(str: val2)
                    let trimmed: String = val2.components(separatedBy: CharacterSet.decimalDigits.inverted)
                        .joined()
                    
                    let reversed: String = String(trimmed.reversed())
                    //print(reversed)
                    //Check if number is above 10 digits
                    if(reversed.count >= 10)
                    {
                        let index10 = reversed.index(reversed.startIndex, offsetBy: 10)
                        let first10: String = reversed.substring(to: index10)
                        //print(first10)
                        let strMobileNo: String = String(first10.reversed())
                        
                        if(val.contains(strMobileNo))
                        {
                            //let ind = tempPoneContacts.index(of: text)
                            //print(ind)
                            //tempPoneContacts.removeObject(at: Int(ind))
                            let ind = tmp.value(forKey: "name") as! String
                            //print(ind)
                            //tempPoneContacts.removeObject(at: Int(ind))
                            if(ind == " " || ind == nil)
                            {
                                strName = (record as! NSDictionary).value(forKey: "username") as! String
                            }
                            else{
                                strName = tmp.value(forKey: "name") as! String
                            }
                            
                        }
                        
                    }
                    
                    
                    return false
                })
                /*
                 var strName1: String = ""
                 _ = phoneNotSplitContactsDel.filter({ (text) -> Bool in
                 let tmp: NSDictionary = text as! NSDictionary
                 let val: String = tmp.value(forKey: "email") as! String
                 let val2: String = (record as! NSDictionary).value(forKey: "email") as! String
                 //let trimmed: String = removeSpecialCharsFromString(str: val2)
                 // let trimmed: String = val2.components(separatedBy: CharacterSet.decimalDigits.inverted)
                 // .joined()
                 
                 // let reversed: String = String(trimmed.characters.reversed())
                 //print(reversed)
                 //Check if number is above 10 digits
                 // if(reversed.characters.count >= 10)
                 //{
                 // let index10 = reversed.index(reversed.startIndex, offsetBy: 10)
                 //let first10: String = reversed.substring(to: index10)
                 //print(first10)
                 //let strMobileNo: String = String(first10.characters.reversed())
                 
                 if(val.contains(val2))
                 {
                 let ind = tmp.value(forKey: "name") as! String
                 //print(ind)
                 //tempPoneContacts.removeObject(at: Int(ind))
                 if(ind == " " || ind == nil)
                 {
                 strName1 = (record as! NSDictionary).value(forKey: "username") as! String
                 }
                 else{
                 strName1 = tmp.value(forKey: "name") as! String
                 }
                 
                 //return true
                 }
                 
                 // }
                 return false
                 }) */
                //There is error here during fresh registration
                let myself: String? = UserDefaults.standard.string(forKey: "userJID")
                let mymobile: String? = (record as! NSDictionary).value(forKey: "jid") as? String
                if(myself?.contains(mymobile!))!
                {
                    
                }
                else
                {
                    if(!strName.isEmpty)
                    {
                        var tempDict = [String: String]()
                        
                        tempDict["jid"] = (record as! NSDictionary).value(forKey: "jid") as? String
                        tempDict["name"] = strName
                        tempDict["nickname"] = (record as! NSDictionary).value(forKey: "nickname") as? String
                        tempDict["mobile"] = (record as! NSDictionary).value(forKey: "mobile") as? String
                        tempDict["mobilewithcc"] = (record as! NSDictionary).value(forKey: "mobilewithcc") as? String
                        tempDict["avatar"] = (record as! NSDictionary).value(forKey: "avatar") as? String
                        let status: String? = (record as! NSDictionary).value(forKey: "status") as? String
                        if status != nil
                        {
                            tempDict["status"] = status
                        }
                        else
                        {
                            tempDict["status"] = "Hello! I am a Football Fan"
                        }
                        
                        tempDict["type"] = "app"
                        
                        tempallAppContacts[tempallAppContacts.count] = tempDict
                    }
                        /*else  if(!strName1.isEmpty)
                         {
                         var tempDict = [String: String]()
                         
                         tempDict["jid"] = (record as! NSDictionary).value(forKey: "jid") as? String
                         tempDict["name"] = strName1
                         tempDict["nickname"] = (record as! NSDictionary).value(forKey: "nickname") as? String
                         tempDict["mobile"] = (record as! NSDictionary).value(forKey: "mobile") as? String
                         tempDict["avatar"] = (record as! NSDictionary).value(forKey: "avatar") as? String
                         let status: String? = (record as! NSDictionary).value(forKey: "status") as? String
                         if status != nil
                         {
                         tempDict["status"] = status
                         }
                         else
                         {
                         tempDict["status"] = "Hello! I am a Football Fan"
                         }
                         
                         tempDict["type"] = "app"
                         
                         allAppContacts[allAppContacts.count] = tempDict
                         }*/
                    else
                    {
                        tempallAppContacts[tempallAppContacts.count] = record
                    }
                }
            }
            
            
            
            // nitesh code for delete app contacts form notsplit contacts
            for appcontact in tempallAppContacts {
                
                //Code to check if contact is available in local contacts
                /*let result = phoneNotSplitContactsDel.filter({ (text) -> Bool in
                 let tmp: NSDictionary = text as! NSDictionary
                 let val = tmp.value(forKey: "mobile")
                 let val2: String = (record as! NSDictionary).value(forKey: "mobile") as! String
                 let range = (val as AnyObject).range(of: val2, options: NSString.CompareOptions.caseInsensitive)
                 return range.location != NSNotFound
                 })*/
                //var strName: String = ""
                _ = tempPoneContacts.filter({ (text) -> Bool in
                    let tmp: NSDictionary = text as! NSDictionary
                    let val: String = tmp.value(forKey: "mobilewithcc") as! String
                    let val2: String = (appcontact as! NSDictionary).value(forKey: "mobilewithcc") as! String
                    //let trimmed: String = removeSpecialCharsFromString(str: val2)
                    let trimmed: String = val2.components(separatedBy: CharacterSet.decimalDigits.inverted)
                        .joined()
                    
                    let reversed: String = String(trimmed.reversed())
                    //print(reversed)
                    //Check if number is above 10 digits
                    if(reversed.count >= 10)
                    {
                        let index10 = reversed.index(reversed.startIndex, offsetBy: 10)
                        let first10: String = reversed.substring(to: index10)
                        //print(first10)
                        let strMobileNo: String = String(first10.reversed())
                        
                        if(val.contains(strMobileNo))
                        {
                            let ind = tempPoneContacts.index(of: text)
                            //print(ind)
                            tempPoneContacts.removeObject(at: Int(ind))
                            
                            
                        }
                        
                    }
                    
                    
                    return false
                })
            }
            // End
            tempallPhoneContacts = tempPoneContacts
            tempphoneNotSplitContacts = tempPoneContacts
            allAppContacts = tempallAppContacts
            //Store contacts to local
            do {
                if(tempallAppContacts.count > 0)
                {
                    let userD: UserDefaults = UserDefaults.init(suiteName: "group.com.tridecimal.ltd.footballfan")!
                    let dataNonSplitContacts = try JSONSerialization.data(withJSONObject: tempallAppContacts, options: .prettyPrinted)
                    let strallPhoneContacts = NSString(data: dataNonSplitContacts, encoding: String.Encoding.utf8.rawValue)! as String
                    userD.set(strallPhoneContacts, forKey: "allPhoneContacts")
                    userD.synchronize()
                }
            } catch {
                // print(error.localizedDescription)
            }
            
            do {
                if(tempphoneNotSplitContacts.count > 0)
                {
                    let dataNonSplitContacts = try JSONSerialization.data(withJSONObject: tempphoneNotSplitContacts, options: .prettyPrinted)
                    let strNonSplitContacts = NSString(data: dataNonSplitContacts, encoding: String.Encoding.utf8.rawValue)! as String
                    UserDefaults.standard.setValue(strNonSplitContacts, forKey: "allNonSplitContacts")
                    UserDefaults.standard.synchronize()
                }
            } catch {
                //print(error.localizedDescription)
            }
            //print(allPhoneContacts)
            allPhoneContacts = tempPoneContacts
            phoneNotSplitContacts = tempPoneContacts
            //print(allAppContacts)
            let notificationName = Notification.Name("FetchedContactsDetails")
            NotificationCenter.default.post(name: notificationName, object: nil)
            isUpdateContacts = false
            
        }
    }
    func updateLikecount(fanuid: Int64,likecount:Int64,commentcount:Int64,viewcount:Int64,islike:Bool){
            
               // let notificationName = Notification.Name("_fanupdatecount")
                                                                                                                                                                                   //NotificationCenter.default.post(name: notificationName, object: nil)
        if(arrFanUpdatesTeams.count>0){
                                                     for i in 0...self.arrFanUpdatesTeams.count-1 {
                                                         let dict: NSDictionary? = self.arrFanUpdatesTeams[i] as? NSDictionary
                                                                if(dict != nil)
                                                                {
                                                                 let GroupID = dict?.value(forKey: "id") as! Int64
                                                                 if(fanuid == GroupID){
                                                                     var dict1: [String: AnyObject] = self.arrFanUpdatesTeams[i] as! [String: AnyObject]
                                                                   dict1["likecount"] = likecount as AnyObject
                                                                           dict1["commentcount"] = commentcount as AnyObject
                                                                   dict1["viewcount"] = viewcount as AnyObject
                                                                   dict1["liked"] = islike as AnyObject //print("comment\(fanupdateid)\(appDelegate().arrFanUpdateComments.count)")
                                                                   self.arrFanUpdatesTeams[i] = dict1 as AnyObject
                                                                     let notificationName = Notification.Name("resetStory")
                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                     
                                                                     break
                                                                                
                                                                 }
                                                         }
                                                     }
                                                 }
               if(self.temparrMyFanUpdatesTeams.count>0) {
                   for i in 0...self.temparrMyFanUpdatesTeams.count-1 {
                    let dict: NSDictionary? = self.temparrMyFanUpdatesTeams[i] as? NSDictionary
                              if(dict != nil)
                              {
                               let GroupID = dict?.value(forKey: "id") as! Int64
                               if(fanuid == GroupID){
                                   var dict1: [String: AnyObject] = self.temparrMyFanUpdatesTeams[i] as! [String: AnyObject]
                                    dict1["likecount"] = likecount as AnyObject
                                   dict1["commentcount"] = commentcount as AnyObject
                                   dict1["viewcount"] = viewcount as AnyObject
                                dict1["liked"] = islike as AnyObject
                                   self.temparrMyFanUpdatesTeams[i] = dict1 as AnyObject
                                   let notificationName = Notification.Name("resetmyStory")
                                                                                                                                         NotificationCenter.default.post(name: notificationName, object: nil)
                                   
                                   break
                                              
                               }
                       }
                   }
               }
               if(self.arrhomefanupdate.count>0) {
                          for i in 0...self.arrhomefanupdate.count-1 {
                              let dict: NSDictionary? = self.arrhomefanupdate[i] as? NSDictionary
                                     if(dict != nil)
                                     {
                                      let GroupID = dict?.value(forKey: "id") as! Int64
                                      if(fanuid == GroupID){
                                          var dict1: [String: AnyObject] = self.arrhomefanupdate[i] as! [String: AnyObject]
                                       dict1["likecount"] = likecount as AnyObject
                                       dict1["commentcount"] = commentcount as AnyObject
                                       dict1["viewcount"] = viewcount as AnyObject
                                             dict1["liked"] = islike as AnyObject
                                          self.arrhomefanupdate[i] = dict1 as AnyObject
                                          let notificationName = Notification.Name("resetStoryslider")
                                                                                                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                          
                                          break
                                                     
                                      }
                              }
                          }
                      }
            
        }
    func updatecviewOnArrays(fanuid: Int64,likecount:Int64,commentcount:Int64,viewcount:Int64){
       // if(isOnFanDetail){
            let tabIndex:[String: Any] = ["commentcount": commentcount,"viewcount":viewcount,"likecount":likecount]
            let notificationName = Notification.Name("_fanupdatecount")
            NotificationCenter.default.post(name: notificationName, object: nil,userInfo: tabIndex)
       // }
            
    if(arrFanUpdatesTeams.count>0){
                                                 for i in 0...self.arrFanUpdatesTeams.count-1 {
                                                     let dict: NSDictionary? = self.arrFanUpdatesTeams[i] as? NSDictionary
                                                            if(dict != nil)
                                                            {
                                                             let GroupID = dict?.value(forKey: "id") as! Int64
                                                             if(fanuid == GroupID){
                                                                 var dict1: [String: AnyObject] = self.arrFanUpdatesTeams[i] as! [String: AnyObject]
                                                               dict1["likecount"] = likecount as AnyObject
                                                                       dict1["commentcount"] = commentcount as AnyObject
                                                               dict1["viewcount"] = viewcount as AnyObject
                                                               //dict1["liked"] = islike as AnyObject //print("comment\(fanupdateid)\(appDelegate().arrFanUpdateComments.count)")
                                                               self.arrFanUpdatesTeams[i] = dict1 as AnyObject
                                                                 let notificationName = Notification.Name("resetStory")
                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                 
                                                                 break
                                                                            
                                                             }
                                                     }
                                                 }
                                             }
           if(self.temparrMyFanUpdatesTeams.count>0) {
               for i in 0...self.temparrMyFanUpdatesTeams.count-1 {
                let dict: NSDictionary? = self.temparrMyFanUpdatesTeams[i] as? NSDictionary
                          if(dict != nil)
                          {
                           let GroupID = dict?.value(forKey: "id") as! Int64
                           if(fanuid == GroupID){
                               var dict1: [String: AnyObject] = self.temparrMyFanUpdatesTeams[i] as! [String: AnyObject]
                                dict1["likecount"] = likecount as AnyObject
                               dict1["commentcount"] = commentcount as AnyObject
                               dict1["viewcount"] = viewcount as AnyObject
                            //dict1["liked"] = islike as AnyObject
                               self.temparrMyFanUpdatesTeams[i] = dict1 as AnyObject
                               let notificationName = Notification.Name("resetmyStory")
                                                                                                                                     NotificationCenter.default.post(name: notificationName, object: nil)
                               
                               break
                                          
                           }
                   }
               }
           }
           if(self.arrhomefanupdate.count>0) {
                      for i in 0...self.arrhomefanupdate.count-1 {
                          let dict: NSDictionary? = self.arrhomefanupdate[i] as? NSDictionary
                                 if(dict != nil)
                                 {
                                  let GroupID = dict?.value(forKey: "id") as! Int64
                                  if(fanuid == GroupID){
                                      var dict1: [String: AnyObject] = self.arrhomefanupdate[i] as! [String: AnyObject]
                                   dict1["likecount"] = likecount as AnyObject
                                   dict1["commentcount"] = commentcount as AnyObject
                                   dict1["viewcount"] = viewcount as AnyObject
                                         //dict1["liked"] = islike as AnyObject
                                      self.arrhomefanupdate[i] = dict1 as AnyObject
                                      let notificationName = Notification.Name("resetStoryslider")
                                                                                                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                      
                                      break
                                                 
                                  }
                          }
                      }
                  }
        
    }
   
       func uploadlogfile()  {
            let docDir = FileManager.default.urls(for: .cachesDirectory, in: .userDomainMask).first//try! FileManager.default.url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: true)
                              
                              
                              
        let filepath = docDir!.appendingPathComponent("iosff.log")
           let registorusername: String? = UserDefaults.standard.string(forKey: "registerusername")
                                          let boundary = self.generateBoundaryString()
          
                                          var request = URLRequest(url: URL(string: MediaAPI)!)
                                          request.httpMethod = "POST"
                                          request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                                          var reqParams = [String: String]()
                                          reqParams["cmd"] = "addlog"
        let appVersion = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as AnyObject
        reqParams["buildversion"] = appVersion as! String
        reqParams["version"] = "\(UIDevice.current.systemVersion)"  as! String
                                          reqParams["username"] = registorusername
        reqParams["device"] = UIDevice.current.modelName
        reqParams["os"] = "iOS"//UIDevice.current.model
                                       reqParams["ip"] = "1.1"
                                          reqParams["key"] = "kXfqS9wUug6gVKDB"
                                          //reqParams["device"] = "ios" as String
                                          // Use Alamofire to upload the image
        AF.upload(multipartFormData: { multiPart in
                                           
                                                                                            multiPart.append(filepath as URL, withName: "filename")
                                                                                               for (key, val) in reqParams {
                                                                                                   multiPart.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                                                                               }
                                                                                           
                                            }, to: MediaAPI, method: .post) .uploadProgress(queue: .main, closure: { progress in
                                                print("Upload Progress: \(progress.fractionCompleted)")
                                            }).responseJSON(completionHandler: { data in
                                                print("upload finished: \(data)")
                                              print("resultvalue\(data.result)")
                                              switch data.result {
                                                                                       case .success(let resut):
                                                                                         print("upload success result: \(String(describing: resut))")
                                                                                         if let JSON = resut as? [String: Any] {
                                                                                                                                           let status = JSON["success"] as! Bool
                                                                                                                                           print(status)
                                                                                                                                       }
                                                                                       case .failure(let err):
                                                                                           print("upload err: \(err)")
                                                                                       }
                                            
                                                  
                                            })
                                         /* Alamofire.upload(
                                              multipartFormData: { multipartFormData in
                                                  // On the PHP side you can retrive the image using $_FILES["image"]["tmp_name"]
                                               multipartFormData.append(filepath as URL, withName: "filename")
                                                  for (key, val) in reqParams {
                                                      multipartFormData.append(val.data(using: String.Encoding.utf8)!, withName: key)
                                                  }
                                          },
                                              to: MediaAPI,
                                              encodingCompletion: { encodingResult in
                                                  switch encodingResult {
                                                  case .success(let upload, _, _):
                                                      upload.uploadProgress(closure: { (progress) in
                                                          
                                                          //print("uploding")
                                                          //print(progress)
                                                          
                                                      })
                                                      upload.responseJSON { response in
                                                          if let jsonResponse = response.result.value as? [String: Any] {
                                                              print(jsonResponse)
                                                              let data = response.data
                                                              if let data = data {
                                                                  if String(data: data, encoding: String.Encoding.utf8) != nil {
                                                                      
                                                                      do {
                                                                          let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                                                          
                                                                          let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                                                          
                                                                       if(isSuccess){
                                                                           
                                                                       }
                                                                          
                                                                          else
                                                                          {
                                                                              
                                                                          }
                                                                      } catch let error as NSError {
                                                                          print(error)
                                                                         
                                                                      }
                                                                      
                                                                  }
                                                              }
                                                              else
                                                              {
                                                                 
                                                              }
                                                          }
                                                      }
                                                  case .failure(let encodingError):
                                                      print(encodingError)
                                                      
                                                  }
                                          }
                                          )*/
                                          
                                         
       }
    func OnSignupGetbanter(myProfileDict:NSDictionary)  {
        let banterNickName = myProfileDict.value(forKey: "username") as! String
        let myMobileNo = myProfileDict.value(forKey: "username") as! String
        
        //Save nickname and username here if required
        UserDefaults.standard.setValue(banterNickName, forKey: "banterNickName")
        UserDefaults.standard.setValue(myMobileNo, forKey: "myMobileNo")
        UserDefaults.standard.synchronize()
        Clslogging.loginfo(State: "fanDidRegister response", userinfo: myProfileDict as! [String : AnyObject])
        //In loop of banters details
        let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
        UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
        UserDefaults.standard.synchronize()
        let totalcoins = myProfileDict.value(forKey: "totalcoins") as! Int
        let isreferralcoins = myProfileDict.value(forKey: "isreferralcoins") as! Bool
        let issignupcoins = myProfileDict.value(forKey: "issignupcoins") as! Bool
        let availablecoins = myProfileDict.value(forKey: "availablecoins") as! Int
        if(isreferralcoins ){
            DispatchQueue.main.async {
                AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(availablecoins) FanCoins rewards for signing up by referral code. \(self.GetvalueRedeemMesg(avilablecoin: availablecoins))" ,fancoins: String(availablecoins) )
                Clslogging.logdebug(State: "You won \(availablecoins) FanCoins rewards for signing up by referral code. \(self.GetvalueRedeemMesg(avilablecoin: availablecoins))")
            }
            let uuid = UUID().uuidString
            let time: Int64 = self.getUTCFormateDate()
            let refrral: String? = UserDefaults.standard.string(forKey: "refralcode")
            let referraluserJID: String = refrral! + JIDPostfix
            let recReadUserJid: String = UserDefaults.standard.string(forKey: "userJID") as! String
            
            //let recReadTime: String = (jsonDataMessage?.value(forKey: "time") as? String)!
            let arrReadUserJid = recReadUserJid.components(separatedBy: "@")
            let userReadUserJid = arrReadUserJid[0]
            //let myjidtrim: String = userUserJid!
            self.sendMessageToServer(referraluserJID as AnyObject as! String, messageContent: "You won \(self.GetvalueFromInsentiveConfigTable(Key: fcreferral)) FanCoins rewards as a referral bonus from \(userReadUserJid)", messageType: "header", messageTime: time, messageId: uuid, roomType: "chat", messageSubType: "referral" ,roomid:referraluserJID , roomName: "Referral Bonus")
            Clslogging.logdebug(State: "You won \(self.GetvalueFromInsentiveConfigTable(Key: fcreferral)) FanCoins rewards as a referral bonus from \(userReadUserJid)")
        }
        else if(issignupcoins){
            DispatchQueue.main.async {
                AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(availablecoins) FanCoins rewards for signing up.\(self.GetvalueRedeemMesg(avilablecoin: availablecoins))" ,fancoins: String(availablecoins) )
                Clslogging.logdebug(State: "You won \(availablecoins) FanCoins rewards for signing up.\(self.GetvalueRedeemMesg(avilablecoin: availablecoins))")
            }
        }
        self.AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
        
        if(isRegistering != nil)
        {
            let response2: NSArray = myProfileDict.value(forKey: "banterlist") as! NSArray
            //print(response2)
            Clslogging.logdebug(State: "fanDidRegister get banterlist array")
            if(response2.count > 0)
            {
                
                for record in response2
                {
                    let jidsDict: NSDictionary = record as! NSDictionary
                    //Save my teams in user defaults here
                    //Primary
                    let roomJID: String = jidsDict.value(forKey: "roomid") as! String
                    //let time: Int64 = self.getUTCFormateDate()
                    let lastactivitytime: Int64? = Int64(jidsDict.value(forKey: "lastactivitytime") as! String)
                    var messageTo = UserDefaults.standard.string(forKey: "userJID")
                    let chatType: String = jidsDict.value(forKey: "roomtype") as! String
                    let banterName: String = jidsDict.value(forKey: "roomname") as! String
                    let supportTeam = jidsDict.value(forKey: "supportteam") as! Int64
                    let opponentTeam = jidsDict.value(forKey: "opponentteam") as! Int64
                   // let lastactivitytime: Int64? = Int64(jidsDict.value(forKey: "lastactivitytime") as! String)
                    
                    if(messageTo == nil)
                    {
                        messageTo = UserDefaults.standard.string(forKey: "registerJID")
                    }
                    
                    if(messageTo == nil)
                    {
                        messageTo = ""
                    }
                    
                    prepareMessageForServerIn(roomJID, messageContent: "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button.", messageType: "header", messageTime: lastactivitytime!, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: banterName, banterRoomName: banterName,isJoined: "no",isAdmin: "no", supportedTeam: supportTeam, opponentTeam: opponentTeam)
                    
                }
                let notificationName = Notification.Name("RefreshBantersViewFromOthers")
                NotificationCenter.default.post(name: notificationName, object: nil)
                
                //RegisterProcess should be nil
                //UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
                //UserDefaults.standard.synchronize()
                
            }
            /*
             
             self.prepareMessageForServerIn(messageFromTrim, messageContent: recMessageContent, messageType: "text", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: recBanterNickName, banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdmin)
             //, banterRoomLogo: String = ""
             
             if(isOnBantersView == true)
             {
             //Post notification if user is on chats window and received any message
             let notificationName = Notification.Name("RefreshBantersView")
             NotificationCenter.default.post(name: notificationName, object: nil)
             }
             
             
             
             */
            UserDefaults.standard.setValue(nil, forKey: "isRegisterProcess")
            UserDefaults.standard.synchronize()
            
            if(self.isOnBantersView == true && curRoomType == "banter")
            {
                //Post notification if user is on chats window and received any message
                let notificationName = Notification.Name("RefreshBantersView")
                NotificationCenter.default.post(name: notificationName, object: nil)
                
            }
        }
        sendsignupmail()
    }
    func AfterTeamChange()  {
        let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                          if localArrAllChats != nil
                                          {
                                              //Code to parse json data
                                              if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                  do {
                                                      self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                      
                                                  } catch let error as NSError {
                                                      // print(error)
                                                  }
                                              }
                                          }
                                          
                                          //New code for Banter rooms, Group Chats and user updates
                                          var tmpArrAllChats = [String: AnyObject]()
        var leaveRoomIds = ""
                           var deleteroomid = ""
        var time: Int64 = getUTCFormateDate()
                                          for tmpAllUserChats in self.arrAllChats
                                          { //DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                            time = time + 100
                                              let tmpSingleUserChat: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                              let chatType: String = tmpSingleUserChat["chatType"] as! String
                                              if(chatType == "banter")
                                              {
                                                  let isJoined: String = tmpSingleUserChat["isJoined"] as! String
                                                  let isAdmin: String = tmpSingleUserChat["isAdmin"] as! String
                                                  var adminSupportedTeam: Int = 0
                                                  var mySupportedTeam: Int = 0
                                                  
                                                  if let admSupTeam = tmpSingleUserChat["supportedTeam"]
                                                  {
                                                      adminSupportedTeam = admSupTeam as! Int
                                                  }
                                                  let roomid: String = tmpSingleUserChat["roomJID"] as! String
                                                  
                                                  if(isJoined == "yes")
                                                  {
                                                      if(isAdmin == "yes")
                                                      {
                                                          let isClose = isCloseLeaveBanter(mySupportedTeam: adminSupportedTeam)
                                                          if(isClose)
                                                          {
                                                            if(deleteroomid == ""){
                                                                                                           deleteroomid = roomid
                                                                                                       }
                                                                                                       else{
                                                                                                           deleteroomid = "\(deleteroomid),\(roomid)"
                                                                                                       }
                                                            updateBadgeCount(roomid, type: chatType, count: 0)
                                                                                                       
                                                                                                       _ = self.db.query(sql: " Delete from blockeduser  WHERE roomId = '\(roomid )'")
                                                                                                       
                                                                                                       let uuid = UUID().uuidString
                                                                                                       let messageId = uuid
                                                                                                      // let time: Int64 = self.getUTCFormateDate()
                                                            let roomJID = XMPPJID(string: roomid)
                                                                                                                           let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                                                                           
                                                                                                                           let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                                                                           
                                                                                                                           room.activate(self.xmppStream!)
                                                                                                                           
                                                                                                                           room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                                                                           //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                           if(room.isJoined){
                                                                                                                               if(chatType == "banter"){
                                                                                                                                   self.sendMessageToServer(roomid , messageContent: "Banter Room closed.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "deletegroup")
                                                                                                                               }
                                                                                                                               room.leave()
                                                                                                                           }
                                                                                                                           else{
                                                                                                                               let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                                                                               history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                                                                               let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                               
                                                                                                                               
                                                                                                                               room.join(usingNickname: myJID!, history: history)
                                                                                                                               if(chatType == "banter"){
                                                                                                                                   self.sendMessageToServer(roomid , messageContent: "Banter Room closed.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "deletegroup")
                                                                                                                               }
                                                                                                                               room.leave()
                                                                                                                           }
                                                                                                       //let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                                                       
                                                            
                                                                                                       //Save banter status
                                                                                                       //print(self.toName)
                                                                                                       //  self.prepareMessageForServerIn(roomid as! String, messageContent: "Sorry to see you delete this Banter Room.", messageType: "header", messageTime: time , messageId: messageId, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: "banter", recBanterNickName: "", banterRoomName: self.toName, banterStatus: "closed")
                                                                                                       
                                                                                                       //End
                                                                                                       let notificationName = Notification.Name("RedirecttoBanters")
                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                       
                                                                                                       //Close this banter
                                                                                                       //print("closed")
                                                                                                       //Code to close banter room
                                                                                                       /* var dictRequest = [String: AnyObject]()
                                                                                                        dictRequest["cmd"] = "deletebanterroom" as AnyObject
                                                                                                        
                                                                                                        do {
                                                                                                        //Creating Request Data
                                                                                                        var dictRequestData = [String: AnyObject]()
                                                                                                        
                                                                                                        let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                        let arrReadUserJid = login?.components(separatedBy: "@")
                                                                                                        let myMobile: String? = arrReadUserJid?[0]
                                                                                                        
                                                                                                        dictRequestData["roomid"] = roomid as AnyObject
                                                                                                        dictRequestData["username"] = myMobile as AnyObject
                                                                                                        
                                                                                                        dictRequest["requestData"] = dictRequestData as AnyObject
                                                                                                        //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                                                        //print(dictRequest)
                                                                                                        
                                                                                                        let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                                                        let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                        //print(strSaveBanter)
                                                                                                        self.appDelegate().sendRequestToAPI(strRequestDict: strSaveBanter)
                                                                                                        } catch {
                                                                                                        print(error.localizedDescription)
                                                                                                        }*/
                                                                                                       //End Code to savebanterroom.
                                                                                                       
                                                                                                       let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                                                       if localArrAllChats != nil
                                                                                                       {
                                                                                                           //Code to parse json data
                                                                                                           if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                                                               do {
                                                                                                                   self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                                                                   
                                                                                                               } catch let error as NSError {
                                                                                                                   print(error)
                                                                                                               }
                                                                                                           }
                                                                                                       }
                                                                                                       
                                                                                                       
                                                                                                       for tmpAllUserChats in self.arrAllChats
                                                                                                       {
                                                                                                           let tmpSingleUserChat: String = tmpAllUserChats.key
                                                                                                           
                                                                                                           if(tmpSingleUserChat == roomid)
                                                                                                           {
                                                                                                               
                                                                                                               //var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                                                                               
                                                                                                               
                                                                                                               self.arrAllChats.removeValue(forKey: tmpAllUserChats.key)
                                                                                                               
                                                                                                               break
                                                                                                               
                                                                                                               //self.arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                                                                                                               
                                                                                                               
                                                                                                           }
                                                                                                           
                                                                                                       }
                                                                                                       
                                                                                                       //Save array to local temp
                                                                                                       do {
                                                                                                        if(self.arrAllChats.count > 0)
                                                                                                           {
                                                                                                               let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.arrAllChats, options: .prettyPrinted)
                                                                                                               let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                               UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                                                                                               UserDefaults.standard.synchronize()
                                                                                                           }
                                                                                                           else{
                                                                                                               UserDefaults.standard.setValue(nil, forKey: "arrAllChats")
                                                                                                               UserDefaults.standard.synchronize()
                                                                                                           }
                                                                                                       } catch {
                                                                                                           print(error.localizedDescription)
                                                                                                       }
                                                                                                       if(self.isOnBantersView == true)
                                                                                                       {
                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                       }
                                                                                                       
                                                                                                       
                                                              //Close this banter
                                                              //  print("closed")
                                                              //Code to close banter room
                                                             /* var dictRequest = [String: AnyObject]()
                                                              dictRequest["cmd"] = "deletebanterroom" as AnyObject
                                                              
                                                              do {
                                                                  //Creating Request Data
                                                                  var dictRequestData = [String: AnyObject]()
                                                                  
                                                                  let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                  let arrReadUserJid = login?.components(separatedBy: "@")
                                                                  let myMobile: String? = arrReadUserJid?[0]
                                                                  
                                                                  dictRequestData["roomid"] = roomid as AnyObject
                                                                  dictRequestData["username"] = myMobile as AnyObject
                                                                  
                                                                  dictRequest["requestData"] = dictRequestData as AnyObject
                                                                  //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                  //print(dictRequest)
                                                                  
                                                                  let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                  let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
                                                                  //print(strSaveBanter)
                                                                  self.sendRequestToAPI(strRequestDict: strSaveBanter)
                                                              } catch {
                                                                  print(error.localizedDescription)
                                                              }
                                                              //End Code to savebanterroom.
                                                              */
                                                              
                                                              
                                                          }
                                                      }
                                                      else
                                                      {
                                                          
                                                          if let steam = tmpSingleUserChat["mySupportedTeam"]
                                                          {
                                                              mySupportedTeam = steam as! Int
                                                              if(mySupportedTeam > 0)
                                                              {
                                                                  let isLeave = isCloseLeaveBanter(mySupportedTeam: mySupportedTeam)
                                                                  if(isLeave)
                                                                  {
                                                                    if(leaveRoomIds == ""){
                                                                        leaveRoomIds = roomid
                                                                    }
                                                                    else{
                                                                        leaveRoomIds = "\(leaveRoomIds),\(roomid)"
                                                                    }
                                                                    updateBadgeCount(roomid, type: chatType, count: 0)
                                                                    let uuid = UUID().uuidString
                                                                    let messageId = uuid
                                                                    //let time: Int64 = self.getUTCFormateDate()
                                                                    
                                                                    let username: String = UserDefaults.standard.string(forKey: "registerusername")!
                                                                    let roomJID = XMPPJID(string: roomid)
                                                                                                                                                                                              let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                                                                                                                                              
                                                                                                                                                                                              let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                                                                                                                                              
                                                                                                                                                                                              room.activate(self.xmppStream!)
                                                                                                                                                                                              
                                                                                                                                                                                              room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                                                                                                                                              //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                              if(room.isJoined){
                                                                                                                                                                                                   if(chatType == "banter"){
                                                                                                                                                                                                                                                                         self.sendMessageToServer(roomid , messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "roomuserleft")
                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                  room.leave()
                                                                                                                                                                                              }
                                                                                                                                                                                              else{
                                                                                                                                                                                                  let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                                                                                                                                                  history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                                                                                                                                                  let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                  
                                                                                                                                                                                                  
                                                                                                                                                                                                  room.join(usingNickname: myJID!, history: history)
                                                                                                                                                                                                   if(chatType == "banter"){
                                                                                                                                                                                                                                                                         self.sendMessageToServer(roomid , messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "roomuserleft")
                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                  room.leave()
                                                                                                                                                                                              }
                                                                   
                                                                  
                                                                    /*
                                                                     var dictRequest = [String: AnyObject]()
                                                                     dictRequest["cmd"] = "deletebanterroomdetails" as AnyObject
                                                                     
                                                                     do {
                                                                     //Creating Request Data
                                                                     var dictRequestData = [String: AnyObject]()
                                                                     
                                                                     let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                     let arrReadUserJid = login?.components(separatedBy: "@")
                                                                     let myMobile: String? = arrReadUserJid?[0]
                                                                     
                                                                     dictRequestData["roomid"] = roomid as AnyObject
                                                                     dictRequestData["username"] = myMobile as AnyObject
                                                                     
                                                                     dictRequest["requestData"] = dictRequestData as AnyObject
                                                                     //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                     //print(dictRequest)
                                                                     
                                                                     let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                     let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
                                                                     //print(strSaveBanter)
                                                                     self.appDelegate().sendRequestToAPI(strRequestDict: strSaveBanter)
                                                                     } catch {
                                                                     print(error.localizedDescription)
                                                                     }*/
                                                                    //Close this banter
                                                                    //print("leave")
                                                                    
                                                                    
                                                                    
                                                                    
                                                                    let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                    if localArrAllChats != nil
                                                                    {
                                                                        //Code to parse json data
                                                                        if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                            do {
                                                                                self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                                
                                                                            } catch let error as NSError {
                                                                                print(error)
                                                                            }
                                                                        }
                                                                    }
                                                                    
                                                                    
                                                                    for tmpAllUserChats in self.arrAllChats
                                                                    {
                                                                        let tmpSingleUserChat: String = tmpAllUserChats.key
                                                                        
                                                                        if(tmpSingleUserChat == roomid)
                                                                        {
                                                                            
                                                                            //var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                                            
                                                                            
                                                                            self.arrAllChats.removeValue(forKey: tmpAllUserChats.key)
                                                                            
                                                                            break
                                                                            
                                                                            //self.arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                                                                            
                                                                            
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    //Save array to local temp
                                                                    do {
                                                                        if(self.arrAllChats.count > 0)
                                                                        {
                                                                            let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.arrAllChats, options: .prettyPrinted)
                                                                            let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                                                            UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                                                            UserDefaults.standard.synchronize()
                                                                        }
                                                                        else{
                                                                            UserDefaults.standard.setValue(nil, forKey: "arrAllChats")
                                                                            UserDefaults.standard.synchronize()
                                                                        }
                                                                    } catch {
                                                                        print(error.localizedDescription)
                                                                    }
                                                                    if(self.isOnBantersView == true)
                                                                    {
                                                                        //Post notification if user is on chats window and received any message
                                                                        let notificationName = Notification.Name("RefreshBantersView")
                                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                                    }
                                                                    
                                                                    /*  var dictRequest = [String: AnyObject]()
                                                                      dictRequest["cmd"] = "deletebanterroomdetails" as AnyObject
                                                                      
                                                                      do {
                                                                          //Creating Request Data
                                                                          var dictRequestData = [String: AnyObject]()
                                                                          
                                                                          let login: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                          let arrReadUserJid = login?.components(separatedBy: "@")
                                                                          let myMobile: String? = arrReadUserJid?[0]
                                                                          
                                                                          dictRequestData["roomid"] = roomid as AnyObject
                                                                          dictRequestData["username"] = myMobile as AnyObject
                                                                          
                                                                          dictRequest["requestData"] = dictRequestData as AnyObject
                                                                          //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                          //print(dictRequest)
                                                                          
                                                                          let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                          let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
                                                                          //print(strSaveBanter)
                                                                          self.sendRequestToAPI(strRequestDict: strSaveBanter)
                                                                      } catch {
                                                                          //print(error.localizedDescription)
                                                                      }
                                                                      //Close this banter
                                                                      // print("leave")*/
                                                                  }
                                                              }
                                                              
                                                              
                                                          }
                                                          
                                                      }
                                                  }
                                                  else{
                                                             let    supportedTeam = tmpSingleUserChat[ "supportedTeam"] as! Int
                                                                                           let opponentTeam = tmpSingleUserChat[ "opponentTeam"] as! Int
                                                       
                                                      let isOpen = isBanterIsOpen(supportedTeam: supportedTeam, opponentTeam: opponentTeam)
                                                                                 
                                                                                                                        if(isOpen == false)
                                                                                                                        {
                                                                                                                            if(leaveRoomIds == ""){
                                                                                                                                leaveRoomIds = roomid
                                                                                                                            }
                                                                                                                            else{
                                                                                                                                leaveRoomIds = "\(leaveRoomIds),\(roomid)"
                                                                                                                            }
                                                                             updateBadgeCount(roomid, type: chatType, count: 0)
                                                                                                                            let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                                                                            if localArrAllChats != nil
                                                                                                                            {
                                                                                                                                //Code to parse json data
                                                                                                                                if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                                                                                    do {
                                                                                                                                        self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                                                                                        
                                                                                                                                    } catch let error as NSError {
                                                                                                                                        print(error)
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            
                                                                                                                            
                                                                                                                            for tmpAllUserChats in self.arrAllChats
                                                                                                                            {
                                                                                                                                let tmpSingleUserChat: String = tmpAllUserChats.key
                                                                                                                                
                                                                                                                                if(tmpSingleUserChat == roomid)
                                                                                                                                {
                                                                                                                                    
                                                                                                                                    //var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]
                                                                                                                                    
                                                                                                                                    
                                                                                                                                    self.arrAllChats.removeValue(forKey: tmpAllUserChats.key)
                                                                                                                                    
                                                                                                                                    break
                                                                                                                                    
                                                                                                                                    //self.arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject
                                                                                                                                    
                                                                                                                                    
                                                                                                                                }
                                                                                                                                
                                                                                                                            }
                                                                                                                            
                                                                                                                            //Save array to local temp
                                                                                                                            do {
                                                                                                                                if(self.arrAllChats.count > 0)
                                                                                                                                {
                                                                                                                                    let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.arrAllChats, options: .prettyPrinted)
                                                                                                                                    let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                                                    UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                                                                                                                    UserDefaults.standard.synchronize()
                                                                                                                                }
                                                                                                                                else{
                                                                                                                                    UserDefaults.standard.setValue(nil, forKey: "arrAllChats")
                                                                                                                                    UserDefaults.standard.synchronize()
                                                                                                                                }
                                                                                                                            } catch {
                                                                                                                                print(error.localizedDescription)
                                                                                                                            }
                                                                                                                            
                                                                                                                                //Post notification if user is on chats window and received any message
                                                                                                                                let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                            
                                                                                                                            
                                                                            
                                                      }
                                                  }
                                                  
                                              }
                                            else  if(chatType == "teambr")
                                                                                         {
                                                                                            let isJoined: String = tmpSingleUserChat["isJoined"] as! String
                                                                                                                                             let roomid: String = tmpSingleUserChat["roomJID"] as! String
                                                                                                                                             
                                                                                             let    supportedTeam = tmpSingleUserChat[ "supportedTeam"] as! Int
                                                                                            let isLeave = isCloseLeaveTeambr(mySupportedTeam: supportedTeam)
                                                                                                                                                             if(!isLeave)
                                                                                                                                                             {
                                                                                                                                                               if(leaveRoomIds == ""){
                                                                                                                                                                   leaveRoomIds = roomid
                                                                                                                                                               }
                                                                                                                                                               else{
                                                                                                                                                                   leaveRoomIds = "\(leaveRoomIds),\(roomid)"
                                                                                                                                                               }
                                                                                                                                                               updateBadgeCount(roomid, type: chatType, count: 0)
                                                                                                                                                                if(isJoined == "yes")
                                                                                                                                                                                                                 {
                                                                                                                                                                    let uuid = UUID().uuidString
                                                                                                                                                                                                                                       let messageId = uuid
                                                                                                                                                                                                                                       //let time: Int64 = self.getUTCFormateDate()

                                                                                                                                                                                                                                       let username: String = UserDefaults.standard.string(forKey: "registerusername")!
                                                                                                                                                                                                                                       let roomJID = XMPPJID(string: roomid)
                                                                                                                                                                                                                                                                                                                                                                 let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                                                                                                                                                                                                                                                                                                                 let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)
                                                                                                                                                                                                                                                                                                                                                                 room.activate(self.xmppStream!)

                                                                                                                                                                                                                                                                                                                                                                 room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                                                                                                                                                                                                                                                                                                                 //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                                                                                                                                                                                 if(room.isJoined){
                                                                                                                                                                                                                                                                                                                                                                      if(chatType == "teambr"){
                                                                                                                                                                                                                                                                                                                                                                                                                                            self.sendMessageToServer(roomid , messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "teambr", messageSubType: "roomuserleft")
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                     room.leave()
                                                                                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                                                                                 else{
                                                                                                                                                                                                                                                                                                                                                                     let history: XMLElement = XMLElement.element(withName: "history") as! XMLElement
                                                                                                                                                                                                                                                                                                                                                                     history.addAttribute(withName: "maxchars", stringValue: "0")
                                                                                                                                                                                                                                                                                                                                                                     let myJID: String? = UserDefaults.standard.string(forKey: "userJID")

                                                                                                                                                                                                                                                                                                                                                                     room.join(usingNickname: myJID!, history: history)
                                                                                                                                                                                                                                                                                                                                                                      if(chatType == "teambr"){
                                                                                                                                                                                                                                                                                                                                                                                                                                            self.sendMessageToServer(roomid , messageContent: username + " quit.", messageType: "header", messageTime: time, messageId: messageId, roomType: "teambr", messageSubType: "roomuserleft")
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                     room.leave()
                                                                                                                                                                                                                                                                                                                                                                 }}
                                                                                                                                                                                                              let localArrAllChats: String? = UserDefaults.standard.string(forKey: "arrAllChats")
                                                                                                                                                                                                              if localArrAllChats != nil
                                                                                                                                                                                                              {
                                                                                                                                                                                                                  //Code to parse json data
                                                                                                                                                                                                                  if let data = localArrAllChats?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                                                                                                                                                                      do {
                                                                                                                                                                                                                          self.arrAllChats = try JSONSerialization.jsonObject(with:data , options: []) as! [String : AnyObject]
                                                                                                                                                                                                                          
                                                                                                                                                                                                                      } catch let error as NSError {
                                                                                                                                                                                                                          print(error)
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              }

                                                                                                                                                                                                              for tmpAllUserChats in self.arrAllChats
                                                                                                                                                                                                              {
                                                                                                                                                                                                                  let tmpSingleUserChat: String = tmpAllUserChats.key
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  if(tmpSingleUserChat == roomid)
                                                                                                                                                                                                                  {

                                                                                                                                                                                                                      //var tmpArrChatDetails: [String: AnyObject] = tmpAllUserChats.value as! [String: AnyObject]


                                                                                                                                                                                                                      self.arrAllChats.removeValue(forKey: tmpAllUserChats.key)

                                                                                                                                                                                                                      break

                                                                                                                                                                                                                      //self.arrAllChats[tmpAllUserChats.key] = tmpArrChatDetails as AnyObject


                                                                                                                                                                                                                  }

                                                                                                                                                                                                              }

                                                                                                                                                                                                              //Save array to local temp
                                                                                                                                                                                                              do {
                                                                                                                                                                                                                  if(self.arrAllChats.count > 0)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                      let dataArrAllChats = try JSONSerialization.data(withJSONObject: self.arrAllChats, options: .prettyPrinted)
                                                                                                                                                                                                                      let strArrAllChats = NSString(data: dataArrAllChats, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                                                                                                                                      UserDefaults.standard.setValue(strArrAllChats, forKey: "arrAllChats")
                                                                                                                                                                                                                      UserDefaults.standard.synchronize()
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  else{
                                                                                                                                                                                                                      UserDefaults.standard.setValue(nil, forKey: "arrAllChats")
                                                                                                                                                                                                                      UserDefaults.standard.synchronize()
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              } catch {
                                                                                                                                                                                                                  print(error.localizedDescription)
                                                                                                                                                                                                              }
                                                                                                                                                                                                              let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                              NotificationCenter.default.post(name: notificationName, object: nil)

                                                                                            }
                                                                                            
                                            }
                                              //}
                                              
                                          }
        if(leaveRoomIds != "" || deleteroomid != ""){
             callTeamchangeRoomleave(leaveRoomIds: leaveRoomIds, Deleteroomids: deleteroomid)
            
        }
        else{
            getUserGroupsData()
        }
       
        
    }
    func Calleditprofile(){
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "editprofile" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        let deviceToken: String? = UserDefaults.standard.string(forKey: "DeviceToken")
        
        //Creating Request Dataregisterusername
        var dictRequestData = [String: AnyObject]()
        let mobilewithcc: String? = "+" + CountrycodeTemp + MobileTemp
        let userJID: String? = UserDefaults.standard.string(forKey: "registerusername")
        dictRequestData["username"] = userJID as AnyObject
        dictRequestData["mobile"] = MobileTemp as AnyObject
        dictRequestData["email"] = EmailTemp as AnyObject
        dictRequestData["countrycode"] = CountrycodeTemp as AnyObject
        dictRequestData["shortcode"] = CountryShotcutTemp as AnyObject
        dictRequestData["birthday"] = DobTemp as AnyObject
        if(deviceToken != nil){
            dictRequestData["devicetocken"] = deviceToken as AnyObject
        }else{
            dictRequestData["devicetocken"] = "none" as AnyObject
        }
        dictRequestData["mobilewithcc"] = mobilewithcc as AnyObject
        dictRequestData["avatar"] = UserDefaults.standard.string(forKey: "userAvatarURL") as AnyObject
        dictRequestData["status"] = UserDefaults.standard.string(forKey: "userStatus") as AnyObject
        dictRequestData["name"] = NameTemp as AnyObject
        dictRequestData["bio"] = bioTemp as AnyObject

        dictRequest["requestData"] = dictRequestData as AnyObject
        //dictRequest.setValue(dictMobiles, forKey: "requestData")
        //print(dictRequest)
        do {
            /* let dataMyTeams = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
             let strMyTeams = NSString(data: dataMyTeams, encoding: String.Encoding.utf8.rawValue)! as String
             //print(strMyTeams)
             appDelegate().sendRequestToAPI(strRequestDict: strMyTeams)*/
            /*let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
            let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
            //print(strByPlace)
            let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
            
            let url = MediaAPIjava + "request=" + escapedString!*/
            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                // 2
                .responseJSON{ response in
                    switch response.result {
                               case .success(let value):
                                   if let json = value as? [String: Any] {
                                       // print(" JSON:", json)
                                       let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                       Clslogging.loginfo(State: "editprofile", userinfo: json as [String : AnyObject])
                                       // self.finishSyncContacts()
                                       //print(" status:", status1)
                                       if(status1){
                                           DispatchQueue.main.async {
                                               Clslogging.logdebug(State: "editprofile success = true")
                                               UserDefaults.standard.setValue(self.MobileTemp, forKey: "registerMobile")
                                               // UserDefaults.standard.setValue(userdob, forKey: "userdob")
                                               //UserDefaults.standard.setValue(userlat, forKey: "latitude")
                                               // UserDefaults.standard.setValue(userlong, forKey: "longitude")
                                               UserDefaults.standard.setValue(self.EmailTemp, forKey: "useremail")
                                               UserDefaults.standard.setValue(self.CountrycodeTemp, forKey: "usercountrycode")
                                               UserDefaults.standard.setValue(self.NameTemp, forKey: "userName")
                                               UserDefaults.standard.setValue(self.CountryShotcutTemp, forKey: "usercountryshortcode")
                                               UserDefaults.standard.setValue(self.DobTemp, forKey: "userdob")
                                                UserDefaults.standard.setValue(self.bioTemp, forKey: "userbio")
                                               UserDefaults.standard.synchronize()
                                               UserDefaults.standard.setValue(nil, forKey: "isprofileNotSelected")
                                               UserDefaults.standard.synchronize()
                                               //Featch card
                                               //print(self.isvCardUpdated)
                                               /*if(isvCardUpdated)
                                                {
                                                xmppvCardStorage = XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
                                                
                                                if(xmppvCardStorage != nil)
                                                {
                                                xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: xmppvCardStorage!)
                                                xmppvCardTempModule?.activate(xmppStream!)
                                                xmppvCardTempModule?.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                
                                                xmppvCardTempModule?.fetchvCardTemp(for: xmppStream!.myJID, ignoreStorage: true)
                                                }
                                                
                                                
                                                }*/
                                               let notificationName1 = Notification.Name("succefullprofile")
                                               NotificationCenter.default.post(name: notificationName1, object: nil)
                                               let isvcardupdated = UserDefaults.standard.bool(forKey: "isvcardupdated")
                                               if (self.isUserOnline)
                                               {
                                               if(!isvcardupdated){
                                                  /* self.xmppvCardStorage = XMPPvCardCoreDataStorage.init()
                                                   //XMPPvCardCoreDataStorage.init()//init(inMemoryStore:)()
                                                   if(self.xmppvCardStorage != nil){
                                                       Clslogging.logdebug(State: "profileDone xmppvCardStorage != nil")
                                                       self.xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: self.xmppvCardStorage!)
                                                       
                                                       self.xmppvCardTempModule?.activate(self.xmppStream!)
                                                       
                                                       let vCardXML = XMLElement(name: "vCard", xmlns:"vcard-temp")
                                                       
                                                       let newvCardTemp: XMPPvCardTemp  = XMPPvCardTemp.vCardTemp(from: vCardXML)
                                                       //newvCardTemp.addAttribute(withName: "id", stringValue: "profileUpdated")
                                                       // print(UserDefaults.standard.string(forKey: "userAvatarURL") ?? 0)
                                                       
                                                       if UserDefaults.standard.string(forKey: "userAvatarURL") != nil
                                                       {
                                                           let avatarField: XMLElement = XMLElement.element(withName: "avatar") as! XMLElement
                                                           avatarField.stringValue = UserDefaults.standard.string(forKey: "userAvatarURL")
                                                           newvCardTemp.addChild(avatarField)
                                                           
                                                       }
                                                       //New code for custom field
                                                       
                                                       let statusField: XMLElement = XMLElement.element(withName: "status") as! XMLElement
                                                       statusField.stringValue = UserDefaults.standard.string(forKey: "userStatus")
                                                       newvCardTemp.addChild(statusField)
                                                       //End
                                                       
                                                       //newvCardTemp.photo = imageData
                                                       //newvCardTemp.nickname = appDelegate().NameTemp
                                                       let nameField: XMLElement = XMLElement.element(withName: "name") as! XMLElement
                                                       nameField.stringValue = UserDefaults.standard.string(forKey: "userName")
                                                       newvCardTemp.addChild(nameField)
                                                       let MobilesettingField: XMLElement = XMLElement.element(withName: "profilemobile") as! XMLElement
                                                       MobilesettingField.stringValue = UserDefaults.standard.string(forKey: "Mobilesetting")
                                                       newvCardTemp.addChild(MobilesettingField)
                                                       
                                                       let EmailsettingField: XMLElement = XMLElement.element(withName: "profileemail") as! XMLElement
                                                       EmailsettingField.stringValue = UserDefaults.standard.string(forKey: "Emailsetting")
                                                       newvCardTemp.addChild(EmailsettingField)
                                                       //newvCardTemp.status = "Hey there! I am using Football Fan"
                                                       self.xmppvCardTempModule?.updateMyvCardTemp(newvCardTemp)
                                                       
                                                   }
                                                   else{
                                                       Clslogging.logdebug(State: "profileDone xmppvCardStorage init")
                                                       self.xmppvCardStorage2 = XMPPvCardCoreDataStorage.init()
                                                       if(self.xmppvCardStorage2 != nil){
                                                           self.xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: self.xmppvCardStorage2!)
                                                           
                                                           self.xmppvCardTempModule?.activate(self.xmppStream!)
                                                           
                                                           let vCardXML = XMLElement(name: "vCard", xmlns:"vcard-temp")
                                                           
                                                           let newvCardTemp: XMPPvCardTemp  = XMPPvCardTemp.vCardTemp(from: vCardXML)
                                                           //newvCardTemp.addAttribute(withName: "id", stringValue: "profileUpdated")
                                                           // print(UserDefaults.standard.string(forKey: "userAvatarURL") ?? 0)
                                                           if UserDefaults.standard.string(forKey: "userAvatarURL") != nil
                                                           {
                                                               let avatarField: XMLElement = XMLElement.element(withName: "avatar") as! XMLElement
                                                               avatarField.stringValue = UserDefaults.standard.string(forKey: "userAvatarURL")
                                                               newvCardTemp.addChild(avatarField)
                                                               
                                                           }
                                                           //New code for custom field
                                                          
                                                           let statusField: XMLElement = XMLElement.element(withName: "status") as! XMLElement
                                                           statusField.stringValue = UserDefaults.standard.string(forKey: "userStatus")
                                                           newvCardTemp.addChild(statusField)
                                                           //End
                                                           
                                                           //newvCardTemp.photo = imageData
                                                           //newvCardTemp.nickname = appDelegate().NameTemp
                                                           let nameField: XMLElement = XMLElement.element(withName: "name") as! XMLElement
                                                           nameField.stringValue = UserDefaults.standard.string(forKey: "userName")
                                                           newvCardTemp.addChild(nameField)
                                                           let MobilesettingField: XMLElement = XMLElement.element(withName: "profilemobile") as! XMLElement
                                                           MobilesettingField.stringValue = UserDefaults.standard.string(forKey: "Mobilesetting")
                                                           newvCardTemp.addChild(MobilesettingField)
                                                           
                                                           let EmailsettingField: XMLElement = XMLElement.element(withName: "profileemail") as! XMLElement
                                                           EmailsettingField.stringValue = UserDefaults.standard.string(forKey: "Emailsetting")
                                                           newvCardTemp.addChild(EmailsettingField)
                                                           //newvCardTemp.status = "Hey there! I am using Football Fan"
                                                           self.xmppvCardTempModule?.updateMyvCardTemp(newvCardTemp)
                                                           
                                                       }
                                                   }*/
                                                   UserDefaults.standard.setValue(true, forKey: "isvcardupdated")
                                                   UserDefaults.standard.synchronize()
                                               }
                                           }
                                           }
                                           
                                       }
                                       else{
                                           DispatchQueue.main.async
                                               {
                                                   Clslogging.logdebug(State: "editprofile success = false")
                                                    let pickedCaption:[String: Any] = ["profileerror": json["error"]   as Any]
                                                   let notificationName1 = Notification.Name("failprofile")
                                                   NotificationCenter.default.post(name: notificationName1, object: nil, userInfo: pickedCaption)
                                           }
                                           //Show Error
                                       }
                                   }
                               case .failure(let error):
                        debugPrint(error as Any)
                        Clslogging.logdebug(State: "editprofile success = false")
                        let notificationName1 = Notification.Name("failprofile")
                        NotificationCenter.default.post(name: notificationName1, object: nil)
                        break
                                   // error handling
                    
                               }
                  
            }
        } catch {
            print(error.localizedDescription)
            Clslogging.logdebug(State: "editprofile success = false")
            let notificationName1 = Notification.Name("failprofile")
            NotificationCenter.default.post(name: notificationName1, object: nil)
        }
    }
func sendsignupmail(){
    
    if ClassReachability.isConnectedToNetwork() {
       
        let boundary = generateBoundaryString()
        var request = URLRequest(url: URL(string: Signupmail)!)
        request.httpMethod = "POST"
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        var reqParams = [String: String]()
        reqParams["cmd"] = "regemail"
        reqParams["to"] = UserDefaults.standard.string(forKey: "useremail")
        reqParams["name"] = UserDefaults.standard.string(forKey: "userName")
        reqParams["key"] = "kXfqS9wUug6gVKDB"  as! String
       reqParams["device"] = "ios" as String
        let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
        let mytriviajid: String? = UserDefaults.standard.string(forKey: "triviauser")

        if(myjid != nil){
            let arrdUserJid = myjid?.components(separatedBy: "@")
            let userUserJid = arrdUserJid?[0]
            reqParams["username"] = userUserJid
        }
        else if(mytriviajid != nil){
            let arrdUserJid = mytriviajid?.components(separatedBy: "@")
            let userUserJid = arrdUserJid?[0]
            reqParams["username"] = userUserJid
        }
        else{
            reqParams["username"] = ""
        }
        
        
        // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
        request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
        let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
            if let data = data {
                if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                    //print(stringData) //JSONSerialization
                    
                    
                    
                    //print(time)
                    do {
                        let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                        
                        let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                        
                        if(isSuccess)
                        {
                            
                        }
                        else
                        {
                            //Show Error
                        }
                    } catch let error as NSError {
                        print(error)
                        //Show Error
                    }
                    
                }
            }
            else
            {
                //Show Error
            }
        })
        task.resume()
        
        
        
        
        
        
    }
}
    func getbackgroundapi() {
        if ClassReachability.isConnectedToNetwork() {
            if(recentlylogin){
                APIgetfanupdatestime = getUTCFormateDate()
               APIgetnewstime = getUTCFormateDate()
               // self.appDelegate().returnHomeToOtherView = false
               APIgettriviatime = getUTCFormateDate()
                 APIgetoldtriviatime = getUTCFormateDate()
            }
            var dictRequest = [String: AnyObject]()
            dictRequest["cmd"] = "getbackgroundapi" as AnyObject
            dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
            dictRequest["device"] = "ios" as AnyObject
            
          // LoadingIndicatorView.show(self.view, loadingText: "Please wait while loading")
            
            do {
                
                /*let dataInvited = try JSONSerialization.data(withJSONObject: strBanterJIDs, options: .prettyPrinted)
                 let strInvited = NSString(data: dataInvited, encoding: String.Encoding.utf8.rawValue)! as String
                 print(strInvited)*/
                //let login: String? = UserDefaults.standard.string(forKey: "userJID")
                //let arrReadUserJid = login?.components(separatedBy: "@")
                //let userReadUserJid = arrReadUserJid?[0]
               var totelteams = ""
                         arrDataTeams =  db.query(sql: "SELECT * FROM Teams_details") as NSArray
             if(arrDataTeams.count == 0){
                 totelteams = "all"
                 
             }else{
                 let teamselected = db.query(sql: "SELECT * FROM Teams_details where isselected = 1") as NSArray
                                            if(teamselected.count == arrDataTeams.count){
                                                totelteams = "all"
                                            }
                                            else if(teamselected.count == 0){
                                                totelteams = "none"
                                            }
                                            else{
                                                for cat in teamselected
                                                {
                                                    
                                                    let team_Id =  (cat as! NSDictionary).value(forKey: "team_Id") as! String
                                                    if( totelteams == ""){
                                                        totelteams += "\(String(describing: team_Id))"
                                                    }
                                                    else{
                                                        totelteams += ",\(String(describing: team_Id))"
                                                    }
                                                }
                                            }
             }
                        
                
                var reqParams = [String: AnyObject]()
                //reqParams["cmd"] = "getfanupdates" as AnyObject teams
             reqParams["teams"] = totelteams as AnyObject
               reqParams["lastindex"] = 0 as AnyObject?
             reqParams["version"] = 1 as AnyObject
                let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                if(myjid != nil){
                    let arrdUserJid = myjid?.components(separatedBy: "@")
                    let userUserJid = arrdUserJid?[0]
                    reqParams["username"] = userUserJid as AnyObject?
                }
                else{
                    let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
                           if(!istriviauser){
                            let triviauser: String? = UserDefaults.standard.string(forKey: "triviauser")
                            let arrdUserJid = triviauser?.components(separatedBy: "@")
                                     let userUserJid = arrdUserJid?[0]
                                     reqParams["username"] = userUserJid as AnyObject?
                           }else{
                             reqParams["username"] = "" as AnyObject
                    }
                   //dictRequestData1["username"] = "" as AnyObject
                }
                
                dictRequest["requestData"] = reqParams as AnyObject
                //dictRequest.setValue(dictMobiles, forKey: "requestData")
                //print(dictRequest)
               /* let dataFanUpdates = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                let strFanUpdates = NSString(data: dataFanUpdates, encoding: String.Encoding.utf8.rawValue)! as String
                let escapedString = strFanUpdates.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                //  print(escapedString!)
                // print(strFanUpdates)
                var reqParams1 = [String: AnyObject]()
                reqParams1["request"] = strFanUpdates as AnyObject
                let url = MediaAPIjava + "request=" + escapedString!*/
                //"http://apitest.ifootballfan.com:8080/FFJavaAPI/API?request=%7B%22cmd%22%3A%22getfanupdates%22%2C%22requestData%22%3A%7B%22lastindex%22%3A0%2C%22teams%22%3A%22all%22%7D%7D"//MediaAPI + "request=" + strFanUpdates
                AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                  headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                    // 2
                    .responseJSON { response in
                        
                        switch response.result {
                                   case .success(let value):
                                       if let json = value as? [String: Any] {
                                           // print(" JSON:", json)
                                           let status1: Bool = json["success"] as! Bool
                                        if(status1){//DispatchQueue.main.async {
                                             let response: NSDictionary = json["responseData"]  as! NSDictionary
                                           if(!self.recentlylogin){
                                                let dicgethome: NSDictionary = response.value(forKey: "gethome")  as! NSDictionary
                                               
                                                                              self.arrhometrivia = dicgethome.value(forKey: "trivia") as! [AnyObject]
                                                                              self.arrhomenews = dicgethome.value(forKey: "news") as! NSArray
                                                                              self.arrhomefanupdate = dicgethome.value(forKey: "fanupdate") as! [AnyObject]
                                                                              self.triviamoreOption = dicgethome.value(forKey: "OldTrivia") as! Bool
                                               //Ravi Media
                                               self.arrhomemedia = dicgethome.value(forKey: "media") as! [AnyObject]
                                               //Ravi Media
                                               let notificationName1 = Notification.Name("resetslider")
                                               NotificationCenter.default.post(name: notificationName1, object: nil)
                                           }
                                           else{
                                               self.recentlylogin = false
                                           }
                                           self.arrupcommingTrivia = response.value(forKey: "gettrivia") as! [AnyObject]
                                            let arrgetnews = response.value(forKey: "getnews") as! NSArray
                                            let dicgetnews: NSDictionary = arrgetnews[0] as! NSDictionary
                                           //BrakingNews = dicgetnews.value(forKey: "breakingnews") as! [AnyObject]
                                           self.arrNews = dicgetnews.value(forKey: "news") as! [AnyObject]
                                           self.arrFanUpdatesTeams = response.value(forKey: "getfanupdate") as! [AnyObject]
                                          
                                           self.arrpasttrivia = response.value(forKey: "getoldtrivia") as! [AnyObject]
                                           // self.callopenScreen()
                                        // self.setSliderSetting()
                                           let notificationName = Notification.Name("resetStory")
                                                                                                                                                                                                              NotificationCenter.default.post(name: notificationName, object: nil)
                                           
                                           let notificationName2 = Notification.Name("_FetchedNews")
                                                                                                                                                                                                                                                                            NotificationCenter.default.post(name: notificationName2, object: nil)
                                           self.arrnotification = response.value(forKey: "getnotifications") as! [AnyObject]
                                           UserDefaults.standard.setValue(json["notificationcount"], forKey: "notificationcount")
                                           UserDefaults.standard.synchronize()
                                           }
                                           else{
                                               DispatchQueue.main.async
                                                   {
                                                     
                                                     //self.callopenScreen()
                                                       
                                                       
                                               }
                                               //Show Error
                                           }
                                       }
                                   case .failure(let error):
                                     debugPrint(error as Any)
                            break
                                       // error handling
                        
                                   }
                        
                }
                
                
            } catch {
                print(error.localizedDescription)
             //self.callopenScreen()
                                                           
            }
        }else {
           // LoadingIndicatorVi
        }
    }
    func GetmyTeam() {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "getmyteam" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        do {
             
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            
            dictRequestData["username"] = myMobile as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
            
      /*  let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                      let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                      //print(strByPlace)
                                                                      let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                      
                                                                      let url = MediaAPIjava + "request=" + escapedString!*/
                                                                     AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                     headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                       // 2
                                                                                                       .responseJSON { response in
                                                                                                        switch response.result {
                                                                                                                                                 case .success(let value):
                                                                                                                                                     if let json = value as? [String: Any] {
                                                                                                                                                                                         // print(" JSON:", json)
                                                                                                                                                                                         let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                                         // self.finishSyncContacts()
                                                                                                                                                                                         //print(" status:", status1)
                                                                                                                                                                                      if(status1){
                                                                                                                                                                                          self.isLoadingMyTeams = true
                                                                                                                                                                                          self.isTeamNotSelected = false
                                                                                                                                                                                          let response: NSArray = json["responseData"] as! NSArray
                                                                                                                                                                                          //  print(response)
                                                                                                                                                                                          let myTeamsDict: NSDictionary = response[0] as! NSDictionary
                                                                                                                                                                                          //Save my teams in user defaults here
                                                                                                                                                                                          //Primary
                                                                                                                                                                                          self.primaryTeamId = myTeamsDict.value(forKey: "primaryteam") as! Int64
                                                                                                                                                                                          self.primaryTeamName = myTeamsDict.value(forKey: "primaryteamname") as! String
                                                                                                                                                                                          self.primaryTeamLogo = myTeamsDict.value(forKey: "primaryteamlogo") as! String
                                                                                                                                                                                          
                                                                                                                                                                                          let teamImageName = "Team" + self.primaryTeamId.description
                                                                                                                                                                                          //print(teamImageName)
                                                                                                                                                                                          let usercity: String? = myTeamsDict.value(forKey: "city") as? String
                                                                                                                                                                                          let userstate: String? = myTeamsDict.value(forKey: "state") as? String

                                                                                                                                                                                          let usercontry: String? = myTeamsDict.value(forKey: "country") as? String
                                                                                                                                                                                          let useremail: String? = myTeamsDict.value(forKey: "email") as? String
                                                                                                                                                                                          let usercountrycode: Int64 = (myTeamsDict.value(forKey: "countrycode") as? Int64)!
                                                                                                                                                                                          let teamImage: String? = UserDefaults.standard.string(forKey: teamImageName)
                                                                                                                                                                                          let shortcode: String? = myTeamsDict.value(forKey: "shortcode") as? String
                                                                                                                                                                                          let usermobileno: String? = myTeamsDict.value(forKey: "mobile") as? String
                                                                                                                                                                                          let username: String? = myTeamsDict.value(forKey: "name") as? String
                                                                                                                                                     let verified: Bool? = myTeamsDict.value(forKey: "verified") as? Bool
                                                                                                                                                                                          let avatar: String = myTeamsDict.value(forKey: "avatar") as! String //let userdob: Int64? = Int64(myTeamsDict.value(forKey: "birthday") as! Int)
                                                                                                                                                                                          //let userlat: String? = myTeamsDict.value(forKey: "latitude") as? String
                                                                                                                                                                                          //let userlong: String? = myTeamsDict.value(forKey: "longitude") as? String
                                                                                                                                                                                          let notification: String = myTeamsDict.value(forKey: "notifications") as! String
                                                                                                                                                                                          if (notification == "yes"){
                                                                                                                                                                                             // priority = "Everyone"
                                                                                                                                                                                                         UserDefaults.standard.setValue("Everyone", forKey: "BanterNotification")
                                                                                                                                                                                                         UserDefaults.standard.synchronize()
                                                                                                                                                                                          }
                                                                                                                                                                                          else{
                                                                                                                                                                                              //priority = "Nobody"
                                                                                                                                                                                                         UserDefaults.standard.setValue("Nobody", forKey: "BanterNotification")
                                                                                                                                                                                                         UserDefaults.standard.synchronize()
                                                                                                                                                                                          }
                                                                                                                                                                                          
                                                                                                                                                                                          if((teamImage) == nil)
                                                                                                                                                                                          {
                                                                                                                                                                                              self.loadTeamImageFromUrl(url: self.primaryTeamLogo, fileName: teamImageName as String)
                                                                                                                                                                                          }
                                                                                                                                                                                          
                                                                                                                                                                                          UserDefaults.standard.setValue(avatar, forKey: "userAvatarURL")
                                                                                                                                                                                          self.loadImageFromUrl(url: avatar, fileName: "userAvatar")
                                                                                                                                                                                          UserDefaults.standard.setValue(self.primaryTeamId, forKey: "primaryTeamId")
                                                                                                                                                                                          UserDefaults.standard.setValue(self.primaryTeamName, forKey: "primaryTeamName")
                                                                                                                                                                                          UserDefaults.standard.setValue(self.primaryTeamLogo, forKey: "primaryTeamLogo")
                                                                                                                                                                                          UserDefaults.standard.setValue(username, forKey: "userName")
                                                                                                                                                         let bio: String? = myTeamsDict.value(forKey: "bio") as? String
                                                                                                                                                                                          if(bio != nil){
                                                                                                                                                                                              UserDefaults.standard.setValue(bio, forKey: "userbio")
                                                                                                                                                                                          }
                                                                                                                                                                                          else{
                                                                                                                                                         UserDefaults.standard.setValue("", forKey: "userbio")
                                                                                                                                                                                          }
                                                                                                                                                                          UserDefaults.standard.setValue(myTeamsDict.value(forKey: "followerscount"), forKey: "followerscount")
                                                                                                                                                                                          UserDefaults.standard.setValue(myTeamsDict.value(forKey: "fanstorycount"), forKey: "fanstorycount")
                                                                                                                                                                                          UserDefaults.standard.setValue(myTeamsDict.value(forKey: "followingcount"), forKey: "followingcount")
                                                                                                                                                                                          UserDefaults.standard.setValue(verified, forKey: "isverfyprofile")
                                                                                                                                                                                          UserDefaults.standard.synchronize()
                                                                                                                                                                                          UserDefaults.standard.setValue(usercity, forKey: "userecity")
                                                                                                                                                                                          UserDefaults.standard.setValue(userstate, forKey: "userstate")
                                                                                                                                                                                          UserDefaults.standard.setValue(usercontry, forKey: "usercountry")
                                                                                                                                                                                          UserDefaults.standard.setValue(usermobileno, forKey: "registerMobile")
                                                                                                                                                                                          UserDefaults.standard.setValue(0, forKey: "userdob")
                                                                                                                                                                                          UserDefaults.standard.setValue(0, forKey: "latitude")
                                                                                                                                                                                          UserDefaults.standard.setValue(0, forKey: "longitude")
                                                                                                                                                                                          UserDefaults.standard.setValue(useremail, forKey: "useremail")
                                                                                                                                                                                          UserDefaults.standard.setValue(usercountrycode, forKey: "usercountrycode")
                                                                                                                                                                                          UserDefaults.standard.setValue(shortcode, forKey: "usercountryshortcode")
                                                                                                                                                                                          UserDefaults.standard.synchronize()
                                                                                                                                                                                          //Optional 1
                                                                                                                                                                                          self.optionalTeam1Id = myTeamsDict.value(forKey: "followedteam1") as! Int64
                                                                                                                                                                                          self.optionalTeam1Name = myTeamsDict.value(forKey: "followedteam1name") as! String
                                                                                                                                                                                          self.optionalTeam1Logo = myTeamsDict.value(forKey: "followedteam1logo") as! String
                                                                                                                                                                                          var myteam = ""
                                                                                                                                                                                          let teamImageName1 = "Team" + self.optionalTeam1Id.description
                                                                                                                                                                                          //print(teamImageName)
                                                                                                                                                                                          if(self.primaryTeamId != 0 && usermobileno == "")
                                                                                                                                                                                          {
                                                                                                                                                                                              myteam += "\(String(describing: self.primaryTeamId))"
                                                                                                                                                                                              UserDefaults.standard.setValue(nil, forKey: "isTeamNotSelected")
                                                                                                                                                                                              UserDefaults.standard.synchronize()
                                                                                                                                                                                              UserDefaults.standard.setValue("yes", forKey: "isprofileNotSelected")
                                                                                                                                                                                              UserDefaults.standard.synchronize()
                                                                                                                                                                                              let notificationName1 = Notification.Name("Showprofile")
                                                                                                                                                                                              NotificationCenter.default.post(name: notificationName1, object: nil)
                                                                                                                                                                                          }
                                                                                                                                                                                          
                                                                                                                                                                                          let teamImage1: String? = UserDefaults.standard.string(forKey: teamImageName1)
                                                                                                                                                                                          if((teamImage1) == nil)
                                                                                                                                                                                          {
                                                                                                                                                                                              self.loadTeamImageFromUrl(url: self.optionalTeam1Logo, fileName: teamImageName1 as String)
                                                                                                                                                                                          }
                                                                                                                                                                                          
                                                                                                                                                                                          UserDefaults.standard.setValue(self.optionalTeam1Id, forKey: "optionalTeam1Id")
                                                                                                                                                                                          UserDefaults.standard.setValue(self.optionalTeam1Name, forKey: "optionalTeam1Name")
                                                                                                                                                                                          UserDefaults.standard.setValue(self.optionalTeam1Logo, forKey: "optionalTeam1Logo")
                                                                                                                                                                                          UserDefaults.standard.synchronize()
                                                                                                                                                                                          //Optional 2
                                                                                                                                                                                          self.optionalTeam2Id = myTeamsDict.value(forKey: "followedteam2") as! Int64
                                                                                                                                                                                          self.optionalTeam2Name = myTeamsDict.value(forKey: "followedteam2name") as! String
                                                                                                                                                                                          self.optionalTeam2Logo = myTeamsDict.value(forKey: "followedteam2logo") as! String
                                                                                                                                                                                          
                                                                                                                                                                                          let teamImageName2 = "Team" + self.optionalTeam2Id.description
                                                                                                                                                                                          //print(teamImageName)
                                                                                                                                                                                          
                                                                                                                                                                                          let teamImage2: String? = UserDefaults.standard.string(forKey: teamImageName2)
                                                                                                                                                                                          if((teamImage2) == nil)
                                                                                                                                                                                          {
                                                                                                                                                                                              self.loadTeamImageFromUrl(url: self.optionalTeam2Logo, fileName: teamImageName2 as String)
                                                                                                                                                                                          }
                                                                                                                                                                                          
                                                                                                                                                                                          UserDefaults.standard.setValue(self.optionalTeam2Id, forKey: "optionalTeam2Id")
                                                                                                                                                                                          UserDefaults.standard.setValue(self.optionalTeam2Name, forKey: "optionalTeam2Name")
                                                                                                                                                                                          UserDefaults.standard.setValue(self.optionalTeam2Logo, forKey: "optionalTeam2Logo")
                                                                                                                                                                                          UserDefaults.standard.synchronize()
                                                                                                                                                                                          //Optional 3
                                                                                                                                                                                          self.optionalTeam3Id = myTeamsDict.value(forKey: "followedteam3") as! Int64
                                                                                                                                                                                          self.optionalTeam3Name = myTeamsDict.value(forKey: "followedteam3name") as! String
                                                                                                                                                                                          self.optionalTeam3Logo = myTeamsDict.value(forKey: "followedteam3logo") as! String
                                                                                                                                                                                          
                                                                                                                                                                                          let teamImageName3 = "Team" + self.optionalTeam3Id.description
                                                                                                                                                                                          //print(teamImageName)
                                                                                                                                                                                          
                                                                                                                                                                                          let teamImage3: String? = UserDefaults.standard.string(forKey: teamImageName3)
                                                                                                                                                                                          if((teamImage3) == nil)
                                                                                                                                                                                          {
                                                                                                                                                                                              self.loadTeamImageFromUrl(url: self.optionalTeam3Logo, fileName: teamImageName3 as String)
                                                                                                                                                                                          }
                                                                                                                                                                                          
                                                                                                                                                                                          UserDefaults.standard.setValue(self.optionalTeam3Id, forKey: "optionalTeam3Id")
                                                                                                                                                                                          UserDefaults.standard.setValue(self.optionalTeam3Name, forKey: "optionalTeam3Name")
                                                                                                                                                                                          UserDefaults.standard.setValue(self.optionalTeam3Logo, forKey: "optionalTeam3Logo")
                                                                                                                                                                                          UserDefaults.standard.synchronize()
                                                                                                                                                                                          
                                                                                                                                                                                          if(self.primaryTeamId == 0)
                                                                                                                                                                                          {
                                                                                                                                                                                              self.isLoadingMyTeams = false
                                                                                                                                                                                              let notificationName = Notification.Name("FetchedMyTeamsDetails")
                                                                                                                                                                                              NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                              
                                                                                                                                                                                              let notificationName1 = Notification.Name("Showteam")
                                                                                                                                                                                              NotificationCenter.default.post(name: notificationName1, object: nil)
                                                                                                                                                                                          }
                                                                                                                                                                                          if(self.optionalTeam1Id != 0)
                                                                                                                                                                                          {
                                                                                                                                                                                              myteam += ",\(String(describing: self.optionalTeam1Id))"
                                                                                                                                                                                          }
                                                                                                                                                                                          if(self.optionalTeam2Id != 0)
                                                                                                                                                                                          {
                                                                                                                                                                                              myteam += ",\(String(describing: self.optionalTeam2Id))"
                                                                                                                                                                                          }
                                                                                                                                                                                          if(self.optionalTeam3Id != 0)
                                                                                                                                                                                          {
                                                                                                                                                                                              myteam += ",\(String(describing: self.optionalTeam3Id))"
                                                                                                                                                                                          }
                                                                                                                                                                                          if(self.isOnprofileviewView == true){
                                                                                                                                                                                                     let notificationName1 = Notification.Name("setVCard")
                                                                                                                                                                                                     NotificationCenter.default.post(name: notificationName1, object: nil)
                                                                                                                                                                                                 }/*
                                                                                                                                                                                           let defalteamSelection: String? = UserDefaults.standard.string(forKey: "defalteamSelection")
                                                                                                                                                                                           if((defalteamSelection) == nil)
                                                                                                                                                                                           {
                                                                                                                                                                                           let _ = db.query(sql:"UPDATE Teams_details SET isselected = 1 WHERE  team_Id IN (\(myteam))")
                                                                                                                                                                                           
                                                                                                                                                                                           let _ = db.query(sql:"UPDATE teams_details SET isselected = 0 WHERE  team_Id NOT IN (\(myteam))")
                                                                                                                                                                                           UserDefaults.standard.setValue("ishave", forKey: "defalteamSelection")
                                                                                                                                                                                           UserDefaults.standard.synchronize()
                                                                                                                                                                                           }
                                                                                                                                                                                           */
                                                                                                                                                                                          
                                                                                                                                                                                      }
                                                                                                                                                                                         else{
                                                                                                                                                                                                                                           
                                                                                                                                                                                             //Show Error
                                                                                                                                                                                         }
                                                                                                                                                                                     }
                                                                                                                                                 case .failure(let error):
                                                                                                debugPrint(error as Any)
                                                                                                        break
                                                                                                                                                     // error handling
                                                                                                                                      
                                                                                                                                                 }
                                                                                                         
                                                                                                   }
            } catch {
                       print(error.localizedDescription)
                   }
    }
    func getblockusers() {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "blockusers" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        do {
             let time: Int64 = self.getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            let arrReadChatJid = toUserJID.components(separatedBy: "@")
            let to: String? = arrReadChatJid[0]
            
            dictRequestData["username"] = myMobile as AnyObject
           
            dictRequest["requestData"] = dictRequestData as AnyObject
            
       /* let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                      let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                      //print(strByPlace)
                                                                      let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                      
                                                                      let url = MediaAPIjava + "request=" + escapedString!*/
                                                                     AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                     headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                       // 2
                                                                                                       .responseJSON { response in
                                                                                                        
                                                                                                        switch response.result {
                                                                                                                                                 case .success(let value):
                                                                                                                                                     if let json = value as? [String: Any] {
                                                                                                                                                         // print(" JSON:", json)
                                                                                                                                                         let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                         // self.finishSyncContacts()
                                                                                                                                                         //print(" status:", status1)
                                                                                                                                                      if(status1){
                                                                                                                                                          let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                          for record in response {
                                                                                                                                                              let roomDetailsDict = record as! [String : AnyObject]
                                                                                                                                                              
                                                                                                                                                              let userJid = roomDetailsDict["blockedusername"]
                                                                                                                                                              let userType = roomDetailsDict["type"] as! String
                                                                                                                                                              let blockedtime = roomDetailsDict["blockedtime"]
                                                                                                                                                              //Int64(truncating: (roomDetailsDict.value(forKey: "blockedtime") as! AnyObject) as! NSNumber )
                                                                                                                                                              let unblockedtime = roomDetailsDict["unblockedtime"]  //roomDetailsDict.value(forKey: "unblockedtime").int
                                                                                                                                                              let BlockeduserTable = Blockeduser()
                                                                                                                                                              if(userType == "banter"){
                                                                                                                                                                  let roomid = roomDetailsDict["roomid"]
                                                                                                                                                                  BlockeduserTable.chatType = userType
                                                                                                                                                                  BlockeduserTable.roomId = roomid as! String
                                                                                                                                                                  BlockeduserTable.touser = userJid as! String
                                                                                                                                                              }
                                                                                                                                                              else if(userType == "group"){
                                                                                                                                                                  let roomid = roomDetailsDict["roomid"]
                                                                                                                                                                  BlockeduserTable.chatType = userType
                                                                                                                                                                  BlockeduserTable.roomId = roomid as! String
                                                                                                                                                                  BlockeduserTable.touser = userJid as! String
                                                                                                                                                              }
                                                                                                                                                              else{
                                                                                                                                                                  let roomid = roomDetailsDict["roomid"] as! String
                                                                                                                                                                  if(roomid != login){
                                                                                                                                                                      /*BlockeduserTable.chatType = "chatR"
                                                                                                                                                                      BlockeduserTable.touser = roomid
                                                                                                                                                                      BlockeduserTable.roomId = roomid */
                                                                                                                                                                  }
                                                                                                                                                                  else{
                                                                                                                                                                      BlockeduserTable.chatType = "chat"
                                                                                                                                                                      BlockeduserTable.touser = userJid as! String
                                                                                                                                                                      BlockeduserTable.roomId = userJid as! String}
                                                                                                                                                                  
                                                                                                                                                              }
                                                                                                                                                              BlockeduserTable.status = "Blocked"
                                                                                                                                                              
                                                                                                                                                              BlockeduserTable.unblocked_time = (unblockedtime?.int64Value)!
                                                                                                                                                              BlockeduserTable.blocked_time = (blockedtime?.int64Value)!
                                                                                                                                                              if BlockeduserTable.save() != 0 {
                                                                                                                                                                  
                                                                                                                                                              }
                                                                                                                                                          }
                                                                                                                                                          
                                                                                                                                                          
                                                                                                                                                      }
                                                                                                                                                         else{
                                                                                                                                                                                                           
                                                                                                                                                             //Show Error
                                                                                                                                                         }
                                                                                                                                                     }
                                                                                                                                                 case .failure(let error):
                                                                                                                                                    debugPrint(error as Any)
                                                                                                            
                                                                                                        break
                                                                                                                                                     // error handling
                                                                                                                                      
                                                                                                                                                 }
                                                                                             
                                                                                                   }
            } catch {
                       print(error.localizedDescription)
                   }
    }
    func getuserdetail(){
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "userdetail" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        do {
             let time: Int64 = self.getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            let arrReadChatJid = toUserJID.components(separatedBy: "@")
            let to: String? = arrReadChatJid[0]
            //appDelegate().mySupportedTeam = joinTeamId
            dictRequestData["blockedusername"] = to as AnyObject
           
            dictRequestData["username"] = myMobile as AnyObject
            
            dictRequest["requestData"] = dictRequestData as AnyObject
            //dictRequest.setValue(dictMobiles, forKey: "requestData")
            //print(dictRequest)
            
           // let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
           // let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
            //print(strSaveBanter)
            //sendRequestToAPI(strRequestDict: strSaveBanter)
       
     /*   let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                      let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                      //print(strByPlace)
                                                                      let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                      
                                                                      let url = MediaAPIjava + "request=" + escapedString!*/
                                                                     AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                     headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                       // 2
                                                                                                       .responseJSON { response in
                                                                                                switch response.result {
                                                                                                                                         case .success(let value):
                                                                                                                                             if let json = value as? [String: Any] {
                                                                                                                                                 // print(" JSON:", json)
                                                                                                                                                 let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                 // self.finishSyncContacts()
                                                                                                                                                 //print(" status:", status1)
                                                                                                                                              if(status1){
                                                                                                                                                     let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                                                   let pickedCaption:[String: Any] = ["userdetail": response[0]]
                                                                                                                                                                                                   let notificationName = Notification.Name("showProfileWithNotify")
                                                                                                                                                                                                   NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                                                                                 }
                                                                                                                                                 else{
                                                                                                                                                                                                   
                                                                                                                                                     //Show Error
                                                                                                                                                 }
                                                                                                                                             }
                                                                                                                                         case .failure(let error):
                                                                                                                                            debugPrint(error as Any)
                                                                                                    break
                                                                                                                                             // error handling
                                                                                                                              
                                                                                                                                         }
                                                                                                     
                                                                                                   }
            } catch {
                       print(error.localizedDescription)
                   }
    }
    func getbanterroomusers(roomid:String){
           var dictRequest = [String: AnyObject]()
           dictRequest["cmd"] = "getbanterroomusers" as AnyObject
           dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
           dictRequest["device"] = "ios" as AnyObject
           do {
                let time: Int64 = self.getUTCFormateDate()
               //Creating Request Data
               var dictRequestData = [String: AnyObject]()
               
               let login: String? = UserDefaults.standard.string(forKey: "userJID")
               let arrReadUserJid = login?.components(separatedBy: "@")
               let myMobile: String? = arrReadUserJid?[0]
              // let arrReadChatJid = toUserJID.components(separatedBy: "@")
               //let to: String? = arrReadChatJid[0]
               //appDelegate().mySupportedTeam = joinTeamId
              dictRequestData["roomid"] = roomid as AnyObject
               dictRequestData["username"] = myMobile as AnyObject
               
               dictRequest["requestData"] = dictRequestData as AnyObject
               //dictRequest.setValue(dictMobiles, forKey: "requestData")
               //print(dictRequest)
               
              // let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
              // let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
               //print(strSaveBanter)
               //sendRequestToAPI(strRequestDict: strSaveBanter)
          
        /*   let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                         let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                         //print(strByPlace)
                                                                         let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                         
                                                                         let url = MediaAPIjava + "request=" + escapedString!*/
                                                                        AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                        headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                          // 2
                                                                                                          .responseJSON { response in

                                                                                                              switch response.result {
                                                                                                                                                       case .success(let value):
                                                                                                                                                           if let json = value as? [String: Any] {
                                                                                                                                                               // print(" JSON:", json)
                                                                                                                                                               let status1: Bool = json["success"] as! Bool
                                                                                                                                                             if(status1){
                                                                                                                                                                 if(self.allContacts.count == 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    let strAllContacts: String? = UserDefaults.standard.string(forKey: "allContacts")
                                                                                                                                                                                                                    if strAllContacts != nil
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        //Code to parse json data
                                                                                                                                                                                                                        if let data = strAllContacts?.data(using: String.Encoding(rawValue: String.Encoding.utf8.rawValue)) {
                                                                                                                                                                                                                            do {
                                                                                                                                                                                                                                let tmpAllContacts = try JSONSerialization.jsonObject(with:data , options: []) as! NSArray
                                                                                                                                                                                                                                
                                                                                                                                                                                                                                self.allContacts = NSMutableArray()
                                                                                                                                                                                                                                for record in tmpAllContacts {
                                                                                                                                                                                                                                    self.allContacts[self.allContacts.count] = record
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                
                                                                                                                                                                                                                                let tmpAllAppContacts = self.allContacts[0] as! NSArray
                                                                                                                                                                                                                                
                                                                                                                                                                                                                                self.allAppContacts = NSMutableArray()
                                                                                                                                                                                                                                for record in tmpAllAppContacts {
                                                                                                                                                                                                                                    self.allAppContacts[self.allAppContacts.count] = record
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            catch {
                                                                                                                                                                                                                                print(error.localizedDescription)
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                         
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                        
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                
                                                                                                                                                                 self.arrBanterUsers = NSMutableArray()
                                                                                                                                                                                                               let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                                                               // print(response)
                                                                                                                                                                                                               let dict: NSDictionary = response[0] as! NSDictionary
                                                                                                                                                                                                               let roomid: String = (dict.value(forKey: "roomid") as? String)!
                                                                                                                                                                                                               // fancount update
                                                                                                                                                                                                               self.fancountupdate(roomid, fancount: Int64(response.count))
                                                                                                                                                                 if( roomid == self.toUserJID){
                                                                                                                                                                                                                   for res in response
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                     if(self.allAppContacts.count>0){
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           var strName1: String = ""
                                                                                                                                                                                                                         _ = self.allAppContacts.filter({ (text) -> Bool in
                                                                                                                                                                                                                               let tmp: NSDictionary = text as! NSDictionary
                                                                                                                                                                                                                               let val: String = tmp.value(forKey: "jid") as! String
                                                                                                                                                                                                                               let val2: String = (res as! NSDictionary).value(forKey: "username") as! String
                                                                                                                                                                                                                               
                                                                                                                                                                                                                               
                                                                                                                                                                                                                               if(val.contains(val2))
                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                   let ind = tmp.value(forKey: "name") as! String
                                                                                                                                                                                                                                   //print(ind)
                                                                                                                                                                                                                                   //tempPoneContacts.removeObject(at: Int(ind))
                                                                                                                                                                                                                                   if(ind == " " || ind == nil)
                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                       strName1 = (res as! NSDictionary).value(forKey: "username") as! String
                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                   else{
                                                                                                                                                                                                                                       strName1 = tmp.value(forKey: "name") as! String
                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                   //return true
                                                                                                                                                                                                                               }
                                                                                                                                                                                                                               
                                                                                                                                                                                                                               // }
                                                                                                                                                                                                                               
                                                                                                                                                                                                                               
                                                                                                                                                                                                                               return false
                                                                                                                                                                                                                           })
                                                                                                                                                                                                                           var tmpBUserDict: [String : AnyObject] = res as! [String : AnyObject]
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           tmpBUserDict["jid"] = tmpBUserDict["username"] as AnyObject
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           if(!strName1.isEmpty)
                                                                                                                                                                                                                           {
                                                                                                                                                                                                                               tmpBUserDict["username"] = strName1 as AnyObject
                                                                                                                                                                                                                           }
                                                                                                                                                                                                                           
                                                                                                                                                                                                                         self.arrBanterUsers.add(tmpBUserDict as NSDictionary)
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                       else{
                                                                                                                                                                                                                           var tmpBUserDict: [String : AnyObject] = res as! [String : AnyObject]
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           tmpBUserDict["jid"] = tmpBUserDict["username"] as AnyObject
                                                                                                                                                                                                                         self.arrBanterUsers.add(tmpBUserDict as NSDictionary)
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       //Here we will sort the array
                                                                                                                                                                                                                     let tmpArr = self.arrBanterUsers.sorted { (item1, item2) -> Bool in
                                                                                                                                                                                                                           let date1 =  item1 as! [String : AnyObject]
                                                                                                                                                                                                                           let date2 =  item2 as! [String : AnyObject]
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           var dt1: String = ""
                                                                                                                                                                                                                           var dt2: String = ""
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           if date1["username"] != nil
                                                                                                                                                                                                                           {
                                                                                                                                                                                                                               
                                                                                                                                                                                                                               dt1 = date1["username"] as! String
                                                                                                                                                                                                                               
                                                                                                                                                                                                                           }
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           if date2["username"] != nil
                                                                                                                                                                                                                           {
                                                                                                                                                                                                                               
                                                                                                                                                                                                                               dt2 = date2["username"] as! String
                                                                                                                                                                                                                               
                                                                                                                                                                                                                           }
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           return dt1.compare(dt2) == ComparisonResult.orderedAscending
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                       
                                                                                                                                                                                                                     self.arrBanterUsers = NSMutableArray()
                                                                                                                                                                                                                       for arr in tmpArr
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           let tmpDict = arr as! [String : AnyObject]
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           if((tmpDict["isAdmin"] as! Int) == 1)
                                                                                                                                                                                                                           {
                                                                                                                                                                                                                             self.arrBanterUsers.add(tmpDict)
                                                                                                                                                                                                                               break;
                                                                                                                                                                                                                           }
                                                                                                                                                                                                                           
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       for arr in tmpArr
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                           
                                                                                                                                                                                                                           let tmpDict = arr as! [String : AnyObject]
                                                                                                                                                                                                                           if((tmpDict["isAdmin"] as! Int) == 0)
                                                                                                                                                                                                                           {
                                                                                                                                                                                                                             self.arrBanterUsers.add(tmpDict)
                                                                                                                                                                                                                               
                                                                                                                                                                                                                           }
                                                                                                                                                                                                                           
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       let detailedDict: NSDictionary = res as! NSDictionary
                                                                                                                                                                                                                       //Save my teams in user defaults here
                                                                                                                                                                                                                       //Primary
                                                                                                                                                                                                                       let isAdminT: Bool = detailedDict.value(forKey: "isAdmin") as! Bool
                                                                                                                                                                                                                       let isJoinedS: String = detailedDict.value(forKey: "userstatus") as! String
                                                                                                                                                                                                                       var isAdminS: String = ""
                                                                                                                                                                                                                       if(isAdminT)
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                           isAdminS = "yes"
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                       else
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                           isAdminS = "no"
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       /* if(isJoinedS == "active")
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                        doubleCheckUserStatusInBanterRoom(isJoined: "yes", isAdmin: isAdminS)
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        else
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                        doubleCheckUserStatusInBanterRoom(isJoined: "no", isAdmin: isAdminS)
                                                                                                                                                                                                                        }*/
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       
                                                                                                                                                                                                                       
                                                                                                                                                                                                                   }
                                                                                                                                                                     if(self.isOnUserDetailView == true)
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                       let notificationName = Notification.Name("UserdetailRefresh")
                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   if(self.isOnBantersView == true)
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   else if (self.isOnChatsView == true)
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                   }
                                                                                                                                                                                                               }}
                                                                                                                                                             else{
                                                                                                                                                                 if(self.isOnUserDetailView == true)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                     self.arrBanterUsers = NSMutableArray()
                                                                                                                                                                                                                        //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                        let notificationName = Notification.Name("UserdetailRefresh")
                                                                                                                                                                                                                        NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                    }
                                                                                                                                                             }
                                                                                                                                                           }
                                                                                                                                                       case .failure(let error):
                                                                                                                                                        debugPrint(error as Any)
                                                                                                                break
                                                                                                                                                           // error handling
                                                                                                                                            
                                                                                                                                                       }
                                                                                              
                                                                                                      }
               } catch {
                          print(error.localizedDescription)
                      }
       }
    func callsynccontacts(arrMobiles : [[String: String]])  {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "synccontacts" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        do {
            // let time: Int64 = self.getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            
            dictRequestData["username"] = myMobile as AnyObject
            dictRequestData["Contact"] = arrMobiles as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
            
                                     
                                                                     // let url = MediaAPIjava //+ "request=" + escapedString!
            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                     headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                       // 2
                                                                                                       .responseJSON { response in
                                                                                                        switch response.result {
                                                                                                                                                 case .success(let value):
                                                                                                                                                     if let json = value as? [String: Any] {
                                                                                                                                                         // print(" JSON:", json)
                                                                                                                                                         let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                         // self.finishSyncContacts()
                                                                                                                                                         //print(" status:", status1)
                                                                                                                                                      if(status1){
                                                                                                                                                             DispatchQueue.background(background: {
                                                                                                                                                              self.getsyncedcontact(jsonData: json as NSDictionary)
                                                                                                                                                                                                           }, completion:{
                                                                                                                                                                                                               //self.refreshTable.endRefreshing()
                                                                                                                                                                                                               //self.storyTableView?.isScrollEnabled = true
                                                                                                                                                                                                           })
                                                                                                                                                         }
                                                                                                                                                         else{
                                                                                                                                                          self.isContactSync = false
                                                                                                                                                                                                           let notificationName = Notification.Name("FetchedContactsDetails")
                                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                             //Show Error
                                                                                                                                                         }
                                                                                                                                                     }
                                                                                                                                                 case .failure(let error):
                                                                                                                                                    let notificationName = Notification.Name("FetchedContactsDetails")
                                                                                                                                                                                                                            NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                    self.isContactSync = false
                                                                                                                                                       debugPrint(error as Any)
                                                                                                        break
                                                                                                                                                     // error handling
                                                                                                                                      
                                                                                                                                                 }
                                                                                                   
                                                                                                        
                                                                                                     
                                                                                                   }
            } catch {
                       print(error.localizedDescription)
                isContactSync = false
                   }
    }
    func getuserblock(blockuser:String)  {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "userblock" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        do {
             let time: Int64 = self.getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            
            dictRequestData["username"] = myMobile as AnyObject
           dictRequestData["blockedusername"] = blockuser as AnyObject
             dictRequestData["type"] = "chat" as AnyObject
            dictRequestData["blockedtime"] = time as AnyObject
            dictRequestData["unblockedtime"] = 0 as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
            
       
       /* let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                      let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                      //print(strByPlace)
                                                                      let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                      
                                                                      let url = MediaAPIjava + "request=" + escapedString!*/
                                                                     AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                     headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                       // 2
                                                                                                       .responseJSON { response in
                                                                                                        
                                                                                                        switch response.result {
                                                                                                                   case .success(let value):
                                                                                                                       if let json = value as? [String: Any] {
                                                                                                                           // print(" JSON:", json)
                                                                                                                           let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                           // self.finishSyncContacts()
                                                                                                                           //print(" status:", status1)
                                                                                                                        if(status1){
                                                                                                                            if(self.isOnFanContactlistView == true){
                                                                                                                                                                                 let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                                 for record in response {
                                                                                                                                                                                     let roomDetailsDict = record as! [String : AnyObject]
                                                                                                                                                                                     
                                                                                                                                                                                     let userJid = roomDetailsDict["blockedusername"] as! String
                                                                                                                                                                                     let pickedCaption:[String: Any] = ["userdetail": userJid]
                                                                                                                                                                                     let notificationName = Notification.Name("Blockuser")
                                                                                                                                                                                     NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                                                                                                                     
                                                                                                                                                                                 }
                                                                                                                                                                             }
                                                                                                                                                                             else{
                                                                                                                                                                                 let pickedCaption:[String: Any] = ["userdetail": "Blocked"]
                                                                                                                                                                                 let notificationName = Notification.Name("singlechat")
                                                                                                                                                                                 NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                                                                                                             }
                                                                                                                           }
                                                                                                                           else{
                                                                                                                                                                                                       //let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                                                                                                          let pickedCaption:[String: Any] = ["userdetail": "Blocked"]
                                                                                                                                                                                                                                                          let notificationName = Notification.Name("singlechatfail")
                                                                                                                                                                                                                                                          NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)//Show Error
                                                                                                                           }
                                                                                                                       }
                                                                                                                   case .failure(let error):
                                                                                                                    debugPrint(error as Any)
                                                                                                    break
                                                                                                                       // error handling
                                                                                                        
                                                                                                                   }
                                                                                                           //
                                                                                                   }
            } catch {
                       print(error.localizedDescription)
                   }
    }
    func calluserunblock(blockeduser:String) {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "userunblock" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        do {
             let time: Int64 = self.getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            let arrReadChatJid = blockeduser.components(separatedBy: "@")
            let to: String? = arrReadChatJid[0]
            //appDelegate().mySupportedTeam = joinTeamId
            
            dictRequestData["username"] = myMobile as AnyObject
            dictRequestData["type"] = "chat" as AnyObject
            dictRequestData["blockedusername"] = to as AnyObject
            let array = Blockeduser.rows(filter:"roomId = '\(blockeduser)'") as! [Blockeduser]
            if(array.count != 0){
                
                
               let disnarysound = array[0]
                                                     
                                                     let status = disnarysound.value(forKey: "blocked_time") as AnyObject
                                                     dictRequestData["blockedtime"] = status as AnyObject
                
            }
            else{
                dictRequestData["blockedtime"] = 0 as AnyObject
            }
            dictRequestData["unblockedtime"] = time as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
       
        /*let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                      let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                      //print(strByPlace)
                                                                      let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                      
                                                                      let url = MediaAPIjava + "request=" + escapedString!*/
                                                                     AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                     headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                       // 2
                                                                                                       .responseJSON { response in
                                                                                                        switch response.result {
                                                                                                                                                  case .success(let value):
                                                                                                                                                      if let json = value as? [String: Any] {
                                                                                                                                                          // print(" JSON:", json)
                                                                                                                                                          let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                          // self.finishSyncContacts()
                                                                                                                                                          //print(" status:", status1)
                                                                                                                                                       if(status1){
                                                                                                                                                              
                                                                                                                                                           if(self.isOnBlockeduserView == true){
                                                                                                                                                                  let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                  for record in response {
                                                                                                                                                                      let roomDetailsDict = record as! [String : AnyObject]
                                                                                                                                                                      
                                                                                                                                                                      let userJid = roomDetailsDict["blockedusername"] as! String
                                                                                                                                                                      let pickedCaption:[String: Any] = ["userdetail": userJid]
                                                                                                                                                                      let notificationName = Notification.Name("unblockFromBlocklist")
                                                                                                                                                                      NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                                                                                                      
                                                                                                                                                                  }
                                                                                                                                                              }
                                                                                                                                                              else{
                                                                                                                                                                  let pickedCaption:[String: Any] = ["userdetail": "unblocked"]
                                                                                                                                                                  let notificationName = Notification.Name("singlechat")
                                                                                                                                                                  NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                                                                                                  
                                                                                                                                                                  
                                                                                                                                                              }
                                                                                                                                                              
                                                                                                                                                          }
                                                                                                                                                          else{
                                                                                                                                                                                                            let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                                                            let pickedCaption:[String: Any] = ["userdetail": "unblocked"]
                                                                                                                                                                                                            let notificationName = Notification.Name("singlechatfail")
                                                                                                                                                                                                            NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                                                                                                                                            
                                                                                                                                                              //Show Error
                                                                                                                                                          }
                                                                                                                                                      }
                                                                                                                                                  case .failure(let error):
                                                                                         debugPrint(error as Any)
                                                                                                        break
                                                                                                                                                      // error handling
                                                                                                                                       
                                                                                                                                                  }
                                                                                                           
                                                                                                   }
            } catch {
                       print(error.localizedDescription)
                   }
    }
    func RoomuserBlock(roomid: String,roomtype:String,blockuser:String)  {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "blockuserinroom" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        
             let time: Int64 = self.getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            let arrReadChatJid = blockuser.components(separatedBy: "@")
            let buser: String? = arrReadChatJid[0]
            //appDelegate().mySupportedTeam = joinTeamId
            
            dictRequestData["username"] = myMobile as AnyObject
            dictRequestData["blockusername"] = buser as AnyObject
           dictRequestData["roomid"] = roomid as AnyObject
           dictRequestData["roomtype"] = roomtype as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
        AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                            headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                              // 2
                                                                                                              .responseJSON { response in
                                                                                                                switch response.result {
                                                                                                                                                        case .success(let value):
                                                                                                                                                            if let json = value as? [String: Any] {
                                                                                                                                                                // print(" JSON:", json)
                                                                                                                                                                let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                // self.finishSyncContacts()
                                                                                                                                                                //print(" status:", status1)
                                                                                                                                                              if(status1){
                                                                                                                                                                  let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                  
                                                                                                                                                                  for res in response
                                                                                                                                                                  {
                                                                                                                                                                      let roomId = (res as! NSDictionary).value(forKey: "roomid") as! String
                                                                                                                                                                      let blockedusername = (res as! NSDictionary).value(forKey: "blockusername") as! String
                                                                                                                                                                      let uuid = UUID().uuidString
                                                                                                                                                                      let roomType = (res as! NSDictionary).value(forKey: "roomtype") as! String
                                                                                                                                                                      let messageId = uuid
                                                                                                                                                                      let time: Int64 = self.getUTCFormateDate()
                                                                                                                                                                      
                                                                                                                                                                      let login: String = UserDefaults.standard.string(forKey: "registerusername")!
                                                                                                                                                                      let arrdUserJid = blockedusername.components(separatedBy: "@")
                                                                                                                                                                      //  let userUserJid =
                                                                                                                                                                      let username = arrdUserJid[0]
                                                                                                                                                                      if(roomType == "banter")
                                                                                                                                                                      {
                                                                                                                                                                          self.sendMessageToServer(roomId , messageContent: username + " is blocked by " + login + ".", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "roomuserblocked",BlockUnblockUserName: blockedusername)
                                                                                                                                                                          //+ JIDPostfix
                                                                                                                                                                          let array = self.db.query(sql: " select * from blockeduser WHERE roomId = '\(roomId)' and touser = '\(blockedusername)'")
                                                                                                                                                                          if(array.count == 0){
                                                                                                                                                                              let BlockeduserTable = Blockeduser()
                                                                                                                                                                              BlockeduserTable.chatType = "banter"
                                                                                                                                                                              BlockeduserTable.roomId = roomId
                                                                                                                                                                              BlockeduserTable.touser = blockedusername
                                                                                                                                                                              BlockeduserTable.unblocked_time = 0
                                                                                                                                                                              BlockeduserTable.status = "Blocked"
                                                                                                                                                                              BlockeduserTable.blocked_time = time
                                                                                                                                                                              if BlockeduserTable.save() != 0 {
                                                                                                                                                                                  
                                                                                                                                                                              }
                                                                                                                                                                          }
                                                                                                                                                                          else{
                                                                                                                                                                              let time: Int64 = self.getUTCFormateDate()
                                                                                                                                                                              
                                                                                                                                                                              let result = self.db.query(sql: " UPDATE blockeduser SET status = 'Blocked', unblocked_time = 0,blocked_time = \(time) WHERE roomId = '\(roomId)'")
                                                                                                                                                                              // print(result)
                                                                                                                                                                          }
                                                                                                                                                                      }
                                                                                                                                                                      else if(roomType == "group")
                                                                                                                                                                      {
                                                                                                                                                                          self.sendMessageToServer(roomId , messageContent: username + " is blocked by " + login + ".", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "roomuserblocked",BlockUnblockUserName: blockedusername)
                                                                                                                                                                          // let blockedusername = username //+ JIDPostfix
                                                                                                                                                                          let array = self.db.query(sql: " select * from blockeduser WHERE roomId = '\(roomId)' and touser = '\(blockedusername)'")
                                                                                                                                                                          if(array.count == 0){
                                                                                                                                                                              let BlockeduserTable = Blockeduser()
                                                                                                                                                                              BlockeduserTable.chatType = "group"
                                                                                                                                                                              BlockeduserTable.roomId = roomId
                                                                                                                                                                              BlockeduserTable.touser = blockedusername
                                                                                                                                                                              BlockeduserTable.unblocked_time = 0
                                                                                                                                                                              BlockeduserTable.status = "Blocked"
                                                                                                                                                                              BlockeduserTable.blocked_time = time
                                                                                                                                                                              if BlockeduserTable.save() != 0 {
                                                                                                                                                                                  
                                                                                                                                                                              }
                                                                                                                                                                          }
                                                                                                                                                                          else{
                                                                                                                                                                              let time: Int64 = self.getUTCFormateDate()
                                                                                                                                                                              
                                                                                                                                                                              _ = self.db.query(sql: " UPDATE blockeduser SET status = 'Blocked', unblocked_time = 0,blocked_time = \(time) WHERE roomId = '\(roomId)'")
                                                                                                                                                                              // print(result)
                                                                                                                                                                          }
                                                                                                                                                                      }
                                                                                                                                                                  }
                                                                                                                                                                  
                                                                                                                                                                  
                                                                                                                                                                  
                                                                                                                                                              }
                                                                                                                                                              else{
                                                                                                                                                                  
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                        case .failure(let error):
                                                                            debugPrint(error as Any)
                                                                                                                    break
                                                                                                                                                            // error handling
                                                                                                                                             
                                                                                                                                                        }
                                                                                                                  
                                                                                                          }
        
    }
    func RoomuserUnBlock(roomid: String,roomtype:String,blockuser:String)  {
          var dictRequest = [String: AnyObject]()
          dictRequest["cmd"] = "unblockuserinroom" as AnyObject
          dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
          dictRequest["device"] = "ios" as AnyObject
          
               let time: Int64 = self.getUTCFormateDate()
              //Creating Request Data
              var dictRequestData = [String: AnyObject]()
              
              let login: String? = UserDefaults.standard.string(forKey: "userJID")
              let arrReadUserJid = login?.components(separatedBy: "@")
              let myMobile: String? = arrReadUserJid?[0]
              let arrReadChatJid = blockuser.components(separatedBy: "@")
              let buser: String? = arrReadChatJid[0]
              //appDelegate().mySupportedTeam = joinTeamId
              
              dictRequestData["username"] = myMobile as AnyObject
              dictRequestData["blockusername"] = buser as AnyObject
             dictRequestData["roomid"] = roomid as AnyObject
             dictRequestData["roomtype"] = roomtype as AnyObject
              dictRequest["requestData"] = dictRequestData as AnyObject
          AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                                // 2
                                                                                                                .responseJSON { response in
                                                                                                                    switch response.result {
                                                                                                                                                            case .success(let value):
                                                                                                                                                                if let json = value as? [String: Any] {
                                                                                                                                                                    // print(" JSON:", json)
                                                                                                                                                                    let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                    // self.finishSyncContacts()
                                                                                                                                                                    //print(" status:", status1)
                                                                                                                                                                  if(status1){
                                                                                                                                                                      let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                      
                                                                                                                                                                      for res in response
                                                                                                                                                                      {
                                                                                                                                                                          let roomId = (res as! NSDictionary).value(forKey: "roomid") as! String
                                                                                                                                                                          let username = (res as! NSDictionary).value(forKey: "blockusername") as! String
                                                                                                                                                                          let uuid = UUID().uuidString
                                                                                                                                                                          let messageId = uuid
                                                                                                                                                                          let time: Int64 = self.getUTCFormateDate()
                                                                                                                                                                          
                                                                                                                                                                          let login: String = UserDefaults.standard.string(forKey: "registerusername")!
                                                                                                                                                                          let roomType = (res as! NSDictionary).value(forKey: "roomtype") as! String
                                                                                                                                                                          let arrdUserJid = username.components(separatedBy: "@")
                                                                                                                                                                          //  let userUserJid =
                                                                                                                                                                          let unblockedusername = arrdUserJid[0] //+ JIDPostfix
                                                                                                                                                                          if(roomType == "banter")
                                                                                                                                                                          {
                                                                                                                                                                              
                                                                                                                                                                            self.sendMessageToServer(roomId , messageContent: unblockedusername + " is unblocked by "+login + ".", messageType: "header", messageTime: time, messageId: messageId, roomType: "banter", messageSubType: "roomuserunblocked",BlockUnblockUserName: username)
                                                                                                                                                                            _ = self.db.query(sql: " Delete from blockeduser  WHERE roomId = '\(roomId)'  and touser = '\(username)'")
                                                                                                                                                                          }
                                                                                                                                                                          else if(roomType == "group")
                                                                                                                                                                          {
                                                                                                                                                                            self.sendMessageToServer(roomId , messageContent: unblockedusername + " is unblocked by "+login + ".", messageType: "header", messageTime: time, messageId: messageId, roomType: "group", messageSubType: "roomuserunblocked",BlockUnblockUserName: username)
                                                                                                                                                                            _ = self.db.query(sql: " Delete from blockeduser  WHERE roomId = '\(roomId)'  and touser = '\(username)'")
                                                                                                                                                                              //print(result)
                                                                                                                                                                          }
                                                                                                                                                                        if(self.isOnBlockeduserView == true){
                                                                                                                                                                              if(roomType == "banter")
                                                                                                                                                                              {
                                                                                                                                                                              }
                                                                                                                                                                              else if(roomType == "group")
                                                                                                                                                                              {
                                                                                                                                                                              }
                                                                                                                                                                              let pickedCaption:[String: Any] = ["userdetail": "banter"]
                                                                                                                                                                              let notificationName = Notification.Name("unblockFromBlocklist")
                                                                                                                                                                              NotificationCenter.default.post(name: notificationName, object: nil, userInfo: pickedCaption)
                                                                                                                                                                              
                                                                                                                                                                              
                                                                                                                                                                          }
                                                                                                                                                                      }
                                                                                                                                                                      
                                                                                                                                                                      
                                                                                                                                                                      
                                                                                                                                                                  }
                                                                                                                                                                  else{
                                                                                                                                                                      
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                            case .failure(let error):
                                                                                                                                                                debugPrint(error as Any)
                                                                                                                        break
                                                                                                                                                                // error handling
                                                                                                                                                 
                                                                                                                                                            }
                                                                                                            }
          
      }
    func updateavatar(avatar: String)  {
            var dictRequest = [String: AnyObject]()
            dictRequest["cmd"] = "updateavatar" as AnyObject
            dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
            dictRequest["device"] = "ios" as AnyObject
            
                 let time: Int64 = self.getUTCFormateDate()
                //Creating Request Data
                var dictRequestData = [String: AnyObject]()
                
                let login: String? = UserDefaults.standard.string(forKey: "userJID")
                let arrReadUserJid = login?.components(separatedBy: "@")
                let myMobile: String? = arrReadUserJid?[0]
                
                dictRequestData["username"] = myMobile as AnyObject
                dictRequestData["avatar"] = avatar as AnyObject
               
                dictRequest["requestData"] = dictRequestData as AnyObject
            AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                                headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                                  // 2
                                                                                                                  .responseJSON { response in
                                                                                                                      //print(response.result.value)
                                                                                                                      switch response.result {
                                                                                                                                                               case .success(let value):
                                                                                                                                                                   if let json = value as? [String: Any] {
                                                                                                                                                                       // print(" JSON:", json)
                                                                                                                                                                       let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                       // self.finishSyncContacts()
                                                                                                                                                                       //print(" status:", status1)
                                                                                                                                                                     if(status1){
                                                                                                                                                                         
                                                                                                                                                                     }
                                                                                                                                                                     else{
                                                                                                                                                                         
                                                                                                                                                                     }
                                                                                                                                                                   }
                                                                                                                                                               case .failure(let error):
                                                                                                                                                                debugPrint(error as Any)
                                                                                                                        break
                                                                                                                                                                   // error handling
                                                                                                                                                    
                                                                                                                                                               }
                                                                                                                    
                                                                                                              }
            
        }
    func callupdatecoins(coins: AnyObject,level: AnyObject,activity: AnyObject)  {
               var dictRequest = [String: AnyObject]()
               dictRequest["cmd"] = "updatecoins" as AnyObject
               dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
               dictRequest["device"] = "ios" as AnyObject
               
                    let time: Int64 = self.getUTCFormateDate()
                   //Creating Request Data
                   var dictRequestData = [String: AnyObject]()
                   
                   let login: String? = UserDefaults.standard.string(forKey: "userJID")
                   let arrReadUserJid = login?.components(separatedBy: "@")
                   let myMobile: String? = arrReadUserJid?[0]
                   
                   dictRequestData["username"] = myMobile as AnyObject
                   dictRequestData["coins"] = coins
                   dictRequestData["level"] = level as AnyObject
                    dictRequestData["activity"] = activity as AnyObject
                  
                   dictRequest["requestData"] = dictRequestData as AnyObject
               AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                                   headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                                     // 2
                                                                                                                     .responseJSON { response in
                                                                                                                         switch response.result {
                                                                                                                                                                   case .success(let value):
                                                                                                                                                                       if let json = value as? [String: Any] {
                                                                                                                                                                           // print(" JSON:", json)
                                                                                                                                                                           let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                           // self.finishSyncContacts()
                                                                                                                                                                           //print(" status:", status1)
                                                                                                                                                                         if(status1){
                                                                                                                                                                             let response: NSArray = json[ "responseData"] as! NSArray
                                                                                                                                                                             let dict = response[0] as! NSDictionary
                                                                                                                                                                             // print("updatecoins responce \(dict)")
                                                                                                                                                                             let totalcoins = dict.value(forKey: "totalcoins") as! Int
                                                                                                                                                                             let availablecoins = dict.value(forKey: "availablecoins") as! Int
                                                                                                                                                                             let activity = dict.value(forKey: "activity") as! String
                                                                                                                                                                             if(activity == "activities"){
                                                                                                                                                                              let activitycount = self.GetvalueFromInsentiveConfigTable(Key: fcactivitycount) as! Int
                                                                                                                                                                              let activityth = self.GetvalueFromInsentiveConfigTable(Key: fcactivityth) as! Int
                                                                                                                                                                              let activitycoin = self.GetvalueFromInsentiveConfigTable(Key: fcactivity) as! Int
                                                                                                                                                                                 let r = activitycount % activityth
                                                                                                                                                                              _ = self.db.execute(sql:"UPDATE insentiveconfig SET fcactivitycount = \(r) WHERE ID = 0")
                                                                                                                                                                                 let Q = (activitycount - r) / activityth
                                                                                                                                                                                 print(Q)
                                                                                                                                                                                 let totelactivitycoin = activitycoin * Q
                                                                                                                                                                                 print("activitycoin\(totelactivitycoin)")
                                                                                                                                                                              self.AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
                                                                                                                                                                                 DispatchQueue.main.async {
                                                                                                                                                                                     AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText:"You won \(String(totelactivitycoin)) FanCoins rewards for completing \(activityth) app contributions. \(self.GetvalueRedeemMesg(avilablecoin: availablecoins))", fancoins: String(totelactivitycoin))
                                                                                                                                                                                     self.canICallUpdatecoin = false
                                                                                                                                                                                 }
                                                                                                                                                                                 
                                                                                                                                                                             }
                                                                                                                                                                             else if(activity == "bonus"){
                                                                                                                                                                                 let level = dict.value(forKey: "level") as! String
                                                                                                                                                                              _ = self.db.execute(sql:" UPDATE insentiveconfig SET fccurrentlevel = '\(level)' WHERE ID = 0")
                                                                                                                                                                                 let notificationName = Notification.Name("newlavel")
                                                                                                                                                                                 NotificationCenter.default.post(name: notificationName, object: nil)

                                                                                                                                                                                 var bonuscoin: Int = 0
                                                                                                                                                                                 if(level.isEqual("Bronze")){
                                                                                                                                                                                  bonuscoin = self.GetvalueFromInsentiveConfigTable(Key: fcbonusthb) as! Int
                                                                                                                                                                                 }
                                                                                                                                                                                 else if(level.isEqual("Silver")){
                                                                                                                                                                                  bonuscoin = self.GetvalueFromInsentiveConfigTable(Key: fcbonusths) as! Int
                                                                                                                                                                                     
                                                                                                                                                                                 }
                                                                                                                                                                                 else if(level.isEqual("Gold")){
                                                                                                                                                                                  bonuscoin = self.GetvalueFromInsentiveConfigTable(Key: fcbonusthg) as! Int
                                                                                                                                                                                 }
                                                                                                                                                                                 else if(level.isEqual("Platinum")){
                                                                                                                                                                                  bonuscoin = self.GetvalueFromInsentiveConfigTable(Key: fcbonusthp) as! Int
                                                                                                                                                                                 }
                                                                                                                                                                                 else if(level.isEqual("Diamond")){
                                                                                                                                                                                  bonuscoin = self.GetvalueFromInsentiveConfigTable(Key: fcbonusthd) as! Int
                                                                                                                                                                                 }
                                                                                                                                                                              self.AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
                                                                                                                                                                                 
                                                                                                                                                                                 DispatchQueue.main.asyncAfter(deadline: .now() +  7.0) {
                                                                                                                                                                                     // hide()
                                                                                                                                                                                     let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                     //if(myjid != nil){
                                                                                                                                                                                     let arrdUserJid = myjid?.components(separatedBy: "@")
                                                                                                                                                                                     let userUserJid = arrdUserJid?[0]
                                                                                                                                                                                     AnimationIndicatorView.show((self.window?.rootViewController?.view)!, loadingText: "You won \(String(bonuscoin)) FanCoins rewards and you are now a \(level) level Fan.\(self.GetvalueRedeemMesg(avilablecoin: availablecoins))",fancoins: String(bonuscoin))
                                                                                                                                                                                 }
                                                                                                                                                                             }
                                                                                                                                                                             
                                                                                                                                                                         }
                                                                                                                                                                         else{
                                                                                                                                                                          self.canICallUpdatecoin = false
                                                                                                                                                                         }
                                                                                                                                                                       }
                                                                                                                                                                   case .failure(let error):
                                                                            debugPrint(error)
                                                                                                                            break
                                                                                                                                                                       // error handling
                                                                                                                                                        
                                                                                                                                                                   }//print(response.result.value)
                                                                   
                                                                                                                 }
               
           }
    func Saveroom(avatar: String,invited:[AnyObject],opponentteam:Int64,supportteam:Int64,roomtype:String,roomid:String)  {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "saveroom" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        
            // let time: Int64 = self.getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            dictRequestData["roomid"] = roomid as AnyObject
            dictRequestData["roomtype"] = roomtype as AnyObject
            dictRequestData["supportteam"] = supportteam as AnyObject
            dictRequestData["opponentteam"] = opponentteam as AnyObject
            dictRequestData["invited"] = invited as AnyObject
            dictRequestData["username"] = myMobile as AnyObject
            dictRequestData["avatar"] = avatar as AnyObject
           let myNSData = self.banterRoomName.data(using: String.Encoding.utf8)! as NSData
           // print("saveroom\(self.banterRoomName)")
           //Encode to base64
           let myBase64Data = myNSData.base64EncodedData(options: NSData.Base64EncodingOptions.endLineWithLineFeed)
           
           let resultNSString = NSString(data: myBase64Data as Data, encoding: String.Encoding.utf8.rawValue)!
           
           dictRequestData["roomname"] = resultNSString as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
        AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                            headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                              // 2
                                                                                                              .responseJSON { response in
                                                                                                                  switch response.result {
                                                                                                                                                           case .success(let value):
                                                                                                                                                               if let json = value as? [String: Any] {
                                                                                                                                                                                                            // print(" JSON:", json)
                                                                                                                                                                                                            let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                                                            // self.finishSyncContacts()
                                                                                                                                                                                                            //print(" status:", status1)
                                                                                                                                                                                                          if(status1){
                                                                                                                                                                                                              //let _: NSArray = json["responseData"] as! NSArray
                                                                                                                                                                                                                        if(self.curRoomType == "banter")
                                                                                                                                                                                                              {
                                                                                                                                                                                                                  //self.isBanterOwner = true
                                                                                                                                                                                                                 //let _: NSArray = json["responseData"] as! NSArray
                                                                                                                                                                                                                 let recMessageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                                                                                                                                                                                                                             let uuid = UUID().uuidString
                                                                                                                                                                                                                  let time: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                  self.sendMessageToServer(roomid as AnyObject as! String, messageContent: "Invitation to join Banter Room: " + self.banterRoomName , messageType: "header", messageTime: time, messageId: uuid, roomType: "banter", messageSubType: "banterinvite", roomid: roomid , roomName: self.banterRoomName,SupportTeam: supportteam,OpponentTeam:opponentteam)
                                                                                                                                                               let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                                  self.prepareMessageForServerIn(roomid, messageContent: recMessageContent, messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: roomtype, recBanterNickName: self.banterRoomName, banterRoomName: self.banterRoomName, isJoined: "yes", isAdmin: "yes", supportedTeam: supportteam, opponentTeam: opponentteam, mySupportTeam : supportteam,fansCount:1)
                                                                                                                                                                                                                  let notificationName = Notification.Name("MessageReceivedFromServer")
                                                                                                                                                                                                                                                                                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                  if(self.isOnBantersView == true)
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                    //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                    let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                  self.objXmppRoom = nil
                                                                                                                                                                                                                  let notificationName1 = Notification.Name("_BanterRoomCreated")
                                                                                                                                                                                                                                                                         NotificationCenter.default.post(name: notificationName1, object: nil)
                                                                                                                                                                                                                  //Code to savebanterroom.
                                                                                                                                                                                                                  /*var dictRequest = [String: AnyObject]()
                                                                                                                                                                                                                  dictRequest["cmd"] = "savebanterroom" as AnyObject
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  do {
                                                                                                                                                                                                                      //Creating Request Data
                                                                                                                                                                                                                      var dictRequestData = [String: AnyObject]()
                                                                                                                                                                                                                      
                                                                                                                                                                                                                      let myMobile: String? = UserDefaults.standard.string(forKey: "myMobileNo")
                                                                                                                                                                                                                      if(self.curRoomType == "banter")
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                          dictRequestData["roomid"] = self.banterRoomId as AnyObject
                                                                                                                                                                                                                          dictRequestData["supportteam"] = self.myTeamId as AnyObject
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      else if(self.curRoomType == "group")
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                          dictRequestData["roomid"] = self.groupId as AnyObject
                                                                                                                                                                                                                          dictRequestData["supportteam"] = 0 as AnyObject
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      
                                                                                                                                                                                                                      
                                                                                                                                                                                                                      
                                                                                                                                                                                                                      dictRequestData["username"] = myMobile as AnyObject
                                                                                                                                                                                                                      dictRequestData["status"] = "active" as AnyObject
                                                                                                                                                                                                                      
                                                                                                                                                                                                                      dictRequest["requestData"] = dictRequestData as AnyObject
                                                                                                                                                                                                                      //dictRequest.setValue(dictMobiles, forKey: "requestData")
                                                                                                                                                                                                                      //print(dictRequest)
                                                                                                                                                                                                                      
                                                                                                                                                                                                                      let dataSaveBanter = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                                                                                                                                                                      let strSaveBanter = NSString(data: dataSaveBanter, encoding: String.Encoding.utf8.rawValue)! as String
                                                                                                                                                                                                                      //print(strSaveBanter)
                                                                                                                                                                                                                      self.sendRequestToAPI(strRequestDict: strSaveBanter)
                                                                                                                                                                                                                  } catch {
                                                                                                                                                                                                                      //print(error.localizedDescription)
                                                                                                                                                                                                                  }*/
                                                                                                                                                                                                                  //End Code to savebanterroom.
                                                                                                                                                                                                              }
                                                                                                                                                                                                              else if(self.curRoomType == "group"){
                                                                                                                                                                                                                  let response: NSArray = json["responseData"] as! NSArray
                                                                                                                                                                                                                  // print(response)
                                                                                                                                                                                                                  let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                                                                                                                                             let time: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                  let uuid = UUID().uuidString
                                                                                                                                                                                                                  let banterId = roomDetailsDict.value(forKey: "roomid") as! String
                                                                                                                                                                                                                  self.prepareMessageForServerIn(banterId, messageContent: "You are now ready to post messages, pictures, videos in this group.", messageType: "header", messageTime: time, messageId: uuid, filePath: "", fileLocalId: "", caption: "", thumbLink: "", isIncoming: "YES", chatType: "group", recBanterNickName: self.banterRoomName as String, banterRoomName: self.banterRoomName as String, isJoined: "yes", isAdmin: "yes", supportedTeam: 0, opponentTeam: 0, mySupportTeam : 0,fansCount:1,roomavatar:self.Groupimagelink)
                                                                                                                                                                                                                  let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                                  for invite in self.groupJIDs
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                      let inviteArrUser = invite.components(separatedBy: "/")
                                                                                                                                                                                                                      let inviteUser = inviteArrUser[0]
                                                                                                                                                                                                                      //let userJid = XMPPJID(string: inviteUser)
                                                                                                                                                                                                                      let uuid = UUID().uuidString
                                                                                                                                                                                                                      let messageId = uuid
                                                                                                                                                                                                                      let time2: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                      if(myJID != inviteUser)
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                          let arrdUserJid = inviteUser.components(separatedBy: "@")
                                                                                                                                                                                                                          let username = arrdUserJid[0]
                                                                                                                                                                                                                          self.sendMessageToServer(banterId as AnyObject as! String, messageContent: username + " has joined.", messageType: "header", messageTime: time2, messageId: messageId, roomType: "group", messageSubType: "roomuseradd", mySupportTeam: 0, JoindUserName: inviteUser)
                                                                                                                                                                                                                          
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  let notificationName = Notification.Name("_GroupChatCreated")
                                                                                                                                                                                                                  NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  
                                                                                                                                                                                                              }
                                                                                                                                                                                                }
                                                                                                                                                                                                          else{
                                                                                                                                                                                                              
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                           case .failure(let error):
                                                                                                                                                            debugPrint(error as Any)
                                                                                                                                                            
                                                                                                                    break
                                                                                                                                                               // error handling
                                                                                                                                                
                                                                                                                                                           }
                                                                                                          }
        
    }
    func savebanterroom(supportteam:Int64,roomtype:String,roomid:String,username:String = "")  {
          var dictRequest = [String: AnyObject]()
          dictRequest["cmd"] = "savebanterroom" as AnyObject
          dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
          dictRequest["device"] = "ios" as AnyObject
          
               let time: Int64 = self.getUTCFormateDate()
              //Creating Request Data
              var dictRequestData = [String: AnyObject]()
        if(username != ""){
            dictRequestData["username"] = username as AnyObject
        }
        else{
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            dictRequestData["username"] = myMobile as AnyObject
        }
              
              dictRequestData["roomid"] = roomid as AnyObject
              dictRequestData["roomtype"] = roomtype as AnyObject
              dictRequestData["supportteam"] = supportteam as AnyObject
              
              dictRequestData["status"] = "active" as AnyObject
        if(roomtype == "banter"){
            dictRequestData["isfcjoinbanter"] = GetvalueFromInsentiveConfigTable(Key: isfcjoinbanter)
                       dictRequestData["fcjoinbanter"] = GetvalueFromInsentiveConfigTable(Key: fcjoinbanter)
                       dictRequestData["fcbanterth"] = GetvalueFromInsentiveConfigTable(Key: fcbanterth)
        }
             
              dictRequest["requestData"] = dictRequestData as AnyObject
          AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                              headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                                // 2
                                                                                                                .responseJSON { response in
                                                                                                                    switch response.result {
                                                                                                                                                             case .success(let value):
                                                                                                                                                                 if let json = value as? [String: Any] {
                                                                                                                                                                                                                                                                                             // print(" JSON:", json)
                                                                                                                                                                                                                                                                                             let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                                                                                                                                             // self.finishSyncContacts()
                                                                                                                                                                                                                                                                                             //print(" status:", status1)
                                                                                                                                                                                                                                                                                             if(status1){
                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                 let response: NSArray = json["responseData"] as! NSArray
                                                                                                                                                                                                                                                                                                 // print(response)
                                                                                                                                                                                                                                                                                                 let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                                                                                                                                                                                                                                                                 //Save my teams in user defaults here
                                                                                                                                                                                                                                                                                                 //Primary

                                                                                                                                                                                                                                                                                                 //These line will be shift in IQ
                                                                                                                                                                                                                                                                                                 let chatType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                 let supportTeam = roomDetailsDict.value(forKey: "supportteam") as! Int64
                                                                                                                                                                                                                                                                                                 let opponentTeam = roomDetailsDict.value(forKey: "opponentteam") as! Int64
                                                                                                                                                                                                                                                                                                 let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                                                                                                                                                                                                                                                                 let banterId = roomDetailsDict.value(forKey: "roomid") as! String
                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                 //let banterUsers: NSArray = roomDetailsDict.value(forKey: "banterUser") as! NSArray
                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                 if(chatType == "banter")
                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     var recMessageContent: String = ""
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                      if (self.isJoiningBanterRoom == true)
                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                         if(chatType == "banter")
                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                             recMessageContent = ""//"You have joined this banter room."
                                                                                                                                                                                                                                                                                                             //isBanterOwner = true
                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                         else if(chatType == "group")
                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                             recMessageContent = "You have joined this group."
                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                             else if(chatType == "teambr")
                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                   recMessageContent = ""
                                                                                                                                                                                                                                              }else
                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                             recMessageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     else
                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                         if(chatType == "group")
                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                             recMessageContent = "You have joined this group."
                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                             recMessageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     //let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     //let messageId = message?.attributeStringValue(forName: "id")
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                                                                                                                     let messageFrom = roomDetailsDict.value(forKey: "roomid") as! String
                                                                                                                                                                                                                                                                                                     let arrMessageFrom = messageFrom.components(separatedBy: "/")
                                                                                                                                                                                                                                                                                                     let messageFromTrim = arrMessageFrom[0]
                                                                                                                                                                                                                                                                                                     let recBanterNickName = ""//arrMessageFrom[1]
                                                                                                                                                                                                                                                                                                     let time: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     var isJoined: String = "no"
                                                                                                                                                                                                                                                                                                     var isAdmin: String = "no"
                                                                                                                                                                                                                                                                                                     if(self.isBanterOwner || self.isJoiningBanterRoom)
                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                         isJoined = "yes"
                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     if(self.isBanterOwner)
                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                         isAdmin = "yes"
                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     //self.isJoiningBanterRoom = false
                                                                                                                                                                                                                                                                                                     if(!recMessageContent.isEmpty)
                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                         self.prepareMessageForServerIn(messageFromTrim, messageContent: recMessageContent, messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: recBanterNickName, banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdmin, supportedTeam: supportTeam, opponentTeam: opponentTeam, mySupportTeam : supportTeam,fansCount:1)
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     if(self.isJoiningBanterRoom)
                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                         //DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                                                                                                                                                                                                                                                                         let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                         let messageId = uuid
                                                                                                                                                                                                                                                                                                         let time2: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                                                                                                         let username: String = UserDefaults.standard.string(forKey: "userJID")!
                                                                                                                                                                                                                                                                                                         let arrUserName = username.components(separatedBy: "@")
                                                                                                                                                                                                                                                                                                         let objUserNameTrim = arrUserName[0]
                                                                                                                                                                                                                                                                                                         let buser = objUserNameTrim
                                                                                                                                                                                                                                                                                                         self.sendMessageToServer(messageFromTrim as AnyObject as! String, messageContent: buser + " joined.", messageType: "header", messageTime: time2, messageId: messageId, roomType: chatType, messageSubType: "roomuseradd", mySupportTeam: self.mySupportedTeam,JoindUserName: username)
                                                                                                                                                                                                                                                                                                         //}
                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     //, banterRoomLogo: String = ""
                                                                                                                                                                                                                                                                                                     let notificationName = Notification.Name("MessageReceivedFromServer")
                                                                                                                                                                                                                                                                                                     NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     if(self.isOnBantersView == true)
                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                         //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                         let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                         NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     else if(self.isOnChatsView == true)
                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                         //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                         let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                         NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     self.isBanterOwner = false
                                                                                                                                                                                                                                                                                                     self.isJoiningBanterRoom = false
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     /*if(arrDataTeams.count > 0)
                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                      for record in arrDataTeams
                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                      }*/
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                     else if(chatType == "teambr")
                                                                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         var recMessageContent: String = ""
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                          if (self.isJoiningBanterRoom == true)
                                                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                                 recMessageContent = ""//"You have joined this banter room."
                                                                                                                                                                                                                                                                                                                                                                 //isBanterOwner = true
                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                                                             if(chatType == "group")
                                                                                                                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                                                                                                                 recMessageContent = "You have joined this group."
                                                                                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                                                                                             else
                                                                                                                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                                                                                                                 recMessageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                         //let recMessageTime = jsonDataMessage?.value(forKey: "time")
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         //let messageId = message?.attributeStringValue(forName: "id")
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                                                                                                                                                                         let messageFrom = roomDetailsDict.value(forKey: "roomid") as! String
                                                                                                                                                                                                                                                                                                                                                         let arrMessageFrom = messageFrom.components(separatedBy: "/")
                                                                                                                                                                                                                                                                                                                                                         let messageFromTrim = arrMessageFrom[0]
                                                                                                                                                                                                                                                                                                                                                         let recBanterNickName = ""//arrMessageFrom[1]
                                                                                                                                                                                                                                                                                                                                                         let time: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         var isJoined: String = "no"
                                                                                                                                                                                                                                                                                                                                                         var isAdmin: String = "no"
                                                                                                                                                                                                                                                                                                                                                         if(self.isBanterOwner || self.isJoiningBanterRoom)
                                                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                                                             isJoined = "yes"
                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                         if(self.isBanterOwner)
                                                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                                                             isAdmin = "yes"
                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                         //self.isJoiningBanterRoom = false
                                                                                                                                                                                                                                                                                                                                                         if(!recMessageContent.isEmpty)
                                                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                                                             self.prepareMessageForServerIn(messageFromTrim, messageContent: recMessageContent, messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: recBanterNickName, banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdmin, supportedTeam: supportTeam, opponentTeam: opponentTeam, mySupportTeam : supportTeam,fansCount:1)
                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         if(self.isJoiningBanterRoom)
                                                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                                                             //DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                                                                                                                                                                                                                                                                                                                                                             let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                                                                             let messageId = uuid
                                                                                                                                                                                                                                                                                                                                                             let time2: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                                                                                                                                                             let username: String = UserDefaults.standard.string(forKey: "userJID")!
                                                                                                                                                                                                                                                                                                                                                             let arrUserName = username.components(separatedBy: "@")
                                                                                                                                                                                                                                                                                                                                                             let objUserNameTrim = arrUserName[0]
                                                                                                                                                                                                                                                                                                                                                             let buser = objUserNameTrim
                                                                                                                                                                                                                                                                                                                                                             self.sendMessageToServer(messageFromTrim as AnyObject as! String, messageContent: buser + " joined.", messageType: "header", messageTime: time2, messageId: messageId, roomType: chatType, messageSubType: "roomuseradd", mySupportTeam: self.mySupportedTeam,JoindUserName: username)
                                                                                                                                                                                                                                                                                                                                                             //}
                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         //, banterRoomLogo: String = ""
                                                                                                                                                                                                                                                                                                                                                         let notificationName = Notification.Name("MessageReceivedFromServer")
                                                                                                                                                                                                                                                                                                                                                         NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         if(self.isOnBantersView == true)
                                                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                                                             //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                             let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                                                                             NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                         else if(self.isOnChatsView == true)
                                                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                                                             //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                                                                             let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                                                                                                                                                                                                                                             NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         self.isBanterOwner = false
                                                                                                                                                                                                                                                                                                                                                         self.isJoiningBanterRoom = false
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         /*if(arrDataTeams.count > 0)
                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                          for record in arrDataTeams
                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                          }*/
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                 else if(chatType == "group"){
                                                                                                                                                                                                                                                                                                     let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                     let messageId = uuid
                                                                                                                                                                                                                                                                                                     let time2: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                                                                                                     let inviteUser: String = roomDetailsDict.value(forKey: "username") as! String + JIDPostfix
                                                                                                                                                                                                                                                                                                     if(self.isFromBanterDeepLink){
                                                                                                                                                                                                                                                                                                         self.isFromBanterDeepLink = false
                                                                                                                                                                                                                                                                                                         self.sendMessageToServer(banterId as AnyObject as! String, messageContent: roomDetailsDict.value(forKey: "username") as! String  + " has joined via Invite Link", messageType: "header", messageTime: time2, messageId: messageId, roomType: "group", messageSubType: "roomuseradd", mySupportTeam: 0, JoindUserName: inviteUser)
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     else{
                                                                                                                                                                                                                                                                                                         self.sendMessageToServer(banterId as AnyObject as! String, messageContent: roomDetailsDict.value(forKey: "username") as! String  + " has joined.", messageType: "header", messageTime: time2, messageId: messageId, roomType: "group", messageSubType: "roomuseradd", mySupportTeam: 0, JoindUserName: inviteUser)
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                 //insentive for chatType == "banter"
                                                                                                                                                                                                                                                                                                 if(chatType == "banter")
                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                     let availablecoins = roomDetailsDict.value(forKey: "availablecoins") as! Int
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     let totalcoins = roomDetailsDict.value(forKey: "totalcoins") as! Int
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     let isjoinbantercoins = roomDetailsDict.value(forKey: "isjoinbantercoins") as! Bool
                                                                                                                                                                                                                                                                                                     self.AddCoin(fctotalcoin: totalcoins, fcavailablecoin: availablecoins)
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                     if(isjoinbantercoins){
                                                                                                                                                                                                                                                                                       let adminusername = roomDetailsDict.value(forKey: "adminusername") as! String + JIDPostfix
                                                                                                                                                                                                                                                                                                         let coinsreceived = self.GetvalueFromInsentiveConfigTable(Key: fcjoinbanter)
                                                                                                                                                                                                                                                                                                         let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                         let messageId = uuid
                                                                                                                                                                                                                                                                                                         let time2: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                                                                                                         let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                                                                                                                         let messageFrom = roomDetailsDict.value(forKey: "roomid") as! String
                                                                                                                                                                                                                                                                                                         let arrMessageFrom = messageFrom.components(separatedBy: "/")
                                                                                                                                                                                                                                                                                                         let messageFromTrim = arrMessageFrom[0]
                                                                                                                                                                                                                                                                                                         let admintotalcoin = roomDetailsDict.value(forKey: "admintotalcoins") as! Int
                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                         let adminAvailablecoin = roomDetailsDict.value(forKey: "adminavailablecoins") as! Int
                                                                                                                                                                                                                                                                                                         self.sendMessageToServer(messageFromTrim as AnyObject as! String, messageContent: "Hurray!! \nYour Banter Room manager won \(self.GetvalueFromInsentiveConfigTable(Key: fcjoinbanter)) FanCoins.\nTap to learn more.", messageType: "header", messageTime: time2, messageId: messageId, roomType: chatType, messageSubType: "coinsreceived", mySupportTeam: 0,roomid: messageFromTrim, JoindUserName: adminusername, admintotalcoin:Int64(admintotalcoin), adminAvailablecoin:Int64(adminAvailablecoin), coinsreceived:coinsreceived as! Int)
                                                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                 //Send notification of room created
                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                           else{
                                                                                                                                                                                                                                                                                                 let errorcode = json["errorcode"] as! Int64
                                                                                                                                                                                                                                                                                                 if(errorcode == 102){                                           self.isBanterOwner = false
                                                                                                                                                                                                                                                                                                 self.isJoiningBanterRoom = false
                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                 if(!self.toUserJID.isEmpty){
                                                                                                                                                                                                                                                                                                   let uuid = UUID().uuidString
                                                                                                                                                                                                                                                                                                   let messageId = uuid
                                                                                                                                                                                                                                                                                                   let time: Int64 = self.getUTCFormateDate()
                                                                                                                                                                                                                                                                                                   let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                                                                                                                   //Save banter status
                                                                                                                                                                                                                                                                                                   //print(self.toName)
                                                                                                                                                                                                                                                                                                     self.prepareMessageForServerIn(self.toUserJID , messageContent: "Manager closed this Banter Room.", messageType: "header", messageTime: time , messageId: messageId, filePath: "", fileLocalId: "", fromUser: messageTo!, isIncoming: "YES", chatType: "banter", recBanterNickName: "", banterRoomName: self.toName, banterStatus: "closed")
                                                                                                                                                                 //End
                                                                                                                                                                                                                                                                                                     let roomJID = XMPPJID(string: self.toUserJID)
                                                                                                                                                                                                                                                                                                                                                                  let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()

                                                                                                                                                                                                                                                                                                                                                                  let room = XMPPRoom(roomStorage: roomStorage!, jid: roomJID!, dispatchQueue: DispatchQueue.main)

                                                                                                                                                                                                                                                                                                     room.activate(self.xmppStream!)

                                                                                                                                                                                                                                                                                                                                                                  room.addDelegate(self, delegateQueue: DispatchQueue.main)
                                                                                                                                                                                                                                                                                                                                                                  //let myJID: String? = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                                                                                                                                                                                                                                                  if(room.isJoined){

                                                                                                                                                                                                                                                                                                                                                                      room.leave()
                                                                                                                                                                                                                                                                                                                                                                  }

                                                                                                                                                                                                                                                                                                     if(self.isOnBantersView == true && self.curRoomType == "banter")
                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                       //Post notification if user is on chats window and received any message
                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                   else if (self.isOnChatView == true)
                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                       let notificationName = Notification.Name("closeBanterFromServer")
                                                                                                                                                                                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                                                                                                                                   }

                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                         }
                                                                                                                                                             case .failure(let error):
                                                                    debugPrint(error as Any)
                                                                                                                        break
                                                                                                                                                                 // error handling
                                                                                                                                                  
                                                                                                                                                             }
                                                                                                            }
          
      }
    func getroomdetails(roomid: String)  {
              var dictRequest = [String: AnyObject]()
              dictRequest["cmd"] = "getroomdetails" as AnyObject
              dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
              dictRequest["device"] = "ios" as AnyObject
              
                   let time: Int64 = self.getUTCFormateDate()
                  //Creating Request Data
                  var dictRequestData = [String: AnyObject]()
                  
                  let login: String? = UserDefaults.standard.string(forKey: "userJID")
                  let arrReadUserJid = login?.components(separatedBy: "@")
                  let myMobile: String? = arrReadUserJid?[0]
                  
                  dictRequestData["username"] = myMobile as AnyObject
                  dictRequestData["roomid"] = roomid as AnyObject
                 
                  dictRequest["requestData"] = dictRequestData as AnyObject
              AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                                  headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                                    // 2
                                                                                                                    .responseJSON { response in
                                                                                   switch response.result {
                                                                                                                            case .success(let value):
                                                                                                                                if let json = value as? [String: Any] {
                                                                                                                                    // print(" JSON:", json)
                                                                                                                                    let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                    // self.finishSyncContacts()
                                                                                                                                    //print(" status:", status1)
                                                                                                                                  if(status1){

                                                                                                                                      let response: NSArray = json["responseData"] as! NSArray
                                                                                                                                      //print(response)
                                                                                                                                      let roomDetailsDict: NSDictionary = response[0] as! NSDictionary
                                                                                                                                      
                                                                                                                                      let roomId = roomDetailsDict.value(forKey: "roomid") as! String
                                                                                                                                      let chatType = roomDetailsDict.value(forKey: "roomtype") as! String
                                                                                                                                      let banterName = roomDetailsDict.value(forKey: "roomname") as! String
                                                                                                                                      let supportteam = roomDetailsDict.value(forKey: "supportteam") as! Int64

                                                                                                                                      let opponentteam = roomDetailsDict.value(forKey: "opponentteam") as! Int64

                                                                                                                                      if(chatType == "banter")
                                                                                                                                      {
                                                                                                                                          var recMessageContent: String = ""

                                                                                                                                        if(self.isBanterOwner)
                                                                                                                                          {

                                                                                                                                              recMessageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more.eedom of speech.\nTap to learn more."

                                                                                                                                          }
                                                                                                                                          else if (self.isJoiningBanterRoom == true)
                                                                                                                                          {
                                                                                                                                              //self.isJoiningBanterRoom = false
                                                                                                                                              recMessageContent = "Start collecting FanCoins rewards by contributing to Banter Room.\nSpeak out your mind with complete freedom of speech.\nTap to learn more."
                                                                                                                                              //isBanterOwner = true
                                                                                                                                          }
                                                                                                                                          else
                                                                                                                                          {
                                                                                                                                              if(chatType == "group")
                                                                                                                                              {
                                                                                                                                                  recMessageContent = "You have joined this group."
                                                                                                                                              }
                                                                                                                                              else
                                                                                                                                              {
                                                                                                                                                  recMessageContent = "You are invited to this Banter Room.\nYou can join this Banter Room by tapping on Join button."
                                                                                                                                              }

                                                                                                                                          }
                                                                                                                                          //let recMessageTime = jsonDataMessage?.value(forKey: "time")

                                                                                                                                          //let messageId = message?.attributeStringValue(forName: "id")

                                                                                                                                          let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                          let messageFrom = roomDetailsDict.value(forKey: "roomid") as! String
                                                                                                                                          let arrMessageFrom = messageFrom.components(separatedBy: "/")
                                                                                                                                          let messageFromTrim = arrMessageFrom[0]
                                                                                                                                          let recBanterNickName = ""//arrMessageFrom[1]
                                                                                                                                          let time: Int64 = self.getUTCFormateDate()

                                                                                                                                          // print(messageFromTrim) // This is Room JID
                                                                                                                                          /*let roomStorage = XMPPRoomCoreDataStorage.sharedInstance()
                                                                                                                                           let roomJID = XMPPJID(string: messageFromTrim)
                                                                                                                                           let room = XMPPRoom(roomStorage: roomStorage, jid: roomJID, dispatchQueue: DispatchQueue.main)!
                                                                                                                                           room.activate(xmppStream)*/
                                                                                                                                          //let banterName = roomName//self.banterRoomName//room.roomSubject
                                                                                                                                          
                                                                                                                                          //let isRegistering: String? = UserDefaults.standard.string(forKey: "isRegisterProcess")
                                                                                                                                          
                                                                                                                                          //Now create message for this room
                                                                                                                                          //Code to prepare data before send to server // text is for temp

                                                                                                                                          var isJoined: String = "no"
                                                                                                                                          var isAdmin: String = "no"
                                                                                                                                        if(self.isBanterOwner || self.isJoiningBanterRoom)
                                                                                                                                          {
                                                                                                                                              isJoined = "yes"

                                                                                                                                          }

                                                                                                                                        if(self.isBanterOwner)
                                                                                                                                          {
                                                                                                                                              isAdmin = "yes"
                                                                                                                                          }

                                                                                                                                          self.isJoiningBanterRoom = false

                                                                                                                                          self.prepareMessageForServerIn(messageFromTrim, messageContent: recMessageContent, messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: recBanterNickName, banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdmin, supportedTeam: supportteam, opponentTeam: opponentteam)
                                                                                                                                          //, banterRoomLogo: String = ""
                                                                                                                                          let notificationName = Notification.Name("MessageReceivedFromServer")
                                                                                                                                          NotificationCenter.default.post(name: notificationName, object: nil)

                                                                                                                                        if(self.isOnBantersView == true)
                                                                                                                                          {
                                                                                                                                              //Post notification if user is on chats window and received any message
                                                                                                                                              let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                              NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                          }
                                                                                                                                        else if(self.isOnChatsView == true)
                                                                                                                                          {
                                                                                                                                              //Post notification if user is on chats window and received any message
                                                                                                                                              let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                              NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                          }

                                                                                                                                          let notificationName2 = Notification.Name("_BanterRoomCreated")
                                                                                                                                          NotificationCenter.default.post(name: notificationName2, object: nil)
                                                                                                                                          
                                                                                                                                          /*if(arrDataTeams.count > 0)
                                                                                                                                           {
                                                                                                                                           for record in arrDataTeams
                                                                                                                                           {
                                                                                                                                           
                                                                                                                                           }
                                                                                                                                           }*/
                                                                                                                                      }
                                                                                                                                      else if(chatType == "group")
                                                                                                                                      {
                                                                                                                                          //joinRoomOnly(with: roomId, delegate:self)
                                                                                                                                          let recMessageContent: String =  "You are now ready to post messages, pictures, videos in this group."
                                                                                                                                          
                                                                                                                                          
                                                                                                                                          
                                                                                                                                          let messageTo = UserDefaults.standard.string(forKey: "userJID")
                                                                                                                                          let messageFrom = roomDetailsDict.value(forKey: "roomid") as! String
                                                                                                                                          let arrMessageFrom = messageFrom.components(separatedBy: "/")
                                                                                                                                          let messageFromTrim = arrMessageFrom[0]
                                                                                                                                          let recBanterNickName = ""//arrMessageFrom[1]
                                                                                                                                          let time: Int64 = self.getUTCFormateDate()
                                                                                                                                          let groupAvatar = roomDetailsDict.value(forKey: "avatar") as! String
                                                                                                                                          
                                                                                                                                          let isJoined: String = "yes"
                                                                                                                                          let isAdmin: String = "no"
                                                                                                                                          
                                                                                                                                        self.joinRoomOnlyforGroup(with: messageFrom, delegate: self, joindate: UserDefaults.standard.double(forKey: messageFrom))
                                                                                                                                          
                                                                                                                                          self.prepareMessageForServerIn(messageFromTrim, messageContent: recMessageContent, messageType: "header", messageTime: time, messageId: "", filePath: "", fileLocalId: "", caption: "", thumbLink: "", fromUser: messageTo!, isIncoming: "YES", chatType: chatType, recBanterNickName: recBanterNickName, banterRoomName: banterName, isJoined: isJoined, isAdmin: isAdmin, supportedTeam: supportteam, opponentTeam: opponentteam,roomavatar:groupAvatar)
                                                                                                                                          
                                                                                                                                          
                                                                                                                                          
                                                                                                                                          let notificationName = Notification.Name("MessageReceivedFromServer")
                                                                                                                                          NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                          
                                                                                                                                          let notificationName2 = Notification.Name("RefreshChatsView")
                                                                                                                                          NotificationCenter.default.post(name: notificationName2, object: nil)
                                                                                                                                          
                                                                                                                                          
                                                                                                                                          
                                                                                                                                          
                                                                                                                                          
                                                                                                                                          
                                                                                                                                          /*
                                                                                                                                           if(isOnBantersView == true)
                                                                                                                                           {
                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                           let notificationName = Notification.Name("RefreshBantersView")
                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                           }
                                                                                                                                           else if(isOnChatsView == true)
                                                                                                                                           {
                                                                                                                                           //Post notification if user is on chats window and received any message
                                                                                                                                           let notificationName = Notification.Name("RefreshChatsView")
                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                           }
                                                                                                                                           
                                                                                                                                           let notificationName2 = Notification.Name("_BanterRoomCreated")
                                                                                                                                           NotificationCenter.default.post(name: notificationName2, object: nil)
                                                                                                                                           */
                                                                                                                                      }
                                                                                                                                      
                                                                                                                                      
                                                                                                                                      //Send notification of room created
                                                                                                                                      /*if(chatType == "banter")
                                                                                                                                       {
                                                                                                                                       
                                                                                                                                       }
                                                                                                                                       else if(chatType == "group")
                                                                                                                                       {
                                                                                                                                       let notificationName = Notification.Name("_GroupChatCreated")
                                                                                                                                       NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                       }*/
                                                                                                                                      
                                                                                                                                  }
                                                                                                                                  else{
                                                                                                                                      
                                                                                                                                  }
                                                                                                                                }
                                                                                                                            case .failure(let error):
                                                                                                                                debugPrint(error as Any)
                                                                                    break
                                                                                                                                // error handling
                                                                                                                 
                                                                                                                            }
                                                                                                                        
                                                                                                                }
              
          }
    func fanstoryUserBlock(blockuser:String)  {
        var dictRequest = [String: AnyObject]()
        dictRequest["cmd"] = "userblock" as AnyObject
        dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
        dictRequest["device"] = "ios" as AnyObject
        do {
             let time: Int64 = self.getUTCFormateDate()
            //Creating Request Data
            var dictRequestData = [String: AnyObject]()
            
            let login: String? = UserDefaults.standard.string(forKey: "userJID")
            let arrReadUserJid = login?.components(separatedBy: "@")
            let myMobile: String? = arrReadUserJid?[0]
            dictRequestData["type"] = "stories" as AnyObject
            dictRequestData["username"] = myMobile as AnyObject
           dictRequestData["blockedusername"] = blockuser as AnyObject
            dictRequestData["blockedtime"] = time as AnyObject
            dictRequestData["unblockedtime"] = 0 as AnyObject
            dictRequest["requestData"] = dictRequestData as AnyObject
            
       
     /*  let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                      let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                      //print(strByPlace)
                                                                      let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                      
            let url = MediaAPIjava + "request=" + escapedString!*/
                                                                     AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                     headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                       // 2
                                                                                                       .responseJSON { response in
                                                                                                        switch response.result {
                                                                                                                                                 case .success(let value):
                                                                                                                                                     if let json = value as? [String: Any] {
                                                                                                                                                                               // print(" JSON:", json)
                                                                                                                                                                               let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                               // self.finishSyncContacts()
                                                                                                                                                                               //print(" status:", status1)
                                                                                                                                                                            if(status1){
                                                                                                                                                                                
                                                                                                                                                                                if(self.isOnFanDetail){
                                                                                                                                                                                    let _fanupdatedelete = Notification.Name("_fanupdatedelete")
                                                                                                                                                                                    NotificationCenter.default.post(name: _fanupdatedelete, object: nil)
                                                                                                                                                                                    self.getbackgroundapi()                                                    }
                                                                                                                                                                                else{
                                                                                                                                                                                    let notificationName = Notification.Name("_FechedFanUpdate")
                                                                                                                                                                                           NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                 let mystoryblock = Notification.Name("mystoryblock")
                                                                                                                                                                                 NotificationCenter.default.post(name: mystoryblock, object: nil)
                                                                                                                                                                                    let notificationresethomeApi = Notification.Name("resethomeApi")
                                                                                                                                                                                    NotificationCenter.default.post(name: notificationresethomeApi, object: nil)
                                                                                                                                                                                }
                                                                                                                                                                                self.sendsblockemail(blockedusername: blockuser)
                                                                                                                                                                            }
                                                                                                                                                                            else{
                                                                                                                                                                                let notificationName = Notification.Name("storyUserblockFail")
                                                                                                                                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                let mystoryblock = Notification.Name("mystoryblockfail")
                                                                                                                                                                                                    NotificationCenter.default.post(name: mystoryblock, object: nil)
                                                                                                                                                                                if(self.isOnFanDetail){
                                                                                                                                                                                    let DetailstoryUserblockFail = Notification.Name("DetailstoryUserblockFail")
                                                                                                                                                                                    NotificationCenter.default.post(name: DetailstoryUserblockFail, object: nil)
                                                                                                                                                                                }
                                                                                                                                                     
                                                                                                                                                                            }
                                                                                                                                                                           }
                                                                                                                                                 case .failure(let error):
                                                                                                                                                       debugPrint(error as Any)
                                                                                                                                                    let notificationName = Notification.Name("storyUserblockFail")
                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                    if(self.isOnFanDetail){
                                                                                                                                                        let DetailstoryUserblockFail = Notification.Name("DetailstoryUserblockFail")
                                                                                                                                                        NotificationCenter.default.post(name: DetailstoryUserblockFail, object: nil)
                                                                                                                                                    }
                                                                                                        break
                                                                                                                                                     // error handling
                                                                                                                                      
                                                                                                                                                 }
                                                                                                   }
            } catch {
                       print(error.localizedDescription)
                   }
    }
       func FanstoryBlock(story_id : Int64)  {
       
       /* if(temparrMyFanUpdatesTeams.count>0){
                                                                     for i in 0...self.temparrMyFanUpdatesTeams.count-1 {
                                                                         let dict: NSDictionary? = self.temparrMyFanUpdatesTeams[i] as? NSDictionary
                                                                                if(dict != nil)
                                                                                {
                                                                                 let GroupID = dict?.value(forKey: "id") as! Int64
                                                                                 if(story_id == GroupID){
                                                                                     var dict1: [String: AnyObject] = self.temparrMyFanUpdatesTeams[i] as! [String: AnyObject]
                                                                                   dict1["isblocked"] = true as AnyObject
                                                                                          
                                                                                   //dict1["liked"] = islike as AnyObject //print("comment\(fanupdateid)\(appDelegate().arrFanUpdateComments.count)")
                                                                                   self.temparrMyFanUpdatesTeams[i] = dict1 as AnyObject
                                                                                     let notificationName = Notification.Name("contentmyStory")
                                                                                                                                                                                                                                                                     NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                     break
                                                                                                
                                                                                 }
                                                                         }
                                                                     }
                                                                 }*/
              if(arrFanUpdatesTeams.count>0){
                                                              for i in 0...self.arrFanUpdatesTeams.count-1 {
                                                                  let dict: NSDictionary? = self.arrFanUpdatesTeams[i] as? NSDictionary
                                                                         if(dict != nil)
                                                                         {
                                                                          let GroupID = dict?.value(forKey: "id") as! Int64
                                                                          if(story_id == GroupID){
                                                                              var dict1: [String: AnyObject] = self.arrFanUpdatesTeams[i] as! [String: AnyObject]
                                                                            dict1["isblocked"] = true as AnyObject
                                                                                   
                                                                            //dict1["liked"] = islike as AnyObject //print("comment\(fanupdateid)\(appDelegate().arrFanUpdateComments.count)")
                                                                            self.arrFanUpdatesTeams[i] = dict1 as AnyObject
                                                                              let notificationName = Notification.Name("resetStory")
                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                              
                                                                              break
                                                                                         
                                                                          }
                                                                  }
                                                              }
                                                          }
           if(self.arrhomefanupdate.count>0) {
                                    for i in 0...self.arrhomefanupdate.count-1 {
                                        let dict: NSDictionary? = self.arrhomefanupdate[i] as? NSDictionary
                                               if(dict != nil)
                                               {
                                                let GroupID = dict?.value(forKey: "id") as! Int64
                                                if(story_id == GroupID){
                                                    var dict1: [String: AnyObject] = self.arrhomefanupdate[i] as! [String: AnyObject]
                                                dict1["isblocked"] = true as AnyObject
                                                 
                                                    self.arrhomefanupdate[i] = dict1 as AnyObject
                                                    let notificationName = Notification.Name("resetStoryslider")
                                                                                                                                                          NotificationCenter.default.post(name: notificationName, object: nil)
                                                    
                                                    break
                                                               
                                                }
                                        }
                                    }
                                }
          // if(self.isOnFanDetail){
               let _fanupdatedelete = Notification.Name("_fanupdatedelete")
               NotificationCenter.default.post(name: _fanupdatedelete, object: nil)
           //}
              
          }
    //Ravi Media
      
      func mediaUserBlock(blockuser:String)  {
          var dictRequest = [String: AnyObject]()
          dictRequest["cmd"] = "userblock" as AnyObject
          dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
          dictRequest["device"] = "ios" as AnyObject
          do {
               let time: Int64 = self.getUTCFormateDate()
              //Creating Request Data
              var dictRequestData = [String: AnyObject]()
              
              let login: String? = UserDefaults.standard.string(forKey: "userJID")
              let arrReadUserJid = login?.components(separatedBy: "@")
              let myMobile: String? = arrReadUserJid?[0]
              dictRequestData["type"] = "videos" as AnyObject
              dictRequestData["username"] = myMobile as AnyObject
             dictRequestData["blockedusername"] = blockuser as AnyObject
              dictRequestData["blockedtime"] = time as AnyObject
              dictRequestData["unblockedtime"] = 0 as AnyObject
              dictRequest["requestData"] = dictRequestData as AnyObject
              
         
       /*  let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                        let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                        //print(strByPlace)
                                                                        let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                        
              let url = MediaAPIjava + "request=" + escapedString!*/
                                                                       AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                       headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                         // 2
                                                                                                         .responseJSON { response in
                                                                                                            
                                                                                                            switch response.result {
                                                                                                                                                     case .success(let value):
                                                                                                                                                         if let json = value as? [String: Any] {
                                                                                                                                                                                   // print(" JSON:", json)
                                                                                                                                                                                   let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                                   // self.finishSyncContacts()
                                                                                                                                                                                   //print(" status:", status1)
                                                                                                                                                                                if(status1){
                                                                                                                                                                                    
                                                                                                                                                                                    if(self.isOnFanDetail){
                                                                                                                                                                                        let _fanupdatedelete = Notification.Name("_fanupdatedelete")
                                                                                                                                                                                        NotificationCenter.default.post(name: _fanupdatedelete, object: nil)
                                                                                                                                                                                        self.getbackgroundapi()                                                    }
                                                                                                                                                                                    else{
                                                                                                                                                                                        let notificationName = Notification.Name("_FechedMedia")
                                                                                                                                                                                               NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                        let notificationresethomeApi = Notification.Name("resethomeApi")
                                                                                                                                                                                        NotificationCenter.default.post(name: notificationresethomeApi, object: nil)
                                                                                                                                                                                    }
                                                                                                                                                                                    self.sendsblockemail(blockedusername: blockuser)
                                                                                                                                                                                }
                                                                                                                                                                                else{
                                                                                                                                                                                    let notificationName = Notification.Name("storyUserblockFail")
                                                                                                                                                                                    NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                    if(self.isOnFanDetail){
                                                                                                                                                                                        let DetailstoryUserblockFail = Notification.Name("DetailstoryUserblockFail")
                                                                                                                                                                                        NotificationCenter.default.post(name: DetailstoryUserblockFail, object: nil)
                                                                                                                                                                                    }
                                                                                                                                                         
                                                                                                                                                                                }
                                                                                                                                                                               }
                                                                                                                                                     case .failure(let error):
                                                                                                                                                                                             debugPrint(error as Any)
                                                                                                                                                                                          let notificationName = Notification.Name("storyUserblockFail")
                                                                                                                                                                                          NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                          if(self.isOnFanDetail){
                                                                                                                                                                                              let DetailstoryUserblockFail = Notification.Name("DetailstoryUserblockFail")
                                                                                                                                                                                              NotificationCenter.default.post(name: DetailstoryUserblockFail, object: nil)
                                                                                                                                                                                          }
                                                                                                                                                        
                                                                                                                break
                                                                                                                                                         // error handling
                                                                                                                                          
                                                                                                                                                     }
                                                                                                             
                                                                                                     }
              } catch {
                         print(error.localizedDescription)
                     }
      }
      func MediaBlock(story_id : Int64)  {
          if(arrMedia.count>0){
                                                          for i in 0...self.arrMedia.count-1 {
                                                              let dict: NSDictionary? = self.arrMedia[i] as? NSDictionary
                                                                     if(dict != nil)
                                                                     {
                                                                      let GroupID = dict?.value(forKey: "id") as! Int64
                                                                      if(story_id == GroupID){
                                                                          var dict1: [String: AnyObject] = self.arrMedia[i] as! [String: AnyObject]
                                                                        dict1["isblocked"] = true as AnyObject
                                                                               
                                                                        //dict1["liked"] = islike as AnyObject //print("comment\(fanupdateid)\(appDelegate().arrFanUpdateComments.count)")
                                                                        self.arrMedia[i] = dict1 as AnyObject
                                                                          let notificationName = Notification.Name("resetMedia")
                                                                                                                                                                                NotificationCenter.default.post(name: notificationName, object: nil)
                                                                          
                                                                          break
                                                                                     
                                                                      }
                                                              }
                                                          }
                                                      }
       if(self.arrhomemedia.count>0) {
                                for i in 0...self.arrhomemedia.count-1 {
                                    let dict: NSDictionary? = self.arrhomemedia[i] as? NSDictionary
                                           if(dict != nil)
                                           {
                                            let GroupID = dict?.value(forKey: "id") as! Int64
                                            if(story_id == GroupID){
                                                var dict1: [String: AnyObject] = self.arrhomemedia[i] as! [String: AnyObject]
                                            dict1["isblocked"] = true as AnyObject
                                             
                                                self.arrhomemedia[i] = dict1 as AnyObject
                                                let notificationName = Notification.Name("resetStoryslider")
                                                                                                                                                      NotificationCenter.default.post(name: notificationName, object: nil)
                                                
                                                break
                                                           
                                            }
                                    }
                                }
                            }
      // if(self.isOnFanDetail){
           let _fanupdatedelete = Notification.Name("_fanupdatedelete")
           NotificationCenter.default.post(name: _fanupdatedelete, object: nil)
       //}
          
      }
      //Ravi Media
       func sendsblockemail(blockedusername:String){
           
           if ClassReachability.isConnectedToNetwork() {
              
               let boundary = generateBoundaryString()
               var request = URLRequest(url: URL(string: Signupmail)!)
               request.httpMethod = "POST"
               request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
               var reqParams = [String: String]()
               reqParams["cmd"] = "blockemail"
               reqParams["blockedusername"] = blockedusername
               reqParams["name"] = UserDefaults.standard.string(forKey: "userName")
               reqParams["key"] = "kXfqS9wUug6gVKDB"
              reqParams["device"] = "ios" as String
               reqParams["model"] = UIDevice.current.modelName
               let appVersion = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as AnyObject
            reqParams["appversion"] = appVersion as? String
            reqParams["os"] = "\(UIDevice.current.systemVersion)"
               let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
               let mytriviajid: String? = UserDefaults.standard.string(forKey: "triviauser")

               if(myjid != nil){
                   let arrdUserJid = myjid?.components(separatedBy: "@")
                   let userUserJid = arrdUserJid?[0]
                   reqParams["username"] = userUserJid
               }
               else if(mytriviajid != nil){
                   let arrdUserJid = mytriviajid?.components(separatedBy: "@")
                   let userUserJid = arrdUserJid?[0]
                   reqParams["username"] = userUserJid
               }
               else{
                   reqParams["username"] = ""
               }
               
               
               // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
               request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
               let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                   if let data = data {
                       if let stringData = String(data: data, encoding: String.Encoding.utf8) {
                           //print(stringData) //JSONSerialization
                           
                           
                           
                           //print(time)
                           do {
                               let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                               
                               let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                               
                               if(isSuccess)
                               {
                                   
                               }
                               else
                               {
                                   //Show Error
                               }
                           } catch let error as NSError {
                               print(error)
                               //Show Error
                           }
                           
                       }
                   }
                   else
                   {
                       //Show Error
                   }
               })
               task.resume()
               
               
               
               
               
               
           }
       }
       func sendsreportemail(blockedusername:String,contentid:Int64,descriptionvalue:String,reason:String){
              
              if ClassReachability.isConnectedToNetwork() {
                 
                  let boundary = generateBoundaryString()
                  var request = URLRequest(url: URL(string: Signupmail)!)
                  request.httpMethod = "POST"
                  request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
                  var reqParams = [String: String]()
                  reqParams["cmd"] = "reportemail"
                  reqParams["blockedusername"] = blockedusername
               reqParams["os"] = "\(UIDevice.current.systemVersion)"  as! String
               reqParams["contentid"] = "\(contentid)"
                  reqParams["name"] = UserDefaults.standard.string(forKey: "userName")
                  reqParams["key"] = "kXfqS9wUug6gVKDB"
                 reqParams["device"] = "ios" as String
                reqParams["model"] = UIDevice.current.modelName
               let appVersion = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as AnyObject
                    reqParams["appversion"] = appVersion as! String
               reqParams["reason"] = reason as! String
               reqParams["description"] = descriptionvalue as! String
                  let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                  let mytriviajid: String? = UserDefaults.standard.string(forKey: "triviauser")

                  if(myjid != nil){
                      let arrdUserJid = myjid?.components(separatedBy: "@")
                      let userUserJid = arrdUserJid?[0]
                      reqParams["username"] = userUserJid
                  }
                  else if(mytriviajid != nil){
                      let arrdUserJid = mytriviajid?.components(separatedBy: "@")
                      let userUserJid = arrdUserJid?[0]
                      reqParams["username"] = userUserJid
                  }
                  else{
                      reqParams["username"] = ""
                  }
                  
                  
                  // request.httpBody = createRequestBodyWith(parameters:reqParams as [String : String], filePathKey:"uploaded", boundary:boundary, image: appDelegate().profileAvtarTemp!) as Data
                  request.httpBody = createRequestBody(parameters: reqParams as [String : AnyObject], filePathKey: "", boundary: boundary) as Data
                  let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in
                      if let data = data {
                        if String(data: data, encoding: String.Encoding.utf8) != nil {
                              //print(stringData) //JSONSerialization
                              
                              
                              
                              //print(time)
                              do {
                                  let jsonData = try JSONSerialization.jsonObject(with:data , options: []) as? NSDictionary
                                  
                                  let isSuccess: Bool = (jsonData?.value(forKey: "success") as? Bool)!
                                  
                                  if(isSuccess)
                                  {
                                      
                                  }
                                  else
                                  {
                                      //Show Error
                                  }
                              } catch let error as NSError {
                                  print(error)
                                  //Show Error
                              }
                              
                          }
                      }
                      else
                      {
                          //Show Error
                      }
                  })
                  task.resume()
                  
                  
                  
                  
                  
                  
              }
          }
    func callTeamchangeRoomleave(leaveRoomIds: String,Deleteroomids: String) {
             var dictRequest = [String: AnyObject]()
             dictRequest["cmd"] = "leaveroom" as AnyObject
             dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
             dictRequest["device"] = "ios" as AnyObject
             do {
                  
                 //Creating Request Data
                 var dictRequestData = [String: AnyObject]()
                 
                 let login: String? = UserDefaults.standard.string(forKey: "userJID")
                 let arrReadUserJid = login?.components(separatedBy: "@")
                 let myMobile: String? = arrReadUserJid?[0]
                 dictRequestData["leaveroomid"] = leaveRoomIds as AnyObject
               dictRequestData["deleteroomid"] = Deleteroomids as AnyObject
                 dictRequestData["username"] = myMobile as AnyObject
                
                 dictRequest["requestData"] = dictRequestData as AnyObject
                 
            /* let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                           let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                           //print(strByPlace)
                                                                           let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                           
                                                                           let url = MediaAPIjava + "request=" + escapedString!*/
                                                                          AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                          headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                            // 2
                                                                                                            .responseJSON { response in
                                                                              
                                                                                                                switch response.result {
                                                                                                                                                         case .success(let value):
                                                                                                                                                             if let json = value as? [String: Any] {
                                                                                                                                                                 // print(" JSON:", json)
                                                                                                                                                                 let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                 // self.finishSyncContacts()
                                                                                                                                                                 //print(" status:", status1)
                                                                                                                                                                if(status1){
                                                                                                                                                                 self.getUserGroupsData()
                                                                                                                                                                }
                                                                                                                                                                 else{
                                                                                                                                                                                                                   
                                                                                                                                                                     //Show Error
                                                                                                                                                                 }
                                                                                                                                                             }
                                                                                                                                                         case .failure(let error):
                                                                                                                                                            debugPrint(error as Any)
                                                                                                                    break
                                                                                                                                                             // error handling
                                                                                                                                              
                                                                                                                                                         }
                                                                                                                
                                                                                                        }
                 } catch {
                            print(error.localizedDescription)
                        }
         }
    
       func getnotificationcount()  {
        if ClassReachability.isConnectedToNetwork() {
                 
           var dictRequest = [String: AnyObject]()
           dictRequest["cmd"] = "getnotificationcount" as AnyObject
           dictRequest["key"] = "kXfqS9wUug6gVKDB" as AnyObject
           dictRequest["device"] = "ios" as AnyObject
           do {
                let time: Int64 = self.getUTCFormateDate()
               //Creating Request Data
               var dictRequestData = [String: AnyObject]()
               
             let myjid: String? = UserDefaults.standard.string(forKey: "userJID")
                           if(myjid != nil){
                               let arrdUserJid = myjid?.components(separatedBy: "@")
                               let userUserJid = arrdUserJid?[0]
                               dictRequestData["username"] = userUserJid as AnyObject?
                           }
                           else{
                               let istriviauser = UserDefaults.standard.bool(forKey: "istriviauser")
                                      if(!istriviauser){
                                       let triviauser: String? = UserDefaults.standard.string(forKey: "triviauser")
                                       let arrdUserJid = triviauser?.components(separatedBy: "@")
                                                let userUserJid = arrdUserJid?[0]
                                                dictRequestData["username"] = userUserJid as AnyObject?
                                      }else{
                                        dictRequestData["username"] = "" as AnyObject
                               }
                              //dictRequestData1["username"] = "" as AnyObject
                           }
               dictRequest["requestData"] = dictRequestData as AnyObject
               
          
        /*  let dataByPlace = try JSONSerialization.data(withJSONObject: dictRequest, options: .prettyPrinted)
                                                                         let strByPlace = NSString(data: dataByPlace, encoding: String.Encoding.utf8.rawValue)! as String
                                                                         //print(strByPlace)
                                                                         let escapedString = strByPlace.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)
                                                                         
               let url = MediaAPIjava + "request=" + escapedString!*/
                                                                        AF.request(MediaAPIjava, method:.post, parameters: ["request" : dictRequest], encoding: JSONEncoding.default,
                                                                                                                        headers: ["Content-Type": "application/json","cache-control": "no-cache",])
                                                                                                          // 2
                                                                                                          .responseJSON { response in
                                                                                                            
                                                                                                            switch response.result {
                                                                                                                                                     case .success(let value):
                                                                                                                                                         if let json = value as? [String: Any] {
                                                                                                                                                                                   // print(" JSON:", json)
                                                                                                                                                                                   let status1: Bool = json["success"] as! Bool  //(json.index(forKey: "status") != nil) as Bool
                                                                                                                                                                                   // self.finishSyncContacts()
                                                                                                                                                                                   //print(" status:", status1)
                                                                                                                                                                                if(status1){
                                                                                                                                                                                 let notificationName = Notification.Name("buttonbadge")
                                                                                                                                                                                              NotificationCenter.default.post(name: notificationName, object: nil)
                                                                                                                                                                                    UserDefaults.standard.setValue(json["notificationcount"], forKey: "notificationcount")
                                                                                                                                                                                                                        UserDefaults.standard.synchronize()
                                                                                                                                                                        }
                                                                                                                                                                                else{
                                                                                                                                                                                    
                                                                                                                                                         
                                                                                                                                                                                }
                                                                                                                                                                               }
                                                                                                                                                     case .failure(let error): break
                                                                                                                                                         // error handling
                                                                                                                                          
                                                                                                                                                     }
                                                                                                              
                                                                                                      }
               } catch {
                          print(error.localizedDescription)
                      }
    }}
    func isNsnullOrNil(object : AnyObject?) -> Bool
      {
          if (object is NSNull) || (object == nil)
          {
              return true
          }
          else
          {
              return false
          }
      }
}



extension DispatchQueue {
    
    static func background(delay: Double = 0.0, background: (()->Void)? = nil, completion: (() -> Void)? = nil) {
        DispatchQueue.global(qos: .background).async {
            background?()
            if let completion = completion {
                DispatchQueue.main.asyncAfter(deadline: .now() + delay, execute: {
                    completion()
                })
            }
        }
    }
    
}

private var kAssociationKeyMaxLength: Int = 0

extension UITextField {
    
    @IBInspectable var maxLength: Int {
        get {
            if let length = objc_getAssociatedObject(self, &kAssociationKeyMaxLength) as? Int {
                return length
            } else {
                return Int.max
            }
        }
        set {
            objc_setAssociatedObject(self, &kAssociationKeyMaxLength, newValue, .OBJC_ASSOCIATION_RETAIN)
            addTarget(self, action: #selector(checkMaxLength), for: .editingChanged)
        }
    }
    
    @objc func checkMaxLength(textField: UITextField) {
        guard let prospectiveText = self.text,
            prospectiveText.count > maxLength
            else {
                return
        }
        
        let selection = selectedTextRange
        let maxCharIndex = prospectiveText.index(prospectiveText.startIndex, offsetBy: maxLength)
        text = prospectiveText.substring(to: maxCharIndex)
        selectedTextRange = selection
    }
}

extension UIActivityIndicatorView {
    
    convenience init(activityIndicatorStyle: UIActivityIndicatorView.Style, color: UIColor, placeInTheCenterOf parentView: UIView) {
        self.init(style: activityIndicatorStyle)
        center = parentView.center
        self.color = color
        parentView.addSubview(self)
    }
}

extension UIImage {
    func resized(withPercentage percentage: CGFloat) -> UIImage? {
        let canvasSize = CGSize(width: size.width * percentage, height: size.height * percentage)
        UIGraphicsBeginImageContextWithOptions(canvasSize, false, scale)
        defer { UIGraphicsEndImageContext() }
        draw(in: CGRect(origin: .zero, size: canvasSize))
        return UIGraphicsGetImageFromCurrentImageContext()
    }
    func resized(toWidth width: CGFloat) -> UIImage? {
        let canvasSize = CGSize(width: width, height: CGFloat(ceil(width/size.width * size.height)))
        UIGraphicsBeginImageContextWithOptions(canvasSize, false, scale)
        defer { UIGraphicsEndImageContext() }
        draw(in: CGRect(origin: .zero, size: canvasSize))
        return UIGraphicsGetImageFromCurrentImageContext()
    }
    func resizableImageWithStretchingProperties(
        X: CGFloat, width widthProportion: CGFloat,
        Y: CGFloat, height heightProportion: CGFloat) -> UIImage {
        
        let selfWidth = self.size.width
        let selfHeight = self.size.height
        
        // insets along width
        let leftCapInset = X*selfWidth*(1-widthProportion)
        let rightCapInset = (1-X)*selfWidth*(1-widthProportion)
        
        // insets along height
        let topCapInset = Y*selfHeight*(1-heightProportion)
        let bottomCapInset = (1-Y)*selfHeight*(1-heightProportion)
        
        return self.resizableImage(
            withCapInsets: UIEdgeInsets(top: topCapInset, left: leftCapInset,
                                        bottom: bottomCapInset, right: rightCapInset),
            resizingMode: .stretch)
    }
    func square() -> UIImage? {
        if size.width == size.height {
            return self
        }
        
        /*let cropWidth = min(size.width, size.height)
         
         let cropRect = CGRect(
         x: (size.width - cropWidth) / 2.0,
         y: (size.height - cropWidth) / 2.0,
         width: cropWidth,
         height: cropWidth
         )
         
         guard let imageRef = cgImage?.cropping(to: cropRect) else {
         return nil
         }
         
         return UIImage(cgImage: imageRef, scale: 0, orientation: imageOrientation)
         */
        let originalWidth  = size.width
        let originalHeight = size.height
        
        var edge: CGFloat
        if originalWidth > originalHeight {
            edge = originalHeight
        } else {
            edge = originalWidth
        }
        
        let posX = (originalWidth  - edge) / 2.0
        let posY = (originalHeight - edge) / 2.0
        
        let cropSquare = CGRect(x: posX, y: posY, width: edge, height: edge)
        
        guard let imageRef = cgImage?.cropping(to: cropSquare) else {
            return nil
        }
        let img: UIImage = UIImage(cgImage: imageRef, scale: 0, orientation: imageOrientation)
        return img
        
    }
    //}
    //extension UIImage {
    /*
     public class func gifImageWithData(_ data: Data) -> UIImage? {
     guard let source = CGImageSourceCreateWithData(data as CFData, nil) else {
     print("image doesn't exist")
     return nil
     }
     
     return UIImage.animatedImageWithSource(source)
     }
     
     public class func gifImageWithURL(_ gifUrl:String) -> UIImage? {
     guard let bundleURL:URL? = URL(string: gifUrl)
     else {
     print("image named \"\(gifUrl)\" doesn't exist")
     return nil
     }
     guard let imageData = try? Data(contentsOf: bundleURL!) else {
     print("image named \"\(gifUrl)\" into NSData")
     return nil
     }
     
     return gifImageWithData(imageData)
     }
     
     public class func gifImageWithName(_ name: String) -> UIImage? {
     guard let bundleURL = Bundle.main
     .url(forResource: name, withExtension: "gif") else {
     print("SwiftGif: This image named \"\(name)\" does not exist")
     return nil
     }
     guard let imageData = try? Data(contentsOf: bundleURL) else {
     print("SwiftGif: Cannot turn image named \"\(name)\" into NSData")
     return nil
     }
     
     return gifImageWithData(imageData)
     }
     
     class func delayForImageAtIndex(_ index: Int, source: CGImageSource!) -> Double {
     var delay = 0.1
     
     let cfProperties = CGImageSourceCopyPropertiesAtIndex(source, index, nil)
     let gifProperties: CFDictionary = unsafeBitCast(
     CFDictionaryGetValue(cfProperties,
     Unmanaged.passUnretained(kCGImagePropertyGIFDictionary).toOpaque()),
     to: CFDictionary.self)
     
     var delayObject: AnyObject = unsafeBitCast(
     CFDictionaryGetValue(gifProperties,
     Unmanaged.passUnretained(kCGImagePropertyGIFUnclampedDelayTime).toOpaque()),
     to: AnyObject.self)
     if delayObject.doubleValue == 0 {
     delayObject = unsafeBitCast(CFDictionaryGetValue(gifProperties,
     Unmanaged.passUnretained(kCGImagePropertyGIFDelayTime).toOpaque()), to: AnyObject.self)
     }
     
     delay = delayObject as! Double
     
     if delay < 0.1 {
     delay = 0.1
     }
     
     return delay
     }
     
     class func gcdForPair(_ a: Int?, _ b: Int?) -> Int {
     var a: Int = a!
     var b: Int = b!
     if b == nil || a == nil {
     if b != nil {
     return b
     } else if a != nil {
     return a
     } else {
     return 0
     }
     }
     
     if b > a {
     let c = a
     a = b
     b = c
     }
     
     var rest: Int
     while true {
     rest = a % b
     
     if rest == 0 {
     return b
     } else {
     a = b
     b = rest
     }
     }
     }
     
     class func gcdForArray(_ array: Array<Int>) -> Int {
     if array.isEmpty {
     return 1
     }
     
     var gcd = array[0]
     
     for val in array {
     gcd = UIImage.gcdForPair(val, gcd)
     }
     
     return gcd
     }
     
     class func animatedImageWithSource(_ source: CGImageSource) -> UIImage? {
     let count = CGImageSourceGetCount(source)
     var images = [CGImage]()
     var delays = [Int]()
     
     for i in 0..<count {
     if let image = CGImageSourceCreateImageAtIndex(source, i, nil) {
     images.append(image)
     }
     
     let delaySeconds = UIImage.delayForImageAtIndex(Int(i),
     source: source)
     delays.append(Int(delaySeconds * 1000.0)) // Seconds to ms
     }
     
     let duration: Int = {
     var sum = 0
     
     for val: Int in delays {
     sum += val
     }
     
     return sum
     }()
     
     let gcd = gcdForArray(delays)
     var frames = [UIImage]()
     
     var frame: UIImage
     var frameCount: Int
     for i in 0..<count {
     frame = UIImage(cgImage: images[Int(i)])
     frameCount = Int(delays[Int(i)] / gcd)
     
     for _ in 0..<frameCount {
     frames.append(frame)
     }
     }
     
     let animation = UIImage.animatedImage(with: frames,
     duration: Double(duration) / 1000.0)
     
     return animation
     }
     */
}

extension UIView {
    func removeAllSubviews() {
        for subview in subviews {
            subview.removeFromSuperview()
        }
    }
}
typealias UnixTime = Int64
extension UnixTime {
    private func formatType(form: String) -> DateFormatter {
        let dateFormatter = DateFormatter()
        //dateFormatter.locale = Locale(identifier: "en_GB")
        dateFormatter.dateFormat = form
        dateFormatter.amSymbol = "AM"
        dateFormatter.pmSymbol = "PM"
        return dateFormatter
    }
    var dateFull: Date {
        let date = Date(timeIntervalSince1970: Double(self))
        return date
    }
    var toHour: String {
        let str = formatType(form: "hh:mm a").string(from: dateFull)
        return str
    }
    var toDay: String {
        let str = formatType(form: "MM/dd/yyyy").string(from: dateFull)
        return str
    }
}
extension TimeInterval {
    //"dd days, hh hours, mm minutes, ss seconds, sss ms"
    func timeIntervalAsString(_ format : String = "hh:mm:ss") -> String {
        var asInt   = NSInteger(self)
        let ago = (asInt < 0)
        if (ago) {
            asInt = -asInt
        }
        let ms = Int(self.truncatingRemainder(dividingBy: 1) * (ago ? -1000 : 1000))
        let s = asInt % 60
        let m = (asInt / 60) % 60
        let h = ((asInt / 3600))%24
        let d = (asInt / 86400)
        
        var value = format
        value = value.replacingOccurrences(of: "hh", with: String(format: "%0.2d", h))
        value = value.replacingOccurrences(of: "mm",  with: String(format: "%0.2d", m))
        value = value.replacingOccurrences(of: "sss", with: String(format: "%0.3d", ms))
        value = value.replacingOccurrences(of: "ss",  with: String(format: "%0.2d", s))
        value = value.replacingOccurrences(of: "dd",  with: String(format: "%d", d))
        if (ago) {
            value += " ago"
        }
        return value
    }
    
}
extension UIAlertAction {
    convenience init(title: String?, style: UIAlertAction.Style, image: UIImage, handler: ((UIAlertAction) -> Void)? = nil) {
        self.init(title: title, style: style, handler: handler)
        self.actionImage = image.resized(toWidth: 40.0)!
    }
    
    convenience init?(title: String?, style: UIAlertAction.Style, imageNamed imageName: String, handler: ((UIAlertAction) -> Void)? = nil) {
        if let image = UIImage(named: imageName) {
            self.init(title: title, style: style, image: image, handler: handler)
        } else {
            return nil
        }
    }
    
    var actionImage: UIImage {
        get {
            return self.value(forKey: "image") as? UIImage ?? UIImage()
        }
        set(image) {
            self.setValue(image, forKey: "image")
        }
    }
}

protocol Utilities {
}

extension NSObject:Utilities{
    
    
    enum ReachabilityStatus {
        case notReachable
        case reachableViaWWAN
        case reachableViaWiFi
    }
    
    var currentReachabilityStatus: ReachabilityStatus {
        
        var zeroAddress = sockaddr_in()
        zeroAddress.sin_len = UInt8(MemoryLayout<sockaddr_in>.size)
        zeroAddress.sin_family = sa_family_t(AF_INET)
        
        guard let defaultRouteReachability = withUnsafePointer(to: &zeroAddress, {
            $0.withMemoryRebound(to: sockaddr.self, capacity: 1) {
                SCNetworkReachabilityCreateWithAddress(nil, $0)
            }
        }) else {
            return .notReachable
        }
        
        var flags: SCNetworkReachabilityFlags = []
        if !SCNetworkReachabilityGetFlags(defaultRouteReachability, &flags) {
            return .notReachable
        }
        
        if flags.contains(.reachable) == false {
            // The target host is not reachable.
            return .notReachable
        }
        else if flags.contains(.isWWAN) == true {
            // WWAN connections are OK if the calling application is using the CFNetwork APIs.
            return .reachableViaWWAN
        }
        else if flags.contains(.connectionRequired) == false {
            // If the target host is reachable and no connection is required then we'll assume that you're on Wi-Fi...
            return .reachableViaWiFi
        }
        else if (flags.contains(.connectionOnDemand) == true || flags.contains(.connectionOnTraffic) == true) && flags.contains(.interventionRequired) == false {
            // The connection is on-demand (or on-traffic) if the calling application is using the CFSocketStream or higher APIs and no [user] intervention is needed
            return .reachableViaWiFi
        }
        else {
            return .notReachable
        }
    }
    
}
extension Date {
    var ticks: UInt64 {
        return UInt64((self.timeIntervalSince1970 + 62_135_596_800) * 10_000_000)
    }
    var millisecondsSince1970:Int64 {
        return Int64((self.timeIntervalSince1970 * 1000.0).rounded())
        //RESOLVED CRASH HERE
    }
    
    init(milliseconds:Double) {
        self = Date(timeIntervalSince1970: TimeInterval(milliseconds / 1000))
    }
    
}
extension Double {
    func truncate(places: Int) -> Double {
        return Double(floor(pow(10.0, Double(places)) * self)/pow(10.0, Double(places)))
    }
}
extension String
{
    func replace(target: String, withString: String) -> String
    {
        return self.replacingOccurrences(of: target, with: withString, options: NSString.CompareOptions.literal, range: nil)
    }
    
    func condenseWhitespace() -> String {
        let components = self.components(separatedBy: NSCharacterSet.whitespacesAndNewlines)
        return components.filter { !$0.isEmpty }.joined(separator: " ")
    }
    var encodeEmoji: String? {
        let encodedStr = NSString(cString: self.cString(using: String.Encoding.nonLossyASCII)!, encoding: String.Encoding.utf8.rawValue)
        return encodedStr as String?
    }
    
    var decodeEmoji: String {
        let data = self.data(using: String.Encoding.utf8, allowLossyConversion: false)
        if data != nil {
            let valueUniCode = NSString(data: data!, encoding: String.Encoding.nonLossyASCII.rawValue) as String?
            if valueUniCode != nil {
                return valueUniCode!
            } else {
                return self
            }
        } else {
            return self
        }
    }
}
extension String {
    func capitalizingFirstLetter() -> String {
        let first = String(prefix(1)).capitalized
        let other = String(dropFirst())
        return first + other
    }
    
    mutating func capitalizeFirstLetter() {
        self = self.capitalizingFirstLetter()
    }
}
extension UIColor {
    convenience init(hex: String) {
        let scanner = Scanner(string: hex)
        scanner.scanLocation = 0
        
        var rgbValue: UInt64 = 0
        
        scanner.scanHexInt64(&rgbValue)
        
        let r = (rgbValue & 0xff0000) >> 16
        let g = (rgbValue & 0xff00) >> 8
        let b = rgbValue & 0xff
        
        self.init(
            red: CGFloat(r) / 0xff,
            green: CGFloat(g) / 0xff,
            blue: CGFloat(b) / 0xff, alpha: 1
        )
    }
}

extension UITapGestureRecognizer {
    
    func didTapAttributedTextInLabel(label: UILabel, inRange targetRange: NSRange) -> Bool {
        // Create instances of NSLayoutManager, NSTextContainer and NSTextStorage
        let layoutManager = NSLayoutManager()
        let textContainer = NSTextContainer(size: CGSize.zero)
        let textStorage = NSTextStorage(attributedString: label.attributedText!)
        
        // Configure layoutManager and textStorage
        layoutManager.addTextContainer(textContainer)
        textStorage.addLayoutManager(layoutManager)
        
        // Configure textContainer
        textContainer.lineFragmentPadding = 0.0
        textContainer.lineBreakMode = label.lineBreakMode
        textContainer.maximumNumberOfLines = label.numberOfLines
        let labelSize = label.bounds.size
        textContainer.size = labelSize
        
        // Find the tapped character location and compare it to the specified range
        let locationOfTouchInLabel = self.location(in: label)
        let textBoundingBox = layoutManager.usedRect(for: textContainer)
        let textContainerOffset = CGPoint(x: (labelSize.width - textBoundingBox.size.width) * 0.5 - textBoundingBox.origin.x,y: (labelSize.height - textBoundingBox.size.height) * 0.5 - textBoundingBox.origin.y);
        let locationOfTouchInTextContainer = CGPoint(x: locationOfTouchInLabel.x - textContainerOffset.x,
                                                     y: locationOfTouchInLabel.y - textContainerOffset.y);
        let indexOfCharacter = layoutManager.characterIndex(for: locationOfTouchInTextContainer, in: textContainer, fractionOfDistanceBetweenInsertionPoints: nil)
        
        return NSLocationInRange(indexOfCharacter, targetRange)
    }
    
    func isConnectedToNetwork() -> Bool {
        
        var zeroAddress = sockaddr_in(sin_len: 0, sin_family: 0, sin_port: 0, sin_addr: in_addr(s_addr: 0), sin_zero: (0, 0, 0, 0, 0, 0, 0, 0))
        zeroAddress.sin_len = UInt8(MemoryLayout.size(ofValue: zeroAddress))
        zeroAddress.sin_family = sa_family_t(AF_INET)
        
        let defaultRouteReachability = withUnsafePointer(to: &zeroAddress) {
            $0.withMemoryRebound(to: sockaddr.self, capacity: 1) {zeroSockAddress in
                SCNetworkReachabilityCreateWithAddress(nil, zeroSockAddress)
            }
        }
        
        var flags: SCNetworkReachabilityFlags = SCNetworkReachabilityFlags(rawValue: 0)
        if SCNetworkReachabilityGetFlags(defaultRouteReachability!, &flags) == false {
            return false
        }
        
        /* Only Working for WIFI
         let isReachable = flags == .reachable
         let needsConnection = flags == .connectionRequired
         
         return isReachable && !needsConnection
         */
        
        // Working for Cellular and WIFI
        let isReachable = (flags.rawValue & UInt32(kSCNetworkFlagsReachable)) != 0
        let needsConnection = (flags.rawValue & UInt32(kSCNetworkFlagsConnectionRequired)) != 0
        let ret = (isReachable && !needsConnection)
        
        return ret
        
    }
   
}

extension UILabel {
    private struct AssociatedKeys {
        static var padding = UIEdgeInsets()
    }
    
    public var padding: UIEdgeInsets? {
        get {
            return objc_getAssociatedObject(self, &AssociatedKeys.padding) as? UIEdgeInsets
        }
        set {
            if let newValue = newValue {
                objc_setAssociatedObject(self, &AssociatedKeys.padding, newValue as UIEdgeInsets?, objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN_NONATOMIC)
            }
        }
    }
}
extension NSDate {
    func isGreaterThanDate(dateToCompare: NSDate) -> Bool {
        //Declare Variables
        var isGreater = false
        
        //Compare Values
        if self.compare(dateToCompare as Date) == ComparisonResult.orderedDescending {
            isGreater = true
        }
        
        //Return Result
        return isGreater
    }
    
    func isLessThanDate(dateToCompare: NSDate) -> Bool {
        //Declare Variables
        var isLess = false
        
        //Compare Values
        if self.compare(dateToCompare as Date) == ComparisonResult.orderedAscending {
            isLess = true
        }
        
        //Return Result
        return isLess
    }
    
    func equalToDate(dateToCompare: NSDate) -> Bool {
        //Declare Variables
        var isEqualTo = false
        
        //Compare Values
        if self.compare(dateToCompare as Date) == ComparisonResult.orderedSame {
            isEqualTo = true
        }
        
        //Return Result
        return isEqualTo
    }
    
    func addDays(daysToAdd: Int) -> NSDate {
        let secondsInDays: TimeInterval = Double(daysToAdd) * 60 * 60 * 24
        let dateWithDaysAdded: NSDate = self.addingTimeInterval(secondsInDays)
        
        //Return Result
        return dateWithDaysAdded
    }
    
    func addHours(hoursToAdd: Int) -> NSDate {
        let secondsInHours: TimeInterval = Double(hoursToAdd) * 60 * 60
        let dateWithHoursAdded: NSDate = self.addingTimeInterval(secondsInHours)
        
        //Return Result
        return dateWithHoursAdded
    }
}
extension UIView {
    func roundCorners(corners:UIRectCorner, radius: CGFloat) {
        let path = UIBezierPath(roundedRect: self.bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))
        let mask = CAShapeLayer()
        mask.path = path.cgPath
        self.layer.mask = mask
    }
}
extension Double {
    /// Rounds the double to decimal places value
    /*  func roundToPlaces(places:Int) -> Double {
     let divisor = pow(10.0, Double(places))
     return round(self * divisor) / divisor
     }*/
    mutating func roundToPlaces(_ places : Int) -> Double {
        let divisor = pow(10.0, Double(places))
        return divisor//(self.rounded() * divisor) / divisor
    }
}


// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertFromAVAudioSessionCategory(_ input: AVAudioSession.Category) -> String {
    return input.rawValue
}

// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertToUIBackgroundTaskIdentifier(_ input: Int) -> UIBackgroundTaskIdentifier {
    return UIBackgroundTaskIdentifier(rawValue: input)
}
extension UIDevice {

    var modelName: String {

        var systemInfo = utsname()
        uname(&systemInfo)

        let machineMirror = Mirror(reflecting: systemInfo.machine)

        let identifier = machineMirror.children.reduce("") { identifier, element in
            guard let value = element.value as? Int8, value != 0 else { return identifier }
            return identifier + String(UnicodeScalar(UInt8(value)))
        }

        switch identifier {

        case "iPod5,1":                                 return "iPod Touch 5"
        case "iPod7,1":                                 return "iPod Touch 6"
        case "iPhone3,1", "iPhone3,2", "iPhone3,3":     return "iPhone 4"
        case "iPhone4,1":                               return "iPhone 4s"
        case "iPhone5,1", "iPhone5,2":                  return "iPhone 5"
        case "iPhone5,3", "iPhone5,4":                  return "iPhone 5c"
        case "iPhone6,1", "iPhone6,2":                  return "iPhone 5s"
        case "iPhone7,2":                               return "iPhone 6"
        case "iPhone7,1":                               return "iPhone 6 Plus"
        case "iPhone8,1":                               return "iPhone 6s"
        case "iPhone8,2":                               return "iPhone 6s Plus"
        case "iPhone9,1", "iPhone9,3":                  return "iPhone 7"
        case "iPhone9,2", "iPhone9,4":                  return "iPhone 7 Plus"
        case "iPhone8,4":                               return "iPhone SE"
        case "iPad2,1", "iPad2,2", "iPad2,3", "iPad2,4":return "iPad 2"
        case "iPad3,1", "iPad3,2", "iPad3,3":           return "iPad 3"
        case "iPad3,4", "iPad3,5", "iPad3,6":           return "iPad 4"
        case "iPad4,1", "iPad4,2", "iPad4,3":           return "iPad Air"
        case "iPad5,3", "iPad5,4":                      return "iPad Air 2"
        case "iPad6,11", "iPad6,12":                    return "iPad 5"
        case "iPad2,5", "iPad2,6", "iPad2,7":           return "iPad Mini"
        case "iPad4,4", "iPad4,5", "iPad4,6":           return "iPad Mini 2"
        case "iPad4,7", "iPad4,8", "iPad4,9":           return "iPad Mini 3"
        case "iPad5,1", "iPad5,2":                      return "iPad Mini 4"
        case "iPad6,3", "iPad6,4":                      return "iPad Pro 9.7 Inch"
        case "iPad6,7", "iPad6,8":                      return "iPad Pro 12.9 Inch"
        case "iPad7,1", "iPad7,2":                      return "iPad Pro 12.9 Inch 2. Generation"
        case "iPad7,3", "iPad7,4":                      return "iPad Pro 10.5 Inch"
        case "AppleTV5,3":                              return "Apple TV"
        case "i386", "x86_64":                          return "Simulator"
        default:                                        return identifier
        }
    }
}
extension UINavigationController {

override open var shouldAutorotate: Bool {
    get {
        if let visibleVC = visibleViewController {
            return visibleVC.shouldAutorotate
        }
        return super.shouldAutorotate
    }
}

override open var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation{
    get {
        if let visibleVC = visibleViewController {
            return visibleVC.preferredInterfaceOrientationForPresentation
        }
        return super.preferredInterfaceOrientationForPresentation
    }
}

override open var supportedInterfaceOrientations: UIInterfaceOrientationMask{
    get {
        if let visibleVC = visibleViewController {
            return visibleVC.supportedInterfaceOrientations
        }
        return super.supportedInterfaceOrientations
    }
}}


